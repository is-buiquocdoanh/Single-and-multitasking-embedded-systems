
Time_trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08009dd0  08009dd0  0000add0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a328  0800a328  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a328  0800a328  0000b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a330  0800a330  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a330  0800a330  0000b330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a334  0800a334  0000b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a338  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001d4  0800a50c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800a50c  0000c4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe72  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244b  00000000  00000000  0001c06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb7  00000000  00000000  0001f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb6  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ec4  00000000  00000000  0003914d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb0c  00000000  00000000  0004c011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dab1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a24  00000000  00000000  000dab60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e0584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009db8 	.word	0x08009db8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009db8 	.word	0x08009db8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_d2lz>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	460d      	mov	r5, r1
 8000f42:	f7ff fdef 	bl	8000b24 <__aeabi_dcmplt>
 8000f46:	b928      	cbnz	r0, 8000f54 <__aeabi_d2lz+0x1c>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f50:	f000 b80a 	b.w	8000f68 <__aeabi_d2ulz>
 8000f54:	4620      	mov	r0, r4
 8000f56:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f5a:	f000 f805 	bl	8000f68 <__aeabi_d2ulz>
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop

08000f68 <__aeabi_d2ulz>:
 8000f68:	b5d0      	push	{r4, r6, r7, lr}
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <__aeabi_d2ulz+0x34>)
 8000f6e:	4606      	mov	r6, r0
 8000f70:	460f      	mov	r7, r1
 8000f72:	f7ff fb65 	bl	8000640 <__aeabi_dmul>
 8000f76:	f7ff fe3b 	bl	8000bf0 <__aeabi_d2uiz>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	f7ff fae6 	bl	800054c <__aeabi_ui2d>
 8000f80:	2200      	movs	r2, #0
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <__aeabi_d2ulz+0x38>)
 8000f84:	f7ff fb5c 	bl	8000640 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f7ff f99e 	bl	80002d0 <__aeabi_dsub>
 8000f94:	f7ff fe2c 	bl	8000bf0 <__aeabi_d2uiz>
 8000f98:	4621      	mov	r1, r4
 8000f9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f9c:	3df00000 	.word	0x3df00000
 8000fa0:	41f00000 	.word	0x41f00000

08000fa4 <AHT10_Init>:
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart1;


void AHT10_Init(AHT10_HandleTypeDef *dev) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
    uint8_t cmd[3] = {0xE1, 0x08, 0x00};
 8000fac:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <AHT10_Init+0x44>)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	8019      	strh	r1, [r3, #0]
 8000fb8:	3302      	adds	r3, #2
 8000fba:	0c12      	lsrs	r2, r2, #16
 8000fbc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f107 020c 	add.w	r2, r7, #12
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f001 fddc 	bl	8002b90 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);
 8000fd8:	2014      	movs	r0, #20
 8000fda:	f001 f915 	bl	8002208 <HAL_Delay>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08009dd0 	.word	0x08009dd0

08000fec <AHT10_ReadRaw>:

uint8_t AHT10_ReadRaw(AHT10_HandleTypeDef *dev, uint32_t *humidity_raw, uint32_t *temperature_raw) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t cmd[3] = {0xAC, 0x33, 0x00}; // chuẩn AHT10 command
 8000ff8:	4a25      	ldr	r2, [pc, #148]	@ (8001090 <AHT10_ReadRaw+0xa4>)
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	4611      	mov	r1, r2
 8001002:	8019      	strh	r1, [r3, #0]
 8001004:	3302      	adds	r3, #2
 8001006:	0c12      	lsrs	r2, r2, #16
 8001008:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	4619      	mov	r1, r3
 8001014:	f107 0214 	add.w	r2, r7, #20
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2303      	movs	r3, #3
 8001020:	f001 fdb6 	bl	8002b90 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001024:	2050      	movs	r0, #80	@ 0x50
 8001026:	f001 f8ef 	bl	8002208 <HAL_Delay>

	if (HAL_I2C_Master_Receive(dev->hi2c, dev->address, data, 6, HAL_MAX_DELAY) != HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	f107 0218 	add.w	r2, r7, #24
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2306      	movs	r3, #6
 8001040:	f001 fea4 	bl	8002d8c <HAL_I2C_Master_Receive>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <AHT10_ReadRaw+0x62>
	    return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e01c      	b.n	8001088 <AHT10_ReadRaw+0x9c>
//	char buf[64];
//	sprintf(buf, "Raw bytes: %02X %02X %02X %02X %02X %02X\r\n",
//	        data[0], data[1], data[2], data[3], data[4], data[5]);
//	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);

	if (data[0] & 0x80)
 800104e:	7e3b      	ldrb	r3, [r7, #24]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	da01      	bge.n	800105a <AHT10_ReadRaw+0x6e>
	    return 0;  // still busy, không đọc được
 8001056:	2300      	movs	r3, #0
 8001058:	e016      	b.n	8001088 <AHT10_ReadRaw+0x9c>

	*humidity_raw = ((uint32_t)(data[1]) << 12) | ((uint32_t)(data[2]) << 4) | (data[3] >> 4);
 800105a:	7e7b      	ldrb	r3, [r7, #25]
 800105c:	031a      	lsls	r2, r3, #12
 800105e:	7ebb      	ldrb	r3, [r7, #26]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4313      	orrs	r3, r2
 8001064:	7efa      	ldrb	r2, [r7, #27]
 8001066:	0912      	lsrs	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	431a      	orrs	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	601a      	str	r2, [r3, #0]
	*temperature_raw = (((uint32_t)(data[3] & 0x0F)) << 16) | ((uint32_t)(data[4]) << 8) | (data[5]);
 8001070:	7efb      	ldrb	r3, [r7, #27]
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001078:	7f3b      	ldrb	r3, [r7, #28]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	4313      	orrs	r3, r2
 800107e:	7f7a      	ldrb	r2, [r7, #29]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
	return 1;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08009dd4 	.word	0x08009dd4

08001094 <AHT10_ReadTemperature>:


float AHT10_ReadTemperature(uint32_t temp_raw) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    return ((float)temp_raw / 1048576.0) * 200.0 - 50.0;
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fecd 	bl	8000e3c <__aeabi_ui2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa73 	bl	8000590 <__aeabi_f2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <AHT10_ReadTemperature+0x5c>)
 80010b0:	f7ff fbf0 	bl	8000894 <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <AHT10_ReadTemperature+0x60>)
 80010c2:	f7ff fabd 	bl	8000640 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <AHT10_ReadTemperature+0x64>)
 80010d4:	f7ff f8fc 	bl	80002d0 <__aeabi_dsub>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fda6 	bl	8000c30 <__aeabi_d2f>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	41300000 	.word	0x41300000
 80010f4:	40690000 	.word	0x40690000
 80010f8:	40490000 	.word	0x40490000

080010fc <AHT10_ReadHumidity>:

float AHT10_ReadHumidity(uint32_t hum_raw) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    return ((float)hum_raw / 1048576.0) * 100.0;
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff fe99 	bl	8000e3c <__aeabi_ui2f>
 800110a:	4603      	mov	r3, r0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa3f 	bl	8000590 <__aeabi_f2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <AHT10_ReadHumidity+0x48>)
 8001118:	f7ff fbbc 	bl	8000894 <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <AHT10_ReadHumidity+0x4c>)
 800112a:	f7ff fa89 	bl	8000640 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd7b 	bl	8000c30 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	41300000 	.word	0x41300000
 8001148:	40590000 	.word	0x40590000

0800114c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f043 030c 	orr.w	r3, r3, #12
 800116c:	b2db      	uxtb	r3, r3
 800116e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	b2db      	uxtb	r3, r3
 8001178:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	f043 030c 	orr.w	r3, r3, #12
 8001180:	b2db      	uxtb	r3, r3
 8001182:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	b2db      	uxtb	r3, r3
 800118c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	4619      	mov	r1, r3
 8001198:	f107 0208 	add.w	r2, r7, #8
 800119c:	2364      	movs	r3, #100	@ 0x64
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2304      	movs	r3, #4
 80011a2:	f001 fcf5 	bl	8002b90 <HAL_I2C_Master_Transmit>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	f023 030f 	bic.w	r3, r3, #15
 80011c0:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f043 030d 	orr.w	r3, r3, #13
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f043 0309 	orr.w	r3, r3, #9
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	f043 030d 	orr.w	r3, r3, #13
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	f043 0309 	orr.w	r3, r3, #9
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	791b      	ldrb	r3, [r3, #4]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	2364      	movs	r3, #100	@ 0x64
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2304      	movs	r3, #4
 8001204:	f001 fcc4 	bl	8002b90 <HAL_I2C_Master_Transmit>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff96 	bl	800114c <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e006      	b.n	8001234 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001226:	2120      	movs	r1, #32
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffc0 	bl	80011ae <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b4f      	cmp	r3, #79	@ 0x4f
 8001238:	ddf5      	ble.n	8001226 <lcd_clear+0x16>
    }
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d824      	bhi.n	80012a0 <lcd_gotoxy+0x5c>
 8001256:	a201      	add	r2, pc, #4	@ (adr r2, 800125c <lcd_gotoxy+0x18>)
 8001258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125c:	0800126d 	.word	0x0800126d
 8001260:	08001277 	.word	0x08001277
 8001264:	08001281 	.word	0x08001281
 8001268:	0800128b 	.word	0x0800128b
    {
        case 0: address = 0x80 + col; break;  // First row
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3b80      	subs	r3, #128	@ 0x80
 8001272:	75fb      	strb	r3, [r7, #23]
 8001274:	e00e      	b.n	8001294 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3b40      	subs	r3, #64	@ 0x40
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e009      	b.n	8001294 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	3b6c      	subs	r3, #108	@ 0x6c
 8001286:	75fb      	strb	r3, [r7, #23]
 8001288:	e004      	b.n	8001294 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3b2c      	subs	r3, #44	@ 0x2c
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	4619      	mov	r1, r3
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f7ff ff57 	bl	800114c <lcd_send_cmd>
 800129e:	e000      	b.n	80012a2 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 80012a0:	bf00      	nop
}
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80012b0:	2032      	movs	r0, #50	@ 0x32
 80012b2:	f000 ffa9 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80012b6:	2130      	movs	r1, #48	@ 0x30
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff47 	bl	800114c <lcd_send_cmd>
    HAL_Delay(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f000 ffa2 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80012c4:	2130      	movs	r1, #48	@ 0x30
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff40 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f000 ff9b 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80012d2:	2130      	movs	r1, #48	@ 0x30
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff39 	bl	800114c <lcd_send_cmd>
    HAL_Delay(10);
 80012da:	200a      	movs	r0, #10
 80012dc:	f000 ff94 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80012e0:	2120      	movs	r1, #32
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff32 	bl	800114c <lcd_send_cmd>
    HAL_Delay(10);
 80012e8:	200a      	movs	r0, #10
 80012ea:	f000 ff8d 	bl	8002208 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80012ee:	2128      	movs	r1, #40	@ 0x28
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff2b 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 ff86 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80012fc:	2108      	movs	r1, #8
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff24 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f000 ff7f 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800130a:	2101      	movs	r1, #1
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff1d 	bl	800114c <lcd_send_cmd>
    HAL_Delay(2);
 8001312:	2002      	movs	r0, #2
 8001314:	f000 ff78 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001318:	2106      	movs	r1, #6
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff16 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f000 ff71 	bl	8002208 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001326:	210c      	movs	r1, #12
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff0f 	bl	800114c <lcd_send_cmd>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8001340:	e007      	b.n	8001352 <lcd_puts+0x1c>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	603a      	str	r2, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff2e 	bl	80011ae <lcd_send_data>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f3      	bne.n	8001342 <lcd_puts+0xc>
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <parse_command>:
static void MX_I2C2_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
//Xử lí lệnh UART
void parse_command(char *cmd) {
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b097      	sub	sp, #92	@ 0x5c
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
	if (strncmp(cmd, "!motor ", 7) == 0) {
 800136c:	2207      	movs	r2, #7
 800136e:	495c      	ldr	r1, [pc, #368]	@ (80014e0 <parse_command+0x17c>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f005 f9c0 	bl	80066f6 <strncmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d115      	bne.n	80013a8 <parse_command+0x44>
		if (strstr(cmd, "on"))
 800137c:	4959      	ldr	r1, [pc, #356]	@ (80014e4 <parse_command+0x180>)
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f005 f9cb 	bl	800671a <strstr>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <parse_command+0x2e>
			motor_power = ON;
 800138a:	4b57      	ldr	r3, [pc, #348]	@ (80014e8 <parse_command+0x184>)
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e069      	b.n	8001466 <parse_command+0x102>
		else if (strstr(cmd, "off"))
 8001392:	4956      	ldr	r1, [pc, #344]	@ (80014ec <parse_command+0x188>)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f005 f9c0 	bl	800671a <strstr>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d062      	beq.n	8001466 <parse_command+0x102>
			motor_power = OFF;
 80013a0:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <parse_command+0x184>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e05e      	b.n	8001466 <parse_command+0x102>
	} else if (strncmp(cmd, "!rotate ", 8) == 0) {
 80013a8:	2208      	movs	r2, #8
 80013aa:	4951      	ldr	r1, [pc, #324]	@ (80014f0 <parse_command+0x18c>)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f005 f9a2 	bl	80066f6 <strncmp>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d115      	bne.n	80013e4 <parse_command+0x80>
		if (strstr(cmd, "ccw"))
 80013b8:	494e      	ldr	r1, [pc, #312]	@ (80014f4 <parse_command+0x190>)
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f005 f9ad 	bl	800671a <strstr>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <parse_command+0x6a>
			motor_dir = CCW;
 80013c6:	4b4c      	ldr	r3, [pc, #304]	@ (80014f8 <parse_command+0x194>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	e04b      	b.n	8001466 <parse_command+0x102>
		else if (strstr(cmd, "cw"))
 80013ce:	494b      	ldr	r1, [pc, #300]	@ (80014fc <parse_command+0x198>)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f005 f9a2 	bl	800671a <strstr>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d044      	beq.n	8001466 <parse_command+0x102>
			motor_dir = CW;
 80013dc:	4b46      	ldr	r3, [pc, #280]	@ (80014f8 <parse_command+0x194>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e040      	b.n	8001466 <parse_command+0x102>
	} else if (strncmp(cmd, "!speed ", 7) == 0) {
 80013e4:	2207      	movs	r2, #7
 80013e6:	4946      	ldr	r1, [pc, #280]	@ (8001500 <parse_command+0x19c>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f005 f984 	bl	80066f6 <strncmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d110      	bne.n	8001416 <parse_command+0xb2>
		int val = atoi(&cmd[7]);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3307      	adds	r3, #7
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 f95f 	bl	80056bc <atoi>
 80013fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		if (val >= 0 && val <= 100)
 8001400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001402:	2b00      	cmp	r3, #0
 8001404:	db2f      	blt.n	8001466 <parse_command+0x102>
 8001406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001408:	2b64      	cmp	r3, #100	@ 0x64
 800140a:	dc2c      	bgt.n	8001466 <parse_command+0x102>
			motor_speed = val;
 800140c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b3c      	ldr	r3, [pc, #240]	@ (8001504 <parse_command+0x1a0>)
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e027      	b.n	8001466 <parse_command+0x102>
	} else if (strncmp(command_buffer, "!display ", 9) == 0) {
 8001416:	2209      	movs	r2, #9
 8001418:	493b      	ldr	r1, [pc, #236]	@ (8001508 <parse_command+0x1a4>)
 800141a:	483c      	ldr	r0, [pc, #240]	@ (800150c <parse_command+0x1a8>)
 800141c:	f005 f96b 	bl	80066f6 <strncmp>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d11f      	bne.n	8001466 <parse_command+0x102>
		if (strstr(command_buffer, "all"))
 8001426:	493a      	ldr	r1, [pc, #232]	@ (8001510 <parse_command+0x1ac>)
 8001428:	4838      	ldr	r0, [pc, #224]	@ (800150c <parse_command+0x1a8>)
 800142a:	f005 f976 	bl	800671a <strstr>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <parse_command+0xd8>
			display_mode = DISPLAY_ALL;
 8001434:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <parse_command+0x1b0>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e014      	b.n	8001466 <parse_command+0x102>
		else if (strstr(command_buffer, "temp"))
 800143c:	4936      	ldr	r1, [pc, #216]	@ (8001518 <parse_command+0x1b4>)
 800143e:	4833      	ldr	r0, [pc, #204]	@ (800150c <parse_command+0x1a8>)
 8001440:	f005 f96b 	bl	800671a <strstr>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <parse_command+0xee>
			display_mode = DISPLAY_TEMP;
 800144a:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <parse_command+0x1b0>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e009      	b.n	8001466 <parse_command+0x102>
		else if (strstr(command_buffer, "humid"))
 8001452:	4932      	ldr	r1, [pc, #200]	@ (800151c <parse_command+0x1b8>)
 8001454:	482d      	ldr	r0, [pc, #180]	@ (800150c <parse_command+0x1a8>)
 8001456:	f005 f960 	bl	800671a <strstr>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <parse_command+0x102>
			display_mode = DISPLAY_HUMID;
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <parse_command+0x1b0>)
 8001462:	2202      	movs	r2, #2
 8001464:	701a      	strb	r2, [r3, #0]
	}

	// Phản hồi trạng thái
	char msg[64];
	sprintf(msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
			(motor_power == ON) ? "ON" : "OFF",
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <parse_command+0x184>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
	sprintf(msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <parse_command+0x110>
 8001470:	4a2b      	ldr	r2, [pc, #172]	@ (8001520 <parse_command+0x1bc>)
 8001472:	e000      	b.n	8001476 <parse_command+0x112>
 8001474:	4a2b      	ldr	r2, [pc, #172]	@ (8001524 <parse_command+0x1c0>)
			(motor_dir == CW) ? "CW" : "CCW", motor_speed,
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <parse_command+0x194>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
	sprintf(msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <parse_command+0x120>
 8001480:	4929      	ldr	r1, [pc, #164]	@ (8001528 <parse_command+0x1c4>)
 8001482:	e000      	b.n	8001486 <parse_command+0x122>
 8001484:	4929      	ldr	r1, [pc, #164]	@ (800152c <parse_command+0x1c8>)
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <parse_command+0x1a0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	461c      	mov	r4, r3
			(display_mode == DISPLAY_ALL) ? "ALL" :
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <parse_command+0x1b0>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
	sprintf(msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <parse_command+0x146>
			(display_mode == DISPLAY_TEMP) ? "TEMP" : "HUMID");
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <parse_command+0x1b0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <parse_command+0x142>
 80014a2:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <parse_command+0x1cc>)
 80014a4:	e002      	b.n	80014ac <parse_command+0x148>
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <parse_command+0x1d0>)
 80014a8:	e000      	b.n	80014ac <parse_command+0x148>
	sprintf(msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 80014aa:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <parse_command+0x1d4>)
 80014ac:	f107 000c 	add.w	r0, r7, #12
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	9400      	str	r4, [sp, #0]
 80014b4:	460b      	mov	r3, r1
 80014b6:	4921      	ldr	r1, [pc, #132]	@ (800153c <parse_command+0x1d8>)
 80014b8:	f005 f8b0 	bl	800661c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 100);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe45 	bl	8000150 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f107 010c 	add.w	r1, r7, #12
 80014ce:	2364      	movs	r3, #100	@ 0x64
 80014d0:	481b      	ldr	r0, [pc, #108]	@ (8001540 <parse_command+0x1dc>)
 80014d2:	f003 fad9 	bl	8004a88 <HAL_UART_Transmit>
}
 80014d6:	bf00      	nop
 80014d8:	3754      	adds	r7, #84	@ 0x54
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	bf00      	nop
 80014e0:	08009dd8 	.word	0x08009dd8
 80014e4:	08009de0 	.word	0x08009de0
 80014e8:	2000037a 	.word	0x2000037a
 80014ec:	08009de4 	.word	0x08009de4
 80014f0:	08009de8 	.word	0x08009de8
 80014f4:	08009df4 	.word	0x08009df4
 80014f8:	2000037b 	.word	0x2000037b
 80014fc:	08009df8 	.word	0x08009df8
 8001500:	08009dfc 	.word	0x08009dfc
 8001504:	2000037c 	.word	0x2000037c
 8001508:	08009e04 	.word	0x08009e04
 800150c:	20000338 	.word	0x20000338
 8001510:	08009e10 	.word	0x08009e10
 8001514:	2000037d 	.word	0x2000037d
 8001518:	08009e14 	.word	0x08009e14
 800151c:	08009e1c 	.word	0x08009e1c
 8001520:	08009e24 	.word	0x08009e24
 8001524:	08009e28 	.word	0x08009e28
 8001528:	08009e2c 	.word	0x08009e2c
 800152c:	08009e30 	.word	0x08009e30
 8001530:	08009e34 	.word	0x08009e34
 8001534:	08009e3c 	.word	0x08009e3c
 8001538:	08009e44 	.word	0x08009e44
 800153c:	08009e48 	.word	0x08009e48
 8001540:	200002e0 	.word	0x200002e0

08001544 <task_sensor>:


//Task 1: đọc cảm biến AHT10
void task_sensor(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
    uint32_t hum_raw = 0, temp_raw = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
    if (AHT10_ReadRaw(&aht10, &hum_raw, &temp_raw)) {
 8001552:	463a      	mov	r2, r7
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <task_sensor+0x44>)
 800155a:	f7ff fd47 	bl	8000fec <AHT10_ReadRaw>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00d      	beq.n	8001580 <task_sensor+0x3c>
        temperature = AHT10_ReadTemperature(temp_raw);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd94 	bl	8001094 <AHT10_ReadTemperature>
 800156c:	4603      	mov	r3, r0
 800156e:	4a07      	ldr	r2, [pc, #28]	@ (800158c <task_sensor+0x48>)
 8001570:	6013      	str	r3, [r2, #0]
        humidity = AHT10_ReadHumidity(hum_raw);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fdc1 	bl	80010fc <AHT10_ReadHumidity>
 800157a:	4603      	mov	r3, r0
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <task_sensor+0x4c>)
 800157e:	6013      	str	r3, [r2, #0]
    }
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000328 	.word	0x20000328
 800158c:	20000380 	.word	0x20000380
 8001590:	20000384 	.word	0x20000384

08001594 <task_lcd>:

//Task 2: hiển thị LCD
void task_lcd(void) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08d      	sub	sp, #52	@ 0x34
 8001598:	af00      	add	r7, sp, #0
	char lcd_buf[32];
	int ti = (int)temperature;
 800159a:	4b4e      	ldr	r3, [pc, #312]	@ (80016d4 <task_lcd+0x140>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fca4 	bl	8000eec <__aeabi_f2iz>
 80015a4:	4603      	mov	r3, r0
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int tf = (int)((temperature - ti) * 10);
 80015a8:	4b4a      	ldr	r3, [pc, #296]	@ (80016d4 <task_lcd+0x140>)
 80015aa:	681c      	ldr	r4, [r3, #0]
 80015ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015ae:	f7ff fc49 	bl	8000e44 <__aeabi_i2f>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fb8e 	bl	8000cd8 <__aeabi_fsub>
 80015bc:	4603      	mov	r3, r0
 80015be:	4946      	ldr	r1, [pc, #280]	@ (80016d8 <task_lcd+0x144>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fdcd 	bl	8000160 <__aeabi_fmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc8f 	bl	8000eec <__aeabi_f2iz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	int hi = (int)humidity;
 80015d2:	4b42      	ldr	r3, [pc, #264]	@ (80016dc <task_lcd+0x148>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fc88 	bl	8000eec <__aeabi_f2iz>
 80015dc:	4603      	mov	r3, r0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
	int hf = (int)((humidity - hi) * 10);
 80015e0:	4b3e      	ldr	r3, [pc, #248]	@ (80016dc <task_lcd+0x148>)
 80015e2:	681c      	ldr	r4, [r3, #0]
 80015e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015e6:	f7ff fc2d 	bl	8000e44 <__aeabi_i2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff fb72 	bl	8000cd8 <__aeabi_fsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4938      	ldr	r1, [pc, #224]	@ (80016d8 <task_lcd+0x144>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fdb1 	bl	8000160 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fc73 	bl	8000eec <__aeabi_f2iz>
 8001606:	4603      	mov	r3, r0
 8001608:	623b      	str	r3, [r7, #32]

	switch (display_mode) {
 800160a:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <task_lcd+0x14c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d041      	beq.n	8001698 <task_lcd+0x104>
 8001614:	2b02      	cmp	r3, #2
 8001616:	dc59      	bgt.n	80016cc <task_lcd+0x138>
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <task_lcd+0x8e>
 800161c:	2b01      	cmp	r3, #1
 800161e:	d021      	beq.n	8001664 <task_lcd+0xd0>

		lcd_gotoxy(&lcd, 0, 1);
		lcd_puts(&lcd, "                "); // Clear dòng 2
		break;
	}
}
 8001620:	e054      	b.n	80016cc <task_lcd+0x138>
		sprintf(lcd_buf, "Temp: %d.%d C", ti, tf);
 8001622:	4638      	mov	r0, r7
 8001624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001628:	492e      	ldr	r1, [pc, #184]	@ (80016e4 <task_lcd+0x150>)
 800162a:	f004 fff7 	bl	800661c <siprintf>
		lcd_gotoxy(&lcd, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	482d      	ldr	r0, [pc, #180]	@ (80016e8 <task_lcd+0x154>)
 8001634:	f7ff fe06 	bl	8001244 <lcd_gotoxy>
		lcd_puts(&lcd, lcd_buf);
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	482a      	ldr	r0, [pc, #168]	@ (80016e8 <task_lcd+0x154>)
 800163e:	f7ff fe7a 	bl	8001336 <lcd_puts>
		sprintf(lcd_buf, "Hum:  %d.%d %%", hi, hf);
 8001642:	4638      	mov	r0, r7
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001648:	4928      	ldr	r1, [pc, #160]	@ (80016ec <task_lcd+0x158>)
 800164a:	f004 ffe7 	bl	800661c <siprintf>
		lcd_gotoxy(&lcd, 0, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	2100      	movs	r1, #0
 8001652:	4825      	ldr	r0, [pc, #148]	@ (80016e8 <task_lcd+0x154>)
 8001654:	f7ff fdf6 	bl	8001244 <lcd_gotoxy>
		lcd_puts(&lcd, lcd_buf);
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4822      	ldr	r0, [pc, #136]	@ (80016e8 <task_lcd+0x154>)
 800165e:	f7ff fe6a 	bl	8001336 <lcd_puts>
		break;
 8001662:	e033      	b.n	80016cc <task_lcd+0x138>
		sprintf(lcd_buf, "Temp: %d.%d C", ti, tf);
 8001664:	4638      	mov	r0, r7
 8001666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800166a:	491e      	ldr	r1, [pc, #120]	@ (80016e4 <task_lcd+0x150>)
 800166c:	f004 ffd6 	bl	800661c <siprintf>
		lcd_gotoxy(&lcd, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	481c      	ldr	r0, [pc, #112]	@ (80016e8 <task_lcd+0x154>)
 8001676:	f7ff fde5 	bl	8001244 <lcd_gotoxy>
		lcd_puts(&lcd, lcd_buf);
 800167a:	463b      	mov	r3, r7
 800167c:	4619      	mov	r1, r3
 800167e:	481a      	ldr	r0, [pc, #104]	@ (80016e8 <task_lcd+0x154>)
 8001680:	f7ff fe59 	bl	8001336 <lcd_puts>
		lcd_gotoxy(&lcd, 0, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	2100      	movs	r1, #0
 8001688:	4817      	ldr	r0, [pc, #92]	@ (80016e8 <task_lcd+0x154>)
 800168a:	f7ff fddb 	bl	8001244 <lcd_gotoxy>
		lcd_puts(&lcd, "                "); // Clear dòng 2
 800168e:	4918      	ldr	r1, [pc, #96]	@ (80016f0 <task_lcd+0x15c>)
 8001690:	4815      	ldr	r0, [pc, #84]	@ (80016e8 <task_lcd+0x154>)
 8001692:	f7ff fe50 	bl	8001336 <lcd_puts>
		break;
 8001696:	e019      	b.n	80016cc <task_lcd+0x138>
		sprintf(lcd_buf, "Hum:  %d.%d %%", hi, hf);
 8001698:	4638      	mov	r0, r7
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169e:	4913      	ldr	r1, [pc, #76]	@ (80016ec <task_lcd+0x158>)
 80016a0:	f004 ffbc 	bl	800661c <siprintf>
		lcd_gotoxy(&lcd, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	480f      	ldr	r0, [pc, #60]	@ (80016e8 <task_lcd+0x154>)
 80016aa:	f7ff fdcb 	bl	8001244 <lcd_gotoxy>
		lcd_puts(&lcd, lcd_buf);
 80016ae:	463b      	mov	r3, r7
 80016b0:	4619      	mov	r1, r3
 80016b2:	480d      	ldr	r0, [pc, #52]	@ (80016e8 <task_lcd+0x154>)
 80016b4:	f7ff fe3f 	bl	8001336 <lcd_puts>
		lcd_gotoxy(&lcd, 0, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2100      	movs	r1, #0
 80016bc:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <task_lcd+0x154>)
 80016be:	f7ff fdc1 	bl	8001244 <lcd_gotoxy>
		lcd_puts(&lcd, "                "); // Clear dòng 2
 80016c2:	490b      	ldr	r1, [pc, #44]	@ (80016f0 <task_lcd+0x15c>)
 80016c4:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <task_lcd+0x154>)
 80016c6:	f7ff fe36 	bl	8001336 <lcd_puts>
		break;
 80016ca:	bf00      	nop
}
 80016cc:	bf00      	nop
 80016ce:	3734      	adds	r7, #52	@ 0x34
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	20000380 	.word	0x20000380
 80016d8:	41200000 	.word	0x41200000
 80016dc:	20000384 	.word	0x20000384
 80016e0:	2000037d 	.word	0x2000037d
 80016e4:	08009e78 	.word	0x08009e78
 80016e8:	20000330 	.word	0x20000330
 80016ec:	08009e88 	.word	0x08009e88
 80016f0:	08009e98 	.word	0x08009e98

080016f4 <task_uart_tx>:


//Task 3: gửi UART
void task_uart_tx(void) {
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b092      	sub	sp, #72	@ 0x48
 80016f8:	af02      	add	r7, sp, #8
    char buf[64];
    sprintf(buf, "temperature: %.1f C, humidity: %.1f %%\r\n", temperature, humidity);
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <task_uart_tx+0x50>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff46 	bl	8000590 <__aeabi_f2d>
 8001704:	4604      	mov	r4, r0
 8001706:	460d      	mov	r5, r1
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <task_uart_tx+0x54>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff3f 	bl	8000590 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4638      	mov	r0, r7
 8001718:	e9cd 2300 	strd	r2, r3, [sp]
 800171c:	4622      	mov	r2, r4
 800171e:	462b      	mov	r3, r5
 8001720:	490a      	ldr	r1, [pc, #40]	@ (800174c <task_uart_tx+0x58>)
 8001722:	f004 ff7b 	bl	800661c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 8001726:	463b      	mov	r3, r7
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fd11 	bl	8000150 <strlen>
 800172e:	4603      	mov	r3, r0
 8001730:	b29a      	uxth	r2, r3
 8001732:	4639      	mov	r1, r7
 8001734:	2364      	movs	r3, #100	@ 0x64
 8001736:	4806      	ldr	r0, [pc, #24]	@ (8001750 <task_uart_tx+0x5c>)
 8001738:	f003 f9a6 	bl	8004a88 <HAL_UART_Transmit>
}
 800173c:	bf00      	nop
 800173e:	3740      	adds	r7, #64	@ 0x40
 8001740:	46bd      	mov	sp, r7
 8001742:	bdb0      	pop	{r4, r5, r7, pc}
 8001744:	20000380 	.word	0x20000380
 8001748:	20000384 	.word	0x20000384
 800174c:	08009eac 	.word	0x08009eac
 8001750:	200002e0 	.word	0x200002e0

08001754 <task_motor>:

//Task 4: điều khiển động cơ
void task_motor(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    if (motor_power == ON) {
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <task_motor+0x64>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d124      	bne.n	80017ac <task_motor+0x58>
        // Điều chỉnh chiều quay
        if (motor_dir == CW) {
 8001762:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <task_motor+0x68>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <task_motor+0x2e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 800176c:	2201      	movs	r2, #1
 800176e:	2101      	movs	r1, #1
 8001770:	4813      	ldr	r0, [pc, #76]	@ (80017c0 <task_motor+0x6c>)
 8001772:	f001 f8b1 	bl	80028d8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // IN2
 8001776:	2200      	movs	r2, #0
 8001778:	2102      	movs	r1, #2
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <task_motor+0x6c>)
 800177c:	f001 f8ac 	bl	80028d8 <HAL_GPIO_WritePin>
 8001780:	e009      	b.n	8001796 <task_motor+0x42>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2101      	movs	r1, #1
 8001786:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <task_motor+0x6c>)
 8001788:	f001 f8a6 	bl	80028d8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	2102      	movs	r1, #2
 8001790:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <task_motor+0x6c>)
 8001792:	f001 f8a1 	bl	80028d8 <HAL_GPIO_WritePin>
        }

        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001796:	2108      	movs	r1, #8
 8001798:	480a      	ldr	r0, [pc, #40]	@ (80017c4 <task_motor+0x70>)
 800179a:	f002 fd49 	bl	8004230 <HAL_TIM_PWM_Start>
        // Tốc độ: từ 0 đến 100
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, motor_speed);
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <task_motor+0x74>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <task_motor+0x70>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        // Dừng động cơ
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
    }
}
 80017aa:	e003      	b.n	80017b4 <task_motor+0x60>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <task_motor+0x70>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000037a 	.word	0x2000037a
 80017bc:	2000037b 	.word	0x2000037b
 80017c0:	40010800 	.word	0x40010800
 80017c4:	20000298 	.word	0x20000298
 80017c8:	2000037c 	.word	0x2000037c

080017cc <loop_scheduler>:


//hàm xử lí vòng lập lịch (chạy đúng 1 frame)
void loop_scheduler(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    static uint16_t tick = 0;

    if (tick % 4 == 0)    task_motor();      // 100ms
 80017d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001884 <loop_scheduler+0xb8>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <loop_scheduler+0x16>
 80017de:	f7ff ffb9 	bl	8001754 <task_motor>
    if (tick % 20 == 0)   task_lcd();        // 500ms
 80017e2:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <loop_scheduler+0xb8>)
 80017e4:	881a      	ldrh	r2, [r3, #0]
 80017e6:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <loop_scheduler+0xbc>)
 80017e8:	fba3 1302 	umull	r1, r3, r3, r2
 80017ec:	0919      	lsrs	r1, r3, #4
 80017ee:	460b      	mov	r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <loop_scheduler+0x36>
 80017fe:	f7ff fec9 	bl	8001594 <task_lcd>
    if (tick % 80 == 0)   task_sensor();     // 2000ms
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <loop_scheduler+0xb8>)
 8001804:	881a      	ldrh	r2, [r3, #0]
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <loop_scheduler+0xbc>)
 8001808:	fba3 1302 	umull	r1, r3, r3, r2
 800180c:	0999      	lsrs	r1, r3, #6
 800180e:	460b      	mov	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	b29b      	uxth	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <loop_scheduler+0x56>
 800181e:	f7ff fe91 	bl	8001544 <task_sensor>
    if (tick % 400 == 0)  task_uart_tx();    // 10000ms
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <loop_scheduler+0xb8>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4a19      	ldr	r2, [pc, #100]	@ (800188c <loop_scheduler+0xc0>)
 8001828:	fba2 1203 	umull	r1, r2, r2, r3
 800182c:	09d2      	lsrs	r2, r2, #7
 800182e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001832:	fb01 f202 	mul.w	r2, r1, r2
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <loop_scheduler+0x76>
 800183e:	f7ff ff59 	bl	80016f4 <task_uart_tx>

    if (command_ready) {
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <loop_scheduler+0xc4>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00a      	beq.n	8001862 <loop_scheduler+0x96>
            parse_command(command_buffer);     //Gọi xử lý lệnh
 800184c:	4811      	ldr	r0, [pc, #68]	@ (8001894 <loop_scheduler+0xc8>)
 800184e:	f7ff fd89 	bl	8001364 <parse_command>
            command_ready = 0;
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <loop_scheduler+0xc4>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
            memset(command_buffer, 0, sizeof(command_buffer));
 8001858:	2240      	movs	r2, #64	@ 0x40
 800185a:	2100      	movs	r1, #0
 800185c:	480d      	ldr	r0, [pc, #52]	@ (8001894 <loop_scheduler+0xc8>)
 800185e:	f004 ff42 	bl	80066e6 <memset>
        }

    tick++;
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <loop_scheduler+0xb8>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <loop_scheduler+0xb8>)
 800186c:	801a      	strh	r2, [r3, #0]
    if (tick >= 400) tick = 0;
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <loop_scheduler+0xb8>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001876:	d302      	bcc.n	800187e <loop_scheduler+0xb2>
 8001878:	4b02      	ldr	r3, [pc, #8]	@ (8001884 <loop_scheduler+0xb8>)
 800187a:	2200      	movs	r2, #0
 800187c:	801a      	strh	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000388 	.word	0x20000388
 8001888:	cccccccd 	.word	0xcccccccd
 800188c:	51eb851f 	.word	0x51eb851f
 8001890:	20000378 	.word	0x20000378
 8001894:	20000338 	.word	0x20000338

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f000 fc52 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f83c 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f000 f95e 	bl	8001b64 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018a8:	f000 f87e 	bl	80019a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80018ac:	f000 f8aa 	bl	8001a04 <MX_I2C2_Init>
  MX_TIM2_Init();
 80018b0:	f000 f8d6 	bl	8001a60 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80018b4:	f000 f92c 	bl	8001b10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//Khởi tạo uart nhận 1 byte
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80018b8:	2201      	movs	r2, #1
 80018ba:	4911      	ldr	r1, [pc, #68]	@ (8001900 <main+0x68>)
 80018bc:	4811      	ldr	r0, [pc, #68]	@ (8001904 <main+0x6c>)
 80018be:	f003 f96e 	bl	8004b9e <HAL_UART_Receive_IT>

	//Khởi tạo timmer2 CH3
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80018c2:	2108      	movs	r1, #8
 80018c4:	4810      	ldr	r0, [pc, #64]	@ (8001908 <main+0x70>)
 80018c6:	f002 fcb3 	bl	8004230 <HAL_TIM_PWM_Start>

	//Init LCD
	lcd.hi2c = &hi2c1;
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <main+0x74>)
 80018cc:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <main+0x78>)
 80018ce:	601a      	str	r2, [r3, #0]
	lcd.address = 0x4E;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <main+0x74>)
 80018d2:	224e      	movs	r2, #78	@ 0x4e
 80018d4:	711a      	strb	r2, [r3, #4]
	lcd_init(&lcd);
 80018d6:	480d      	ldr	r0, [pc, #52]	@ (800190c <main+0x74>)
 80018d8:	f7ff fce6 	bl	80012a8 <lcd_init>
	lcd_clear(&lcd);
 80018dc:	480b      	ldr	r0, [pc, #44]	@ (800190c <main+0x74>)
 80018de:	f7ff fc97 	bl	8001210 <lcd_clear>

	//Init AHT10
	aht10.hi2c = &hi2c2;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <main+0x7c>)
 80018e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001918 <main+0x80>)
 80018e6:	601a      	str	r2, [r3, #0]
	aht10.address = 0x38 << 1; //AHT10 default address << 1 = 0x38 << 1 = 0x70
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <main+0x7c>)
 80018ea:	2270      	movs	r2, #112	@ 0x70
 80018ec:	711a      	strb	r2, [r3, #4]
	AHT10_Init(&aht10);
 80018ee:	4809      	ldr	r0, [pc, #36]	@ (8001914 <main+0x7c>)
 80018f0:	f7ff fb58 	bl	8000fa4 <AHT10_Init>
	HAL_Delay(50);
 80018f4:	2032      	movs	r0, #50	@ 0x32
 80018f6:	f000 fc87 	bl	8002208 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop_scheduler();     // chạy 1 frame
 80018fa:	f7ff ff67 	bl	80017cc <loop_scheduler>
 80018fe:	e7fc      	b.n	80018fa <main+0x62>
 8001900:	20000379 	.word	0x20000379
 8001904:	200002e0 	.word	0x200002e0
 8001908:	20000298 	.word	0x20000298
 800190c:	20000330 	.word	0x20000330
 8001910:	200001f0 	.word	0x200001f0
 8001914:	20000328 	.word	0x20000328
 8001918:	20000244 	.word	0x20000244

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b090      	sub	sp, #64	@ 0x40
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	2228      	movs	r2, #40	@ 0x28
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f004 fedb 	bl	80066e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800193e:	2301      	movs	r3, #1
 8001940:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001942:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194c:	2301      	movs	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001950:	2302      	movs	r3, #2
 8001952:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001958:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800195a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4618      	mov	r0, r3
 8001966:	f002 f803 	bl	8003970 <HAL_RCC_OscConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001970:	f000 f980 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001974:	230f      	movs	r3, #15
 8001976:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001978:	2302      	movs	r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fa70 	bl	8003e74 <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800199a:	f000 f96b 	bl	8001c74 <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3740      	adds	r7, #64	@ 0x40
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <MX_I2C1_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <MX_I2C1_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019e6:	f000 ff8f 	bl	8002908 <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f000 f940 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001f0 	.word	0x200001f0
 80019fc:	40005400 	.word	0x40005400
 8001a00:	000186a0 	.word	0x000186a0

08001a04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a0a:	4a13      	ldr	r2, [pc, #76]	@ (8001a58 <MX_I2C2_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a10:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <MX_I2C2_Init+0x58>)
 8001a12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <MX_I2C2_Init+0x50>)
 8001a42:	f000 ff61 	bl	8002908 <HAL_I2C_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a4c:	f000 f912 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000244 	.word	0x20000244
 8001a58:	40005800 	.word	0x40005800
 8001a5c:	00061a80 	.word	0x00061a80

08001a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a82:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001a84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001a8c:	2247      	movs	r2, #71	@ 0x47
 8001a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001a98:	2264      	movs	r2, #100	@ 0x64
 8001a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa8:	4818      	ldr	r0, [pc, #96]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001aaa:	f002 fb71 	bl	8004190 <HAL_TIM_PWM_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ab4:	f000 f8de 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4811      	ldr	r0, [pc, #68]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001ac8:	f002 ff30 	bl	800492c <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001ad2:	f000 f8cf 	bl	8001c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad6:	2360      	movs	r3, #96	@ 0x60
 8001ad8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2208      	movs	r2, #8
 8001aea:	4619      	mov	r1, r3
 8001aec:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001aee:	f002 fc41 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001af8:	f000 f8bc 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001afc:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <MX_TIM2_Init+0xac>)
 8001afe:	f000 f979 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	@ 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000298 	.word	0x20000298

08001b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <MX_USART1_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b46:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <MX_USART1_UART_Init+0x4c>)
 8001b48:	f002 ff4e 	bl	80049e8 <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b52:	f000 f88f 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002e0 	.word	0x200002e0
 8001b60:	40013800 	.word	0x40013800

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b78:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001b7e:	f043 0320 	orr.w	r3, r3, #32
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a16      	ldr	r2, [pc, #88]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001bae:	f043 0308 	orr.w	r3, r3, #8
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_GPIO_Init+0x8c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	480b      	ldr	r0, [pc, #44]	@ (8001bf4 <MX_GPIO_Init+0x90>)
 8001bc6:	f000 fe87 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_GPIO_Init+0x90>)
 8001be2:	f000 fcf5 	bl	80025d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010800 	.word	0x40010800

08001bf8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    static uint8_t idx = 0;

    if (huart->Instance == USART1) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <HAL_UART_RxCpltCallback+0x64>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d124      	bne.n	8001c54 <HAL_UART_RxCpltCallback+0x5c>
//    	HAL_UART_Transmit(&huart1, (uint8_t*)"Byte OK\r\n", 9, 100);  // Gửi phản hồi xem có vào callback không
        if (rx_byte != '\n' && idx < sizeof(command_buffer) - 1) {
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_UART_RxCpltCallback+0x68>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b0a      	cmp	r3, #10
 8001c10:	d00f      	beq.n	8001c32 <HAL_UART_RxCpltCallback+0x3a>
 8001c12:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <HAL_UART_RxCpltCallback+0x6c>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c18:	d80b      	bhi.n	8001c32 <HAL_UART_RxCpltCallback+0x3a>
            command_buffer[idx++] = rx_byte;
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_UART_RxCpltCallback+0x6c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	b2d1      	uxtb	r1, r2
 8001c22:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <HAL_UART_RxCpltCallback+0x6c>)
 8001c24:	7011      	strb	r1, [r2, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_UART_RxCpltCallback+0x68>)
 8001c2a:	7819      	ldrb	r1, [r3, #0]
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_UART_RxCpltCallback+0x70>)
 8001c2e:	5499      	strb	r1, [r3, r2]
 8001c30:	e00b      	b.n	8001c4a <HAL_UART_RxCpltCallback+0x52>
        } else {
            command_buffer[idx] = '\0';
 8001c32:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_UART_RxCpltCallback+0x6c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_UART_RxCpltCallback+0x70>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]
            idx = 0;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_UART_RxCpltCallback+0x6c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
            command_ready = 1;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_UART_RxCpltCallback+0x74>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
        }

        // Quan trọng: tiếp tục nhận byte mới
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4904      	ldr	r1, [pc, #16]	@ (8001c60 <HAL_UART_RxCpltCallback+0x68>)
 8001c4e:	4808      	ldr	r0, [pc, #32]	@ (8001c70 <HAL_UART_RxCpltCallback+0x78>)
 8001c50:	f002 ffa5 	bl	8004b9e <HAL_UART_Receive_IT>
    }
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	20000379 	.word	0x20000379
 8001c64:	2000038a 	.word	0x2000038a
 8001c68:	20000338 	.word	0x20000338
 8001c6c:	20000378 	.word	0x20000378
 8001c70:	200002e0 	.word	0x200002e0

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <Error_Handler+0x8>

08001c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_MspInit+0x60>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_MspInit+0x60>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8001dac <HAL_I2C_MspInit+0xc8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d124      	bne.n	8001d4e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a29      	ldr	r2, [pc, #164]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d1c:	23c0      	movs	r3, #192	@ 0xc0
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 0318 	add.w	r3, r7, #24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4821      	ldr	r0, [pc, #132]	@ (8001db4 <HAL_I2C_MspInit+0xd0>)
 8001d30:	f000 fc4e 	bl	80025d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d34:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d3e:	61d3      	str	r3, [r2, #28]
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d4c:	e029      	b.n	8001da2 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_I2C_MspInit+0xd4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d124      	bne.n	8001da2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d76:	2312      	movs	r3, #18
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <HAL_I2C_MspInit+0xd0>)
 8001d86:	f000 fc23 	bl	80025d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a08      	ldr	r2, [pc, #32]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_I2C_MspInit+0xcc>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40005400 	.word	0x40005400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	40005800 	.word	0x40005800

08001dbc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <HAL_TIM_PWM_MspInit+0x34>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <HAL_TIM_PWM_MspInit+0x34>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_TIM_PWM_MspInit+0x34>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e12:	d117      	bne.n	8001e44 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_TIM_MspPostInit+0x58>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a0c      	ldr	r2, [pc, #48]	@ (8001e4c <HAL_TIM_MspPostInit+0x58>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_TIM_MspPostInit+0x58>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <HAL_TIM_MspPostInit+0x5c>)
 8001e40:	f000 fbc6 	bl	80025d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010800 	.word	0x40010800

08001e54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ef0 <HAL_UART_MspInit+0x9c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d139      	bne.n	8001ee8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_UART_MspInit+0xa0>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <HAL_UART_MspInit+0xa0>)
 8001e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_UART_MspInit+0xa0>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_UART_MspInit+0xa0>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <HAL_UART_MspInit+0xa0>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <HAL_UART_MspInit+0xa0>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480f      	ldr	r0, [pc, #60]	@ (8001ef8 <HAL_UART_MspInit+0xa4>)
 8001eba:	f000 fb89 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4809      	ldr	r0, [pc, #36]	@ (8001ef8 <HAL_UART_MspInit+0xa4>)
 8001ed4:	f000 fb7c 	bl	80025d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	2025      	movs	r0, #37	@ 0x25
 8001ede:	f000 fa8e 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ee2:	2025      	movs	r0, #37	@ 0x25
 8001ee4:	f000 faa7 	bl	8002436 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010800 	.word	0x40010800

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <NMI_Handler+0x4>

08001f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <MemManage_Handler+0x4>

08001f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4c:	f000 f940 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <USART1_IRQHandler+0x10>)
 8001f5a:	f002 fe45 	bl	8004be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200002e0 	.word	0x200002e0

08001f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return 1;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <_kill>:

int _kill(int pid, int sig)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f80:	f004 fc2c 	bl	80067dc <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2216      	movs	r2, #22
 8001f88:	601a      	str	r2, [r3, #0]
  return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_exit>:

void _exit (int status)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffe7 	bl	8001f76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <_exit+0x12>

08001fac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e00a      	b.n	8001fd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fbe:	f3af 8000 	nop.w
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	60ba      	str	r2, [r7, #8]
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbf0      	blt.n	8001fbe <_read+0x12>
  }

  return len;
 8001fdc:	687b      	ldr	r3, [r7, #4]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e009      	b.n	800200c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	dbf1      	blt.n	8001ff8 <_write+0x12>
  }
  return len;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_close>:

int _close(int file)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002044:	605a      	str	r2, [r3, #4]
  return 0;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <_isatty>:

int _isatty(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
	...

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f004 fb94 	bl	80067dc <__errno>
 80020b4:	4603      	mov	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <_sbrk+0x64>)
 80020d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20005000 	.word	0x20005000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	2000038c 	.word	0x2000038c
 80020e8:	200004e0 	.word	0x200004e0

080020ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f8:	f7ff fff8 	bl	80020ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480b      	ldr	r0, [pc, #44]	@ (800212c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020fe:	490c      	ldr	r1, [pc, #48]	@ (8002130 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002100:	4a0c      	ldr	r2, [pc, #48]	@ (8002134 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002114:	4c09      	ldr	r4, [pc, #36]	@ (800213c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f004 fb61 	bl	80067e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002126:	f7ff fbb7 	bl	8001898 <main>
  bx lr
 800212a:	4770      	bx	lr
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002134:	0800a338 	.word	0x0800a338
  ldr r2, =_sbss
 8002138:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800213c:	200004e0 	.word	0x200004e0

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_Init+0x28>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <HAL_Init+0x28>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 f947 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	200f      	movs	r0, #15
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fd8e 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f95f 	bl	8002452 <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 f927 	bl	80023fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_IncTick+0x1c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_IncTick+0x20>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a03      	ldr	r2, [pc, #12]	@ (80021f0 <HAL_IncTick+0x20>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000390 	.word	0x20000390

080021f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b02      	ldr	r3, [pc, #8]	@ (8002204 <HAL_GetTick+0x10>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000390 	.word	0x20000390

08002208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff fff0 	bl	80021f4 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_Delay+0x44>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffe0 	bl	80021f4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4906      	ldr	r1, [pc, #24]	@ (80022e8 <__NVIC_EnableIRQ+0x34>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	@ (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	@ (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	@ 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	@ 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff90 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff2d 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff42 	bl	8002298 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff90 	bl	8002340 <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5f 	bl	80022ec <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff35 	bl	80022b4 <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2204      	movs	r2, #4
 8002486:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e020      	b.n	80024d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 020e 	bic.w	r2, r2, #14
 80024a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f202 	lsl.w	r2, r1, r2
 80024c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d005      	beq.n	8002504 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e051      	b.n	80025a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 020e 	bic.w	r2, r2, #14
 8002512:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <HAL_DMA_Abort_IT+0xd4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d029      	beq.n	8002582 <HAL_DMA_Abort_IT+0xa2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <HAL_DMA_Abort_IT+0xd8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d022      	beq.n	800257e <HAL_DMA_Abort_IT+0x9e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <HAL_DMA_Abort_IT+0xdc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01a      	beq.n	8002578 <HAL_DMA_Abort_IT+0x98>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	@ (80025c0 <HAL_DMA_Abort_IT+0xe0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d012      	beq.n	8002572 <HAL_DMA_Abort_IT+0x92>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_DMA_Abort_IT+0xe4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00a      	beq.n	800256c <HAL_DMA_Abort_IT+0x8c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <HAL_DMA_Abort_IT+0xe8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d102      	bne.n	8002566 <HAL_DMA_Abort_IT+0x86>
 8002560:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002564:	e00e      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002566:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800256a:	e00b      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 800256c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002570:	e008      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002576:	e005      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257c:	e002      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 800257e:	2310      	movs	r3, #16
 8002580:	e000      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002582:	2301      	movs	r3, #1
 8002584:	4a11      	ldr	r2, [pc, #68]	@ (80025cc <HAL_DMA_Abort_IT+0xec>)
 8002586:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
    } 
  }
  return status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40020008 	.word	0x40020008
 80025b8:	4002001c 	.word	0x4002001c
 80025bc:	40020030 	.word	0x40020030
 80025c0:	40020044 	.word	0x40020044
 80025c4:	40020058 	.word	0x40020058
 80025c8:	4002006c 	.word	0x4002006c
 80025cc:	40020000 	.word	0x40020000

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b08b      	sub	sp, #44	@ 0x2c
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	e169      	b.n	80028b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e4:	2201      	movs	r2, #1
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8158 	bne.w	80028b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a9a      	ldr	r2, [pc, #616]	@ (8002870 <HAL_GPIO_Init+0x2a0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d05e      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800260c:	4a98      	ldr	r2, [pc, #608]	@ (8002870 <HAL_GPIO_Init+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d875      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002612:	4a98      	ldr	r2, [pc, #608]	@ (8002874 <HAL_GPIO_Init+0x2a4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d058      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002618:	4a96      	ldr	r2, [pc, #600]	@ (8002874 <HAL_GPIO_Init+0x2a4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d86f      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800261e:	4a96      	ldr	r2, [pc, #600]	@ (8002878 <HAL_GPIO_Init+0x2a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d052      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002624:	4a94      	ldr	r2, [pc, #592]	@ (8002878 <HAL_GPIO_Init+0x2a8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d869      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800262a:	4a94      	ldr	r2, [pc, #592]	@ (800287c <HAL_GPIO_Init+0x2ac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04c      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002630:	4a92      	ldr	r2, [pc, #584]	@ (800287c <HAL_GPIO_Init+0x2ac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d863      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002636:	4a92      	ldr	r2, [pc, #584]	@ (8002880 <HAL_GPIO_Init+0x2b0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d046      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800263c:	4a90      	ldr	r2, [pc, #576]	@ (8002880 <HAL_GPIO_Init+0x2b0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d85d      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002642:	2b12      	cmp	r3, #18
 8002644:	d82a      	bhi.n	800269c <HAL_GPIO_Init+0xcc>
 8002646:	2b12      	cmp	r3, #18
 8002648:	d859      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <HAL_GPIO_Init+0x80>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	080026cb 	.word	0x080026cb
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026b7 	.word	0x080026b7
 800265c:	080026f9 	.word	0x080026f9
 8002660:	080026ff 	.word	0x080026ff
 8002664:	080026ff 	.word	0x080026ff
 8002668:	080026ff 	.word	0x080026ff
 800266c:	080026ff 	.word	0x080026ff
 8002670:	080026ff 	.word	0x080026ff
 8002674:	080026ff 	.word	0x080026ff
 8002678:	080026ff 	.word	0x080026ff
 800267c:	080026ff 	.word	0x080026ff
 8002680:	080026ff 	.word	0x080026ff
 8002684:	080026ff 	.word	0x080026ff
 8002688:	080026ff 	.word	0x080026ff
 800268c:	080026ff 	.word	0x080026ff
 8002690:	080026ff 	.word	0x080026ff
 8002694:	080026ad 	.word	0x080026ad
 8002698:	080026c1 	.word	0x080026c1
 800269c:	4a79      	ldr	r2, [pc, #484]	@ (8002884 <HAL_GPIO_Init+0x2b4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026a2:	e02c      	b.n	80026fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e029      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e024      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	3308      	adds	r3, #8
 80026bc:	623b      	str	r3, [r7, #32]
          break;
 80026be:	e01f      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	330c      	adds	r3, #12
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e01a      	b.n	8002700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026d2:	2304      	movs	r3, #4
 80026d4:	623b      	str	r3, [r7, #32]
          break;
 80026d6:	e013      	b.n	8002700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	611a      	str	r2, [r3, #16]
          break;
 80026ea:	e009      	b.n	8002700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ec:	2308      	movs	r3, #8
 80026ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	615a      	str	r2, [r3, #20]
          break;
 80026f6:	e003      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
          break;
 80026fc:	e000      	b.n	8002700 <HAL_GPIO_Init+0x130>
          break;
 80026fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2bff      	cmp	r3, #255	@ 0xff
 8002704:	d801      	bhi.n	800270a <HAL_GPIO_Init+0x13a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e001      	b.n	800270e <HAL_GPIO_Init+0x13e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2bff      	cmp	r3, #255	@ 0xff
 8002714:	d802      	bhi.n	800271c <HAL_GPIO_Init+0x14c>
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0x152>
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	3b08      	subs	r3, #8
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	210f      	movs	r1, #15
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80b1 	beq.w	80028b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002750:	4b4d      	ldr	r3, [pc, #308]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a4c      	ldr	r2, [pc, #304]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002768:	4a48      	ldr	r2, [pc, #288]	@ (800288c <HAL_GPIO_Init+0x2bc>)
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a40      	ldr	r2, [pc, #256]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1ec>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3f      	ldr	r2, [pc, #252]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1e8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3e      	ldr	r2, [pc, #248]	@ (8002898 <HAL_GPIO_Init+0x2c8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1e4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3d      	ldr	r2, [pc, #244]	@ (800289c <HAL_GPIO_Init+0x2cc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1e0>
 80027ac:	2303      	movs	r3, #3
 80027ae:	e006      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b0:	2304      	movs	r3, #4
 80027b2:	e004      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e002      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027bc:	2300      	movs	r3, #0
 80027be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ce:	492f      	ldr	r1, [pc, #188]	@ (800288c <HAL_GPIO_Init+0x2bc>)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027e8:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	492c      	ldr	r1, [pc, #176]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027f6:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4928      	ldr	r1, [pc, #160]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002800:	4013      	ands	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002810:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	491e      	ldr	r1, [pc, #120]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4918      	ldr	r1, [pc, #96]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	4914      	ldr	r1, [pc, #80]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d021      	beq.n	80028a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e021      	b.n	80028b2 <HAL_GPIO_Init+0x2e2>
 800286e:	bf00      	nop
 8002870:	10320000 	.word	0x10320000
 8002874:	10310000 	.word	0x10310000
 8002878:	10220000 	.word	0x10220000
 800287c:	10210000 	.word	0x10210000
 8002880:	10120000 	.word	0x10120000
 8002884:	10110000 	.word	0x10110000
 8002888:	40021000 	.word	0x40021000
 800288c:	40010000 	.word	0x40010000
 8002890:	40010800 	.word	0x40010800
 8002894:	40010c00 	.word	0x40010c00
 8002898:	40011000 	.word	0x40011000
 800289c:	40011400 	.word	0x40011400
 80028a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_GPIO_Init+0x304>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4909      	ldr	r1, [pc, #36]	@ (80028d4 <HAL_GPIO_Init+0x304>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f ae8e 	bne.w	80025e4 <HAL_GPIO_Init+0x14>
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	372c      	adds	r7, #44	@ 0x2c
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028f4:	e003      	b.n	80028fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e12b      	b.n	8002b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff f9d8 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	@ 0x24
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800295a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800296a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800296c:	f001 fbca 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8002970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a81      	ldr	r2, [pc, #516]	@ (8002b7c <HAL_I2C_Init+0x274>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d807      	bhi.n	800298c <HAL_I2C_Init+0x84>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a80      	ldr	r2, [pc, #512]	@ (8002b80 <HAL_I2C_Init+0x278>)
 8002980:	4293      	cmp	r3, r2
 8002982:	bf94      	ite	ls
 8002984:	2301      	movls	r3, #1
 8002986:	2300      	movhi	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e006      	b.n	800299a <HAL_I2C_Init+0x92>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a7d      	ldr	r2, [pc, #500]	@ (8002b84 <HAL_I2C_Init+0x27c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	bf94      	ite	ls
 8002994:	2301      	movls	r3, #1
 8002996:	2300      	movhi	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0e7      	b.n	8002b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a78      	ldr	r2, [pc, #480]	@ (8002b88 <HAL_I2C_Init+0x280>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b7c <HAL_I2C_Init+0x274>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d802      	bhi.n	80029dc <HAL_I2C_Init+0xd4>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	e009      	b.n	80029f0 <HAL_I2C_Init+0xe8>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	4a69      	ldr	r2, [pc, #420]	@ (8002b8c <HAL_I2C_Init+0x284>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	3301      	adds	r3, #1
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	495c      	ldr	r1, [pc, #368]	@ (8002b7c <HAL_I2C_Init+0x274>)
 8002a0c:	428b      	cmp	r3, r1
 8002a0e:	d819      	bhi.n	8002a44 <HAL_I2C_Init+0x13c>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e59      	subs	r1, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a24:	400b      	ands	r3, r1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_I2C_Init+0x138>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e59      	subs	r1, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3e:	e051      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e04f      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d111      	bne.n	8002a70 <HAL_I2C_Init+0x168>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e58      	subs	r0, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e012      	b.n	8002a96 <HAL_I2C_Init+0x18e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	0099      	lsls	r1, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Init+0x196>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e022      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_I2C_Init+0x1bc>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e58      	subs	r0, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	440b      	add	r3, r1
 8002ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ac2:	e00f      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6809      	ldr	r1, [r1, #0]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6911      	ldr	r1, [r2, #16]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68d2      	ldr	r2, [r2, #12]
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	000186a0 	.word	0x000186a0
 8002b80:	001e847f 	.word	0x001e847f
 8002b84:	003d08ff 	.word	0x003d08ff
 8002b88:	431bde83 	.word	0x431bde83
 8002b8c:	10624dd3 	.word	0x10624dd3

08002b90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	817b      	strh	r3, [r7, #10]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff fb26 	bl	80021f4 <HAL_GetTick>
 8002ba8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	f040 80e0 	bne.w	8002d78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2319      	movs	r3, #25
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4970      	ldr	r1, [pc, #448]	@ (8002d84 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fc9e 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0d3      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x50>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0cc      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d007      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2221      	movs	r2, #33	@ 0x21
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2210      	movs	r2, #16
 8002c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	893a      	ldrh	r2, [r7, #8]
 8002c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a50      	ldr	r2, [pc, #320]	@ (8002d88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fb08 	bl	8003264 <I2C_MasterRequestWrite>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08d      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c74:	e066      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fd5c 	bl	8003738 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d107      	bne.n	8002c9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06b      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d11b      	bne.n	8002d18 <HAL_I2C_Master_Transmit+0x188>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d017      	beq.n	8002d18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	6a39      	ldr	r1, [r7, #32]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fd53 	bl	80037c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d107      	bne.n	8002d40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e01a      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d194      	bne.n	8002c76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	00100002 	.word	0x00100002
 8002d88:	ffff0000 	.word	0xffff0000

08002d8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	@ 0x30
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	817b      	strh	r3, [r7, #10]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff fa26 	bl	80021f4 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	f040 824b 	bne.w	800324e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2319      	movs	r3, #25
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	497f      	ldr	r1, [pc, #508]	@ (8002fc0 <HAL_I2C_Master_Receive+0x234>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fb9e 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e23e      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2C_Master_Receive+0x54>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e237      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d007      	beq.n	8002e06 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2222      	movs	r2, #34	@ 0x22
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2210      	movs	r2, #16
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc4 <HAL_I2C_Master_Receive+0x238>)
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e48:	8979      	ldrh	r1, [r7, #10]
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fa8a 	bl	8003368 <I2C_MasterRequestRead>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1f8      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d113      	bne.n	8002e8e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e1cc      	b.n	8003228 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d11e      	bne.n	8002ed4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea6:	b672      	cpsid	i
}
 8002ea8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ece:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ed0:	b662      	cpsie	i
}
 8002ed2:	e035      	b.n	8002f40 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d11e      	bne.n	8002f1a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eec:	b672      	cpsid	i
}
 8002eee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f16:	b662      	cpsie	i
}
 8002f18:	e012      	b.n	8002f40 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f40:	e172      	b.n	8003228 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	f200 811f 	bhi.w	800318a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d123      	bne.n	8002f9c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fc7d 	bl	8003858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e173      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f9a:	e145      	b.n	8003228 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d152      	bne.n	800304a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	2200      	movs	r2, #0
 8002fac:	4906      	ldr	r1, [pc, #24]	@ (8002fc8 <HAL_I2C_Master_Receive+0x23c>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 faa8 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e148      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
 8002fbe:	bf00      	nop
 8002fc0:	00100002 	.word	0x00100002
 8002fc4:	ffff0000 	.word	0xffff0000
 8002fc8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fcc:	b672      	cpsid	i
}
 8002fce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003012:	b662      	cpsie	i
}
 8003014:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003048:	e0ee      	b.n	8003228 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	4981      	ldr	r1, [pc, #516]	@ (8003258 <HAL_I2C_Master_Receive+0x4cc>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fa55 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0f5      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003072:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003074:	b672      	cpsid	i
}
 8003076:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030aa:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <HAL_I2C_Master_Receive+0x4d0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	08db      	lsrs	r3, r3, #3
 80030b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003260 <HAL_I2C_Master_Receive+0x4d4>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0a1a      	lsrs	r2, r3, #8
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00da      	lsls	r2, r3, #3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d118      	bne.n	8003102 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030f2:	b662      	cpsie	i
}
 80030f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a6      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d1d9      	bne.n	80030c4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003152:	b662      	cpsie	i
}
 8003154:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003188:	e04e      	b.n	8003228 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fb62 	bl	8003858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e058      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d124      	bne.n	8003228 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d107      	bne.n	80031f6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f ae88 	bne.w	8002f42 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3728      	adds	r7, #40	@ 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	00010004 	.word	0x00010004
 800325c:	20000000 	.word	0x20000000
 8003260:	14f8b589 	.word	0x14f8b589

08003264 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	460b      	mov	r3, r1
 8003272:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d006      	beq.n	800328e <I2C_MasterRequestWrite+0x2a>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d003      	beq.n	800328e <I2C_MasterRequestWrite+0x2a>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800328c:	d108      	bne.n	80032a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e00b      	b.n	80032b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	2b12      	cmp	r3, #18
 80032a6:	d107      	bne.n	80032b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f91d 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032de:	d103      	bne.n	80032e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e035      	b.n	8003358 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032f4:	d108      	bne.n	8003308 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f6:	897b      	ldrh	r3, [r7, #10]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003304:	611a      	str	r2, [r3, #16]
 8003306:	e01b      	b.n	8003340 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003308:	897b      	ldrh	r3, [r7, #10]
 800330a:	11db      	asrs	r3, r3, #7
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f003 0306 	and.w	r3, r3, #6
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f063 030f 	orn	r3, r3, #15
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	490e      	ldr	r1, [pc, #56]	@ (8003360 <I2C_MasterRequestWrite+0xfc>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f966 	bl	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e010      	b.n	8003358 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4907      	ldr	r1, [pc, #28]	@ (8003364 <I2C_MasterRequestWrite+0x100>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f956 	bl	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	00010008 	.word	0x00010008
 8003364:	00010002 	.word	0x00010002

08003368 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	460b      	mov	r3, r1
 8003376:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800338c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d006      	beq.n	80033a2 <I2C_MasterRequestRead+0x3a>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d003      	beq.n	80033a2 <I2C_MasterRequestRead+0x3a>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033a0:	d108      	bne.n	80033b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e00b      	b.n	80033cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	2b11      	cmp	r3, #17
 80033ba:	d107      	bne.n	80033cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f893 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f2:	d103      	bne.n	80033fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e079      	b.n	80034f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003408:	d108      	bne.n	800341c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	611a      	str	r2, [r3, #16]
 800341a:	e05f      	b.n	80034dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800341c:	897b      	ldrh	r3, [r7, #10]
 800341e:	11db      	asrs	r3, r3, #7
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0306 	and.w	r3, r3, #6
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f063 030f 	orn	r3, r3, #15
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4930      	ldr	r1, [pc, #192]	@ (80034fc <I2C_MasterRequestRead+0x194>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8dc 	bl	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e054      	b.n	80034f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800344a:	897b      	ldrh	r3, [r7, #10]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4929      	ldr	r1, [pc, #164]	@ (8003500 <I2C_MasterRequestRead+0x198>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8cc 	bl	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e044      	b.n	80034f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800348e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f831 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b6:	d103      	bne.n	80034c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e017      	b.n	80034f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	11db      	asrs	r3, r3, #7
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0306 	and.w	r3, r3, #6
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f063 030e 	orn	r3, r3, #14
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4907      	ldr	r1, [pc, #28]	@ (8003500 <I2C_MasterRequestRead+0x198>)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f888 	bl	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	00010008 	.word	0x00010008
 8003500:	00010002 	.word	0x00010002

08003504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003514:	e048      	b.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d044      	beq.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fe fe69 	bl	80021f4 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d139      	bne.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10d      	bne.n	800355a <I2C_WaitOnFlagUntilTimeout+0x56>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	e00c      	b.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x70>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	429a      	cmp	r2, r3
 8003578:	d116      	bne.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e023      	b.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10d      	bne.n	80035ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	e00c      	b.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d093      	beq.n	8003516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003606:	e071      	b.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003616:	d123      	bne.n	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003626:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e067      	b.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003666:	d041      	beq.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003668:	f7fe fdc4 	bl	80021f4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d136      	bne.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d10c      	bne.n	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4013      	ands	r3, r2
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e00b      	b.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e021      	b.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d10c      	bne.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e00b      	b.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	f47f af6d 	bne.w	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003744:	e034      	b.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f8e3 	bl	8003912 <I2C_IsAcknowledgeFailed>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e034      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d028      	beq.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fe fd49 	bl	80021f4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d11d      	bne.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b80      	cmp	r3, #128	@ 0x80
 8003780:	d016      	beq.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e007      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ba:	2b80      	cmp	r3, #128	@ 0x80
 80037bc:	d1c3      	bne.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d4:	e034      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f89b 	bl	8003912 <I2C_IsAcknowledgeFailed>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e034      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d028      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ee:	f7fe fd01 	bl	80021f4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11d      	bne.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d016      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e007      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d1c3      	bne.n	80037d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003864:	e049      	b.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b10      	cmp	r3, #16
 8003872:	d119      	bne.n	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0210 	mvn.w	r2, #16
 800387c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e030      	b.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fe fca4 	bl	80021f4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11d      	bne.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b40      	cmp	r3, #64	@ 0x40
 80038ca:	d016      	beq.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e007      	b.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003904:	2b40      	cmp	r3, #64	@ 0x40
 8003906:	d1ae      	bne.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003928:	d11b      	bne.n	8003962 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003932:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f043 0204 	orr.w	r2, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
	...

08003970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e272      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8087 	beq.w	8003a9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003990:	4b92      	ldr	r3, [pc, #584]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b04      	cmp	r3, #4
 800399a:	d00c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800399c:	4b8f      	ldr	r3, [pc, #572]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d112      	bne.n	80039ce <HAL_RCC_OscConfig+0x5e>
 80039a8:	4b8c      	ldr	r3, [pc, #560]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b4:	d10b      	bne.n	80039ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b6:	4b89      	ldr	r3, [pc, #548]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d06c      	beq.n	8003a9c <HAL_RCC_OscConfig+0x12c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d168      	bne.n	8003a9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e24c      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x76>
 80039d8:	4b80      	ldr	r3, [pc, #512]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7f      	ldr	r2, [pc, #508]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e02e      	b.n	8003a44 <HAL_RCC_OscConfig+0xd4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x98>
 80039ee:	4b7b      	ldr	r3, [pc, #492]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7a      	ldr	r2, [pc, #488]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b78      	ldr	r3, [pc, #480]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a77      	ldr	r2, [pc, #476]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e01d      	b.n	8003a44 <HAL_RCC_OscConfig+0xd4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0xbc>
 8003a12:	4b72      	ldr	r3, [pc, #456]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a71      	ldr	r2, [pc, #452]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6e      	ldr	r2, [pc, #440]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0xd4>
 8003a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a6a      	ldr	r2, [pc, #424]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b68      	ldr	r3, [pc, #416]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a67      	ldr	r2, [pc, #412]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fbd2 	bl	80021f4 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe fbce 	bl	80021f4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e200      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b5d      	ldr	r3, [pc, #372]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0xe4>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fe fbbe 	bl	80021f4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fe fbba 	bl	80021f4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	@ 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1ec      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x10c>
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d063      	beq.n	8003b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ab6:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x18c>
 8003ac2:	4b46      	ldr	r3, [pc, #280]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b43      	ldr	r3, [pc, #268]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x176>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1c0      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4939      	ldr	r1, [pc, #228]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fb73 	bl	80021f4 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe fb6f 	bl	80021f4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1a1      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b2d      	ldr	r3, [pc, #180]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b2a      	ldr	r3, [pc, #168]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4927      	ldr	r1, [pc, #156]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b26      	ldr	r3, [pc, #152]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fb52 	bl	80021f4 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fe fb4e 	bl	80021f4 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e180      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03a      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d019      	beq.n	8003bba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b17      	ldr	r3, [pc, #92]	@ (8003be4 <HAL_RCC_OscConfig+0x274>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8c:	f7fe fb32 	bl	80021f4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fe fb2e 	bl	80021f4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e160      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f000 face 	bl	8004154 <RCC_Delay>
 8003bb8:	e01c      	b.n	8003bf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_RCC_OscConfig+0x274>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fb18 	bl	80021f4 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc6:	e00f      	b.n	8003be8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc8:	f7fe fb14 	bl	80021f4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d908      	bls.n	8003be8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e146      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	42420000 	.word	0x42420000
 8003be4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b92      	ldr	r3, [pc, #584]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e9      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a6 	beq.w	8003d4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b8b      	ldr	r3, [pc, #556]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a87      	ldr	r2, [pc, #540]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c1c:	61d3      	str	r3, [r2, #28]
 8003c1e:	4b85      	ldr	r3, [pc, #532]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2e:	4b82      	ldr	r3, [pc, #520]	@ (8003e38 <HAL_RCC_OscConfig+0x4c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d118      	bne.n	8003c6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e38 <HAL_RCC_OscConfig+0x4c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e38 <HAL_RCC_OscConfig+0x4c8>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c46:	f7fe fad5 	bl	80021f4 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4e:	f7fe fad1 	bl	80021f4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b64      	cmp	r3, #100	@ 0x64
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e103      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	4b75      	ldr	r3, [pc, #468]	@ (8003e38 <HAL_RCC_OscConfig+0x4c8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x312>
 8003c74:	4b6f      	ldr	r3, [pc, #444]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a6e      	ldr	r2, [pc, #440]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	e02d      	b.n	8003cde <HAL_RCC_OscConfig+0x36e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x334>
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a69      	ldr	r2, [pc, #420]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6213      	str	r3, [r2, #32]
 8003c96:	4b67      	ldr	r3, [pc, #412]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a66      	ldr	r2, [pc, #408]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	6213      	str	r3, [r2, #32]
 8003ca2:	e01c      	b.n	8003cde <HAL_RCC_OscConfig+0x36e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x356>
 8003cac:	4b61      	ldr	r3, [pc, #388]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a60      	ldr	r2, [pc, #384]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	6213      	str	r3, [r2, #32]
 8003cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6213      	str	r3, [r2, #32]
 8003cc4:	e00b      	b.n	8003cde <HAL_RCC_OscConfig+0x36e>
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4a5a      	ldr	r2, [pc, #360]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6213      	str	r3, [r2, #32]
 8003cd2:	4b58      	ldr	r3, [pc, #352]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4a57      	ldr	r2, [pc, #348]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d015      	beq.n	8003d12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce6:	f7fe fa85 	bl	80021f4 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe fa81 	bl	80021f4 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0b1      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	4b4b      	ldr	r3, [pc, #300]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ee      	beq.n	8003cee <HAL_RCC_OscConfig+0x37e>
 8003d10:	e014      	b.n	8003d3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fe fa6f 	bl	80021f4 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe fa6b 	bl	80021f4 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e09b      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	4b40      	ldr	r3, [pc, #256]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ee      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d42:	4b3c      	ldr	r3, [pc, #240]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4a3b      	ldr	r2, [pc, #236]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8087 	beq.w	8003e66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d58:	4b36      	ldr	r3, [pc, #216]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d061      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d146      	bne.n	8003dfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b33      	ldr	r3, [pc, #204]	@ (8003e3c <HAL_RCC_OscConfig+0x4cc>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fe fa3f 	bl	80021f4 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fe fa3b 	bl	80021f4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e06d      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8c:	4b29      	ldr	r3, [pc, #164]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da0:	d108      	bne.n	8003db4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003da2:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	4921      	ldr	r1, [pc, #132]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a19      	ldr	r1, [r3, #32]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	491b      	ldr	r1, [pc, #108]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <HAL_RCC_OscConfig+0x4cc>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd2:	f7fe fa0f 	bl	80021f4 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dda:	f7fe fa0b 	bl	80021f4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e03d      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dec:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x46a>
 8003df8:	e035      	b.n	8003e66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <HAL_RCC_OscConfig+0x4cc>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe f9f8 	bl	80021f4 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe f9f4 	bl	80021f4 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e026      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1a:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x498>
 8003e26:	e01e      	b.n	8003e66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e019      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <HAL_RCC_OscConfig+0x500>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000

08003e74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0d0      	b.n	800402a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b6a      	ldr	r3, [pc, #424]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d910      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b67      	ldr	r3, [pc, #412]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 0207 	bic.w	r2, r3, #7
 8003e9e:	4965      	ldr	r1, [pc, #404]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b63      	ldr	r3, [pc, #396]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0b8      	b.n	800402a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed0:	4b59      	ldr	r3, [pc, #356]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a58      	ldr	r2, [pc, #352]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003eda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee8:	4b53      	ldr	r3, [pc, #332]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a52      	ldr	r2, [pc, #328]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ef2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b50      	ldr	r3, [pc, #320]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	494d      	ldr	r1, [pc, #308]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d040      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	4b47      	ldr	r3, [pc, #284]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d115      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e07f      	b.n	800402a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b41      	ldr	r3, [pc, #260]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e073      	b.n	800402a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b3d      	ldr	r3, [pc, #244]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06b      	b.n	800402a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f023 0203 	bic.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4936      	ldr	r1, [pc, #216]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f64:	f7fe f946 	bl	80021f4 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fe f942 	bl	80021f4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e053      	b.n	800402a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b2d      	ldr	r3, [pc, #180]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 020c 	and.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1eb      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f94:	4b27      	ldr	r3, [pc, #156]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d210      	bcs.n	8003fc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 0207 	bic.w	r2, r3, #7
 8003faa:	4922      	ldr	r1, [pc, #136]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd0:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4916      	ldr	r1, [pc, #88]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	490e      	ldr	r1, [pc, #56]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004002:	f000 f821 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490a      	ldr	r1, [pc, #40]	@ (800403c <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <HAL_RCC_ClockConfig+0x1cc>)
 800401c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800401e:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <HAL_RCC_ClockConfig+0x1d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe f8a4 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40022000 	.word	0x40022000
 8004038:	40021000 	.word	0x40021000
 800403c:	08009ed8 	.word	0x08009ed8
 8004040:	20000000 	.word	0x20000000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004062:	4b1e      	ldr	r3, [pc, #120]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b04      	cmp	r3, #4
 8004070:	d002      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x30>
 8004072:	2b08      	cmp	r3, #8
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x36>
 8004076:	e027      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004078:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800407a:	613b      	str	r3, [r7, #16]
      break;
 800407c:	e027      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	0c9b      	lsrs	r3, r3, #18
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004088:	5cd3      	ldrb	r3, [r2, r3]
 800408a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004096:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0c5b      	lsrs	r3, r3, #17
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
 80040a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a0d      	ldr	r2, [pc, #52]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80040aa:	fb03 f202 	mul.w	r2, r3, r2
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	e004      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0c      	ldr	r2, [pc, #48]	@ (80040ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	613b      	str	r3, [r7, #16]
      break;
 80040c6:	e002      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ca:	613b      	str	r3, [r7, #16]
      break;
 80040cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ce:	693b      	ldr	r3, [r7, #16]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	007a1200 	.word	0x007a1200
 80040e4:	08009ef0 	.word	0x08009ef0
 80040e8:	08009f00 	.word	0x08009f00
 80040ec:	003d0900 	.word	0x003d0900

080040f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b02      	ldr	r3, [pc, #8]	@ (8004100 <HAL_RCC_GetHCLKFreq+0x10>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000000 	.word	0x20000000

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004108:	f7ff fff2 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4903      	ldr	r1, [pc, #12]	@ (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	08009ee8 	.word	0x08009ee8

0800412c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004130:	f7ff ffde 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	0adb      	lsrs	r3, r3, #11
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	@ (8004150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	08009ee8 	.word	0x08009ee8

08004154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800415c:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <RCC_Delay+0x34>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <RCC_Delay+0x38>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0a5b      	lsrs	r3, r3, #9
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004170:	bf00      	nop
  }
  while (Delay --);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f9      	bne.n	8004170 <RCC_Delay+0x1c>
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	20000000 	.word	0x20000000
 800418c:	10624dd3 	.word	0x10624dd3

08004190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e041      	b.n	8004226 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd fe00 	bl	8001dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 f992 	bl	80044f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_TIM_PWM_Start+0x24>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e022      	b.n	800429a <HAL_TIM_PWM_Start+0x6a>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d109      	bne.n	800426e <HAL_TIM_PWM_Start+0x3e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	bf14      	ite	ne
 8004266:	2301      	movne	r3, #1
 8004268:	2300      	moveq	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e015      	b.n	800429a <HAL_TIM_PWM_Start+0x6a>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d109      	bne.n	8004288 <HAL_TIM_PWM_Start+0x58>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e008      	b.n	800429a <HAL_TIM_PWM_Start+0x6a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	bf14      	ite	ne
 8004294:	2301      	movne	r3, #1
 8004296:	2300      	moveq	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e05e      	b.n	8004360 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Start+0x82>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b0:	e013      	b.n	80042da <HAL_TIM_PWM_Start+0xaa>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_PWM_Start+0x92>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c0:	e00b      	b.n	80042da <HAL_TIM_PWM_Start+0xaa>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_PWM_Start+0xa2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d0:	e003      	b.n	80042da <HAL_TIM_PWM_Start+0xaa>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2201      	movs	r2, #1
 80042e0:	6839      	ldr	r1, [r7, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fafe 	bl	80048e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <HAL_TIM_PWM_Start+0x138>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d107      	bne.n	8004302 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a18      	ldr	r2, [pc, #96]	@ (8004368 <HAL_TIM_PWM_Start+0x138>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_TIM_PWM_Start+0xfa>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004314:	d009      	beq.n	800432a <HAL_TIM_PWM_Start+0xfa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a14      	ldr	r2, [pc, #80]	@ (800436c <HAL_TIM_PWM_Start+0x13c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIM_PWM_Start+0xfa>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a12      	ldr	r2, [pc, #72]	@ (8004370 <HAL_TIM_PWM_Start+0x140>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d111      	bne.n	800434e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b06      	cmp	r3, #6
 800433a:	d010      	beq.n	800435e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	e007      	b.n	800435e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800

08004374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800438e:	2302      	movs	r3, #2
 8004390:	e0ae      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	f200 809f 	bhi.w	80044e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080044e1 	.word	0x080044e1
 80043b0:	080044e1 	.word	0x080044e1
 80043b4:	080044e1 	.word	0x080044e1
 80043b8:	0800441d 	.word	0x0800441d
 80043bc:	080044e1 	.word	0x080044e1
 80043c0:	080044e1 	.word	0x080044e1
 80043c4:	080044e1 	.word	0x080044e1
 80043c8:	0800445f 	.word	0x0800445f
 80043cc:	080044e1 	.word	0x080044e1
 80043d0:	080044e1 	.word	0x080044e1
 80043d4:	080044e1 	.word	0x080044e1
 80043d8:	0800449f 	.word	0x0800449f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f8f6 	bl	80045d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0208 	orr.w	r2, r2, #8
 80043f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0204 	bic.w	r2, r2, #4
 8004406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	619a      	str	r2, [r3, #24]
      break;
 800441a:	e064      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f93c 	bl	80046a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6999      	ldr	r1, [r3, #24]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	619a      	str	r2, [r3, #24]
      break;
 800445c:	e043      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f985 	bl	8004774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0208 	orr.w	r2, r2, #8
 8004478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0204 	bic.w	r2, r2, #4
 8004488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	61da      	str	r2, [r3, #28]
      break;
 800449c:	e023      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f9cf 	bl	8004848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69d9      	ldr	r1, [r3, #28]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	021a      	lsls	r2, r3, #8
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	61da      	str	r2, [r3, #28]
      break;
 80044de:	e002      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
      break;
 80044e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a2f      	ldr	r2, [pc, #188]	@ (80045c8 <TIM_Base_SetConfig+0xd0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00b      	beq.n	8004528 <TIM_Base_SetConfig+0x30>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004516:	d007      	beq.n	8004528 <TIM_Base_SetConfig+0x30>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a2c      	ldr	r2, [pc, #176]	@ (80045cc <TIM_Base_SetConfig+0xd4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_Base_SetConfig+0x30>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2b      	ldr	r2, [pc, #172]	@ (80045d0 <TIM_Base_SetConfig+0xd8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d108      	bne.n	800453a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a22      	ldr	r2, [pc, #136]	@ (80045c8 <TIM_Base_SetConfig+0xd0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00b      	beq.n	800455a <TIM_Base_SetConfig+0x62>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004548:	d007      	beq.n	800455a <TIM_Base_SetConfig+0x62>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1f      	ldr	r2, [pc, #124]	@ (80045cc <TIM_Base_SetConfig+0xd4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_Base_SetConfig+0x62>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1e      	ldr	r2, [pc, #120]	@ (80045d0 <TIM_Base_SetConfig+0xd8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d108      	bne.n	800456c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0d      	ldr	r2, [pc, #52]	@ (80045c8 <TIM_Base_SetConfig+0xd0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f023 0201 	bic.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	611a      	str	r2, [r3, #16]
  }
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800

080045d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 0201 	bic.w	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 0302 	bic.w	r3, r3, #2
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a1c      	ldr	r2, [pc, #112]	@ (800469c <TIM_OC1_SetConfig+0xc8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10c      	bne.n	800464a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f023 0308 	bic.w	r3, r3, #8
 8004636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a13      	ldr	r2, [pc, #76]	@ (800469c <TIM_OC1_SetConfig+0xc8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d111      	bne.n	8004676 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40012c00 	.word	0x40012c00

080046a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f023 0210 	bic.w	r2, r3, #16
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0320 	bic.w	r3, r3, #32
 80046ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004770 <TIM_OC2_SetConfig+0xd0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10d      	bne.n	800471c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800471a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a14      	ldr	r2, [pc, #80]	@ (8004770 <TIM_OC2_SetConfig+0xd0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d113      	bne.n	800474c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800472a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40012c00 	.word	0x40012c00

08004774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004844 <TIM_OC3_SetConfig+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10d      	bne.n	80047ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a14      	ldr	r2, [pc, #80]	@ (8004844 <TIM_OC3_SetConfig+0xd0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d113      	bne.n	800481e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00

08004848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	031b      	lsls	r3, r3, #12
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a0f      	ldr	r2, [pc, #60]	@ (80048e0 <TIM_OC4_SetConfig+0x98>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d109      	bne.n	80048bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	019b      	lsls	r3, r3, #6
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	40012c00 	.word	0x40012c00

080048e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2201      	movs	r2, #1
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1a      	ldr	r2, [r3, #32]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	43db      	mvns	r3, r3
 8004906:	401a      	ands	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	fa01 f303 	lsl.w	r3, r1, r3
 800491c:	431a      	orrs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004940:	2302      	movs	r3, #2
 8004942:	e046      	b.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a16      	ldr	r2, [pc, #88]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004990:	d009      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a10      	ldr	r2, [pc, #64]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10c      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800

080049e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e042      	b.n	8004a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd fa20 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	@ 0x24
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fdb7 	bl	80055a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d175      	bne.n	8004b94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UART_Transmit+0x2c>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e06e      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2221      	movs	r2, #33	@ 0x21
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac6:	f7fd fb95 	bl	80021f4 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae0:	d108      	bne.n	8004af4 <HAL_UART_Transmit+0x6c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004afc:	e02e      	b.n	8004b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2180      	movs	r1, #128	@ 0x80
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fb1c 	bl	8005146 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e03a      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3302      	adds	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e007      	b.n	8004b4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1cb      	bne.n	8004afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2140      	movs	r1, #64	@ 0x40
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fae8 	bl	8005146 <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e006      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d112      	bne.n	8004bde <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Receive_IT+0x26>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e00b      	b.n	8004be0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fb0f 	bl	80051f8 <UART_Start_Receive_IT>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	e000      	b.n	8004be0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b0ba      	sub	sp, #232	@ 0xe8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <HAL_UART_IRQHandler+0x66>
 8004c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fbec 	bl	8005424 <UART_Receive_IT>
      return;
 8004c4c:	e25b      	b.n	8005106 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80de 	beq.w	8004e14 <HAL_UART_IRQHandler+0x22c>
 8004c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80d1 	beq.w	8004e14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <HAL_UART_IRQHandler+0xae>
 8004c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00b      	beq.n	8004cba <HAL_UART_IRQHandler+0xd2>
 8004ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	f043 0202 	orr.w	r2, r3, #2
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_UART_IRQHandler+0xf6>
 8004cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f043 0204 	orr.w	r2, r3, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d011      	beq.n	8004d0e <HAL_UART_IRQHandler+0x126>
 8004cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d06:	f043 0208 	orr.w	r2, r3, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 81f2 	beq.w	80050fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_UART_IRQHandler+0x14e>
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fb77 	bl	8005424 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <HAL_UART_IRQHandler+0x17a>
 8004d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04f      	beq.n	8004e02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa81 	bl	800526a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d041      	beq.n	8004dfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3314      	adds	r3, #20
 8004d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004da2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1d9      	bne.n	8004d76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d013      	beq.n	8004df2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dce:	4a7e      	ldr	r2, [pc, #504]	@ (8004fc8 <HAL_UART_IRQHandler+0x3e0>)
 8004dd0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fd fb82 	bl	80024e0 <HAL_DMA_Abort_IT>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d016      	beq.n	8004e10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dec:	4610      	mov	r0, r2
 8004dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	e00e      	b.n	8004e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f993 	bl	800511e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	e00a      	b.n	8004e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f98f 	bl	800511e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	e006      	b.n	8004e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f98b 	bl	800511e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e0e:	e175      	b.n	80050fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	bf00      	nop
    return;
 8004e12:	e173      	b.n	80050fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	f040 814f 	bne.w	80050bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8148 	beq.w	80050bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8141 	beq.w	80050bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80b6 	beq.w	8004fcc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8145 	beq.w	8005100 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	f080 813e 	bcs.w	8005100 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	f000 8088 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ec4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ec8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ed0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1d9      	bne.n	8004e98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3314      	adds	r3, #20
 8004eea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f08:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e1      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3314      	adds	r3, #20
 8004f40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f44:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e3      	bne.n	8004f20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f78:	f023 0310 	bic.w	r3, r3, #16
 8004f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f8c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e3      	bne.n	8004f66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fa61 	bl	800246a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f8b6 	bl	8005130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fc4:	e09c      	b.n	8005100 <HAL_UART_IRQHandler+0x518>
 8004fc6:	bf00      	nop
 8004fc8:	0800532f 	.word	0x0800532f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 808e 	beq.w	8005104 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8089 	beq.w	8005104 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005008:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005016:	647a      	str	r2, [r7, #68]	@ 0x44
 8005018:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800501c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e3      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	623b      	str	r3, [r7, #32]
   return(result);
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3314      	adds	r3, #20
 800504a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800504e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e3      	bne.n	800502a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0310 	bic.w	r3, r3, #16
 8005086:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005094:	61fa      	str	r2, [r7, #28]
 8005096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	69b9      	ldr	r1, [r7, #24]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	617b      	str	r3, [r7, #20]
   return(result);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e3      	bne.n	8005070 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f83b 	bl	8005130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ba:	e023      	b.n	8005104 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_UART_IRQHandler+0x4f4>
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f93e 	bl	8005356 <UART_Transmit_IT>
    return;
 80050da:	e014      	b.n	8005106 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00e      	beq.n	8005106 <HAL_UART_IRQHandler+0x51e>
 80050e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f97d 	bl	80053f4 <UART_EndTransmit_IT>
    return;
 80050fa:	e004      	b.n	8005106 <HAL_UART_IRQHandler+0x51e>
    return;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <HAL_UART_IRQHandler+0x51e>
      return;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <HAL_UART_IRQHandler+0x51e>
      return;
 8005104:	bf00      	nop
  }
}
 8005106:	37e8      	adds	r7, #232	@ 0xe8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr

08005130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b086      	sub	sp, #24
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	4613      	mov	r3, r2
 8005154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005156:	e03b      	b.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d037      	beq.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005160:	f7fd f848 	bl	80021f4 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	6a3a      	ldr	r2, [r7, #32]
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <UART_WaitOnFlagUntilTimeout+0x30>
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e03a      	b.n	80051f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d023      	beq.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b80      	cmp	r3, #128	@ 0x80
 800518c:	d020      	beq.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b40      	cmp	r3, #64	@ 0x40
 8005192:	d01d      	beq.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d116      	bne.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f856 	bl	800526a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2208      	movs	r2, #8
 80051c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e00f      	b.n	80051f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	429a      	cmp	r2, r3
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d0b4      	beq.n	8005158 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2222      	movs	r2, #34	@ 0x22
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800523c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0220 	orr.w	r2, r2, #32
 800525c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800526a:	b480      	push	{r7}
 800526c:	b095      	sub	sp, #84	@ 0x54
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	330c      	adds	r3, #12
 8005290:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005292:	643a      	str	r2, [r7, #64]	@ 0x40
 8005294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3314      	adds	r3, #20
 80052c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d119      	bne.n	8005316 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f023 0310 	bic.w	r3, r3, #16
 80052f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005302:	61ba      	str	r2, [r7, #24]
 8005304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6979      	ldr	r1, [r7, #20]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	613b      	str	r3, [r7, #16]
   return(result);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005324:	bf00      	nop
 8005326:	3754      	adds	r7, #84	@ 0x54
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fee8 	bl	800511e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b21      	cmp	r3, #33	@ 0x21
 8005368:	d13e      	bne.n	80053e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005372:	d114      	bne.n	800539e <UART_Transmit_IT+0x48>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d110      	bne.n	800539e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	1c9a      	adds	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]
 800539c:	e008      	b.n	80053b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	1c59      	adds	r1, r3, #1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6211      	str	r1, [r2, #32]
 80053a8:	781a      	ldrb	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4619      	mov	r1, r3
 80053be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10f      	bne.n	80053e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e000      	b.n	80053ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800540a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fe79 	bl	800510c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	@ 0x30
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b22      	cmp	r3, #34	@ 0x22
 8005436:	f040 80ae 	bne.w	8005596 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005442:	d117      	bne.n	8005474 <UART_Receive_IT+0x50>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d113      	bne.n	8005474 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	b29a      	uxth	r2, r3
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	629a      	str	r2, [r3, #40]	@ 0x28
 8005472:	e026      	b.n	80054c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005486:	d007      	beq.n	8005498 <UART_Receive_IT+0x74>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <UART_Receive_IT+0x82>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e008      	b.n	80054b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4619      	mov	r1, r3
 80054d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d15d      	bne.n	8005592 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0220 	bic.w	r2, r2, #32
 80054e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005518:	2b01      	cmp	r3, #1
 800551a:	d135      	bne.n	8005588 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	613b      	str	r3, [r7, #16]
   return(result);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f023 0310 	bic.w	r3, r3, #16
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005542:	623a      	str	r2, [r7, #32]
 8005544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	69f9      	ldr	r1, [r7, #28]
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e5      	bne.n	8005522 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b10      	cmp	r3, #16
 8005562:	d10a      	bne.n	800557a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff fdd5 	bl	8005130 <HAL_UARTEx_RxEventCallback>
 8005586:	e002      	b.n	800558e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fc fb35 	bl	8001bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e002      	b.n	8005598 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e000      	b.n	8005598 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005596:	2302      	movs	r3, #2
  }
}
 8005598:	4618      	mov	r0, r3
 800559a:	3730      	adds	r7, #48	@ 0x30
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80055da:	f023 030c 	bic.w	r3, r3, #12
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2c      	ldr	r2, [pc, #176]	@ (80056b4 <UART_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fe fd90 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	e002      	b.n	8005616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7fe fd78 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8005614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	4a22      	ldr	r2, [pc, #136]	@ (80056b8 <UART_SetConfig+0x118>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	0119      	lsls	r1, r3, #4
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009a      	lsls	r2, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	fbb2 f2f3 	udiv	r2, r2, r3
 800564c:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <UART_SetConfig+0x118>)
 800564e:	fba3 0302 	umull	r0, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2064      	movs	r0, #100	@ 0x64
 8005656:	fb00 f303 	mul.w	r3, r0, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	3332      	adds	r3, #50	@ 0x32
 8005660:	4a15      	ldr	r2, [pc, #84]	@ (80056b8 <UART_SetConfig+0x118>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800566c:	4419      	add	r1, r3
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009a      	lsls	r2, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	fbb2 f2f3 	udiv	r2, r2, r3
 8005684:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <UART_SetConfig+0x118>)
 8005686:	fba3 0302 	umull	r0, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2064      	movs	r0, #100	@ 0x64
 800568e:	fb00 f303 	mul.w	r3, r0, r3
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	3332      	adds	r3, #50	@ 0x32
 8005698:	4a07      	ldr	r2, [pc, #28]	@ (80056b8 <UART_SetConfig+0x118>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	440a      	add	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40013800 	.word	0x40013800
 80056b8:	51eb851f 	.word	0x51eb851f

080056bc <atoi>:
 80056bc:	220a      	movs	r2, #10
 80056be:	2100      	movs	r1, #0
 80056c0:	f000 b87c 	b.w	80057bc <strtol>

080056c4 <_strtol_l.isra.0>:
 80056c4:	2b24      	cmp	r3, #36	@ 0x24
 80056c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ca:	4686      	mov	lr, r0
 80056cc:	4690      	mov	r8, r2
 80056ce:	d801      	bhi.n	80056d4 <_strtol_l.isra.0+0x10>
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d106      	bne.n	80056e2 <_strtol_l.isra.0+0x1e>
 80056d4:	f001 f882 	bl	80067dc <__errno>
 80056d8:	2316      	movs	r3, #22
 80056da:	6003      	str	r3, [r0, #0]
 80056dc:	2000      	movs	r0, #0
 80056de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e2:	460d      	mov	r5, r1
 80056e4:	4833      	ldr	r0, [pc, #204]	@ (80057b4 <_strtol_l.isra.0+0xf0>)
 80056e6:	462a      	mov	r2, r5
 80056e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056ec:	5d06      	ldrb	r6, [r0, r4]
 80056ee:	f016 0608 	ands.w	r6, r6, #8
 80056f2:	d1f8      	bne.n	80056e6 <_strtol_l.isra.0+0x22>
 80056f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80056f6:	d110      	bne.n	800571a <_strtol_l.isra.0+0x56>
 80056f8:	2601      	movs	r6, #1
 80056fa:	782c      	ldrb	r4, [r5, #0]
 80056fc:	1c95      	adds	r5, r2, #2
 80056fe:	f033 0210 	bics.w	r2, r3, #16
 8005702:	d115      	bne.n	8005730 <_strtol_l.isra.0+0x6c>
 8005704:	2c30      	cmp	r4, #48	@ 0x30
 8005706:	d10d      	bne.n	8005724 <_strtol_l.isra.0+0x60>
 8005708:	782a      	ldrb	r2, [r5, #0]
 800570a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800570e:	2a58      	cmp	r2, #88	@ 0x58
 8005710:	d108      	bne.n	8005724 <_strtol_l.isra.0+0x60>
 8005712:	786c      	ldrb	r4, [r5, #1]
 8005714:	3502      	adds	r5, #2
 8005716:	2310      	movs	r3, #16
 8005718:	e00a      	b.n	8005730 <_strtol_l.isra.0+0x6c>
 800571a:	2c2b      	cmp	r4, #43	@ 0x2b
 800571c:	bf04      	itt	eq
 800571e:	782c      	ldrbeq	r4, [r5, #0]
 8005720:	1c95      	addeq	r5, r2, #2
 8005722:	e7ec      	b.n	80056fe <_strtol_l.isra.0+0x3a>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f6      	bne.n	8005716 <_strtol_l.isra.0+0x52>
 8005728:	2c30      	cmp	r4, #48	@ 0x30
 800572a:	bf14      	ite	ne
 800572c:	230a      	movne	r3, #10
 800572e:	2308      	moveq	r3, #8
 8005730:	2200      	movs	r2, #0
 8005732:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005736:	f10c 3cff 	add.w	ip, ip, #4294967295
 800573a:	fbbc f9f3 	udiv	r9, ip, r3
 800573e:	4610      	mov	r0, r2
 8005740:	fb03 ca19 	mls	sl, r3, r9, ip
 8005744:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005748:	2f09      	cmp	r7, #9
 800574a:	d80f      	bhi.n	800576c <_strtol_l.isra.0+0xa8>
 800574c:	463c      	mov	r4, r7
 800574e:	42a3      	cmp	r3, r4
 8005750:	dd1b      	ble.n	800578a <_strtol_l.isra.0+0xc6>
 8005752:	1c57      	adds	r7, r2, #1
 8005754:	d007      	beq.n	8005766 <_strtol_l.isra.0+0xa2>
 8005756:	4581      	cmp	r9, r0
 8005758:	d314      	bcc.n	8005784 <_strtol_l.isra.0+0xc0>
 800575a:	d101      	bne.n	8005760 <_strtol_l.isra.0+0x9c>
 800575c:	45a2      	cmp	sl, r4
 800575e:	db11      	blt.n	8005784 <_strtol_l.isra.0+0xc0>
 8005760:	2201      	movs	r2, #1
 8005762:	fb00 4003 	mla	r0, r0, r3, r4
 8005766:	f815 4b01 	ldrb.w	r4, [r5], #1
 800576a:	e7eb      	b.n	8005744 <_strtol_l.isra.0+0x80>
 800576c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005770:	2f19      	cmp	r7, #25
 8005772:	d801      	bhi.n	8005778 <_strtol_l.isra.0+0xb4>
 8005774:	3c37      	subs	r4, #55	@ 0x37
 8005776:	e7ea      	b.n	800574e <_strtol_l.isra.0+0x8a>
 8005778:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800577c:	2f19      	cmp	r7, #25
 800577e:	d804      	bhi.n	800578a <_strtol_l.isra.0+0xc6>
 8005780:	3c57      	subs	r4, #87	@ 0x57
 8005782:	e7e4      	b.n	800574e <_strtol_l.isra.0+0x8a>
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	e7ed      	b.n	8005766 <_strtol_l.isra.0+0xa2>
 800578a:	1c53      	adds	r3, r2, #1
 800578c:	d108      	bne.n	80057a0 <_strtol_l.isra.0+0xdc>
 800578e:	2322      	movs	r3, #34	@ 0x22
 8005790:	4660      	mov	r0, ip
 8005792:	f8ce 3000 	str.w	r3, [lr]
 8005796:	f1b8 0f00 	cmp.w	r8, #0
 800579a:	d0a0      	beq.n	80056de <_strtol_l.isra.0+0x1a>
 800579c:	1e69      	subs	r1, r5, #1
 800579e:	e006      	b.n	80057ae <_strtol_l.isra.0+0xea>
 80057a0:	b106      	cbz	r6, 80057a4 <_strtol_l.isra.0+0xe0>
 80057a2:	4240      	negs	r0, r0
 80057a4:	f1b8 0f00 	cmp.w	r8, #0
 80057a8:	d099      	beq.n	80056de <_strtol_l.isra.0+0x1a>
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	d1f6      	bne.n	800579c <_strtol_l.isra.0+0xd8>
 80057ae:	f8c8 1000 	str.w	r1, [r8]
 80057b2:	e794      	b.n	80056de <_strtol_l.isra.0+0x1a>
 80057b4:	08009f03 	.word	0x08009f03

080057b8 <_strtol_r>:
 80057b8:	f7ff bf84 	b.w	80056c4 <_strtol_l.isra.0>

080057bc <strtol>:
 80057bc:	4613      	mov	r3, r2
 80057be:	460a      	mov	r2, r1
 80057c0:	4601      	mov	r1, r0
 80057c2:	4802      	ldr	r0, [pc, #8]	@ (80057cc <strtol+0x10>)
 80057c4:	6800      	ldr	r0, [r0, #0]
 80057c6:	f7ff bf7d 	b.w	80056c4 <_strtol_l.isra.0>
 80057ca:	bf00      	nop
 80057cc:	20000018 	.word	0x20000018

080057d0 <__cvt>:
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d6:	461d      	mov	r5, r3
 80057d8:	bfbb      	ittet	lt
 80057da:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80057de:	461d      	movlt	r5, r3
 80057e0:	2300      	movge	r3, #0
 80057e2:	232d      	movlt	r3, #45	@ 0x2d
 80057e4:	b088      	sub	sp, #32
 80057e6:	4614      	mov	r4, r2
 80057e8:	bfb8      	it	lt
 80057ea:	4614      	movlt	r4, r2
 80057ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80057f0:	7013      	strb	r3, [r2, #0]
 80057f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80057f8:	f023 0820 	bic.w	r8, r3, #32
 80057fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005800:	d005      	beq.n	800580e <__cvt+0x3e>
 8005802:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005806:	d100      	bne.n	800580a <__cvt+0x3a>
 8005808:	3601      	adds	r6, #1
 800580a:	2302      	movs	r3, #2
 800580c:	e000      	b.n	8005810 <__cvt+0x40>
 800580e:	2303      	movs	r3, #3
 8005810:	aa07      	add	r2, sp, #28
 8005812:	9204      	str	r2, [sp, #16]
 8005814:	aa06      	add	r2, sp, #24
 8005816:	e9cd a202 	strd	sl, r2, [sp, #8]
 800581a:	e9cd 3600 	strd	r3, r6, [sp]
 800581e:	4622      	mov	r2, r4
 8005820:	462b      	mov	r3, r5
 8005822:	f001 f8a5 	bl	8006970 <_dtoa_r>
 8005826:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800582a:	4607      	mov	r7, r0
 800582c:	d119      	bne.n	8005862 <__cvt+0x92>
 800582e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005830:	07db      	lsls	r3, r3, #31
 8005832:	d50e      	bpl.n	8005852 <__cvt+0x82>
 8005834:	eb00 0906 	add.w	r9, r0, r6
 8005838:	2200      	movs	r2, #0
 800583a:	2300      	movs	r3, #0
 800583c:	4620      	mov	r0, r4
 800583e:	4629      	mov	r1, r5
 8005840:	f7fb f966 	bl	8000b10 <__aeabi_dcmpeq>
 8005844:	b108      	cbz	r0, 800584a <__cvt+0x7a>
 8005846:	f8cd 901c 	str.w	r9, [sp, #28]
 800584a:	2230      	movs	r2, #48	@ 0x30
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	454b      	cmp	r3, r9
 8005850:	d31e      	bcc.n	8005890 <__cvt+0xc0>
 8005852:	4638      	mov	r0, r7
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005858:	1bdb      	subs	r3, r3, r7
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	b008      	add	sp, #32
 800585e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005862:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005866:	eb00 0906 	add.w	r9, r0, r6
 800586a:	d1e5      	bne.n	8005838 <__cvt+0x68>
 800586c:	7803      	ldrb	r3, [r0, #0]
 800586e:	2b30      	cmp	r3, #48	@ 0x30
 8005870:	d10a      	bne.n	8005888 <__cvt+0xb8>
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	4620      	mov	r0, r4
 8005878:	4629      	mov	r1, r5
 800587a:	f7fb f949 	bl	8000b10 <__aeabi_dcmpeq>
 800587e:	b918      	cbnz	r0, 8005888 <__cvt+0xb8>
 8005880:	f1c6 0601 	rsb	r6, r6, #1
 8005884:	f8ca 6000 	str.w	r6, [sl]
 8005888:	f8da 3000 	ldr.w	r3, [sl]
 800588c:	4499      	add	r9, r3
 800588e:	e7d3      	b.n	8005838 <__cvt+0x68>
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	9107      	str	r1, [sp, #28]
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e7d9      	b.n	800584c <__cvt+0x7c>

08005898 <__exponent>:
 8005898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589a:	2900      	cmp	r1, #0
 800589c:	bfb6      	itet	lt
 800589e:	232d      	movlt	r3, #45	@ 0x2d
 80058a0:	232b      	movge	r3, #43	@ 0x2b
 80058a2:	4249      	neglt	r1, r1
 80058a4:	2909      	cmp	r1, #9
 80058a6:	7002      	strb	r2, [r0, #0]
 80058a8:	7043      	strb	r3, [r0, #1]
 80058aa:	dd29      	ble.n	8005900 <__exponent+0x68>
 80058ac:	f10d 0307 	add.w	r3, sp, #7
 80058b0:	461d      	mov	r5, r3
 80058b2:	270a      	movs	r7, #10
 80058b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80058b8:	461a      	mov	r2, r3
 80058ba:	fb07 1416 	mls	r4, r7, r6, r1
 80058be:	3430      	adds	r4, #48	@ 0x30
 80058c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058c4:	460c      	mov	r4, r1
 80058c6:	2c63      	cmp	r4, #99	@ 0x63
 80058c8:	4631      	mov	r1, r6
 80058ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80058ce:	dcf1      	bgt.n	80058b4 <__exponent+0x1c>
 80058d0:	3130      	adds	r1, #48	@ 0x30
 80058d2:	1e94      	subs	r4, r2, #2
 80058d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058d8:	4623      	mov	r3, r4
 80058da:	1c41      	adds	r1, r0, #1
 80058dc:	42ab      	cmp	r3, r5
 80058de:	d30a      	bcc.n	80058f6 <__exponent+0x5e>
 80058e0:	f10d 0309 	add.w	r3, sp, #9
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	42ac      	cmp	r4, r5
 80058e8:	bf88      	it	hi
 80058ea:	2300      	movhi	r3, #0
 80058ec:	3302      	adds	r3, #2
 80058ee:	4403      	add	r3, r0
 80058f0:	1a18      	subs	r0, r3, r0
 80058f2:	b003      	add	sp, #12
 80058f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058fe:	e7ed      	b.n	80058dc <__exponent+0x44>
 8005900:	2330      	movs	r3, #48	@ 0x30
 8005902:	3130      	adds	r1, #48	@ 0x30
 8005904:	7083      	strb	r3, [r0, #2]
 8005906:	70c1      	strb	r1, [r0, #3]
 8005908:	1d03      	adds	r3, r0, #4
 800590a:	e7f1      	b.n	80058f0 <__exponent+0x58>

0800590c <_printf_float>:
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	b091      	sub	sp, #68	@ 0x44
 8005912:	460c      	mov	r4, r1
 8005914:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005918:	4616      	mov	r6, r2
 800591a:	461f      	mov	r7, r3
 800591c:	4605      	mov	r5, r0
 800591e:	f000 ff13 	bl	8006748 <_localeconv_r>
 8005922:	6803      	ldr	r3, [r0, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	9308      	str	r3, [sp, #32]
 8005928:	f7fa fc12 	bl	8000150 <strlen>
 800592c:	2300      	movs	r3, #0
 800592e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005930:	f8d8 3000 	ldr.w	r3, [r8]
 8005934:	9009      	str	r0, [sp, #36]	@ 0x24
 8005936:	3307      	adds	r3, #7
 8005938:	f023 0307 	bic.w	r3, r3, #7
 800593c:	f103 0208 	add.w	r2, r3, #8
 8005940:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005944:	f8d4 b000 	ldr.w	fp, [r4]
 8005948:	f8c8 2000 	str.w	r2, [r8]
 800594c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005950:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005954:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005956:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005962:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005966:	4b9c      	ldr	r3, [pc, #624]	@ (8005bd8 <_printf_float+0x2cc>)
 8005968:	f7fb f904 	bl	8000b74 <__aeabi_dcmpun>
 800596c:	bb70      	cbnz	r0, 80059cc <_printf_float+0xc0>
 800596e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	4b98      	ldr	r3, [pc, #608]	@ (8005bd8 <_printf_float+0x2cc>)
 8005978:	f7fb f8de 	bl	8000b38 <__aeabi_dcmple>
 800597c:	bb30      	cbnz	r0, 80059cc <_printf_float+0xc0>
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4640      	mov	r0, r8
 8005984:	4649      	mov	r1, r9
 8005986:	f7fb f8cd 	bl	8000b24 <__aeabi_dcmplt>
 800598a:	b110      	cbz	r0, 8005992 <_printf_float+0x86>
 800598c:	232d      	movs	r3, #45	@ 0x2d
 800598e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005992:	4a92      	ldr	r2, [pc, #584]	@ (8005bdc <_printf_float+0x2d0>)
 8005994:	4b92      	ldr	r3, [pc, #584]	@ (8005be0 <_printf_float+0x2d4>)
 8005996:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800599a:	bf8c      	ite	hi
 800599c:	4690      	movhi	r8, r2
 800599e:	4698      	movls	r8, r3
 80059a0:	2303      	movs	r3, #3
 80059a2:	f04f 0900 	mov.w	r9, #0
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	f02b 0304 	bic.w	r3, fp, #4
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	4633      	mov	r3, r6
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	9700      	str	r7, [sp, #0]
 80059b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80059b8:	f000 f9d4 	bl	8005d64 <_printf_common>
 80059bc:	3001      	adds	r0, #1
 80059be:	f040 8090 	bne.w	8005ae2 <_printf_float+0x1d6>
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	b011      	add	sp, #68	@ 0x44
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fb f8ce 	bl	8000b74 <__aeabi_dcmpun>
 80059d8:	b148      	cbz	r0, 80059ee <_printf_float+0xe2>
 80059da:	464b      	mov	r3, r9
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bfb8      	it	lt
 80059e0:	232d      	movlt	r3, #45	@ 0x2d
 80059e2:	4a80      	ldr	r2, [pc, #512]	@ (8005be4 <_printf_float+0x2d8>)
 80059e4:	bfb8      	it	lt
 80059e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059ea:	4b7f      	ldr	r3, [pc, #508]	@ (8005be8 <_printf_float+0x2dc>)
 80059ec:	e7d3      	b.n	8005996 <_printf_float+0x8a>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	d13f      	bne.n	8005a78 <_printf_float+0x16c>
 80059f8:	2306      	movs	r3, #6
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	9206      	str	r2, [sp, #24]
 8005a06:	aa0e      	add	r2, sp, #56	@ 0x38
 8005a08:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005a0c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005a0e:	9203      	str	r2, [sp, #12]
 8005a10:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005a14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	4628      	mov	r0, r5
 8005a20:	464b      	mov	r3, r9
 8005a22:	910a      	str	r1, [sp, #40]	@ 0x28
 8005a24:	f7ff fed4 	bl	80057d0 <__cvt>
 8005a28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	2947      	cmp	r1, #71	@ 0x47
 8005a2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005a30:	d128      	bne.n	8005a84 <_printf_float+0x178>
 8005a32:	1cc8      	adds	r0, r1, #3
 8005a34:	db02      	blt.n	8005a3c <_printf_float+0x130>
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	dd40      	ble.n	8005abe <_printf_float+0x1b2>
 8005a3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a40:	fa5f fa8a 	uxtb.w	sl, sl
 8005a44:	4652      	mov	r2, sl
 8005a46:	3901      	subs	r1, #1
 8005a48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a4c:	910d      	str	r1, [sp, #52]	@ 0x34
 8005a4e:	f7ff ff23 	bl	8005898 <__exponent>
 8005a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a54:	4681      	mov	r9, r0
 8005a56:	1813      	adds	r3, r2, r0
 8005a58:	2a01      	cmp	r2, #1
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	dc02      	bgt.n	8005a64 <_printf_float+0x158>
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	07d2      	lsls	r2, r2, #31
 8005a62:	d501      	bpl.n	8005a68 <_printf_float+0x15c>
 8005a64:	3301      	adds	r3, #1
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d09e      	beq.n	80059ae <_printf_float+0xa2>
 8005a70:	232d      	movs	r3, #45	@ 0x2d
 8005a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a76:	e79a      	b.n	80059ae <_printf_float+0xa2>
 8005a78:	2947      	cmp	r1, #71	@ 0x47
 8005a7a:	d1bf      	bne.n	80059fc <_printf_float+0xf0>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1bd      	bne.n	80059fc <_printf_float+0xf0>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e7ba      	b.n	80059fa <_printf_float+0xee>
 8005a84:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a88:	d9dc      	bls.n	8005a44 <_printf_float+0x138>
 8005a8a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a8e:	d118      	bne.n	8005ac2 <_printf_float+0x1b6>
 8005a90:	2900      	cmp	r1, #0
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	dd0b      	ble.n	8005aae <_printf_float+0x1a2>
 8005a96:	6121      	str	r1, [r4, #16]
 8005a98:	b913      	cbnz	r3, 8005aa0 <_printf_float+0x194>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	07d0      	lsls	r0, r2, #31
 8005a9e:	d502      	bpl.n	8005aa6 <_printf_float+0x19a>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	440b      	add	r3, r1
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	f04f 0900 	mov.w	r9, #0
 8005aaa:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005aac:	e7dc      	b.n	8005a68 <_printf_float+0x15c>
 8005aae:	b913      	cbnz	r3, 8005ab6 <_printf_float+0x1aa>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	07d2      	lsls	r2, r2, #31
 8005ab4:	d501      	bpl.n	8005aba <_printf_float+0x1ae>
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	e7f4      	b.n	8005aa4 <_printf_float+0x198>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e7f2      	b.n	8005aa4 <_printf_float+0x198>
 8005abe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	db05      	blt.n	8005ad4 <_printf_float+0x1c8>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	6121      	str	r1, [r4, #16]
 8005acc:	07d8      	lsls	r0, r3, #31
 8005ace:	d5ea      	bpl.n	8005aa6 <_printf_float+0x19a>
 8005ad0:	1c4b      	adds	r3, r1, #1
 8005ad2:	e7e7      	b.n	8005aa4 <_printf_float+0x198>
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	bfcc      	ite	gt
 8005ad8:	2201      	movgt	r2, #1
 8005ada:	f1c1 0202 	rsble	r2, r1, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	e7e0      	b.n	8005aa4 <_printf_float+0x198>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	055a      	lsls	r2, r3, #21
 8005ae6:	d407      	bmi.n	8005af8 <_printf_float+0x1ec>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	4642      	mov	r2, r8
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	d12b      	bne.n	8005b4e <_printf_float+0x242>
 8005af6:	e764      	b.n	80059c2 <_printf_float+0xb6>
 8005af8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005afc:	f240 80dc 	bls.w	8005cb8 <_printf_float+0x3ac>
 8005b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b04:	2200      	movs	r2, #0
 8005b06:	2300      	movs	r3, #0
 8005b08:	f7fb f802 	bl	8000b10 <__aeabi_dcmpeq>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d033      	beq.n	8005b78 <_printf_float+0x26c>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	4a35      	ldr	r2, [pc, #212]	@ (8005bec <_printf_float+0x2e0>)
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af51 	beq.w	80059c2 <_printf_float+0xb6>
 8005b20:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005b24:	4543      	cmp	r3, r8
 8005b26:	db02      	blt.n	8005b2e <_printf_float+0x222>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07d8      	lsls	r0, r3, #31
 8005b2c:	d50f      	bpl.n	8005b4e <_printf_float+0x242>
 8005b2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f af42 	beq.w	80059c2 <_printf_float+0xb6>
 8005b3e:	f04f 0900 	mov.w	r9, #0
 8005b42:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b46:	f104 0a1a 	add.w	sl, r4, #26
 8005b4a:	45c8      	cmp	r8, r9
 8005b4c:	dc09      	bgt.n	8005b62 <_printf_float+0x256>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	079b      	lsls	r3, r3, #30
 8005b52:	f100 8102 	bmi.w	8005d5a <_printf_float+0x44e>
 8005b56:	68e0      	ldr	r0, [r4, #12]
 8005b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	bfb8      	it	lt
 8005b5e:	4618      	movlt	r0, r3
 8005b60:	e731      	b.n	80059c6 <_printf_float+0xba>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4652      	mov	r2, sl
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f af28 	beq.w	80059c2 <_printf_float+0xb6>
 8005b72:	f109 0901 	add.w	r9, r9, #1
 8005b76:	e7e8      	b.n	8005b4a <_printf_float+0x23e>
 8005b78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc38      	bgt.n	8005bf0 <_printf_float+0x2e4>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	4a19      	ldr	r2, [pc, #100]	@ (8005bec <_printf_float+0x2e0>)
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f af1a 	beq.w	80059c2 <_printf_float+0xb6>
 8005b8e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005b92:	ea59 0303 	orrs.w	r3, r9, r3
 8005b96:	d102      	bne.n	8005b9e <_printf_float+0x292>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07d9      	lsls	r1, r3, #31
 8005b9c:	d5d7      	bpl.n	8005b4e <_printf_float+0x242>
 8005b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f af0a 	beq.w	80059c2 <_printf_float+0xb6>
 8005bae:	f04f 0a00 	mov.w	sl, #0
 8005bb2:	f104 0b1a 	add.w	fp, r4, #26
 8005bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bb8:	425b      	negs	r3, r3
 8005bba:	4553      	cmp	r3, sl
 8005bbc:	dc01      	bgt.n	8005bc2 <_printf_float+0x2b6>
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	e793      	b.n	8005aea <_printf_float+0x1de>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	465a      	mov	r2, fp
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f aef8 	beq.w	80059c2 <_printf_float+0xb6>
 8005bd2:	f10a 0a01 	add.w	sl, sl, #1
 8005bd6:	e7ee      	b.n	8005bb6 <_printf_float+0x2aa>
 8005bd8:	7fefffff 	.word	0x7fefffff
 8005bdc:	0800a007 	.word	0x0800a007
 8005be0:	0800a003 	.word	0x0800a003
 8005be4:	0800a00f 	.word	0x0800a00f
 8005be8:	0800a00b 	.word	0x0800a00b
 8005bec:	0800a013 	.word	0x0800a013
 8005bf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bf2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005bf6:	4553      	cmp	r3, sl
 8005bf8:	bfa8      	it	ge
 8005bfa:	4653      	movge	r3, sl
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	4699      	mov	r9, r3
 8005c00:	dc36      	bgt.n	8005c70 <_printf_float+0x364>
 8005c02:	f04f 0b00 	mov.w	fp, #0
 8005c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0a:	f104 021a 	add.w	r2, r4, #26
 8005c0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c12:	eba3 0309 	sub.w	r3, r3, r9
 8005c16:	455b      	cmp	r3, fp
 8005c18:	dc31      	bgt.n	8005c7e <_printf_float+0x372>
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c1c:	459a      	cmp	sl, r3
 8005c1e:	dc3a      	bgt.n	8005c96 <_printf_float+0x38a>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	07da      	lsls	r2, r3, #31
 8005c24:	d437      	bmi.n	8005c96 <_printf_float+0x38a>
 8005c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c28:	ebaa 0903 	sub.w	r9, sl, r3
 8005c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c2e:	ebaa 0303 	sub.w	r3, sl, r3
 8005c32:	4599      	cmp	r9, r3
 8005c34:	bfa8      	it	ge
 8005c36:	4699      	movge	r9, r3
 8005c38:	f1b9 0f00 	cmp.w	r9, #0
 8005c3c:	dc33      	bgt.n	8005ca6 <_printf_float+0x39a>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c46:	f104 0b1a 	add.w	fp, r4, #26
 8005c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c4c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c50:	eba3 0309 	sub.w	r3, r3, r9
 8005c54:	4543      	cmp	r3, r8
 8005c56:	f77f af7a 	ble.w	8005b4e <_printf_float+0x242>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	465a      	mov	r2, fp
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f aeac 	beq.w	80059c2 <_printf_float+0xb6>
 8005c6a:	f108 0801 	add.w	r8, r8, #1
 8005c6e:	e7ec      	b.n	8005c4a <_printf_float+0x33e>
 8005c70:	4642      	mov	r2, r8
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d1c2      	bne.n	8005c02 <_printf_float+0x2f6>
 8005c7c:	e6a1      	b.n	80059c2 <_printf_float+0xb6>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f43f ae9a 	beq.w	80059c2 <_printf_float+0xb6>
 8005c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c90:	f10b 0b01 	add.w	fp, fp, #1
 8005c94:	e7bb      	b.n	8005c0e <_printf_float+0x302>
 8005c96:	4631      	mov	r1, r6
 8005c98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d1c0      	bne.n	8005c26 <_printf_float+0x31a>
 8005ca4:	e68d      	b.n	80059c2 <_printf_float+0xb6>
 8005ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ca8:	464b      	mov	r3, r9
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	4442      	add	r2, r8
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d1c3      	bne.n	8005c3e <_printf_float+0x332>
 8005cb6:	e684      	b.n	80059c2 <_printf_float+0xb6>
 8005cb8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005cbc:	f1ba 0f01 	cmp.w	sl, #1
 8005cc0:	dc01      	bgt.n	8005cc6 <_printf_float+0x3ba>
 8005cc2:	07db      	lsls	r3, r3, #31
 8005cc4:	d536      	bpl.n	8005d34 <_printf_float+0x428>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4642      	mov	r2, r8
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f ae76 	beq.w	80059c2 <_printf_float+0xb6>
 8005cd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f43f ae6e 	beq.w	80059c2 <_printf_float+0xb6>
 8005ce6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cea:	2200      	movs	r2, #0
 8005cec:	2300      	movs	r3, #0
 8005cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cf2:	f7fa ff0d 	bl	8000b10 <__aeabi_dcmpeq>
 8005cf6:	b9c0      	cbnz	r0, 8005d2a <_printf_float+0x41e>
 8005cf8:	4653      	mov	r3, sl
 8005cfa:	f108 0201 	add.w	r2, r8, #1
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	d10c      	bne.n	8005d22 <_printf_float+0x416>
 8005d08:	e65b      	b.n	80059c2 <_printf_float+0xb6>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	465a      	mov	r2, fp
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	f43f ae54 	beq.w	80059c2 <_printf_float+0xb6>
 8005d1a:	f108 0801 	add.w	r8, r8, #1
 8005d1e:	45d0      	cmp	r8, sl
 8005d20:	dbf3      	blt.n	8005d0a <_printf_float+0x3fe>
 8005d22:	464b      	mov	r3, r9
 8005d24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d28:	e6e0      	b.n	8005aec <_printf_float+0x1e0>
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	f104 0b1a 	add.w	fp, r4, #26
 8005d32:	e7f4      	b.n	8005d1e <_printf_float+0x412>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4642      	mov	r2, r8
 8005d38:	e7e1      	b.n	8005cfe <_printf_float+0x3f2>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	464a      	mov	r2, r9
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f ae3c 	beq.w	80059c2 <_printf_float+0xb6>
 8005d4a:	f108 0801 	add.w	r8, r8, #1
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d52:	1a5b      	subs	r3, r3, r1
 8005d54:	4543      	cmp	r3, r8
 8005d56:	dcf0      	bgt.n	8005d3a <_printf_float+0x42e>
 8005d58:	e6fd      	b.n	8005b56 <_printf_float+0x24a>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	f104 0919 	add.w	r9, r4, #25
 8005d62:	e7f4      	b.n	8005d4e <_printf_float+0x442>

08005d64 <_printf_common>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	4616      	mov	r6, r2
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	688a      	ldr	r2, [r1, #8]
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	4607      	mov	r7, r0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	bfb8      	it	lt
 8005d76:	4613      	movlt	r3, r2
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d7e:	460c      	mov	r4, r1
 8005d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d84:	b10a      	cbz	r2, 8005d8a <_printf_common+0x26>
 8005d86:	3301      	adds	r3, #1
 8005d88:	6033      	str	r3, [r6, #0]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	0699      	lsls	r1, r3, #26
 8005d8e:	bf42      	ittt	mi
 8005d90:	6833      	ldrmi	r3, [r6, #0]
 8005d92:	3302      	addmi	r3, #2
 8005d94:	6033      	strmi	r3, [r6, #0]
 8005d96:	6825      	ldr	r5, [r4, #0]
 8005d98:	f015 0506 	ands.w	r5, r5, #6
 8005d9c:	d106      	bne.n	8005dac <_printf_common+0x48>
 8005d9e:	f104 0a19 	add.w	sl, r4, #25
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	6832      	ldr	r2, [r6, #0]
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	dc2b      	bgt.n	8005e04 <_printf_common+0xa0>
 8005dac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	3b00      	subs	r3, #0
 8005db4:	bf18      	it	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	0692      	lsls	r2, r2, #26
 8005dba:	d430      	bmi.n	8005e1e <_printf_common+0xba>
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dc4:	47c8      	blx	r9
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d023      	beq.n	8005e12 <_printf_common+0xae>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	6922      	ldr	r2, [r4, #16]
 8005dce:	f003 0306 	and.w	r3, r3, #6
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	bf14      	ite	ne
 8005dd6:	2500      	movne	r5, #0
 8005dd8:	6833      	ldreq	r3, [r6, #0]
 8005dda:	f04f 0600 	mov.w	r6, #0
 8005dde:	bf08      	it	eq
 8005de0:	68e5      	ldreq	r5, [r4, #12]
 8005de2:	f104 041a 	add.w	r4, r4, #26
 8005de6:	bf08      	it	eq
 8005de8:	1aed      	subeq	r5, r5, r3
 8005dea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dee:	bf08      	it	eq
 8005df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bfc4      	itt	gt
 8005df8:	1a9b      	subgt	r3, r3, r2
 8005dfa:	18ed      	addgt	r5, r5, r3
 8005dfc:	42b5      	cmp	r5, r6
 8005dfe:	d11a      	bne.n	8005e36 <_printf_common+0xd2>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e008      	b.n	8005e16 <_printf_common+0xb2>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4652      	mov	r2, sl
 8005e08:	4641      	mov	r1, r8
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c8      	blx	r9
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d103      	bne.n	8005e1a <_printf_common+0xb6>
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	e7c1      	b.n	8005da2 <_printf_common+0x3e>
 8005e1e:	2030      	movs	r0, #48	@ 0x30
 8005e20:	18e1      	adds	r1, r4, r3
 8005e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e2c:	4422      	add	r2, r4
 8005e2e:	3302      	adds	r3, #2
 8005e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e34:	e7c2      	b.n	8005dbc <_printf_common+0x58>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	47c8      	blx	r9
 8005e40:	3001      	adds	r0, #1
 8005e42:	d0e6      	beq.n	8005e12 <_printf_common+0xae>
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7d9      	b.n	8005dfc <_printf_common+0x98>

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	4691      	mov	r9, r2
 8005e50:	2f78      	cmp	r7, #120	@ 0x78
 8005e52:	4680      	mov	r8, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	469a      	mov	sl, r3
 8005e58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	@ 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d1 	beq.w	800600c <_printf_i+0x1c4>
 8005e6a:	2f58      	cmp	r7, #88	@ 0x58
 8005e6c:	f000 80b8 	beq.w	8005fe0 <_printf_i+0x198>
 8005e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	@ (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08005ff3 	.word	0x08005ff3
 8005eb8:	08005f1f 	.word	0x08005f1f
 8005ebc:	08005fad 	.word	0x08005fad
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	08006015 	.word	0x08006015
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f1f 	.word	0x08005f1f
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005fb5 	.word	0x08005fb5
 8005ee0:	6833      	ldr	r3, [r6, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6032      	str	r2, [r6, #0]
 8005ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e09c      	b.n	800602e <_printf_i+0x1e6>
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	6820      	ldr	r0, [r4, #0]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	6031      	str	r1, [r6, #0]
 8005efc:	0606      	lsls	r6, r0, #24
 8005efe:	d501      	bpl.n	8005f04 <_printf_i+0xbc>
 8005f00:	681d      	ldr	r5, [r3, #0]
 8005f02:	e003      	b.n	8005f0c <_printf_i+0xc4>
 8005f04:	0645      	lsls	r5, r0, #25
 8005f06:	d5fb      	bpl.n	8005f00 <_printf_i+0xb8>
 8005f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	da03      	bge.n	8005f18 <_printf_i+0xd0>
 8005f10:	232d      	movs	r3, #45	@ 0x2d
 8005f12:	426d      	negs	r5, r5
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f18:	230a      	movs	r3, #10
 8005f1a:	4858      	ldr	r0, [pc, #352]	@ (800607c <_printf_i+0x234>)
 8005f1c:	e011      	b.n	8005f42 <_printf_i+0xfa>
 8005f1e:	6821      	ldr	r1, [r4, #0]
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	0608      	lsls	r0, r1, #24
 8005f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f28:	d402      	bmi.n	8005f30 <_printf_i+0xe8>
 8005f2a:	0649      	lsls	r1, r1, #25
 8005f2c:	bf48      	it	mi
 8005f2e:	b2ad      	uxthmi	r5, r5
 8005f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	bf14      	ite	ne
 8005f36:	230a      	movne	r3, #10
 8005f38:	2308      	moveq	r3, #8
 8005f3a:	4850      	ldr	r0, [pc, #320]	@ (800607c <_printf_i+0x234>)
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f42:	6866      	ldr	r6, [r4, #4]
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	60a6      	str	r6, [r4, #8]
 8005f48:	db05      	blt.n	8005f56 <_printf_i+0x10e>
 8005f4a:	6821      	ldr	r1, [r4, #0]
 8005f4c:	432e      	orrs	r6, r5
 8005f4e:	f021 0104 	bic.w	r1, r1, #4
 8005f52:	6021      	str	r1, [r4, #0]
 8005f54:	d04b      	beq.n	8005fee <_printf_i+0x1a6>
 8005f56:	4616      	mov	r6, r2
 8005f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f60:	5dc7      	ldrb	r7, [r0, r7]
 8005f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f66:	462f      	mov	r7, r5
 8005f68:	42bb      	cmp	r3, r7
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	d9f4      	bls.n	8005f58 <_printf_i+0x110>
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d10b      	bne.n	8005f8a <_printf_i+0x142>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	07df      	lsls	r7, r3, #31
 8005f76:	d508      	bpl.n	8005f8a <_printf_i+0x142>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	6861      	ldr	r1, [r4, #4]
 8005f7c:	4299      	cmp	r1, r3
 8005f7e:	bfde      	ittt	le
 8005f80:	2330      	movle	r3, #48	@ 0x30
 8005f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f8a:	1b92      	subs	r2, r2, r6
 8005f8c:	6122      	str	r2, [r4, #16]
 8005f8e:	464b      	mov	r3, r9
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f8cd a000 	str.w	sl, [sp]
 8005f98:	aa03      	add	r2, sp, #12
 8005f9a:	f7ff fee3 	bl	8005d64 <_printf_common>
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d14a      	bne.n	8006038 <_printf_i+0x1f0>
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	b004      	add	sp, #16
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	f043 0320 	orr.w	r3, r3, #32
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	2778      	movs	r7, #120	@ 0x78
 8005fb6:	4832      	ldr	r0, [pc, #200]	@ (8006080 <_printf_i+0x238>)
 8005fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	6831      	ldr	r1, [r6, #0]
 8005fc0:	061f      	lsls	r7, r3, #24
 8005fc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fc6:	d402      	bmi.n	8005fce <_printf_i+0x186>
 8005fc8:	065f      	lsls	r7, r3, #25
 8005fca:	bf48      	it	mi
 8005fcc:	b2ad      	uxthmi	r5, r5
 8005fce:	6031      	str	r1, [r6, #0]
 8005fd0:	07d9      	lsls	r1, r3, #31
 8005fd2:	bf44      	itt	mi
 8005fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd8:	6023      	strmi	r3, [r4, #0]
 8005fda:	b11d      	cbz	r5, 8005fe4 <_printf_i+0x19c>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	e7ad      	b.n	8005f3c <_printf_i+0xf4>
 8005fe0:	4826      	ldr	r0, [pc, #152]	@ (800607c <_printf_i+0x234>)
 8005fe2:	e7e9      	b.n	8005fb8 <_printf_i+0x170>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	f023 0320 	bic.w	r3, r3, #32
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	e7f6      	b.n	8005fdc <_printf_i+0x194>
 8005fee:	4616      	mov	r6, r2
 8005ff0:	e7bd      	b.n	8005f6e <_printf_i+0x126>
 8005ff2:	6833      	ldr	r3, [r6, #0]
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6961      	ldr	r1, [r4, #20]
 8005ffa:	6030      	str	r0, [r6, #0]
 8005ffc:	062e      	lsls	r6, r5, #24
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	d501      	bpl.n	8006006 <_printf_i+0x1be>
 8006002:	6019      	str	r1, [r3, #0]
 8006004:	e002      	b.n	800600c <_printf_i+0x1c4>
 8006006:	0668      	lsls	r0, r5, #25
 8006008:	d5fb      	bpl.n	8006002 <_printf_i+0x1ba>
 800600a:	8019      	strh	r1, [r3, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	4616      	mov	r6, r2
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	e7bc      	b.n	8005f8e <_printf_i+0x146>
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	2100      	movs	r1, #0
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	6032      	str	r2, [r6, #0]
 800601c:	681e      	ldr	r6, [r3, #0]
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	4630      	mov	r0, r6
 8006022:	f000 fc08 	bl	8006836 <memchr>
 8006026:	b108      	cbz	r0, 800602c <_printf_i+0x1e4>
 8006028:	1b80      	subs	r0, r0, r6
 800602a:	6060      	str	r0, [r4, #4]
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2300      	movs	r3, #0
 8006032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006036:	e7aa      	b.n	8005f8e <_printf_i+0x146>
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	47d0      	blx	sl
 8006042:	3001      	adds	r0, #1
 8006044:	d0ad      	beq.n	8005fa2 <_printf_i+0x15a>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	079b      	lsls	r3, r3, #30
 800604a:	d413      	bmi.n	8006074 <_printf_i+0x22c>
 800604c:	68e0      	ldr	r0, [r4, #12]
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	4298      	cmp	r0, r3
 8006052:	bfb8      	it	lt
 8006054:	4618      	movlt	r0, r3
 8006056:	e7a6      	b.n	8005fa6 <_printf_i+0x15e>
 8006058:	2301      	movs	r3, #1
 800605a:	4632      	mov	r2, r6
 800605c:	4649      	mov	r1, r9
 800605e:	4640      	mov	r0, r8
 8006060:	47d0      	blx	sl
 8006062:	3001      	adds	r0, #1
 8006064:	d09d      	beq.n	8005fa2 <_printf_i+0x15a>
 8006066:	3501      	adds	r5, #1
 8006068:	68e3      	ldr	r3, [r4, #12]
 800606a:	9903      	ldr	r1, [sp, #12]
 800606c:	1a5b      	subs	r3, r3, r1
 800606e:	42ab      	cmp	r3, r5
 8006070:	dcf2      	bgt.n	8006058 <_printf_i+0x210>
 8006072:	e7eb      	b.n	800604c <_printf_i+0x204>
 8006074:	2500      	movs	r5, #0
 8006076:	f104 0619 	add.w	r6, r4, #25
 800607a:	e7f5      	b.n	8006068 <_printf_i+0x220>
 800607c:	0800a015 	.word	0x0800a015
 8006080:	0800a026 	.word	0x0800a026

08006084 <_scanf_float>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	b087      	sub	sp, #28
 800608a:	9303      	str	r3, [sp, #12]
 800608c:	688b      	ldr	r3, [r1, #8]
 800608e:	4691      	mov	r9, r2
 8006090:	1e5a      	subs	r2, r3, #1
 8006092:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006096:	bf82      	ittt	hi
 8006098:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800609c:	eb03 0b05 	addhi.w	fp, r3, r5
 80060a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80060a4:	460a      	mov	r2, r1
 80060a6:	f04f 0500 	mov.w	r5, #0
 80060aa:	bf88      	it	hi
 80060ac:	608b      	strhi	r3, [r1, #8]
 80060ae:	680b      	ldr	r3, [r1, #0]
 80060b0:	4680      	mov	r8, r0
 80060b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80060b6:	f842 3b1c 	str.w	r3, [r2], #28
 80060ba:	460c      	mov	r4, r1
 80060bc:	bf98      	it	ls
 80060be:	f04f 0b00 	movls.w	fp, #0
 80060c2:	4616      	mov	r6, r2
 80060c4:	46aa      	mov	sl, r5
 80060c6:	462f      	mov	r7, r5
 80060c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060cc:	9201      	str	r2, [sp, #4]
 80060ce:	9502      	str	r5, [sp, #8]
 80060d0:	68a2      	ldr	r2, [r4, #8]
 80060d2:	b15a      	cbz	r2, 80060ec <_scanf_float+0x68>
 80060d4:	f8d9 3000 	ldr.w	r3, [r9]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b4e      	cmp	r3, #78	@ 0x4e
 80060dc:	d862      	bhi.n	80061a4 <_scanf_float+0x120>
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d83a      	bhi.n	8006158 <_scanf_float+0xd4>
 80060e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80060e6:	b2c8      	uxtb	r0, r1
 80060e8:	280e      	cmp	r0, #14
 80060ea:	d938      	bls.n	800615e <_scanf_float+0xda>
 80060ec:	b11f      	cbz	r7, 80060f6 <_scanf_float+0x72>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060fa:	f1ba 0f01 	cmp.w	sl, #1
 80060fe:	f200 8114 	bhi.w	800632a <_scanf_float+0x2a6>
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	429e      	cmp	r6, r3
 8006106:	f200 8105 	bhi.w	8006314 <_scanf_float+0x290>
 800610a:	2001      	movs	r0, #1
 800610c:	b007      	add	sp, #28
 800610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006112:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006116:	2a0d      	cmp	r2, #13
 8006118:	d8e8      	bhi.n	80060ec <_scanf_float+0x68>
 800611a:	a101      	add	r1, pc, #4	@ (adr r1, 8006120 <_scanf_float+0x9c>)
 800611c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006120:	08006269 	.word	0x08006269
 8006124:	080060ed 	.word	0x080060ed
 8006128:	080060ed 	.word	0x080060ed
 800612c:	080060ed 	.word	0x080060ed
 8006130:	080062c5 	.word	0x080062c5
 8006134:	0800629f 	.word	0x0800629f
 8006138:	080060ed 	.word	0x080060ed
 800613c:	080060ed 	.word	0x080060ed
 8006140:	08006277 	.word	0x08006277
 8006144:	080060ed 	.word	0x080060ed
 8006148:	080060ed 	.word	0x080060ed
 800614c:	080060ed 	.word	0x080060ed
 8006150:	080060ed 	.word	0x080060ed
 8006154:	08006233 	.word	0x08006233
 8006158:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800615c:	e7db      	b.n	8006116 <_scanf_float+0x92>
 800615e:	290e      	cmp	r1, #14
 8006160:	d8c4      	bhi.n	80060ec <_scanf_float+0x68>
 8006162:	a001      	add	r0, pc, #4	@ (adr r0, 8006168 <_scanf_float+0xe4>)
 8006164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006168:	08006223 	.word	0x08006223
 800616c:	080060ed 	.word	0x080060ed
 8006170:	08006223 	.word	0x08006223
 8006174:	080062b3 	.word	0x080062b3
 8006178:	080060ed 	.word	0x080060ed
 800617c:	080061c5 	.word	0x080061c5
 8006180:	08006209 	.word	0x08006209
 8006184:	08006209 	.word	0x08006209
 8006188:	08006209 	.word	0x08006209
 800618c:	08006209 	.word	0x08006209
 8006190:	08006209 	.word	0x08006209
 8006194:	08006209 	.word	0x08006209
 8006198:	08006209 	.word	0x08006209
 800619c:	08006209 	.word	0x08006209
 80061a0:	08006209 	.word	0x08006209
 80061a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80061a6:	d809      	bhi.n	80061bc <_scanf_float+0x138>
 80061a8:	2b60      	cmp	r3, #96	@ 0x60
 80061aa:	d8b2      	bhi.n	8006112 <_scanf_float+0x8e>
 80061ac:	2b54      	cmp	r3, #84	@ 0x54
 80061ae:	d07b      	beq.n	80062a8 <_scanf_float+0x224>
 80061b0:	2b59      	cmp	r3, #89	@ 0x59
 80061b2:	d19b      	bne.n	80060ec <_scanf_float+0x68>
 80061b4:	2d07      	cmp	r5, #7
 80061b6:	d199      	bne.n	80060ec <_scanf_float+0x68>
 80061b8:	2508      	movs	r5, #8
 80061ba:	e02f      	b.n	800621c <_scanf_float+0x198>
 80061bc:	2b74      	cmp	r3, #116	@ 0x74
 80061be:	d073      	beq.n	80062a8 <_scanf_float+0x224>
 80061c0:	2b79      	cmp	r3, #121	@ 0x79
 80061c2:	e7f6      	b.n	80061b2 <_scanf_float+0x12e>
 80061c4:	6821      	ldr	r1, [r4, #0]
 80061c6:	05c8      	lsls	r0, r1, #23
 80061c8:	d51e      	bpl.n	8006208 <_scanf_float+0x184>
 80061ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80061ce:	6021      	str	r1, [r4, #0]
 80061d0:	3701      	adds	r7, #1
 80061d2:	f1bb 0f00 	cmp.w	fp, #0
 80061d6:	d003      	beq.n	80061e0 <_scanf_float+0x15c>
 80061d8:	3201      	adds	r2, #1
 80061da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061de:	60a2      	str	r2, [r4, #8]
 80061e0:	68a3      	ldr	r3, [r4, #8]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	60a3      	str	r3, [r4, #8]
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	3301      	adds	r3, #1
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f8c9 3004 	str.w	r3, [r9, #4]
 80061f8:	f340 8083 	ble.w	8006302 <_scanf_float+0x27e>
 80061fc:	f8d9 3000 	ldr.w	r3, [r9]
 8006200:	3301      	adds	r3, #1
 8006202:	f8c9 3000 	str.w	r3, [r9]
 8006206:	e763      	b.n	80060d0 <_scanf_float+0x4c>
 8006208:	eb1a 0105 	adds.w	r1, sl, r5
 800620c:	f47f af6e 	bne.w	80060ec <_scanf_float+0x68>
 8006210:	460d      	mov	r5, r1
 8006212:	468a      	mov	sl, r1
 8006214:	6822      	ldr	r2, [r4, #0]
 8006216:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800621a:	6022      	str	r2, [r4, #0]
 800621c:	f806 3b01 	strb.w	r3, [r6], #1
 8006220:	e7de      	b.n	80061e0 <_scanf_float+0x15c>
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	0610      	lsls	r0, r2, #24
 8006226:	f57f af61 	bpl.w	80060ec <_scanf_float+0x68>
 800622a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	e7f4      	b.n	800621c <_scanf_float+0x198>
 8006232:	f1ba 0f00 	cmp.w	sl, #0
 8006236:	d10c      	bne.n	8006252 <_scanf_float+0x1ce>
 8006238:	b977      	cbnz	r7, 8006258 <_scanf_float+0x1d4>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006240:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006244:	d108      	bne.n	8006258 <_scanf_float+0x1d4>
 8006246:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800624a:	f04f 0a01 	mov.w	sl, #1
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	e7e4      	b.n	800621c <_scanf_float+0x198>
 8006252:	f1ba 0f02 	cmp.w	sl, #2
 8006256:	d051      	beq.n	80062fc <_scanf_float+0x278>
 8006258:	2d01      	cmp	r5, #1
 800625a:	d002      	beq.n	8006262 <_scanf_float+0x1de>
 800625c:	2d04      	cmp	r5, #4
 800625e:	f47f af45 	bne.w	80060ec <_scanf_float+0x68>
 8006262:	3501      	adds	r5, #1
 8006264:	b2ed      	uxtb	r5, r5
 8006266:	e7d9      	b.n	800621c <_scanf_float+0x198>
 8006268:	f1ba 0f01 	cmp.w	sl, #1
 800626c:	f47f af3e 	bne.w	80060ec <_scanf_float+0x68>
 8006270:	f04f 0a02 	mov.w	sl, #2
 8006274:	e7d2      	b.n	800621c <_scanf_float+0x198>
 8006276:	b975      	cbnz	r5, 8006296 <_scanf_float+0x212>
 8006278:	2f00      	cmp	r7, #0
 800627a:	f47f af38 	bne.w	80060ee <_scanf_float+0x6a>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006284:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006288:	f040 80ff 	bne.w	800648a <_scanf_float+0x406>
 800628c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006290:	2501      	movs	r5, #1
 8006292:	6022      	str	r2, [r4, #0]
 8006294:	e7c2      	b.n	800621c <_scanf_float+0x198>
 8006296:	2d03      	cmp	r5, #3
 8006298:	d0e3      	beq.n	8006262 <_scanf_float+0x1de>
 800629a:	2d05      	cmp	r5, #5
 800629c:	e7df      	b.n	800625e <_scanf_float+0x1da>
 800629e:	2d02      	cmp	r5, #2
 80062a0:	f47f af24 	bne.w	80060ec <_scanf_float+0x68>
 80062a4:	2503      	movs	r5, #3
 80062a6:	e7b9      	b.n	800621c <_scanf_float+0x198>
 80062a8:	2d06      	cmp	r5, #6
 80062aa:	f47f af1f 	bne.w	80060ec <_scanf_float+0x68>
 80062ae:	2507      	movs	r5, #7
 80062b0:	e7b4      	b.n	800621c <_scanf_float+0x198>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	0591      	lsls	r1, r2, #22
 80062b6:	f57f af19 	bpl.w	80060ec <_scanf_float+0x68>
 80062ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	9702      	str	r7, [sp, #8]
 80062c2:	e7ab      	b.n	800621c <_scanf_float+0x198>
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80062ca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80062ce:	d005      	beq.n	80062dc <_scanf_float+0x258>
 80062d0:	0550      	lsls	r0, r2, #21
 80062d2:	f57f af0b 	bpl.w	80060ec <_scanf_float+0x68>
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	f000 80d7 	beq.w	800648a <_scanf_float+0x406>
 80062dc:	0591      	lsls	r1, r2, #22
 80062de:	bf58      	it	pl
 80062e0:	9902      	ldrpl	r1, [sp, #8]
 80062e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062e6:	bf58      	it	pl
 80062e8:	1a79      	subpl	r1, r7, r1
 80062ea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80062ee:	f04f 0700 	mov.w	r7, #0
 80062f2:	bf58      	it	pl
 80062f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	e78f      	b.n	800621c <_scanf_float+0x198>
 80062fc:	f04f 0a03 	mov.w	sl, #3
 8006300:	e78c      	b.n	800621c <_scanf_float+0x198>
 8006302:	4649      	mov	r1, r9
 8006304:	4640      	mov	r0, r8
 8006306:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800630a:	4798      	blx	r3
 800630c:	2800      	cmp	r0, #0
 800630e:	f43f aedf 	beq.w	80060d0 <_scanf_float+0x4c>
 8006312:	e6eb      	b.n	80060ec <_scanf_float+0x68>
 8006314:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006318:	464a      	mov	r2, r9
 800631a:	4640      	mov	r0, r8
 800631c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006320:	4798      	blx	r3
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	3b01      	subs	r3, #1
 8006326:	6123      	str	r3, [r4, #16]
 8006328:	e6eb      	b.n	8006102 <_scanf_float+0x7e>
 800632a:	1e6b      	subs	r3, r5, #1
 800632c:	2b06      	cmp	r3, #6
 800632e:	d824      	bhi.n	800637a <_scanf_float+0x2f6>
 8006330:	2d02      	cmp	r5, #2
 8006332:	d836      	bhi.n	80063a2 <_scanf_float+0x31e>
 8006334:	9b01      	ldr	r3, [sp, #4]
 8006336:	429e      	cmp	r6, r3
 8006338:	f67f aee7 	bls.w	800610a <_scanf_float+0x86>
 800633c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006340:	464a      	mov	r2, r9
 8006342:	4640      	mov	r0, r8
 8006344:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006348:	4798      	blx	r3
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	3b01      	subs	r3, #1
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	e7f0      	b.n	8006334 <_scanf_float+0x2b0>
 8006352:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006356:	464a      	mov	r2, r9
 8006358:	4640      	mov	r0, r8
 800635a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800635e:	4798      	blx	r3
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	3b01      	subs	r3, #1
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800636a:	fa5f fa8a 	uxtb.w	sl, sl
 800636e:	f1ba 0f02 	cmp.w	sl, #2
 8006372:	d1ee      	bne.n	8006352 <_scanf_float+0x2ce>
 8006374:	3d03      	subs	r5, #3
 8006376:	b2ed      	uxtb	r5, r5
 8006378:	1b76      	subs	r6, r6, r5
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	05da      	lsls	r2, r3, #23
 800637e:	d530      	bpl.n	80063e2 <_scanf_float+0x35e>
 8006380:	055b      	lsls	r3, r3, #21
 8006382:	d511      	bpl.n	80063a8 <_scanf_float+0x324>
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	429e      	cmp	r6, r3
 8006388:	f67f aebf 	bls.w	800610a <_scanf_float+0x86>
 800638c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006390:	464a      	mov	r2, r9
 8006392:	4640      	mov	r0, r8
 8006394:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006398:	4798      	blx	r3
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	3b01      	subs	r3, #1
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	e7f0      	b.n	8006384 <_scanf_float+0x300>
 80063a2:	46aa      	mov	sl, r5
 80063a4:	46b3      	mov	fp, r6
 80063a6:	e7de      	b.n	8006366 <_scanf_float+0x2e2>
 80063a8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063ac:	6923      	ldr	r3, [r4, #16]
 80063ae:	2965      	cmp	r1, #101	@ 0x65
 80063b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80063b4:	f106 35ff 	add.w	r5, r6, #4294967295
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	d00c      	beq.n	80063d6 <_scanf_float+0x352>
 80063bc:	2945      	cmp	r1, #69	@ 0x45
 80063be:	d00a      	beq.n	80063d6 <_scanf_float+0x352>
 80063c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063c4:	464a      	mov	r2, r9
 80063c6:	4640      	mov	r0, r8
 80063c8:	4798      	blx	r3
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	1eb5      	subs	r5, r6, #2
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	464a      	mov	r2, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063de:	4798      	blx	r3
 80063e0:	462e      	mov	r6, r5
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	f012 0210 	ands.w	r2, r2, #16
 80063e8:	d001      	beq.n	80063ee <_scanf_float+0x36a>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e68e      	b.n	800610c <_scanf_float+0x88>
 80063ee:	7032      	strb	r2, [r6, #0]
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063fa:	d125      	bne.n	8006448 <_scanf_float+0x3c4>
 80063fc:	9b02      	ldr	r3, [sp, #8]
 80063fe:	429f      	cmp	r7, r3
 8006400:	d00a      	beq.n	8006418 <_scanf_float+0x394>
 8006402:	1bda      	subs	r2, r3, r7
 8006404:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006408:	429e      	cmp	r6, r3
 800640a:	bf28      	it	cs
 800640c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006410:	4630      	mov	r0, r6
 8006412:	491f      	ldr	r1, [pc, #124]	@ (8006490 <_scanf_float+0x40c>)
 8006414:	f000 f902 	bl	800661c <siprintf>
 8006418:	2200      	movs	r2, #0
 800641a:	4640      	mov	r0, r8
 800641c:	9901      	ldr	r1, [sp, #4]
 800641e:	f002 fc13 	bl	8008c48 <_strtod_r>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f015 0f02 	tst.w	r5, #2
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	f103 0204 	add.w	r2, r3, #4
 8006434:	d015      	beq.n	8006462 <_scanf_float+0x3de>
 8006436:	9903      	ldr	r1, [sp, #12]
 8006438:	600a      	str	r2, [r1, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	e9c3 6700 	strd	r6, r7, [r3]
 8006440:	68e3      	ldr	r3, [r4, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60e3      	str	r3, [r4, #12]
 8006446:	e7d0      	b.n	80063ea <_scanf_float+0x366>
 8006448:	9b04      	ldr	r3, [sp, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0e4      	beq.n	8006418 <_scanf_float+0x394>
 800644e:	9905      	ldr	r1, [sp, #20]
 8006450:	230a      	movs	r3, #10
 8006452:	4640      	mov	r0, r8
 8006454:	3101      	adds	r1, #1
 8006456:	f7ff f9af 	bl	80057b8 <_strtol_r>
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	9e05      	ldr	r6, [sp, #20]
 800645e:	1ac2      	subs	r2, r0, r3
 8006460:	e7d0      	b.n	8006404 <_scanf_float+0x380>
 8006462:	076d      	lsls	r5, r5, #29
 8006464:	d4e7      	bmi.n	8006436 <_scanf_float+0x3b2>
 8006466:	9d03      	ldr	r5, [sp, #12]
 8006468:	602a      	str	r2, [r5, #0]
 800646a:	681d      	ldr	r5, [r3, #0]
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	f7fa fb80 	bl	8000b74 <__aeabi_dcmpun>
 8006474:	b120      	cbz	r0, 8006480 <_scanf_float+0x3fc>
 8006476:	4807      	ldr	r0, [pc, #28]	@ (8006494 <_scanf_float+0x410>)
 8006478:	f000 f9ec 	bl	8006854 <nanf>
 800647c:	6028      	str	r0, [r5, #0]
 800647e:	e7df      	b.n	8006440 <_scanf_float+0x3bc>
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7fa fbd4 	bl	8000c30 <__aeabi_d2f>
 8006488:	e7f8      	b.n	800647c <_scanf_float+0x3f8>
 800648a:	2700      	movs	r7, #0
 800648c:	e633      	b.n	80060f6 <_scanf_float+0x72>
 800648e:	bf00      	nop
 8006490:	0800a037 	.word	0x0800a037
 8006494:	0800a178 	.word	0x0800a178

08006498 <std>:
 8006498:	2300      	movs	r3, #0
 800649a:	b510      	push	{r4, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	e9c0 3300 	strd	r3, r3, [r0]
 80064a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064a6:	6083      	str	r3, [r0, #8]
 80064a8:	8181      	strh	r1, [r0, #12]
 80064aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80064ac:	81c2      	strh	r2, [r0, #14]
 80064ae:	6183      	str	r3, [r0, #24]
 80064b0:	4619      	mov	r1, r3
 80064b2:	2208      	movs	r2, #8
 80064b4:	305c      	adds	r0, #92	@ 0x5c
 80064b6:	f000 f916 	bl	80066e6 <memset>
 80064ba:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <std+0x58>)
 80064bc:	6224      	str	r4, [r4, #32]
 80064be:	6263      	str	r3, [r4, #36]	@ 0x24
 80064c0:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <std+0x5c>)
 80064c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064c4:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <std+0x60>)
 80064c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064c8:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <std+0x64>)
 80064ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <std+0x68>)
 80064ce:	429c      	cmp	r4, r3
 80064d0:	d006      	beq.n	80064e0 <std+0x48>
 80064d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064d6:	4294      	cmp	r4, r2
 80064d8:	d002      	beq.n	80064e0 <std+0x48>
 80064da:	33d0      	adds	r3, #208	@ 0xd0
 80064dc:	429c      	cmp	r4, r3
 80064de:	d105      	bne.n	80064ec <std+0x54>
 80064e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e8:	f000 b9a2 	b.w	8006830 <__retarget_lock_init_recursive>
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	bf00      	nop
 80064f0:	08006661 	.word	0x08006661
 80064f4:	08006683 	.word	0x08006683
 80064f8:	080066bb 	.word	0x080066bb
 80064fc:	080066df 	.word	0x080066df
 8006500:	20000394 	.word	0x20000394

08006504 <stdio_exit_handler>:
 8006504:	4a02      	ldr	r2, [pc, #8]	@ (8006510 <stdio_exit_handler+0xc>)
 8006506:	4903      	ldr	r1, [pc, #12]	@ (8006514 <stdio_exit_handler+0x10>)
 8006508:	4803      	ldr	r0, [pc, #12]	@ (8006518 <stdio_exit_handler+0x14>)
 800650a:	f000 b869 	b.w	80065e0 <_fwalk_sglue>
 800650e:	bf00      	nop
 8006510:	2000000c 	.word	0x2000000c
 8006514:	08009005 	.word	0x08009005
 8006518:	2000001c 	.word	0x2000001c

0800651c <cleanup_stdio>:
 800651c:	6841      	ldr	r1, [r0, #4]
 800651e:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <cleanup_stdio+0x34>)
 8006520:	b510      	push	{r4, lr}
 8006522:	4299      	cmp	r1, r3
 8006524:	4604      	mov	r4, r0
 8006526:	d001      	beq.n	800652c <cleanup_stdio+0x10>
 8006528:	f002 fd6c 	bl	8009004 <_fflush_r>
 800652c:	68a1      	ldr	r1, [r4, #8]
 800652e:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <cleanup_stdio+0x38>)
 8006530:	4299      	cmp	r1, r3
 8006532:	d002      	beq.n	800653a <cleanup_stdio+0x1e>
 8006534:	4620      	mov	r0, r4
 8006536:	f002 fd65 	bl	8009004 <_fflush_r>
 800653a:	68e1      	ldr	r1, [r4, #12]
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <cleanup_stdio+0x3c>)
 800653e:	4299      	cmp	r1, r3
 8006540:	d004      	beq.n	800654c <cleanup_stdio+0x30>
 8006542:	4620      	mov	r0, r4
 8006544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006548:	f002 bd5c 	b.w	8009004 <_fflush_r>
 800654c:	bd10      	pop	{r4, pc}
 800654e:	bf00      	nop
 8006550:	20000394 	.word	0x20000394
 8006554:	200003fc 	.word	0x200003fc
 8006558:	20000464 	.word	0x20000464

0800655c <global_stdio_init.part.0>:
 800655c:	b510      	push	{r4, lr}
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <global_stdio_init.part.0+0x30>)
 8006560:	4c0b      	ldr	r4, [pc, #44]	@ (8006590 <global_stdio_init.part.0+0x34>)
 8006562:	4a0c      	ldr	r2, [pc, #48]	@ (8006594 <global_stdio_init.part.0+0x38>)
 8006564:	4620      	mov	r0, r4
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	2104      	movs	r1, #4
 800656a:	2200      	movs	r2, #0
 800656c:	f7ff ff94 	bl	8006498 <std>
 8006570:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006574:	2201      	movs	r2, #1
 8006576:	2109      	movs	r1, #9
 8006578:	f7ff ff8e 	bl	8006498 <std>
 800657c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006580:	2202      	movs	r2, #2
 8006582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006586:	2112      	movs	r1, #18
 8006588:	f7ff bf86 	b.w	8006498 <std>
 800658c:	200004cc 	.word	0x200004cc
 8006590:	20000394 	.word	0x20000394
 8006594:	08006505 	.word	0x08006505

08006598 <__sfp_lock_acquire>:
 8006598:	4801      	ldr	r0, [pc, #4]	@ (80065a0 <__sfp_lock_acquire+0x8>)
 800659a:	f000 b94a 	b.w	8006832 <__retarget_lock_acquire_recursive>
 800659e:	bf00      	nop
 80065a0:	200004d5 	.word	0x200004d5

080065a4 <__sfp_lock_release>:
 80065a4:	4801      	ldr	r0, [pc, #4]	@ (80065ac <__sfp_lock_release+0x8>)
 80065a6:	f000 b945 	b.w	8006834 <__retarget_lock_release_recursive>
 80065aa:	bf00      	nop
 80065ac:	200004d5 	.word	0x200004d5

080065b0 <__sinit>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4604      	mov	r4, r0
 80065b4:	f7ff fff0 	bl	8006598 <__sfp_lock_acquire>
 80065b8:	6a23      	ldr	r3, [r4, #32]
 80065ba:	b11b      	cbz	r3, 80065c4 <__sinit+0x14>
 80065bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c0:	f7ff bff0 	b.w	80065a4 <__sfp_lock_release>
 80065c4:	4b04      	ldr	r3, [pc, #16]	@ (80065d8 <__sinit+0x28>)
 80065c6:	6223      	str	r3, [r4, #32]
 80065c8:	4b04      	ldr	r3, [pc, #16]	@ (80065dc <__sinit+0x2c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1f5      	bne.n	80065bc <__sinit+0xc>
 80065d0:	f7ff ffc4 	bl	800655c <global_stdio_init.part.0>
 80065d4:	e7f2      	b.n	80065bc <__sinit+0xc>
 80065d6:	bf00      	nop
 80065d8:	0800651d 	.word	0x0800651d
 80065dc:	200004cc 	.word	0x200004cc

080065e0 <_fwalk_sglue>:
 80065e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e4:	4607      	mov	r7, r0
 80065e6:	4688      	mov	r8, r1
 80065e8:	4614      	mov	r4, r2
 80065ea:	2600      	movs	r6, #0
 80065ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065f0:	f1b9 0901 	subs.w	r9, r9, #1
 80065f4:	d505      	bpl.n	8006602 <_fwalk_sglue+0x22>
 80065f6:	6824      	ldr	r4, [r4, #0]
 80065f8:	2c00      	cmp	r4, #0
 80065fa:	d1f7      	bne.n	80065ec <_fwalk_sglue+0xc>
 80065fc:	4630      	mov	r0, r6
 80065fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d907      	bls.n	8006618 <_fwalk_sglue+0x38>
 8006608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800660c:	3301      	adds	r3, #1
 800660e:	d003      	beq.n	8006618 <_fwalk_sglue+0x38>
 8006610:	4629      	mov	r1, r5
 8006612:	4638      	mov	r0, r7
 8006614:	47c0      	blx	r8
 8006616:	4306      	orrs	r6, r0
 8006618:	3568      	adds	r5, #104	@ 0x68
 800661a:	e7e9      	b.n	80065f0 <_fwalk_sglue+0x10>

0800661c <siprintf>:
 800661c:	b40e      	push	{r1, r2, r3}
 800661e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006622:	b510      	push	{r4, lr}
 8006624:	2400      	movs	r4, #0
 8006626:	b09d      	sub	sp, #116	@ 0x74
 8006628:	ab1f      	add	r3, sp, #124	@ 0x7c
 800662a:	9002      	str	r0, [sp, #8]
 800662c:	9006      	str	r0, [sp, #24]
 800662e:	9107      	str	r1, [sp, #28]
 8006630:	9104      	str	r1, [sp, #16]
 8006632:	4809      	ldr	r0, [pc, #36]	@ (8006658 <siprintf+0x3c>)
 8006634:	4909      	ldr	r1, [pc, #36]	@ (800665c <siprintf+0x40>)
 8006636:	f853 2b04 	ldr.w	r2, [r3], #4
 800663a:	9105      	str	r1, [sp, #20]
 800663c:	6800      	ldr	r0, [r0, #0]
 800663e:	a902      	add	r1, sp, #8
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006644:	f002 fb62 	bl	8008d0c <_svfiprintf_r>
 8006648:	9b02      	ldr	r3, [sp, #8]
 800664a:	701c      	strb	r4, [r3, #0]
 800664c:	b01d      	add	sp, #116	@ 0x74
 800664e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006652:	b003      	add	sp, #12
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000018 	.word	0x20000018
 800665c:	ffff0208 	.word	0xffff0208

08006660 <__sread>:
 8006660:	b510      	push	{r4, lr}
 8006662:	460c      	mov	r4, r1
 8006664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006668:	f000 f894 	bl	8006794 <_read_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	bfab      	itete	ge
 8006670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006672:	89a3      	ldrhlt	r3, [r4, #12]
 8006674:	181b      	addge	r3, r3, r0
 8006676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800667a:	bfac      	ite	ge
 800667c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800667e:	81a3      	strhlt	r3, [r4, #12]
 8006680:	bd10      	pop	{r4, pc}

08006682 <__swrite>:
 8006682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	461f      	mov	r7, r3
 8006688:	898b      	ldrh	r3, [r1, #12]
 800668a:	4605      	mov	r5, r0
 800668c:	05db      	lsls	r3, r3, #23
 800668e:	460c      	mov	r4, r1
 8006690:	4616      	mov	r6, r2
 8006692:	d505      	bpl.n	80066a0 <__swrite+0x1e>
 8006694:	2302      	movs	r3, #2
 8006696:	2200      	movs	r2, #0
 8006698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669c:	f000 f868 	bl	8006770 <_lseek_r>
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	4632      	mov	r2, r6
 80066a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066a8:	81a3      	strh	r3, [r4, #12]
 80066aa:	4628      	mov	r0, r5
 80066ac:	463b      	mov	r3, r7
 80066ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	f000 b87f 	b.w	80067b8 <_write_r>

080066ba <__sseek>:
 80066ba:	b510      	push	{r4, lr}
 80066bc:	460c      	mov	r4, r1
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 f855 	bl	8006770 <_lseek_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	bf15      	itete	ne
 80066cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066d6:	81a3      	strheq	r3, [r4, #12]
 80066d8:	bf18      	it	ne
 80066da:	81a3      	strhne	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__sclose>:
 80066de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e2:	f000 b835 	b.w	8006750 <_close_r>

080066e6 <memset>:
 80066e6:	4603      	mov	r3, r0
 80066e8:	4402      	add	r2, r0
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d100      	bne.n	80066f0 <memset+0xa>
 80066ee:	4770      	bx	lr
 80066f0:	f803 1b01 	strb.w	r1, [r3], #1
 80066f4:	e7f9      	b.n	80066ea <memset+0x4>

080066f6 <strncmp>:
 80066f6:	b510      	push	{r4, lr}
 80066f8:	b16a      	cbz	r2, 8006716 <strncmp+0x20>
 80066fa:	3901      	subs	r1, #1
 80066fc:	1884      	adds	r4, r0, r2
 80066fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006702:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006706:	429a      	cmp	r2, r3
 8006708:	d103      	bne.n	8006712 <strncmp+0x1c>
 800670a:	42a0      	cmp	r0, r4
 800670c:	d001      	beq.n	8006712 <strncmp+0x1c>
 800670e:	2a00      	cmp	r2, #0
 8006710:	d1f5      	bne.n	80066fe <strncmp+0x8>
 8006712:	1ad0      	subs	r0, r2, r3
 8006714:	bd10      	pop	{r4, pc}
 8006716:	4610      	mov	r0, r2
 8006718:	e7fc      	b.n	8006714 <strncmp+0x1e>

0800671a <strstr>:
 800671a:	780a      	ldrb	r2, [r1, #0]
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	b96a      	cbnz	r2, 800673c <strstr+0x22>
 8006720:	bd70      	pop	{r4, r5, r6, pc}
 8006722:	429a      	cmp	r2, r3
 8006724:	d109      	bne.n	800673a <strstr+0x20>
 8006726:	460c      	mov	r4, r1
 8006728:	4605      	mov	r5, r0
 800672a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f6      	beq.n	8006720 <strstr+0x6>
 8006732:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006736:	429e      	cmp	r6, r3
 8006738:	d0f7      	beq.n	800672a <strstr+0x10>
 800673a:	3001      	adds	r0, #1
 800673c:	7803      	ldrb	r3, [r0, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1ef      	bne.n	8006722 <strstr+0x8>
 8006742:	4618      	mov	r0, r3
 8006744:	e7ec      	b.n	8006720 <strstr+0x6>
	...

08006748 <_localeconv_r>:
 8006748:	4800      	ldr	r0, [pc, #0]	@ (800674c <_localeconv_r+0x4>)
 800674a:	4770      	bx	lr
 800674c:	20000158 	.word	0x20000158

08006750 <_close_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	2300      	movs	r3, #0
 8006754:	4d05      	ldr	r5, [pc, #20]	@ (800676c <_close_r+0x1c>)
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fb fc5f 	bl	800201e <_close>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_close_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_close_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200004d0 	.word	0x200004d0

08006770 <_lseek_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4604      	mov	r4, r0
 8006774:	4608      	mov	r0, r1
 8006776:	4611      	mov	r1, r2
 8006778:	2200      	movs	r2, #0
 800677a:	4d05      	ldr	r5, [pc, #20]	@ (8006790 <_lseek_r+0x20>)
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	f7fb fc71 	bl	8002066 <_lseek>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_lseek_r+0x1e>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_lseek_r+0x1e>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	200004d0 	.word	0x200004d0

08006794 <_read_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	2200      	movs	r2, #0
 800679e:	4d05      	ldr	r5, [pc, #20]	@ (80067b4 <_read_r+0x20>)
 80067a0:	602a      	str	r2, [r5, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f7fb fc02 	bl	8001fac <_read>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_read_r+0x1e>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_read_r+0x1e>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	200004d0 	.word	0x200004d0

080067b8 <_write_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4604      	mov	r4, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	2200      	movs	r2, #0
 80067c2:	4d05      	ldr	r5, [pc, #20]	@ (80067d8 <_write_r+0x20>)
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fb fc0d 	bl	8001fe6 <_write>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_write_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_write_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	200004d0 	.word	0x200004d0

080067dc <__errno>:
 80067dc:	4b01      	ldr	r3, [pc, #4]	@ (80067e4 <__errno+0x8>)
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000018 	.word	0x20000018

080067e8 <__libc_init_array>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	2600      	movs	r6, #0
 80067ec:	4d0c      	ldr	r5, [pc, #48]	@ (8006820 <__libc_init_array+0x38>)
 80067ee:	4c0d      	ldr	r4, [pc, #52]	@ (8006824 <__libc_init_array+0x3c>)
 80067f0:	1b64      	subs	r4, r4, r5
 80067f2:	10a4      	asrs	r4, r4, #2
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	d109      	bne.n	800680c <__libc_init_array+0x24>
 80067f8:	f003 fade 	bl	8009db8 <_init>
 80067fc:	2600      	movs	r6, #0
 80067fe:	4d0a      	ldr	r5, [pc, #40]	@ (8006828 <__libc_init_array+0x40>)
 8006800:	4c0a      	ldr	r4, [pc, #40]	@ (800682c <__libc_init_array+0x44>)
 8006802:	1b64      	subs	r4, r4, r5
 8006804:	10a4      	asrs	r4, r4, #2
 8006806:	42a6      	cmp	r6, r4
 8006808:	d105      	bne.n	8006816 <__libc_init_array+0x2e>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006810:	4798      	blx	r3
 8006812:	3601      	adds	r6, #1
 8006814:	e7ee      	b.n	80067f4 <__libc_init_array+0xc>
 8006816:	f855 3b04 	ldr.w	r3, [r5], #4
 800681a:	4798      	blx	r3
 800681c:	3601      	adds	r6, #1
 800681e:	e7f2      	b.n	8006806 <__libc_init_array+0x1e>
 8006820:	0800a330 	.word	0x0800a330
 8006824:	0800a330 	.word	0x0800a330
 8006828:	0800a330 	.word	0x0800a330
 800682c:	0800a334 	.word	0x0800a334

08006830 <__retarget_lock_init_recursive>:
 8006830:	4770      	bx	lr

08006832 <__retarget_lock_acquire_recursive>:
 8006832:	4770      	bx	lr

08006834 <__retarget_lock_release_recursive>:
 8006834:	4770      	bx	lr

08006836 <memchr>:
 8006836:	4603      	mov	r3, r0
 8006838:	b510      	push	{r4, lr}
 800683a:	b2c9      	uxtb	r1, r1
 800683c:	4402      	add	r2, r0
 800683e:	4293      	cmp	r3, r2
 8006840:	4618      	mov	r0, r3
 8006842:	d101      	bne.n	8006848 <memchr+0x12>
 8006844:	2000      	movs	r0, #0
 8006846:	e003      	b.n	8006850 <memchr+0x1a>
 8006848:	7804      	ldrb	r4, [r0, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	428c      	cmp	r4, r1
 800684e:	d1f6      	bne.n	800683e <memchr+0x8>
 8006850:	bd10      	pop	{r4, pc}
	...

08006854 <nanf>:
 8006854:	4800      	ldr	r0, [pc, #0]	@ (8006858 <nanf+0x4>)
 8006856:	4770      	bx	lr
 8006858:	7fc00000 	.word	0x7fc00000

0800685c <quorem>:
 800685c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	6903      	ldr	r3, [r0, #16]
 8006862:	690c      	ldr	r4, [r1, #16]
 8006864:	4607      	mov	r7, r0
 8006866:	42a3      	cmp	r3, r4
 8006868:	db7e      	blt.n	8006968 <quorem+0x10c>
 800686a:	3c01      	subs	r4, #1
 800686c:	00a3      	lsls	r3, r4, #2
 800686e:	f100 0514 	add.w	r5, r0, #20
 8006872:	f101 0814 	add.w	r8, r1, #20
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006886:	3301      	adds	r3, #1
 8006888:	429a      	cmp	r2, r3
 800688a:	fbb2 f6f3 	udiv	r6, r2, r3
 800688e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006892:	d32e      	bcc.n	80068f2 <quorem+0x96>
 8006894:	f04f 0a00 	mov.w	sl, #0
 8006898:	46c4      	mov	ip, r8
 800689a:	46ae      	mov	lr, r5
 800689c:	46d3      	mov	fp, sl
 800689e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068a2:	b298      	uxth	r0, r3
 80068a4:	fb06 a000 	mla	r0, r6, r0, sl
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	0c02      	lsrs	r2, r0, #16
 80068ac:	fb06 2303 	mla	r3, r6, r3, r2
 80068b0:	f8de 2000 	ldr.w	r2, [lr]
 80068b4:	b280      	uxth	r0, r0
 80068b6:	b292      	uxth	r2, r2
 80068b8:	1a12      	subs	r2, r2, r0
 80068ba:	445a      	add	r2, fp
 80068bc:	f8de 0000 	ldr.w	r0, [lr]
 80068c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80068ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80068ce:	b292      	uxth	r2, r2
 80068d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80068d4:	45e1      	cmp	r9, ip
 80068d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80068da:	f84e 2b04 	str.w	r2, [lr], #4
 80068de:	d2de      	bcs.n	800689e <quorem+0x42>
 80068e0:	9b00      	ldr	r3, [sp, #0]
 80068e2:	58eb      	ldr	r3, [r5, r3]
 80068e4:	b92b      	cbnz	r3, 80068f2 <quorem+0x96>
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	3b04      	subs	r3, #4
 80068ea:	429d      	cmp	r5, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	d32f      	bcc.n	8006950 <quorem+0xf4>
 80068f0:	613c      	str	r4, [r7, #16]
 80068f2:	4638      	mov	r0, r7
 80068f4:	f001 f9ca 	bl	8007c8c <__mcmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	db25      	blt.n	8006948 <quorem+0xec>
 80068fc:	4629      	mov	r1, r5
 80068fe:	2000      	movs	r0, #0
 8006900:	f858 2b04 	ldr.w	r2, [r8], #4
 8006904:	f8d1 c000 	ldr.w	ip, [r1]
 8006908:	fa1f fe82 	uxth.w	lr, r2
 800690c:	fa1f f38c 	uxth.w	r3, ip
 8006910:	eba3 030e 	sub.w	r3, r3, lr
 8006914:	4403      	add	r3, r0
 8006916:	0c12      	lsrs	r2, r2, #16
 8006918:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800691c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006920:	b29b      	uxth	r3, r3
 8006922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006926:	45c1      	cmp	r9, r8
 8006928:	ea4f 4022 	mov.w	r0, r2, asr #16
 800692c:	f841 3b04 	str.w	r3, [r1], #4
 8006930:	d2e6      	bcs.n	8006900 <quorem+0xa4>
 8006932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800693a:	b922      	cbnz	r2, 8006946 <quorem+0xea>
 800693c:	3b04      	subs	r3, #4
 800693e:	429d      	cmp	r5, r3
 8006940:	461a      	mov	r2, r3
 8006942:	d30b      	bcc.n	800695c <quorem+0x100>
 8006944:	613c      	str	r4, [r7, #16]
 8006946:	3601      	adds	r6, #1
 8006948:	4630      	mov	r0, r6
 800694a:	b003      	add	sp, #12
 800694c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	3b04      	subs	r3, #4
 8006954:	2a00      	cmp	r2, #0
 8006956:	d1cb      	bne.n	80068f0 <quorem+0x94>
 8006958:	3c01      	subs	r4, #1
 800695a:	e7c6      	b.n	80068ea <quorem+0x8e>
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	3b04      	subs	r3, #4
 8006960:	2a00      	cmp	r2, #0
 8006962:	d1ef      	bne.n	8006944 <quorem+0xe8>
 8006964:	3c01      	subs	r4, #1
 8006966:	e7ea      	b.n	800693e <quorem+0xe2>
 8006968:	2000      	movs	r0, #0
 800696a:	e7ee      	b.n	800694a <quorem+0xee>
 800696c:	0000      	movs	r0, r0
	...

08006970 <_dtoa_r>:
 8006970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006974:	4614      	mov	r4, r2
 8006976:	461d      	mov	r5, r3
 8006978:	69c7      	ldr	r7, [r0, #28]
 800697a:	b097      	sub	sp, #92	@ 0x5c
 800697c:	4681      	mov	r9, r0
 800697e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006982:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006984:	b97f      	cbnz	r7, 80069a6 <_dtoa_r+0x36>
 8006986:	2010      	movs	r0, #16
 8006988:	f000 fe0e 	bl	80075a8 <malloc>
 800698c:	4602      	mov	r2, r0
 800698e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006992:	b920      	cbnz	r0, 800699e <_dtoa_r+0x2e>
 8006994:	21ef      	movs	r1, #239	@ 0xef
 8006996:	4bac      	ldr	r3, [pc, #688]	@ (8006c48 <_dtoa_r+0x2d8>)
 8006998:	48ac      	ldr	r0, [pc, #688]	@ (8006c4c <_dtoa_r+0x2dc>)
 800699a:	f002 fb99 	bl	80090d0 <__assert_func>
 800699e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80069a2:	6007      	str	r7, [r0, #0]
 80069a4:	60c7      	str	r7, [r0, #12]
 80069a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	b159      	cbz	r1, 80069c6 <_dtoa_r+0x56>
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	2301      	movs	r3, #1
 80069b2:	4093      	lsls	r3, r2
 80069b4:	604a      	str	r2, [r1, #4]
 80069b6:	608b      	str	r3, [r1, #8]
 80069b8:	4648      	mov	r0, r9
 80069ba:	f000 feeb 	bl	8007794 <_Bfree>
 80069be:	2200      	movs	r2, #0
 80069c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	1e2b      	subs	r3, r5, #0
 80069c8:	bfaf      	iteee	ge
 80069ca:	2300      	movge	r3, #0
 80069cc:	2201      	movlt	r2, #1
 80069ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80069d2:	9307      	strlt	r3, [sp, #28]
 80069d4:	bfa8      	it	ge
 80069d6:	6033      	strge	r3, [r6, #0]
 80069d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80069dc:	4b9c      	ldr	r3, [pc, #624]	@ (8006c50 <_dtoa_r+0x2e0>)
 80069de:	bfb8      	it	lt
 80069e0:	6032      	strlt	r2, [r6, #0]
 80069e2:	ea33 0308 	bics.w	r3, r3, r8
 80069e6:	d112      	bne.n	8006a0e <_dtoa_r+0x9e>
 80069e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80069f4:	4323      	orrs	r3, r4
 80069f6:	f000 855e 	beq.w	80074b6 <_dtoa_r+0xb46>
 80069fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c54 <_dtoa_r+0x2e4>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8560 	beq.w	80074c6 <_dtoa_r+0xb56>
 8006a06:	f10a 0303 	add.w	r3, sl, #3
 8006a0a:	f000 bd5a 	b.w	80074c2 <_dtoa_r+0xb52>
 8006a0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f7fa f877 	bl	8000b10 <__aeabi_dcmpeq>
 8006a22:	4607      	mov	r7, r0
 8006a24:	b158      	cbz	r0, 8006a3e <_dtoa_r+0xce>
 8006a26:	2301      	movs	r3, #1
 8006a28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a2e:	b113      	cbz	r3, 8006a36 <_dtoa_r+0xc6>
 8006a30:	4b89      	ldr	r3, [pc, #548]	@ (8006c58 <_dtoa_r+0x2e8>)
 8006a32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006c5c <_dtoa_r+0x2ec>
 8006a3a:	f000 bd44 	b.w	80074c6 <_dtoa_r+0xb56>
 8006a3e:	ab14      	add	r3, sp, #80	@ 0x50
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	ab15      	add	r3, sp, #84	@ 0x54
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4648      	mov	r0, r9
 8006a48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a4c:	f001 fa36 	bl	8007ebc <__d2b>
 8006a50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006a54:	9003      	str	r0, [sp, #12]
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	d078      	beq.n	8006b4c <_dtoa_r+0x1dc>
 8006a5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a70:	9712      	str	r7, [sp, #72]	@ 0x48
 8006a72:	4619      	mov	r1, r3
 8006a74:	2200      	movs	r2, #0
 8006a76:	4b7a      	ldr	r3, [pc, #488]	@ (8006c60 <_dtoa_r+0x2f0>)
 8006a78:	f7f9 fc2a 	bl	80002d0 <__aeabi_dsub>
 8006a7c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006c30 <_dtoa_r+0x2c0>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fddd 	bl	8000640 <__aeabi_dmul>
 8006a86:	a36c      	add	r3, pc, #432	@ (adr r3, 8006c38 <_dtoa_r+0x2c8>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fc22 	bl	80002d4 <__adddf3>
 8006a90:	4604      	mov	r4, r0
 8006a92:	4630      	mov	r0, r6
 8006a94:	460d      	mov	r5, r1
 8006a96:	f7f9 fd69 	bl	800056c <__aeabi_i2d>
 8006a9a:	a369      	add	r3, pc, #420	@ (adr r3, 8006c40 <_dtoa_r+0x2d0>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 fdce 	bl	8000640 <__aeabi_dmul>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f7f9 fc12 	bl	80002d4 <__adddf3>
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	f7fa f874 	bl	8000ba0 <__aeabi_d2iz>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4607      	mov	r7, r0
 8006abc:	2300      	movs	r3, #0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7fa f82f 	bl	8000b24 <__aeabi_dcmplt>
 8006ac6:	b140      	cbz	r0, 8006ada <_dtoa_r+0x16a>
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7f9 fd4f 	bl	800056c <__aeabi_i2d>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f7fa f81d 	bl	8000b10 <__aeabi_dcmpeq>
 8006ad6:	b900      	cbnz	r0, 8006ada <_dtoa_r+0x16a>
 8006ad8:	3f01      	subs	r7, #1
 8006ada:	2f16      	cmp	r7, #22
 8006adc:	d854      	bhi.n	8006b88 <_dtoa_r+0x218>
 8006ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ae2:	4b60      	ldr	r3, [pc, #384]	@ (8006c64 <_dtoa_r+0x2f4>)
 8006ae4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f7fa f81a 	bl	8000b24 <__aeabi_dcmplt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d04b      	beq.n	8006b8c <_dtoa_r+0x21c>
 8006af4:	2300      	movs	r3, #0
 8006af6:	3f01      	subs	r7, #1
 8006af8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006afa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006afc:	1b9b      	subs	r3, r3, r6
 8006afe:	1e5a      	subs	r2, r3, #1
 8006b00:	bf49      	itett	mi
 8006b02:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b06:	2300      	movpl	r3, #0
 8006b08:	9304      	strmi	r3, [sp, #16]
 8006b0a:	2300      	movmi	r3, #0
 8006b0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b0e:	bf54      	ite	pl
 8006b10:	9304      	strpl	r3, [sp, #16]
 8006b12:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006b14:	2f00      	cmp	r7, #0
 8006b16:	db3b      	blt.n	8006b90 <_dtoa_r+0x220>
 8006b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1a:	970e      	str	r7, [sp, #56]	@ 0x38
 8006b1c:	443b      	add	r3, r7
 8006b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b20:	2300      	movs	r3, #0
 8006b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b26:	2b09      	cmp	r3, #9
 8006b28:	d865      	bhi.n	8006bf6 <_dtoa_r+0x286>
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	bfc4      	itt	gt
 8006b2e:	3b04      	subgt	r3, #4
 8006b30:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006b32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b34:	bfc8      	it	gt
 8006b36:	2400      	movgt	r4, #0
 8006b38:	f1a3 0302 	sub.w	r3, r3, #2
 8006b3c:	bfd8      	it	le
 8006b3e:	2401      	movle	r4, #1
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d864      	bhi.n	8006c0e <_dtoa_r+0x29e>
 8006b44:	e8df f003 	tbb	[pc, r3]
 8006b48:	2c385553 	.word	0x2c385553
 8006b4c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006b50:	441e      	add	r6, r3
 8006b52:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	bfc1      	itttt	gt
 8006b5a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b5e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006b62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b6a:	bfd6      	itet	le
 8006b6c:	f1c3 0320 	rsble	r3, r3, #32
 8006b70:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b74:	fa04 f003 	lslle.w	r0, r4, r3
 8006b78:	f7f9 fce8 	bl	800054c <__aeabi_ui2d>
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b82:	3e01      	subs	r6, #1
 8006b84:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b86:	e774      	b.n	8006a72 <_dtoa_r+0x102>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7b5      	b.n	8006af8 <_dtoa_r+0x188>
 8006b8c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b8e:	e7b4      	b.n	8006afa <_dtoa_r+0x18a>
 8006b90:	9b04      	ldr	r3, [sp, #16]
 8006b92:	1bdb      	subs	r3, r3, r7
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	427b      	negs	r3, r7
 8006b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b9e:	e7c1      	b.n	8006b24 <_dtoa_r+0x1b4>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ba4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ba6:	eb07 0b03 	add.w	fp, r7, r3
 8006baa:	f10b 0301 	add.w	r3, fp, #1
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	9308      	str	r3, [sp, #32]
 8006bb2:	bfb8      	it	lt
 8006bb4:	2301      	movlt	r3, #1
 8006bb6:	e006      	b.n	8006bc6 <_dtoa_r+0x256>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dd28      	ble.n	8006c14 <_dtoa_r+0x2a4>
 8006bc2:	469b      	mov	fp, r3
 8006bc4:	9308      	str	r3, [sp, #32]
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	2204      	movs	r2, #4
 8006bca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006bce:	f102 0514 	add.w	r5, r2, #20
 8006bd2:	429d      	cmp	r5, r3
 8006bd4:	d926      	bls.n	8006c24 <_dtoa_r+0x2b4>
 8006bd6:	6041      	str	r1, [r0, #4]
 8006bd8:	4648      	mov	r0, r9
 8006bda:	f000 fd9b 	bl	8007714 <_Balloc>
 8006bde:	4682      	mov	sl, r0
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d143      	bne.n	8006c6c <_dtoa_r+0x2fc>
 8006be4:	4602      	mov	r2, r0
 8006be6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006bea:	4b1f      	ldr	r3, [pc, #124]	@ (8006c68 <_dtoa_r+0x2f8>)
 8006bec:	e6d4      	b.n	8006998 <_dtoa_r+0x28>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e7e3      	b.n	8006bba <_dtoa_r+0x24a>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e7d5      	b.n	8006ba2 <_dtoa_r+0x232>
 8006bf6:	2401      	movs	r4, #1
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bfc:	9320      	str	r3, [sp, #128]	@ 0x80
 8006bfe:	f04f 3bff 	mov.w	fp, #4294967295
 8006c02:	2200      	movs	r2, #0
 8006c04:	2312      	movs	r3, #18
 8006c06:	f8cd b020 	str.w	fp, [sp, #32]
 8006c0a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006c0c:	e7db      	b.n	8006bc6 <_dtoa_r+0x256>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c12:	e7f4      	b.n	8006bfe <_dtoa_r+0x28e>
 8006c14:	f04f 0b01 	mov.w	fp, #1
 8006c18:	465b      	mov	r3, fp
 8006c1a:	f8cd b020 	str.w	fp, [sp, #32]
 8006c1e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006c22:	e7d0      	b.n	8006bc6 <_dtoa_r+0x256>
 8006c24:	3101      	adds	r1, #1
 8006c26:	0052      	lsls	r2, r2, #1
 8006c28:	e7d1      	b.n	8006bce <_dtoa_r+0x25e>
 8006c2a:	bf00      	nop
 8006c2c:	f3af 8000 	nop.w
 8006c30:	636f4361 	.word	0x636f4361
 8006c34:	3fd287a7 	.word	0x3fd287a7
 8006c38:	8b60c8b3 	.word	0x8b60c8b3
 8006c3c:	3fc68a28 	.word	0x3fc68a28
 8006c40:	509f79fb 	.word	0x509f79fb
 8006c44:	3fd34413 	.word	0x3fd34413
 8006c48:	0800a049 	.word	0x0800a049
 8006c4c:	0800a060 	.word	0x0800a060
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	0800a045 	.word	0x0800a045
 8006c58:	0800a014 	.word	0x0800a014
 8006c5c:	0800a013 	.word	0x0800a013
 8006c60:	3ff80000 	.word	0x3ff80000
 8006c64:	0800a210 	.word	0x0800a210
 8006c68:	0800a0b8 	.word	0x0800a0b8
 8006c6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c70:	6018      	str	r0, [r3, #0]
 8006c72:	9b08      	ldr	r3, [sp, #32]
 8006c74:	2b0e      	cmp	r3, #14
 8006c76:	f200 80a1 	bhi.w	8006dbc <_dtoa_r+0x44c>
 8006c7a:	2c00      	cmp	r4, #0
 8006c7c:	f000 809e 	beq.w	8006dbc <_dtoa_r+0x44c>
 8006c80:	2f00      	cmp	r7, #0
 8006c82:	dd33      	ble.n	8006cec <_dtoa_r+0x37c>
 8006c84:	4b9c      	ldr	r3, [pc, #624]	@ (8006ef8 <_dtoa_r+0x588>)
 8006c86:	f007 020f 	and.w	r2, r7, #15
 8006c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c8e:	05f8      	lsls	r0, r7, #23
 8006c90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c94:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006c98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c9c:	d516      	bpl.n	8006ccc <_dtoa_r+0x35c>
 8006c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ca2:	4b96      	ldr	r3, [pc, #600]	@ (8006efc <_dtoa_r+0x58c>)
 8006ca4:	2603      	movs	r6, #3
 8006ca6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006caa:	f7f9 fdf3 	bl	8000894 <__aeabi_ddiv>
 8006cae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cb2:	f004 040f 	and.w	r4, r4, #15
 8006cb6:	4d91      	ldr	r5, [pc, #580]	@ (8006efc <_dtoa_r+0x58c>)
 8006cb8:	b954      	cbnz	r4, 8006cd0 <_dtoa_r+0x360>
 8006cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cc2:	f7f9 fde7 	bl	8000894 <__aeabi_ddiv>
 8006cc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cca:	e028      	b.n	8006d1e <_dtoa_r+0x3ae>
 8006ccc:	2602      	movs	r6, #2
 8006cce:	e7f2      	b.n	8006cb6 <_dtoa_r+0x346>
 8006cd0:	07e1      	lsls	r1, r4, #31
 8006cd2:	d508      	bpl.n	8006ce6 <_dtoa_r+0x376>
 8006cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cdc:	f7f9 fcb0 	bl	8000640 <__aeabi_dmul>
 8006ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	1064      	asrs	r4, r4, #1
 8006ce8:	3508      	adds	r5, #8
 8006cea:	e7e5      	b.n	8006cb8 <_dtoa_r+0x348>
 8006cec:	f000 80af 	beq.w	8006e4e <_dtoa_r+0x4de>
 8006cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cf4:	427c      	negs	r4, r7
 8006cf6:	4b80      	ldr	r3, [pc, #512]	@ (8006ef8 <_dtoa_r+0x588>)
 8006cf8:	f004 020f 	and.w	r2, r4, #15
 8006cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f7f9 fc9c 	bl	8000640 <__aeabi_dmul>
 8006d08:	2602      	movs	r6, #2
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d10:	4d7a      	ldr	r5, [pc, #488]	@ (8006efc <_dtoa_r+0x58c>)
 8006d12:	1124      	asrs	r4, r4, #4
 8006d14:	2c00      	cmp	r4, #0
 8006d16:	f040 808f 	bne.w	8006e38 <_dtoa_r+0x4c8>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1d3      	bne.n	8006cc6 <_dtoa_r+0x356>
 8006d1e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006d22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8094 	beq.w	8006e52 <_dtoa_r+0x4e2>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4b73      	ldr	r3, [pc, #460]	@ (8006f00 <_dtoa_r+0x590>)
 8006d32:	f7f9 fef7 	bl	8000b24 <__aeabi_dcmplt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f000 808b 	beq.w	8006e52 <_dtoa_r+0x4e2>
 8006d3c:	9b08      	ldr	r3, [sp, #32]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 8087 	beq.w	8006e52 <_dtoa_r+0x4e2>
 8006d44:	f1bb 0f00 	cmp.w	fp, #0
 8006d48:	dd34      	ble.n	8006db4 <_dtoa_r+0x444>
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4629      	mov	r1, r5
 8006d50:	4b6c      	ldr	r3, [pc, #432]	@ (8006f04 <_dtoa_r+0x594>)
 8006d52:	f7f9 fc75 	bl	8000640 <__aeabi_dmul>
 8006d56:	465c      	mov	r4, fp
 8006d58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d5c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006d60:	3601      	adds	r6, #1
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7f9 fc02 	bl	800056c <__aeabi_i2d>
 8006d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d6c:	f7f9 fc68 	bl	8000640 <__aeabi_dmul>
 8006d70:	2200      	movs	r2, #0
 8006d72:	4b65      	ldr	r3, [pc, #404]	@ (8006f08 <_dtoa_r+0x598>)
 8006d74:	f7f9 faae 	bl	80002d4 <__adddf3>
 8006d78:	4605      	mov	r5, r0
 8006d7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d7e:	2c00      	cmp	r4, #0
 8006d80:	d16a      	bne.n	8006e58 <_dtoa_r+0x4e8>
 8006d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b60      	ldr	r3, [pc, #384]	@ (8006f0c <_dtoa_r+0x59c>)
 8006d8a:	f7f9 faa1 	bl	80002d0 <__aeabi_dsub>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d96:	462a      	mov	r2, r5
 8006d98:	4633      	mov	r3, r6
 8006d9a:	f7f9 fee1 	bl	8000b60 <__aeabi_dcmpgt>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f040 8298 	bne.w	80072d4 <_dtoa_r+0x964>
 8006da4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006da8:	462a      	mov	r2, r5
 8006daa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006dae:	f7f9 feb9 	bl	8000b24 <__aeabi_dcmplt>
 8006db2:	bb38      	cbnz	r0, 8006e04 <_dtoa_r+0x494>
 8006db4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006db8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006dbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f2c0 8157 	blt.w	8007072 <_dtoa_r+0x702>
 8006dc4:	2f0e      	cmp	r7, #14
 8006dc6:	f300 8154 	bgt.w	8007072 <_dtoa_r+0x702>
 8006dca:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef8 <_dtoa_r+0x588>)
 8006dcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006dd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006dd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f280 80e5 	bge.w	8006faa <_dtoa_r+0x63a>
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f300 80e1 	bgt.w	8006faa <_dtoa_r+0x63a>
 8006de8:	d10c      	bne.n	8006e04 <_dtoa_r+0x494>
 8006dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dee:	2200      	movs	r2, #0
 8006df0:	4b46      	ldr	r3, [pc, #280]	@ (8006f0c <_dtoa_r+0x59c>)
 8006df2:	f7f9 fc25 	bl	8000640 <__aeabi_dmul>
 8006df6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dfa:	f7f9 fea7 	bl	8000b4c <__aeabi_dcmpge>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f000 8266 	beq.w	80072d0 <_dtoa_r+0x960>
 8006e04:	2400      	movs	r4, #0
 8006e06:	4625      	mov	r5, r4
 8006e08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e0a:	4656      	mov	r6, sl
 8006e0c:	ea6f 0803 	mvn.w	r8, r3
 8006e10:	2700      	movs	r7, #0
 8006e12:	4621      	mov	r1, r4
 8006e14:	4648      	mov	r0, r9
 8006e16:	f000 fcbd 	bl	8007794 <_Bfree>
 8006e1a:	2d00      	cmp	r5, #0
 8006e1c:	f000 80bd 	beq.w	8006f9a <_dtoa_r+0x62a>
 8006e20:	b12f      	cbz	r7, 8006e2e <_dtoa_r+0x4be>
 8006e22:	42af      	cmp	r7, r5
 8006e24:	d003      	beq.n	8006e2e <_dtoa_r+0x4be>
 8006e26:	4639      	mov	r1, r7
 8006e28:	4648      	mov	r0, r9
 8006e2a:	f000 fcb3 	bl	8007794 <_Bfree>
 8006e2e:	4629      	mov	r1, r5
 8006e30:	4648      	mov	r0, r9
 8006e32:	f000 fcaf 	bl	8007794 <_Bfree>
 8006e36:	e0b0      	b.n	8006f9a <_dtoa_r+0x62a>
 8006e38:	07e2      	lsls	r2, r4, #31
 8006e3a:	d505      	bpl.n	8006e48 <_dtoa_r+0x4d8>
 8006e3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e40:	f7f9 fbfe 	bl	8000640 <__aeabi_dmul>
 8006e44:	2301      	movs	r3, #1
 8006e46:	3601      	adds	r6, #1
 8006e48:	1064      	asrs	r4, r4, #1
 8006e4a:	3508      	adds	r5, #8
 8006e4c:	e762      	b.n	8006d14 <_dtoa_r+0x3a4>
 8006e4e:	2602      	movs	r6, #2
 8006e50:	e765      	b.n	8006d1e <_dtoa_r+0x3ae>
 8006e52:	46b8      	mov	r8, r7
 8006e54:	9c08      	ldr	r4, [sp, #32]
 8006e56:	e784      	b.n	8006d62 <_dtoa_r+0x3f2>
 8006e58:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <_dtoa_r+0x588>)
 8006e5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e64:	4454      	add	r4, sl
 8006e66:	2900      	cmp	r1, #0
 8006e68:	d054      	beq.n	8006f14 <_dtoa_r+0x5a4>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	4928      	ldr	r1, [pc, #160]	@ (8006f10 <_dtoa_r+0x5a0>)
 8006e6e:	f7f9 fd11 	bl	8000894 <__aeabi_ddiv>
 8006e72:	4633      	mov	r3, r6
 8006e74:	462a      	mov	r2, r5
 8006e76:	f7f9 fa2b 	bl	80002d0 <__aeabi_dsub>
 8006e7a:	4656      	mov	r6, sl
 8006e7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e84:	f7f9 fe8c 	bl	8000ba0 <__aeabi_d2iz>
 8006e88:	4605      	mov	r5, r0
 8006e8a:	f7f9 fb6f 	bl	800056c <__aeabi_i2d>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e96:	f7f9 fa1b 	bl	80002d0 <__aeabi_dsub>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	3530      	adds	r5, #48	@ 0x30
 8006ea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ea8:	f806 5b01 	strb.w	r5, [r6], #1
 8006eac:	f7f9 fe3a 	bl	8000b24 <__aeabi_dcmplt>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d172      	bne.n	8006f9a <_dtoa_r+0x62a>
 8006eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb8:	2000      	movs	r0, #0
 8006eba:	4911      	ldr	r1, [pc, #68]	@ (8006f00 <_dtoa_r+0x590>)
 8006ebc:	f7f9 fa08 	bl	80002d0 <__aeabi_dsub>
 8006ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ec4:	f7f9 fe2e 	bl	8000b24 <__aeabi_dcmplt>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f040 80b4 	bne.w	8007036 <_dtoa_r+0x6c6>
 8006ece:	42a6      	cmp	r6, r4
 8006ed0:	f43f af70 	beq.w	8006db4 <_dtoa_r+0x444>
 8006ed4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4b0a      	ldr	r3, [pc, #40]	@ (8006f04 <_dtoa_r+0x594>)
 8006edc:	f7f9 fbb0 	bl	8000640 <__aeabi_dmul>
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eea:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <_dtoa_r+0x594>)
 8006eec:	f7f9 fba8 	bl	8000640 <__aeabi_dmul>
 8006ef0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ef4:	e7c4      	b.n	8006e80 <_dtoa_r+0x510>
 8006ef6:	bf00      	nop
 8006ef8:	0800a210 	.word	0x0800a210
 8006efc:	0800a1e8 	.word	0x0800a1e8
 8006f00:	3ff00000 	.word	0x3ff00000
 8006f04:	40240000 	.word	0x40240000
 8006f08:	401c0000 	.word	0x401c0000
 8006f0c:	40140000 	.word	0x40140000
 8006f10:	3fe00000 	.word	0x3fe00000
 8006f14:	4631      	mov	r1, r6
 8006f16:	4628      	mov	r0, r5
 8006f18:	f7f9 fb92 	bl	8000640 <__aeabi_dmul>
 8006f1c:	4656      	mov	r6, sl
 8006f1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f22:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f28:	f7f9 fe3a 	bl	8000ba0 <__aeabi_d2iz>
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	f7f9 fb1d 	bl	800056c <__aeabi_i2d>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f3a:	f7f9 f9c9 	bl	80002d0 <__aeabi_dsub>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	3530      	adds	r5, #48	@ 0x30
 8006f44:	f806 5b01 	strb.w	r5, [r6], #1
 8006f48:	42a6      	cmp	r6, r4
 8006f4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	d124      	bne.n	8006f9e <_dtoa_r+0x62e>
 8006f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f58:	4bae      	ldr	r3, [pc, #696]	@ (8007214 <_dtoa_r+0x8a4>)
 8006f5a:	f7f9 f9bb 	bl	80002d4 <__adddf3>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f66:	f7f9 fdfb 	bl	8000b60 <__aeabi_dcmpgt>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d163      	bne.n	8007036 <_dtoa_r+0x6c6>
 8006f6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f72:	2000      	movs	r0, #0
 8006f74:	49a7      	ldr	r1, [pc, #668]	@ (8007214 <_dtoa_r+0x8a4>)
 8006f76:	f7f9 f9ab 	bl	80002d0 <__aeabi_dsub>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f82:	f7f9 fdcf 	bl	8000b24 <__aeabi_dcmplt>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f43f af14 	beq.w	8006db4 <_dtoa_r+0x444>
 8006f8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f8e:	1e73      	subs	r3, r6, #1
 8006f90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f96:	2b30      	cmp	r3, #48	@ 0x30
 8006f98:	d0f8      	beq.n	8006f8c <_dtoa_r+0x61c>
 8006f9a:	4647      	mov	r7, r8
 8006f9c:	e03b      	b.n	8007016 <_dtoa_r+0x6a6>
 8006f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8007218 <_dtoa_r+0x8a8>)
 8006fa0:	f7f9 fb4e 	bl	8000640 <__aeabi_dmul>
 8006fa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fa8:	e7bc      	b.n	8006f24 <_dtoa_r+0x5b4>
 8006faa:	4656      	mov	r6, sl
 8006fac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 fc6c 	bl	8000894 <__aeabi_ddiv>
 8006fbc:	f7f9 fdf0 	bl	8000ba0 <__aeabi_d2iz>
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	f7f9 fad3 	bl	800056c <__aeabi_i2d>
 8006fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fca:	f7f9 fb39 	bl	8000640 <__aeabi_dmul>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f7f9 f97b 	bl	80002d0 <__aeabi_dsub>
 8006fda:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006fde:	9d08      	ldr	r5, [sp, #32]
 8006fe0:	f806 4b01 	strb.w	r4, [r6], #1
 8006fe4:	eba6 040a 	sub.w	r4, r6, sl
 8006fe8:	42a5      	cmp	r5, r4
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	d133      	bne.n	8007058 <_dtoa_r+0x6e8>
 8006ff0:	f7f9 f970 	bl	80002d4 <__adddf3>
 8006ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	f7f9 fdb0 	bl	8000b60 <__aeabi_dcmpgt>
 8007000:	b9c0      	cbnz	r0, 8007034 <_dtoa_r+0x6c4>
 8007002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 fd81 	bl	8000b10 <__aeabi_dcmpeq>
 800700e:	b110      	cbz	r0, 8007016 <_dtoa_r+0x6a6>
 8007010:	f018 0f01 	tst.w	r8, #1
 8007014:	d10e      	bne.n	8007034 <_dtoa_r+0x6c4>
 8007016:	4648      	mov	r0, r9
 8007018:	9903      	ldr	r1, [sp, #12]
 800701a:	f000 fbbb 	bl	8007794 <_Bfree>
 800701e:	2300      	movs	r3, #0
 8007020:	7033      	strb	r3, [r6, #0]
 8007022:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007024:	3701      	adds	r7, #1
 8007026:	601f      	str	r7, [r3, #0]
 8007028:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 824b 	beq.w	80074c6 <_dtoa_r+0xb56>
 8007030:	601e      	str	r6, [r3, #0]
 8007032:	e248      	b.n	80074c6 <_dtoa_r+0xb56>
 8007034:	46b8      	mov	r8, r7
 8007036:	4633      	mov	r3, r6
 8007038:	461e      	mov	r6, r3
 800703a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703e:	2a39      	cmp	r2, #57	@ 0x39
 8007040:	d106      	bne.n	8007050 <_dtoa_r+0x6e0>
 8007042:	459a      	cmp	sl, r3
 8007044:	d1f8      	bne.n	8007038 <_dtoa_r+0x6c8>
 8007046:	2230      	movs	r2, #48	@ 0x30
 8007048:	f108 0801 	add.w	r8, r8, #1
 800704c:	f88a 2000 	strb.w	r2, [sl]
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	3201      	adds	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e7a0      	b.n	8006f9a <_dtoa_r+0x62a>
 8007058:	2200      	movs	r2, #0
 800705a:	4b6f      	ldr	r3, [pc, #444]	@ (8007218 <_dtoa_r+0x8a8>)
 800705c:	f7f9 faf0 	bl	8000640 <__aeabi_dmul>
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	f7f9 fd52 	bl	8000b10 <__aeabi_dcmpeq>
 800706c:	2800      	cmp	r0, #0
 800706e:	d09f      	beq.n	8006fb0 <_dtoa_r+0x640>
 8007070:	e7d1      	b.n	8007016 <_dtoa_r+0x6a6>
 8007072:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007074:	2a00      	cmp	r2, #0
 8007076:	f000 80ea 	beq.w	800724e <_dtoa_r+0x8de>
 800707a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800707c:	2a01      	cmp	r2, #1
 800707e:	f300 80cd 	bgt.w	800721c <_dtoa_r+0x8ac>
 8007082:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007084:	2a00      	cmp	r2, #0
 8007086:	f000 80c1 	beq.w	800720c <_dtoa_r+0x89c>
 800708a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800708e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007090:	9e04      	ldr	r6, [sp, #16]
 8007092:	9a04      	ldr	r2, [sp, #16]
 8007094:	2101      	movs	r1, #1
 8007096:	441a      	add	r2, r3
 8007098:	9204      	str	r2, [sp, #16]
 800709a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800709c:	4648      	mov	r0, r9
 800709e:	441a      	add	r2, r3
 80070a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070a2:	f000 fc75 	bl	8007990 <__i2b>
 80070a6:	4605      	mov	r5, r0
 80070a8:	b166      	cbz	r6, 80070c4 <_dtoa_r+0x754>
 80070aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dd09      	ble.n	80070c4 <_dtoa_r+0x754>
 80070b0:	42b3      	cmp	r3, r6
 80070b2:	bfa8      	it	ge
 80070b4:	4633      	movge	r3, r6
 80070b6:	9a04      	ldr	r2, [sp, #16]
 80070b8:	1af6      	subs	r6, r6, r3
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	9204      	str	r2, [sp, #16]
 80070be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c6:	b30b      	cbz	r3, 800710c <_dtoa_r+0x79c>
 80070c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 80c6 	beq.w	800725c <_dtoa_r+0x8ec>
 80070d0:	2c00      	cmp	r4, #0
 80070d2:	f000 80c0 	beq.w	8007256 <_dtoa_r+0x8e6>
 80070d6:	4629      	mov	r1, r5
 80070d8:	4622      	mov	r2, r4
 80070da:	4648      	mov	r0, r9
 80070dc:	f000 fd10 	bl	8007b00 <__pow5mult>
 80070e0:	9a03      	ldr	r2, [sp, #12]
 80070e2:	4601      	mov	r1, r0
 80070e4:	4605      	mov	r5, r0
 80070e6:	4648      	mov	r0, r9
 80070e8:	f000 fc68 	bl	80079bc <__multiply>
 80070ec:	9903      	ldr	r1, [sp, #12]
 80070ee:	4680      	mov	r8, r0
 80070f0:	4648      	mov	r0, r9
 80070f2:	f000 fb4f 	bl	8007794 <_Bfree>
 80070f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070f8:	1b1b      	subs	r3, r3, r4
 80070fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80070fc:	f000 80b1 	beq.w	8007262 <_dtoa_r+0x8f2>
 8007100:	4641      	mov	r1, r8
 8007102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007104:	4648      	mov	r0, r9
 8007106:	f000 fcfb 	bl	8007b00 <__pow5mult>
 800710a:	9003      	str	r0, [sp, #12]
 800710c:	2101      	movs	r1, #1
 800710e:	4648      	mov	r0, r9
 8007110:	f000 fc3e 	bl	8007990 <__i2b>
 8007114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007116:	4604      	mov	r4, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 81d8 	beq.w	80074ce <_dtoa_r+0xb5e>
 800711e:	461a      	mov	r2, r3
 8007120:	4601      	mov	r1, r0
 8007122:	4648      	mov	r0, r9
 8007124:	f000 fcec 	bl	8007b00 <__pow5mult>
 8007128:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800712a:	4604      	mov	r4, r0
 800712c:	2b01      	cmp	r3, #1
 800712e:	f300 809f 	bgt.w	8007270 <_dtoa_r+0x900>
 8007132:	9b06      	ldr	r3, [sp, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 8097 	bne.w	8007268 <_dtoa_r+0x8f8>
 800713a:	9b07      	ldr	r3, [sp, #28]
 800713c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8093 	bne.w	800726c <_dtoa_r+0x8fc>
 8007146:	9b07      	ldr	r3, [sp, #28]
 8007148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	051b      	lsls	r3, r3, #20
 8007150:	b133      	cbz	r3, 8007160 <_dtoa_r+0x7f0>
 8007152:	9b04      	ldr	r3, [sp, #16]
 8007154:	3301      	adds	r3, #1
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715a:	3301      	adds	r3, #1
 800715c:	9309      	str	r3, [sp, #36]	@ 0x24
 800715e:	2301      	movs	r3, #1
 8007160:	930a      	str	r3, [sp, #40]	@ 0x28
 8007162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 81b8 	beq.w	80074da <_dtoa_r+0xb6a>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007170:	6918      	ldr	r0, [r3, #16]
 8007172:	f000 fbc1 	bl	80078f8 <__hi0bits>
 8007176:	f1c0 0020 	rsb	r0, r0, #32
 800717a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717c:	4418      	add	r0, r3
 800717e:	f010 001f 	ands.w	r0, r0, #31
 8007182:	f000 8082 	beq.w	800728a <_dtoa_r+0x91a>
 8007186:	f1c0 0320 	rsb	r3, r0, #32
 800718a:	2b04      	cmp	r3, #4
 800718c:	dd73      	ble.n	8007276 <_dtoa_r+0x906>
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	f1c0 001c 	rsb	r0, r0, #28
 8007194:	4403      	add	r3, r0
 8007196:	9304      	str	r3, [sp, #16]
 8007198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719a:	4406      	add	r6, r0
 800719c:	4403      	add	r3, r0
 800719e:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dd05      	ble.n	80071b2 <_dtoa_r+0x842>
 80071a6:	461a      	mov	r2, r3
 80071a8:	4648      	mov	r0, r9
 80071aa:	9903      	ldr	r1, [sp, #12]
 80071ac:	f000 fd02 	bl	8007bb4 <__lshift>
 80071b0:	9003      	str	r0, [sp, #12]
 80071b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dd05      	ble.n	80071c4 <_dtoa_r+0x854>
 80071b8:	4621      	mov	r1, r4
 80071ba:	461a      	mov	r2, r3
 80071bc:	4648      	mov	r0, r9
 80071be:	f000 fcf9 	bl	8007bb4 <__lshift>
 80071c2:	4604      	mov	r4, r0
 80071c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d061      	beq.n	800728e <_dtoa_r+0x91e>
 80071ca:	4621      	mov	r1, r4
 80071cc:	9803      	ldr	r0, [sp, #12]
 80071ce:	f000 fd5d 	bl	8007c8c <__mcmp>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	da5b      	bge.n	800728e <_dtoa_r+0x91e>
 80071d6:	2300      	movs	r3, #0
 80071d8:	220a      	movs	r2, #10
 80071da:	4648      	mov	r0, r9
 80071dc:	9903      	ldr	r1, [sp, #12]
 80071de:	f000 fafb 	bl	80077d8 <__multadd>
 80071e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80071e8:	9003      	str	r0, [sp, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8177 	beq.w	80074de <_dtoa_r+0xb6e>
 80071f0:	4629      	mov	r1, r5
 80071f2:	2300      	movs	r3, #0
 80071f4:	220a      	movs	r2, #10
 80071f6:	4648      	mov	r0, r9
 80071f8:	f000 faee 	bl	80077d8 <__multadd>
 80071fc:	f1bb 0f00 	cmp.w	fp, #0
 8007200:	4605      	mov	r5, r0
 8007202:	dc6f      	bgt.n	80072e4 <_dtoa_r+0x974>
 8007204:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007206:	2b02      	cmp	r3, #2
 8007208:	dc49      	bgt.n	800729e <_dtoa_r+0x92e>
 800720a:	e06b      	b.n	80072e4 <_dtoa_r+0x974>
 800720c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800720e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007212:	e73c      	b.n	800708e <_dtoa_r+0x71e>
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	40240000 	.word	0x40240000
 800721c:	9b08      	ldr	r3, [sp, #32]
 800721e:	1e5c      	subs	r4, r3, #1
 8007220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007222:	42a3      	cmp	r3, r4
 8007224:	db09      	blt.n	800723a <_dtoa_r+0x8ca>
 8007226:	1b1c      	subs	r4, r3, r4
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	2b00      	cmp	r3, #0
 800722c:	f6bf af30 	bge.w	8007090 <_dtoa_r+0x720>
 8007230:	9b04      	ldr	r3, [sp, #16]
 8007232:	9a08      	ldr	r2, [sp, #32]
 8007234:	1a9e      	subs	r6, r3, r2
 8007236:	2300      	movs	r3, #0
 8007238:	e72b      	b.n	8007092 <_dtoa_r+0x722>
 800723a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800723c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800723e:	1ae3      	subs	r3, r4, r3
 8007240:	441a      	add	r2, r3
 8007242:	940a      	str	r4, [sp, #40]	@ 0x28
 8007244:	9e04      	ldr	r6, [sp, #16]
 8007246:	2400      	movs	r4, #0
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	920e      	str	r2, [sp, #56]	@ 0x38
 800724c:	e721      	b.n	8007092 <_dtoa_r+0x722>
 800724e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007250:	9e04      	ldr	r6, [sp, #16]
 8007252:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007254:	e728      	b.n	80070a8 <_dtoa_r+0x738>
 8007256:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800725a:	e751      	b.n	8007100 <_dtoa_r+0x790>
 800725c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800725e:	9903      	ldr	r1, [sp, #12]
 8007260:	e750      	b.n	8007104 <_dtoa_r+0x794>
 8007262:	f8cd 800c 	str.w	r8, [sp, #12]
 8007266:	e751      	b.n	800710c <_dtoa_r+0x79c>
 8007268:	2300      	movs	r3, #0
 800726a:	e779      	b.n	8007160 <_dtoa_r+0x7f0>
 800726c:	9b06      	ldr	r3, [sp, #24]
 800726e:	e777      	b.n	8007160 <_dtoa_r+0x7f0>
 8007270:	2300      	movs	r3, #0
 8007272:	930a      	str	r3, [sp, #40]	@ 0x28
 8007274:	e779      	b.n	800716a <_dtoa_r+0x7fa>
 8007276:	d093      	beq.n	80071a0 <_dtoa_r+0x830>
 8007278:	9a04      	ldr	r2, [sp, #16]
 800727a:	331c      	adds	r3, #28
 800727c:	441a      	add	r2, r3
 800727e:	9204      	str	r2, [sp, #16]
 8007280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007282:	441e      	add	r6, r3
 8007284:	441a      	add	r2, r3
 8007286:	9209      	str	r2, [sp, #36]	@ 0x24
 8007288:	e78a      	b.n	80071a0 <_dtoa_r+0x830>
 800728a:	4603      	mov	r3, r0
 800728c:	e7f4      	b.n	8007278 <_dtoa_r+0x908>
 800728e:	9b08      	ldr	r3, [sp, #32]
 8007290:	46b8      	mov	r8, r7
 8007292:	2b00      	cmp	r3, #0
 8007294:	dc20      	bgt.n	80072d8 <_dtoa_r+0x968>
 8007296:	469b      	mov	fp, r3
 8007298:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800729a:	2b02      	cmp	r3, #2
 800729c:	dd1e      	ble.n	80072dc <_dtoa_r+0x96c>
 800729e:	f1bb 0f00 	cmp.w	fp, #0
 80072a2:	f47f adb1 	bne.w	8006e08 <_dtoa_r+0x498>
 80072a6:	4621      	mov	r1, r4
 80072a8:	465b      	mov	r3, fp
 80072aa:	2205      	movs	r2, #5
 80072ac:	4648      	mov	r0, r9
 80072ae:	f000 fa93 	bl	80077d8 <__multadd>
 80072b2:	4601      	mov	r1, r0
 80072b4:	4604      	mov	r4, r0
 80072b6:	9803      	ldr	r0, [sp, #12]
 80072b8:	f000 fce8 	bl	8007c8c <__mcmp>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f77f ada3 	ble.w	8006e08 <_dtoa_r+0x498>
 80072c2:	4656      	mov	r6, sl
 80072c4:	2331      	movs	r3, #49	@ 0x31
 80072c6:	f108 0801 	add.w	r8, r8, #1
 80072ca:	f806 3b01 	strb.w	r3, [r6], #1
 80072ce:	e59f      	b.n	8006e10 <_dtoa_r+0x4a0>
 80072d0:	46b8      	mov	r8, r7
 80072d2:	9c08      	ldr	r4, [sp, #32]
 80072d4:	4625      	mov	r5, r4
 80072d6:	e7f4      	b.n	80072c2 <_dtoa_r+0x952>
 80072d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80072dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8101 	beq.w	80074e6 <_dtoa_r+0xb76>
 80072e4:	2e00      	cmp	r6, #0
 80072e6:	dd05      	ble.n	80072f4 <_dtoa_r+0x984>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4632      	mov	r2, r6
 80072ec:	4648      	mov	r0, r9
 80072ee:	f000 fc61 	bl	8007bb4 <__lshift>
 80072f2:	4605      	mov	r5, r0
 80072f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d05c      	beq.n	80073b4 <_dtoa_r+0xa44>
 80072fa:	4648      	mov	r0, r9
 80072fc:	6869      	ldr	r1, [r5, #4]
 80072fe:	f000 fa09 	bl	8007714 <_Balloc>
 8007302:	4606      	mov	r6, r0
 8007304:	b928      	cbnz	r0, 8007312 <_dtoa_r+0x9a2>
 8007306:	4602      	mov	r2, r0
 8007308:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800730c:	4b80      	ldr	r3, [pc, #512]	@ (8007510 <_dtoa_r+0xba0>)
 800730e:	f7ff bb43 	b.w	8006998 <_dtoa_r+0x28>
 8007312:	692a      	ldr	r2, [r5, #16]
 8007314:	f105 010c 	add.w	r1, r5, #12
 8007318:	3202      	adds	r2, #2
 800731a:	0092      	lsls	r2, r2, #2
 800731c:	300c      	adds	r0, #12
 800731e:	f001 fec3 	bl	80090a8 <memcpy>
 8007322:	2201      	movs	r2, #1
 8007324:	4631      	mov	r1, r6
 8007326:	4648      	mov	r0, r9
 8007328:	f000 fc44 	bl	8007bb4 <__lshift>
 800732c:	462f      	mov	r7, r5
 800732e:	4605      	mov	r5, r0
 8007330:	f10a 0301 	add.w	r3, sl, #1
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	eb0a 030b 	add.w	r3, sl, fp
 800733a:	930a      	str	r3, [sp, #40]	@ 0x28
 800733c:	9b06      	ldr	r3, [sp, #24]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	9309      	str	r3, [sp, #36]	@ 0x24
 8007344:	9b04      	ldr	r3, [sp, #16]
 8007346:	4621      	mov	r1, r4
 8007348:	9803      	ldr	r0, [sp, #12]
 800734a:	f103 3bff 	add.w	fp, r3, #4294967295
 800734e:	f7ff fa85 	bl	800685c <quorem>
 8007352:	4603      	mov	r3, r0
 8007354:	4639      	mov	r1, r7
 8007356:	3330      	adds	r3, #48	@ 0x30
 8007358:	9006      	str	r0, [sp, #24]
 800735a:	9803      	ldr	r0, [sp, #12]
 800735c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800735e:	f000 fc95 	bl	8007c8c <__mcmp>
 8007362:	462a      	mov	r2, r5
 8007364:	9008      	str	r0, [sp, #32]
 8007366:	4621      	mov	r1, r4
 8007368:	4648      	mov	r0, r9
 800736a:	f000 fcab 	bl	8007cc4 <__mdiff>
 800736e:	68c2      	ldr	r2, [r0, #12]
 8007370:	4606      	mov	r6, r0
 8007372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007374:	bb02      	cbnz	r2, 80073b8 <_dtoa_r+0xa48>
 8007376:	4601      	mov	r1, r0
 8007378:	9803      	ldr	r0, [sp, #12]
 800737a:	f000 fc87 	bl	8007c8c <__mcmp>
 800737e:	4602      	mov	r2, r0
 8007380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007382:	4631      	mov	r1, r6
 8007384:	4648      	mov	r0, r9
 8007386:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800738a:	f000 fa03 	bl	8007794 <_Bfree>
 800738e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007390:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007392:	9e04      	ldr	r6, [sp, #16]
 8007394:	ea42 0103 	orr.w	r1, r2, r3
 8007398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739a:	4319      	orrs	r1, r3
 800739c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800739e:	d10d      	bne.n	80073bc <_dtoa_r+0xa4c>
 80073a0:	2b39      	cmp	r3, #57	@ 0x39
 80073a2:	d027      	beq.n	80073f4 <_dtoa_r+0xa84>
 80073a4:	9a08      	ldr	r2, [sp, #32]
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	dd01      	ble.n	80073ae <_dtoa_r+0xa3e>
 80073aa:	9b06      	ldr	r3, [sp, #24]
 80073ac:	3331      	adds	r3, #49	@ 0x31
 80073ae:	f88b 3000 	strb.w	r3, [fp]
 80073b2:	e52e      	b.n	8006e12 <_dtoa_r+0x4a2>
 80073b4:	4628      	mov	r0, r5
 80073b6:	e7b9      	b.n	800732c <_dtoa_r+0x9bc>
 80073b8:	2201      	movs	r2, #1
 80073ba:	e7e2      	b.n	8007382 <_dtoa_r+0xa12>
 80073bc:	9908      	ldr	r1, [sp, #32]
 80073be:	2900      	cmp	r1, #0
 80073c0:	db04      	blt.n	80073cc <_dtoa_r+0xa5c>
 80073c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80073c4:	4301      	orrs	r1, r0
 80073c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073c8:	4301      	orrs	r1, r0
 80073ca:	d120      	bne.n	800740e <_dtoa_r+0xa9e>
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	ddee      	ble.n	80073ae <_dtoa_r+0xa3e>
 80073d0:	2201      	movs	r2, #1
 80073d2:	9903      	ldr	r1, [sp, #12]
 80073d4:	4648      	mov	r0, r9
 80073d6:	9304      	str	r3, [sp, #16]
 80073d8:	f000 fbec 	bl	8007bb4 <__lshift>
 80073dc:	4621      	mov	r1, r4
 80073de:	9003      	str	r0, [sp, #12]
 80073e0:	f000 fc54 	bl	8007c8c <__mcmp>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	dc02      	bgt.n	80073f0 <_dtoa_r+0xa80>
 80073ea:	d1e0      	bne.n	80073ae <_dtoa_r+0xa3e>
 80073ec:	07da      	lsls	r2, r3, #31
 80073ee:	d5de      	bpl.n	80073ae <_dtoa_r+0xa3e>
 80073f0:	2b39      	cmp	r3, #57	@ 0x39
 80073f2:	d1da      	bne.n	80073aa <_dtoa_r+0xa3a>
 80073f4:	2339      	movs	r3, #57	@ 0x39
 80073f6:	f88b 3000 	strb.w	r3, [fp]
 80073fa:	4633      	mov	r3, r6
 80073fc:	461e      	mov	r6, r3
 80073fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007402:	3b01      	subs	r3, #1
 8007404:	2a39      	cmp	r2, #57	@ 0x39
 8007406:	d04e      	beq.n	80074a6 <_dtoa_r+0xb36>
 8007408:	3201      	adds	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	e501      	b.n	8006e12 <_dtoa_r+0x4a2>
 800740e:	2a00      	cmp	r2, #0
 8007410:	dd03      	ble.n	800741a <_dtoa_r+0xaaa>
 8007412:	2b39      	cmp	r3, #57	@ 0x39
 8007414:	d0ee      	beq.n	80073f4 <_dtoa_r+0xa84>
 8007416:	3301      	adds	r3, #1
 8007418:	e7c9      	b.n	80073ae <_dtoa_r+0xa3e>
 800741a:	9a04      	ldr	r2, [sp, #16]
 800741c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800741e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007422:	428a      	cmp	r2, r1
 8007424:	d028      	beq.n	8007478 <_dtoa_r+0xb08>
 8007426:	2300      	movs	r3, #0
 8007428:	220a      	movs	r2, #10
 800742a:	9903      	ldr	r1, [sp, #12]
 800742c:	4648      	mov	r0, r9
 800742e:	f000 f9d3 	bl	80077d8 <__multadd>
 8007432:	42af      	cmp	r7, r5
 8007434:	9003      	str	r0, [sp, #12]
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	f04f 020a 	mov.w	r2, #10
 800743e:	4639      	mov	r1, r7
 8007440:	4648      	mov	r0, r9
 8007442:	d107      	bne.n	8007454 <_dtoa_r+0xae4>
 8007444:	f000 f9c8 	bl	80077d8 <__multadd>
 8007448:	4607      	mov	r7, r0
 800744a:	4605      	mov	r5, r0
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	3301      	adds	r3, #1
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	e777      	b.n	8007344 <_dtoa_r+0x9d4>
 8007454:	f000 f9c0 	bl	80077d8 <__multadd>
 8007458:	4629      	mov	r1, r5
 800745a:	4607      	mov	r7, r0
 800745c:	2300      	movs	r3, #0
 800745e:	220a      	movs	r2, #10
 8007460:	4648      	mov	r0, r9
 8007462:	f000 f9b9 	bl	80077d8 <__multadd>
 8007466:	4605      	mov	r5, r0
 8007468:	e7f0      	b.n	800744c <_dtoa_r+0xadc>
 800746a:	f1bb 0f00 	cmp.w	fp, #0
 800746e:	bfcc      	ite	gt
 8007470:	465e      	movgt	r6, fp
 8007472:	2601      	movle	r6, #1
 8007474:	2700      	movs	r7, #0
 8007476:	4456      	add	r6, sl
 8007478:	2201      	movs	r2, #1
 800747a:	9903      	ldr	r1, [sp, #12]
 800747c:	4648      	mov	r0, r9
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	f000 fb98 	bl	8007bb4 <__lshift>
 8007484:	4621      	mov	r1, r4
 8007486:	9003      	str	r0, [sp, #12]
 8007488:	f000 fc00 	bl	8007c8c <__mcmp>
 800748c:	2800      	cmp	r0, #0
 800748e:	dcb4      	bgt.n	80073fa <_dtoa_r+0xa8a>
 8007490:	d102      	bne.n	8007498 <_dtoa_r+0xb28>
 8007492:	9b04      	ldr	r3, [sp, #16]
 8007494:	07db      	lsls	r3, r3, #31
 8007496:	d4b0      	bmi.n	80073fa <_dtoa_r+0xa8a>
 8007498:	4633      	mov	r3, r6
 800749a:	461e      	mov	r6, r3
 800749c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074a0:	2a30      	cmp	r2, #48	@ 0x30
 80074a2:	d0fa      	beq.n	800749a <_dtoa_r+0xb2a>
 80074a4:	e4b5      	b.n	8006e12 <_dtoa_r+0x4a2>
 80074a6:	459a      	cmp	sl, r3
 80074a8:	d1a8      	bne.n	80073fc <_dtoa_r+0xa8c>
 80074aa:	2331      	movs	r3, #49	@ 0x31
 80074ac:	f108 0801 	add.w	r8, r8, #1
 80074b0:	f88a 3000 	strb.w	r3, [sl]
 80074b4:	e4ad      	b.n	8006e12 <_dtoa_r+0x4a2>
 80074b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80074b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007514 <_dtoa_r+0xba4>
 80074bc:	b11b      	cbz	r3, 80074c6 <_dtoa_r+0xb56>
 80074be:	f10a 0308 	add.w	r3, sl, #8
 80074c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	4650      	mov	r0, sl
 80074c8:	b017      	add	sp, #92	@ 0x5c
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	f77f ae2e 	ble.w	8007132 <_dtoa_r+0x7c2>
 80074d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074da:	2001      	movs	r0, #1
 80074dc:	e64d      	b.n	800717a <_dtoa_r+0x80a>
 80074de:	f1bb 0f00 	cmp.w	fp, #0
 80074e2:	f77f aed9 	ble.w	8007298 <_dtoa_r+0x928>
 80074e6:	4656      	mov	r6, sl
 80074e8:	4621      	mov	r1, r4
 80074ea:	9803      	ldr	r0, [sp, #12]
 80074ec:	f7ff f9b6 	bl	800685c <quorem>
 80074f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80074f4:	f806 3b01 	strb.w	r3, [r6], #1
 80074f8:	eba6 020a 	sub.w	r2, r6, sl
 80074fc:	4593      	cmp	fp, r2
 80074fe:	ddb4      	ble.n	800746a <_dtoa_r+0xafa>
 8007500:	2300      	movs	r3, #0
 8007502:	220a      	movs	r2, #10
 8007504:	4648      	mov	r0, r9
 8007506:	9903      	ldr	r1, [sp, #12]
 8007508:	f000 f966 	bl	80077d8 <__multadd>
 800750c:	9003      	str	r0, [sp, #12]
 800750e:	e7eb      	b.n	80074e8 <_dtoa_r+0xb78>
 8007510:	0800a0b8 	.word	0x0800a0b8
 8007514:	0800a03c 	.word	0x0800a03c

08007518 <_free_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4605      	mov	r5, r0
 800751c:	2900      	cmp	r1, #0
 800751e:	d040      	beq.n	80075a2 <_free_r+0x8a>
 8007520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007524:	1f0c      	subs	r4, r1, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	bfb8      	it	lt
 800752a:	18e4      	addlt	r4, r4, r3
 800752c:	f000 f8e6 	bl	80076fc <__malloc_lock>
 8007530:	4a1c      	ldr	r2, [pc, #112]	@ (80075a4 <_free_r+0x8c>)
 8007532:	6813      	ldr	r3, [r2, #0]
 8007534:	b933      	cbnz	r3, 8007544 <_free_r+0x2c>
 8007536:	6063      	str	r3, [r4, #4]
 8007538:	6014      	str	r4, [r2, #0]
 800753a:	4628      	mov	r0, r5
 800753c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007540:	f000 b8e2 	b.w	8007708 <__malloc_unlock>
 8007544:	42a3      	cmp	r3, r4
 8007546:	d908      	bls.n	800755a <_free_r+0x42>
 8007548:	6820      	ldr	r0, [r4, #0]
 800754a:	1821      	adds	r1, r4, r0
 800754c:	428b      	cmp	r3, r1
 800754e:	bf01      	itttt	eq
 8007550:	6819      	ldreq	r1, [r3, #0]
 8007552:	685b      	ldreq	r3, [r3, #4]
 8007554:	1809      	addeq	r1, r1, r0
 8007556:	6021      	streq	r1, [r4, #0]
 8007558:	e7ed      	b.n	8007536 <_free_r+0x1e>
 800755a:	461a      	mov	r2, r3
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	b10b      	cbz	r3, 8007564 <_free_r+0x4c>
 8007560:	42a3      	cmp	r3, r4
 8007562:	d9fa      	bls.n	800755a <_free_r+0x42>
 8007564:	6811      	ldr	r1, [r2, #0]
 8007566:	1850      	adds	r0, r2, r1
 8007568:	42a0      	cmp	r0, r4
 800756a:	d10b      	bne.n	8007584 <_free_r+0x6c>
 800756c:	6820      	ldr	r0, [r4, #0]
 800756e:	4401      	add	r1, r0
 8007570:	1850      	adds	r0, r2, r1
 8007572:	4283      	cmp	r3, r0
 8007574:	6011      	str	r1, [r2, #0]
 8007576:	d1e0      	bne.n	800753a <_free_r+0x22>
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4408      	add	r0, r1
 800757e:	6010      	str	r0, [r2, #0]
 8007580:	6053      	str	r3, [r2, #4]
 8007582:	e7da      	b.n	800753a <_free_r+0x22>
 8007584:	d902      	bls.n	800758c <_free_r+0x74>
 8007586:	230c      	movs	r3, #12
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	e7d6      	b.n	800753a <_free_r+0x22>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428b      	cmp	r3, r1
 8007592:	bf01      	itttt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	1809      	addeq	r1, r1, r0
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	6063      	str	r3, [r4, #4]
 800759e:	6054      	str	r4, [r2, #4]
 80075a0:	e7cb      	b.n	800753a <_free_r+0x22>
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	200004dc 	.word	0x200004dc

080075a8 <malloc>:
 80075a8:	4b02      	ldr	r3, [pc, #8]	@ (80075b4 <malloc+0xc>)
 80075aa:	4601      	mov	r1, r0
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	f000 b825 	b.w	80075fc <_malloc_r>
 80075b2:	bf00      	nop
 80075b4:	20000018 	.word	0x20000018

080075b8 <sbrk_aligned>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	4e0f      	ldr	r6, [pc, #60]	@ (80075f8 <sbrk_aligned+0x40>)
 80075bc:	460c      	mov	r4, r1
 80075be:	6831      	ldr	r1, [r6, #0]
 80075c0:	4605      	mov	r5, r0
 80075c2:	b911      	cbnz	r1, 80075ca <sbrk_aligned+0x12>
 80075c4:	f001 fd60 	bl	8009088 <_sbrk_r>
 80075c8:	6030      	str	r0, [r6, #0]
 80075ca:	4621      	mov	r1, r4
 80075cc:	4628      	mov	r0, r5
 80075ce:	f001 fd5b 	bl	8009088 <_sbrk_r>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	d103      	bne.n	80075de <sbrk_aligned+0x26>
 80075d6:	f04f 34ff 	mov.w	r4, #4294967295
 80075da:	4620      	mov	r0, r4
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
 80075de:	1cc4      	adds	r4, r0, #3
 80075e0:	f024 0403 	bic.w	r4, r4, #3
 80075e4:	42a0      	cmp	r0, r4
 80075e6:	d0f8      	beq.n	80075da <sbrk_aligned+0x22>
 80075e8:	1a21      	subs	r1, r4, r0
 80075ea:	4628      	mov	r0, r5
 80075ec:	f001 fd4c 	bl	8009088 <_sbrk_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d1f2      	bne.n	80075da <sbrk_aligned+0x22>
 80075f4:	e7ef      	b.n	80075d6 <sbrk_aligned+0x1e>
 80075f6:	bf00      	nop
 80075f8:	200004d8 	.word	0x200004d8

080075fc <_malloc_r>:
 80075fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007600:	1ccd      	adds	r5, r1, #3
 8007602:	f025 0503 	bic.w	r5, r5, #3
 8007606:	3508      	adds	r5, #8
 8007608:	2d0c      	cmp	r5, #12
 800760a:	bf38      	it	cc
 800760c:	250c      	movcc	r5, #12
 800760e:	2d00      	cmp	r5, #0
 8007610:	4606      	mov	r6, r0
 8007612:	db01      	blt.n	8007618 <_malloc_r+0x1c>
 8007614:	42a9      	cmp	r1, r5
 8007616:	d904      	bls.n	8007622 <_malloc_r+0x26>
 8007618:	230c      	movs	r3, #12
 800761a:	6033      	str	r3, [r6, #0]
 800761c:	2000      	movs	r0, #0
 800761e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076f8 <_malloc_r+0xfc>
 8007626:	f000 f869 	bl	80076fc <__malloc_lock>
 800762a:	f8d8 3000 	ldr.w	r3, [r8]
 800762e:	461c      	mov	r4, r3
 8007630:	bb44      	cbnz	r4, 8007684 <_malloc_r+0x88>
 8007632:	4629      	mov	r1, r5
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff ffbf 	bl	80075b8 <sbrk_aligned>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	4604      	mov	r4, r0
 800763e:	d158      	bne.n	80076f2 <_malloc_r+0xf6>
 8007640:	f8d8 4000 	ldr.w	r4, [r8]
 8007644:	4627      	mov	r7, r4
 8007646:	2f00      	cmp	r7, #0
 8007648:	d143      	bne.n	80076d2 <_malloc_r+0xd6>
 800764a:	2c00      	cmp	r4, #0
 800764c:	d04b      	beq.n	80076e6 <_malloc_r+0xea>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	4639      	mov	r1, r7
 8007652:	4630      	mov	r0, r6
 8007654:	eb04 0903 	add.w	r9, r4, r3
 8007658:	f001 fd16 	bl	8009088 <_sbrk_r>
 800765c:	4581      	cmp	r9, r0
 800765e:	d142      	bne.n	80076e6 <_malloc_r+0xea>
 8007660:	6821      	ldr	r1, [r4, #0]
 8007662:	4630      	mov	r0, r6
 8007664:	1a6d      	subs	r5, r5, r1
 8007666:	4629      	mov	r1, r5
 8007668:	f7ff ffa6 	bl	80075b8 <sbrk_aligned>
 800766c:	3001      	adds	r0, #1
 800766e:	d03a      	beq.n	80076e6 <_malloc_r+0xea>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	442b      	add	r3, r5
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	f8d8 3000 	ldr.w	r3, [r8]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	bb62      	cbnz	r2, 80076d8 <_malloc_r+0xdc>
 800767e:	f8c8 7000 	str.w	r7, [r8]
 8007682:	e00f      	b.n	80076a4 <_malloc_r+0xa8>
 8007684:	6822      	ldr	r2, [r4, #0]
 8007686:	1b52      	subs	r2, r2, r5
 8007688:	d420      	bmi.n	80076cc <_malloc_r+0xd0>
 800768a:	2a0b      	cmp	r2, #11
 800768c:	d917      	bls.n	80076be <_malloc_r+0xc2>
 800768e:	1961      	adds	r1, r4, r5
 8007690:	42a3      	cmp	r3, r4
 8007692:	6025      	str	r5, [r4, #0]
 8007694:	bf18      	it	ne
 8007696:	6059      	strne	r1, [r3, #4]
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	bf08      	it	eq
 800769c:	f8c8 1000 	streq.w	r1, [r8]
 80076a0:	5162      	str	r2, [r4, r5]
 80076a2:	604b      	str	r3, [r1, #4]
 80076a4:	4630      	mov	r0, r6
 80076a6:	f000 f82f 	bl	8007708 <__malloc_unlock>
 80076aa:	f104 000b 	add.w	r0, r4, #11
 80076ae:	1d23      	adds	r3, r4, #4
 80076b0:	f020 0007 	bic.w	r0, r0, #7
 80076b4:	1ac2      	subs	r2, r0, r3
 80076b6:	bf1c      	itt	ne
 80076b8:	1a1b      	subne	r3, r3, r0
 80076ba:	50a3      	strne	r3, [r4, r2]
 80076bc:	e7af      	b.n	800761e <_malloc_r+0x22>
 80076be:	6862      	ldr	r2, [r4, #4]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	bf0c      	ite	eq
 80076c4:	f8c8 2000 	streq.w	r2, [r8]
 80076c8:	605a      	strne	r2, [r3, #4]
 80076ca:	e7eb      	b.n	80076a4 <_malloc_r+0xa8>
 80076cc:	4623      	mov	r3, r4
 80076ce:	6864      	ldr	r4, [r4, #4]
 80076d0:	e7ae      	b.n	8007630 <_malloc_r+0x34>
 80076d2:	463c      	mov	r4, r7
 80076d4:	687f      	ldr	r7, [r7, #4]
 80076d6:	e7b6      	b.n	8007646 <_malloc_r+0x4a>
 80076d8:	461a      	mov	r2, r3
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	42a3      	cmp	r3, r4
 80076de:	d1fb      	bne.n	80076d8 <_malloc_r+0xdc>
 80076e0:	2300      	movs	r3, #0
 80076e2:	6053      	str	r3, [r2, #4]
 80076e4:	e7de      	b.n	80076a4 <_malloc_r+0xa8>
 80076e6:	230c      	movs	r3, #12
 80076e8:	4630      	mov	r0, r6
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	f000 f80c 	bl	8007708 <__malloc_unlock>
 80076f0:	e794      	b.n	800761c <_malloc_r+0x20>
 80076f2:	6005      	str	r5, [r0, #0]
 80076f4:	e7d6      	b.n	80076a4 <_malloc_r+0xa8>
 80076f6:	bf00      	nop
 80076f8:	200004dc 	.word	0x200004dc

080076fc <__malloc_lock>:
 80076fc:	4801      	ldr	r0, [pc, #4]	@ (8007704 <__malloc_lock+0x8>)
 80076fe:	f7ff b898 	b.w	8006832 <__retarget_lock_acquire_recursive>
 8007702:	bf00      	nop
 8007704:	200004d4 	.word	0x200004d4

08007708 <__malloc_unlock>:
 8007708:	4801      	ldr	r0, [pc, #4]	@ (8007710 <__malloc_unlock+0x8>)
 800770a:	f7ff b893 	b.w	8006834 <__retarget_lock_release_recursive>
 800770e:	bf00      	nop
 8007710:	200004d4 	.word	0x200004d4

08007714 <_Balloc>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	69c6      	ldr	r6, [r0, #28]
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	b976      	cbnz	r6, 800773c <_Balloc+0x28>
 800771e:	2010      	movs	r0, #16
 8007720:	f7ff ff42 	bl	80075a8 <malloc>
 8007724:	4602      	mov	r2, r0
 8007726:	61e0      	str	r0, [r4, #28]
 8007728:	b920      	cbnz	r0, 8007734 <_Balloc+0x20>
 800772a:	216b      	movs	r1, #107	@ 0x6b
 800772c:	4b17      	ldr	r3, [pc, #92]	@ (800778c <_Balloc+0x78>)
 800772e:	4818      	ldr	r0, [pc, #96]	@ (8007790 <_Balloc+0x7c>)
 8007730:	f001 fcce 	bl	80090d0 <__assert_func>
 8007734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007738:	6006      	str	r6, [r0, #0]
 800773a:	60c6      	str	r6, [r0, #12]
 800773c:	69e6      	ldr	r6, [r4, #28]
 800773e:	68f3      	ldr	r3, [r6, #12]
 8007740:	b183      	cbz	r3, 8007764 <_Balloc+0x50>
 8007742:	69e3      	ldr	r3, [r4, #28]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800774a:	b9b8      	cbnz	r0, 800777c <_Balloc+0x68>
 800774c:	2101      	movs	r1, #1
 800774e:	fa01 f605 	lsl.w	r6, r1, r5
 8007752:	1d72      	adds	r2, r6, #5
 8007754:	4620      	mov	r0, r4
 8007756:	0092      	lsls	r2, r2, #2
 8007758:	f001 fcd8 	bl	800910c <_calloc_r>
 800775c:	b160      	cbz	r0, 8007778 <_Balloc+0x64>
 800775e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007762:	e00e      	b.n	8007782 <_Balloc+0x6e>
 8007764:	2221      	movs	r2, #33	@ 0x21
 8007766:	2104      	movs	r1, #4
 8007768:	4620      	mov	r0, r4
 800776a:	f001 fccf 	bl	800910c <_calloc_r>
 800776e:	69e3      	ldr	r3, [r4, #28]
 8007770:	60f0      	str	r0, [r6, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e4      	bne.n	8007742 <_Balloc+0x2e>
 8007778:	2000      	movs	r0, #0
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	6802      	ldr	r2, [r0, #0]
 800777e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007782:	2300      	movs	r3, #0
 8007784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007788:	e7f7      	b.n	800777a <_Balloc+0x66>
 800778a:	bf00      	nop
 800778c:	0800a049 	.word	0x0800a049
 8007790:	0800a0c9 	.word	0x0800a0c9

08007794 <_Bfree>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	69c6      	ldr	r6, [r0, #28]
 8007798:	4605      	mov	r5, r0
 800779a:	460c      	mov	r4, r1
 800779c:	b976      	cbnz	r6, 80077bc <_Bfree+0x28>
 800779e:	2010      	movs	r0, #16
 80077a0:	f7ff ff02 	bl	80075a8 <malloc>
 80077a4:	4602      	mov	r2, r0
 80077a6:	61e8      	str	r0, [r5, #28]
 80077a8:	b920      	cbnz	r0, 80077b4 <_Bfree+0x20>
 80077aa:	218f      	movs	r1, #143	@ 0x8f
 80077ac:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <_Bfree+0x3c>)
 80077ae:	4809      	ldr	r0, [pc, #36]	@ (80077d4 <_Bfree+0x40>)
 80077b0:	f001 fc8e 	bl	80090d0 <__assert_func>
 80077b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077b8:	6006      	str	r6, [r0, #0]
 80077ba:	60c6      	str	r6, [r0, #12]
 80077bc:	b13c      	cbz	r4, 80077ce <_Bfree+0x3a>
 80077be:	69eb      	ldr	r3, [r5, #28]
 80077c0:	6862      	ldr	r2, [r4, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077c8:	6021      	str	r1, [r4, #0]
 80077ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	0800a049 	.word	0x0800a049
 80077d4:	0800a0c9 	.word	0x0800a0c9

080077d8 <__multadd>:
 80077d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077dc:	4607      	mov	r7, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	461e      	mov	r6, r3
 80077e2:	2000      	movs	r0, #0
 80077e4:	690d      	ldr	r5, [r1, #16]
 80077e6:	f101 0c14 	add.w	ip, r1, #20
 80077ea:	f8dc 3000 	ldr.w	r3, [ip]
 80077ee:	3001      	adds	r0, #1
 80077f0:	b299      	uxth	r1, r3
 80077f2:	fb02 6101 	mla	r1, r2, r1, r6
 80077f6:	0c1e      	lsrs	r6, r3, #16
 80077f8:	0c0b      	lsrs	r3, r1, #16
 80077fa:	fb02 3306 	mla	r3, r2, r6, r3
 80077fe:	b289      	uxth	r1, r1
 8007800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007804:	4285      	cmp	r5, r0
 8007806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800780a:	f84c 1b04 	str.w	r1, [ip], #4
 800780e:	dcec      	bgt.n	80077ea <__multadd+0x12>
 8007810:	b30e      	cbz	r6, 8007856 <__multadd+0x7e>
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	42ab      	cmp	r3, r5
 8007816:	dc19      	bgt.n	800784c <__multadd+0x74>
 8007818:	6861      	ldr	r1, [r4, #4]
 800781a:	4638      	mov	r0, r7
 800781c:	3101      	adds	r1, #1
 800781e:	f7ff ff79 	bl	8007714 <_Balloc>
 8007822:	4680      	mov	r8, r0
 8007824:	b928      	cbnz	r0, 8007832 <__multadd+0x5a>
 8007826:	4602      	mov	r2, r0
 8007828:	21ba      	movs	r1, #186	@ 0xba
 800782a:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <__multadd+0x84>)
 800782c:	480c      	ldr	r0, [pc, #48]	@ (8007860 <__multadd+0x88>)
 800782e:	f001 fc4f 	bl	80090d0 <__assert_func>
 8007832:	6922      	ldr	r2, [r4, #16]
 8007834:	f104 010c 	add.w	r1, r4, #12
 8007838:	3202      	adds	r2, #2
 800783a:	0092      	lsls	r2, r2, #2
 800783c:	300c      	adds	r0, #12
 800783e:	f001 fc33 	bl	80090a8 <memcpy>
 8007842:	4621      	mov	r1, r4
 8007844:	4638      	mov	r0, r7
 8007846:	f7ff ffa5 	bl	8007794 <_Bfree>
 800784a:	4644      	mov	r4, r8
 800784c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007850:	3501      	adds	r5, #1
 8007852:	615e      	str	r6, [r3, #20]
 8007854:	6125      	str	r5, [r4, #16]
 8007856:	4620      	mov	r0, r4
 8007858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800785c:	0800a0b8 	.word	0x0800a0b8
 8007860:	0800a0c9 	.word	0x0800a0c9

08007864 <__s2b>:
 8007864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007868:	4615      	mov	r5, r2
 800786a:	2209      	movs	r2, #9
 800786c:	461f      	mov	r7, r3
 800786e:	3308      	adds	r3, #8
 8007870:	460c      	mov	r4, r1
 8007872:	fb93 f3f2 	sdiv	r3, r3, r2
 8007876:	4606      	mov	r6, r0
 8007878:	2201      	movs	r2, #1
 800787a:	2100      	movs	r1, #0
 800787c:	429a      	cmp	r2, r3
 800787e:	db09      	blt.n	8007894 <__s2b+0x30>
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ff47 	bl	8007714 <_Balloc>
 8007886:	b940      	cbnz	r0, 800789a <__s2b+0x36>
 8007888:	4602      	mov	r2, r0
 800788a:	21d3      	movs	r1, #211	@ 0xd3
 800788c:	4b18      	ldr	r3, [pc, #96]	@ (80078f0 <__s2b+0x8c>)
 800788e:	4819      	ldr	r0, [pc, #100]	@ (80078f4 <__s2b+0x90>)
 8007890:	f001 fc1e 	bl	80090d0 <__assert_func>
 8007894:	0052      	lsls	r2, r2, #1
 8007896:	3101      	adds	r1, #1
 8007898:	e7f0      	b.n	800787c <__s2b+0x18>
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	2d09      	cmp	r5, #9
 800789e:	6143      	str	r3, [r0, #20]
 80078a0:	f04f 0301 	mov.w	r3, #1
 80078a4:	6103      	str	r3, [r0, #16]
 80078a6:	dd16      	ble.n	80078d6 <__s2b+0x72>
 80078a8:	f104 0909 	add.w	r9, r4, #9
 80078ac:	46c8      	mov	r8, r9
 80078ae:	442c      	add	r4, r5
 80078b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078b4:	4601      	mov	r1, r0
 80078b6:	220a      	movs	r2, #10
 80078b8:	4630      	mov	r0, r6
 80078ba:	3b30      	subs	r3, #48	@ 0x30
 80078bc:	f7ff ff8c 	bl	80077d8 <__multadd>
 80078c0:	45a0      	cmp	r8, r4
 80078c2:	d1f5      	bne.n	80078b0 <__s2b+0x4c>
 80078c4:	f1a5 0408 	sub.w	r4, r5, #8
 80078c8:	444c      	add	r4, r9
 80078ca:	1b2d      	subs	r5, r5, r4
 80078cc:	1963      	adds	r3, r4, r5
 80078ce:	42bb      	cmp	r3, r7
 80078d0:	db04      	blt.n	80078dc <__s2b+0x78>
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d6:	2509      	movs	r5, #9
 80078d8:	340a      	adds	r4, #10
 80078da:	e7f6      	b.n	80078ca <__s2b+0x66>
 80078dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078e0:	4601      	mov	r1, r0
 80078e2:	220a      	movs	r2, #10
 80078e4:	4630      	mov	r0, r6
 80078e6:	3b30      	subs	r3, #48	@ 0x30
 80078e8:	f7ff ff76 	bl	80077d8 <__multadd>
 80078ec:	e7ee      	b.n	80078cc <__s2b+0x68>
 80078ee:	bf00      	nop
 80078f0:	0800a0b8 	.word	0x0800a0b8
 80078f4:	0800a0c9 	.word	0x0800a0c9

080078f8 <__hi0bits>:
 80078f8:	4603      	mov	r3, r0
 80078fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078fe:	bf3a      	itte	cc
 8007900:	0403      	lslcc	r3, r0, #16
 8007902:	2010      	movcc	r0, #16
 8007904:	2000      	movcs	r0, #0
 8007906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800790a:	bf3c      	itt	cc
 800790c:	021b      	lslcc	r3, r3, #8
 800790e:	3008      	addcc	r0, #8
 8007910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007914:	bf3c      	itt	cc
 8007916:	011b      	lslcc	r3, r3, #4
 8007918:	3004      	addcc	r0, #4
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791e:	bf3c      	itt	cc
 8007920:	009b      	lslcc	r3, r3, #2
 8007922:	3002      	addcc	r0, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	db05      	blt.n	8007934 <__hi0bits+0x3c>
 8007928:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800792c:	f100 0001 	add.w	r0, r0, #1
 8007930:	bf08      	it	eq
 8007932:	2020      	moveq	r0, #32
 8007934:	4770      	bx	lr

08007936 <__lo0bits>:
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	4602      	mov	r2, r0
 800793a:	f013 0007 	ands.w	r0, r3, #7
 800793e:	d00b      	beq.n	8007958 <__lo0bits+0x22>
 8007940:	07d9      	lsls	r1, r3, #31
 8007942:	d421      	bmi.n	8007988 <__lo0bits+0x52>
 8007944:	0798      	lsls	r0, r3, #30
 8007946:	bf49      	itett	mi
 8007948:	085b      	lsrmi	r3, r3, #1
 800794a:	089b      	lsrpl	r3, r3, #2
 800794c:	2001      	movmi	r0, #1
 800794e:	6013      	strmi	r3, [r2, #0]
 8007950:	bf5c      	itt	pl
 8007952:	2002      	movpl	r0, #2
 8007954:	6013      	strpl	r3, [r2, #0]
 8007956:	4770      	bx	lr
 8007958:	b299      	uxth	r1, r3
 800795a:	b909      	cbnz	r1, 8007960 <__lo0bits+0x2a>
 800795c:	2010      	movs	r0, #16
 800795e:	0c1b      	lsrs	r3, r3, #16
 8007960:	b2d9      	uxtb	r1, r3
 8007962:	b909      	cbnz	r1, 8007968 <__lo0bits+0x32>
 8007964:	3008      	adds	r0, #8
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	0719      	lsls	r1, r3, #28
 800796a:	bf04      	itt	eq
 800796c:	091b      	lsreq	r3, r3, #4
 800796e:	3004      	addeq	r0, #4
 8007970:	0799      	lsls	r1, r3, #30
 8007972:	bf04      	itt	eq
 8007974:	089b      	lsreq	r3, r3, #2
 8007976:	3002      	addeq	r0, #2
 8007978:	07d9      	lsls	r1, r3, #31
 800797a:	d403      	bmi.n	8007984 <__lo0bits+0x4e>
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	f100 0001 	add.w	r0, r0, #1
 8007982:	d003      	beq.n	800798c <__lo0bits+0x56>
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	4770      	bx	lr
 8007988:	2000      	movs	r0, #0
 800798a:	4770      	bx	lr
 800798c:	2020      	movs	r0, #32
 800798e:	4770      	bx	lr

08007990 <__i2b>:
 8007990:	b510      	push	{r4, lr}
 8007992:	460c      	mov	r4, r1
 8007994:	2101      	movs	r1, #1
 8007996:	f7ff febd 	bl	8007714 <_Balloc>
 800799a:	4602      	mov	r2, r0
 800799c:	b928      	cbnz	r0, 80079aa <__i2b+0x1a>
 800799e:	f240 1145 	movw	r1, #325	@ 0x145
 80079a2:	4b04      	ldr	r3, [pc, #16]	@ (80079b4 <__i2b+0x24>)
 80079a4:	4804      	ldr	r0, [pc, #16]	@ (80079b8 <__i2b+0x28>)
 80079a6:	f001 fb93 	bl	80090d0 <__assert_func>
 80079aa:	2301      	movs	r3, #1
 80079ac:	6144      	str	r4, [r0, #20]
 80079ae:	6103      	str	r3, [r0, #16]
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	0800a0b8 	.word	0x0800a0b8
 80079b8:	0800a0c9 	.word	0x0800a0c9

080079bc <__multiply>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	4617      	mov	r7, r2
 80079c2:	690a      	ldr	r2, [r1, #16]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	4689      	mov	r9, r1
 80079c8:	429a      	cmp	r2, r3
 80079ca:	bfa2      	ittt	ge
 80079cc:	463b      	movge	r3, r7
 80079ce:	460f      	movge	r7, r1
 80079d0:	4699      	movge	r9, r3
 80079d2:	693d      	ldr	r5, [r7, #16]
 80079d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	eb05 060a 	add.w	r6, r5, sl
 80079e0:	42b3      	cmp	r3, r6
 80079e2:	b085      	sub	sp, #20
 80079e4:	bfb8      	it	lt
 80079e6:	3101      	addlt	r1, #1
 80079e8:	f7ff fe94 	bl	8007714 <_Balloc>
 80079ec:	b930      	cbnz	r0, 80079fc <__multiply+0x40>
 80079ee:	4602      	mov	r2, r0
 80079f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80079f4:	4b40      	ldr	r3, [pc, #256]	@ (8007af8 <__multiply+0x13c>)
 80079f6:	4841      	ldr	r0, [pc, #260]	@ (8007afc <__multiply+0x140>)
 80079f8:	f001 fb6a 	bl	80090d0 <__assert_func>
 80079fc:	f100 0414 	add.w	r4, r0, #20
 8007a00:	4623      	mov	r3, r4
 8007a02:	2200      	movs	r2, #0
 8007a04:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a08:	4573      	cmp	r3, lr
 8007a0a:	d320      	bcc.n	8007a4e <__multiply+0x92>
 8007a0c:	f107 0814 	add.w	r8, r7, #20
 8007a10:	f109 0114 	add.w	r1, r9, #20
 8007a14:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a18:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a1c:	9302      	str	r3, [sp, #8]
 8007a1e:	1beb      	subs	r3, r5, r7
 8007a20:	3b15      	subs	r3, #21
 8007a22:	f023 0303 	bic.w	r3, r3, #3
 8007a26:	3304      	adds	r3, #4
 8007a28:	3715      	adds	r7, #21
 8007a2a:	42bd      	cmp	r5, r7
 8007a2c:	bf38      	it	cc
 8007a2e:	2304      	movcc	r3, #4
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	9b02      	ldr	r3, [sp, #8]
 8007a34:	9103      	str	r1, [sp, #12]
 8007a36:	428b      	cmp	r3, r1
 8007a38:	d80c      	bhi.n	8007a54 <__multiply+0x98>
 8007a3a:	2e00      	cmp	r6, #0
 8007a3c:	dd03      	ble.n	8007a46 <__multiply+0x8a>
 8007a3e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d055      	beq.n	8007af2 <__multiply+0x136>
 8007a46:	6106      	str	r6, [r0, #16]
 8007a48:	b005      	add	sp, #20
 8007a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4e:	f843 2b04 	str.w	r2, [r3], #4
 8007a52:	e7d9      	b.n	8007a08 <__multiply+0x4c>
 8007a54:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a58:	f1ba 0f00 	cmp.w	sl, #0
 8007a5c:	d01f      	beq.n	8007a9e <__multiply+0xe2>
 8007a5e:	46c4      	mov	ip, r8
 8007a60:	46a1      	mov	r9, r4
 8007a62:	2700      	movs	r7, #0
 8007a64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a68:	f8d9 3000 	ldr.w	r3, [r9]
 8007a6c:	fa1f fb82 	uxth.w	fp, r2
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a76:	443b      	add	r3, r7
 8007a78:	f8d9 7000 	ldr.w	r7, [r9]
 8007a7c:	0c12      	lsrs	r2, r2, #16
 8007a7e:	0c3f      	lsrs	r7, r7, #16
 8007a80:	fb0a 7202 	mla	r2, sl, r2, r7
 8007a84:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a8e:	4565      	cmp	r5, ip
 8007a90:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007a94:	f849 3b04 	str.w	r3, [r9], #4
 8007a98:	d8e4      	bhi.n	8007a64 <__multiply+0xa8>
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	50e7      	str	r7, [r4, r3]
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	3104      	adds	r1, #4
 8007aa2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007aa6:	f1b9 0f00 	cmp.w	r9, #0
 8007aaa:	d020      	beq.n	8007aee <__multiply+0x132>
 8007aac:	4647      	mov	r7, r8
 8007aae:	46a4      	mov	ip, r4
 8007ab0:	f04f 0a00 	mov.w	sl, #0
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	f8b7 b000 	ldrh.w	fp, [r7]
 8007aba:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	fb09 220b 	mla	r2, r9, fp, r2
 8007ac4:	4452      	add	r2, sl
 8007ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aca:	f84c 3b04 	str.w	r3, [ip], #4
 8007ace:	f857 3b04 	ldr.w	r3, [r7], #4
 8007ad2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ad6:	f8bc 3000 	ldrh.w	r3, [ip]
 8007ada:	42bd      	cmp	r5, r7
 8007adc:	fb09 330a 	mla	r3, r9, sl, r3
 8007ae0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007ae4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ae8:	d8e5      	bhi.n	8007ab6 <__multiply+0xfa>
 8007aea:	9a01      	ldr	r2, [sp, #4]
 8007aec:	50a3      	str	r3, [r4, r2]
 8007aee:	3404      	adds	r4, #4
 8007af0:	e79f      	b.n	8007a32 <__multiply+0x76>
 8007af2:	3e01      	subs	r6, #1
 8007af4:	e7a1      	b.n	8007a3a <__multiply+0x7e>
 8007af6:	bf00      	nop
 8007af8:	0800a0b8 	.word	0x0800a0b8
 8007afc:	0800a0c9 	.word	0x0800a0c9

08007b00 <__pow5mult>:
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	4615      	mov	r5, r2
 8007b06:	f012 0203 	ands.w	r2, r2, #3
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	460e      	mov	r6, r1
 8007b0e:	d007      	beq.n	8007b20 <__pow5mult+0x20>
 8007b10:	4c25      	ldr	r4, [pc, #148]	@ (8007ba8 <__pow5mult+0xa8>)
 8007b12:	3a01      	subs	r2, #1
 8007b14:	2300      	movs	r3, #0
 8007b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b1a:	f7ff fe5d 	bl	80077d8 <__multadd>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	10ad      	asrs	r5, r5, #2
 8007b22:	d03d      	beq.n	8007ba0 <__pow5mult+0xa0>
 8007b24:	69fc      	ldr	r4, [r7, #28]
 8007b26:	b97c      	cbnz	r4, 8007b48 <__pow5mult+0x48>
 8007b28:	2010      	movs	r0, #16
 8007b2a:	f7ff fd3d 	bl	80075a8 <malloc>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	61f8      	str	r0, [r7, #28]
 8007b32:	b928      	cbnz	r0, 8007b40 <__pow5mult+0x40>
 8007b34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b38:	4b1c      	ldr	r3, [pc, #112]	@ (8007bac <__pow5mult+0xac>)
 8007b3a:	481d      	ldr	r0, [pc, #116]	@ (8007bb0 <__pow5mult+0xb0>)
 8007b3c:	f001 fac8 	bl	80090d0 <__assert_func>
 8007b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b44:	6004      	str	r4, [r0, #0]
 8007b46:	60c4      	str	r4, [r0, #12]
 8007b48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b50:	b94c      	cbnz	r4, 8007b66 <__pow5mult+0x66>
 8007b52:	f240 2171 	movw	r1, #625	@ 0x271
 8007b56:	4638      	mov	r0, r7
 8007b58:	f7ff ff1a 	bl	8007990 <__i2b>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4604      	mov	r4, r0
 8007b60:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	f04f 0900 	mov.w	r9, #0
 8007b6a:	07eb      	lsls	r3, r5, #31
 8007b6c:	d50a      	bpl.n	8007b84 <__pow5mult+0x84>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4622      	mov	r2, r4
 8007b72:	4638      	mov	r0, r7
 8007b74:	f7ff ff22 	bl	80079bc <__multiply>
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff fe09 	bl	8007794 <_Bfree>
 8007b82:	4646      	mov	r6, r8
 8007b84:	106d      	asrs	r5, r5, #1
 8007b86:	d00b      	beq.n	8007ba0 <__pow5mult+0xa0>
 8007b88:	6820      	ldr	r0, [r4, #0]
 8007b8a:	b938      	cbnz	r0, 8007b9c <__pow5mult+0x9c>
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff ff13 	bl	80079bc <__multiply>
 8007b96:	6020      	str	r0, [r4, #0]
 8007b98:	f8c0 9000 	str.w	r9, [r0]
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	e7e4      	b.n	8007b6a <__pow5mult+0x6a>
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba6:	bf00      	nop
 8007ba8:	0800a1dc 	.word	0x0800a1dc
 8007bac:	0800a049 	.word	0x0800a049
 8007bb0:	0800a0c9 	.word	0x0800a0c9

08007bb4 <__lshift>:
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	460c      	mov	r4, r1
 8007bba:	4607      	mov	r7, r0
 8007bbc:	4691      	mov	r9, r2
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	6849      	ldr	r1, [r1, #4]
 8007bc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bcc:	f108 0601 	add.w	r6, r8, #1
 8007bd0:	42b3      	cmp	r3, r6
 8007bd2:	db0b      	blt.n	8007bec <__lshift+0x38>
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff fd9d 	bl	8007714 <_Balloc>
 8007bda:	4605      	mov	r5, r0
 8007bdc:	b948      	cbnz	r0, 8007bf2 <__lshift+0x3e>
 8007bde:	4602      	mov	r2, r0
 8007be0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007be4:	4b27      	ldr	r3, [pc, #156]	@ (8007c84 <__lshift+0xd0>)
 8007be6:	4828      	ldr	r0, [pc, #160]	@ (8007c88 <__lshift+0xd4>)
 8007be8:	f001 fa72 	bl	80090d0 <__assert_func>
 8007bec:	3101      	adds	r1, #1
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	e7ee      	b.n	8007bd0 <__lshift+0x1c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f100 0114 	add.w	r1, r0, #20
 8007bf8:	f100 0210 	add.w	r2, r0, #16
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	4553      	cmp	r3, sl
 8007c00:	db33      	blt.n	8007c6a <__lshift+0xb6>
 8007c02:	6920      	ldr	r0, [r4, #16]
 8007c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c08:	f104 0314 	add.w	r3, r4, #20
 8007c0c:	f019 091f 	ands.w	r9, r9, #31
 8007c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c18:	d02b      	beq.n	8007c72 <__lshift+0xbe>
 8007c1a:	468a      	mov	sl, r1
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	fa00 f009 	lsl.w	r0, r0, r9
 8007c28:	4310      	orrs	r0, r2
 8007c2a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c32:	459c      	cmp	ip, r3
 8007c34:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c38:	d8f3      	bhi.n	8007c22 <__lshift+0x6e>
 8007c3a:	ebac 0304 	sub.w	r3, ip, r4
 8007c3e:	3b15      	subs	r3, #21
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	3304      	adds	r3, #4
 8007c46:	f104 0015 	add.w	r0, r4, #21
 8007c4a:	4560      	cmp	r0, ip
 8007c4c:	bf88      	it	hi
 8007c4e:	2304      	movhi	r3, #4
 8007c50:	50ca      	str	r2, [r1, r3]
 8007c52:	b10a      	cbz	r2, 8007c58 <__lshift+0xa4>
 8007c54:	f108 0602 	add.w	r6, r8, #2
 8007c58:	3e01      	subs	r6, #1
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	612e      	str	r6, [r5, #16]
 8007c60:	f7ff fd98 	bl	8007794 <_Bfree>
 8007c64:	4628      	mov	r0, r5
 8007c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c6e:	3301      	adds	r3, #1
 8007c70:	e7c5      	b.n	8007bfe <__lshift+0x4a>
 8007c72:	3904      	subs	r1, #4
 8007c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c78:	459c      	cmp	ip, r3
 8007c7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c7e:	d8f9      	bhi.n	8007c74 <__lshift+0xc0>
 8007c80:	e7ea      	b.n	8007c58 <__lshift+0xa4>
 8007c82:	bf00      	nop
 8007c84:	0800a0b8 	.word	0x0800a0b8
 8007c88:	0800a0c9 	.word	0x0800a0c9

08007c8c <__mcmp>:
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	690a      	ldr	r2, [r1, #16]
 8007c90:	6900      	ldr	r0, [r0, #16]
 8007c92:	b530      	push	{r4, r5, lr}
 8007c94:	1a80      	subs	r0, r0, r2
 8007c96:	d10e      	bne.n	8007cb6 <__mcmp+0x2a>
 8007c98:	3314      	adds	r3, #20
 8007c9a:	3114      	adds	r1, #20
 8007c9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cac:	4295      	cmp	r5, r2
 8007cae:	d003      	beq.n	8007cb8 <__mcmp+0x2c>
 8007cb0:	d205      	bcs.n	8007cbe <__mcmp+0x32>
 8007cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb6:	bd30      	pop	{r4, r5, pc}
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	d3f3      	bcc.n	8007ca4 <__mcmp+0x18>
 8007cbc:	e7fb      	b.n	8007cb6 <__mcmp+0x2a>
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	e7f9      	b.n	8007cb6 <__mcmp+0x2a>
	...

08007cc4 <__mdiff>:
 8007cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	4689      	mov	r9, r1
 8007cca:	4606      	mov	r6, r0
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4648      	mov	r0, r9
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	f7ff ffdb 	bl	8007c8c <__mcmp>
 8007cd6:	1e05      	subs	r5, r0, #0
 8007cd8:	d112      	bne.n	8007d00 <__mdiff+0x3c>
 8007cda:	4629      	mov	r1, r5
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff fd19 	bl	8007714 <_Balloc>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	b928      	cbnz	r0, 8007cf2 <__mdiff+0x2e>
 8007ce6:	f240 2137 	movw	r1, #567	@ 0x237
 8007cea:	4b3e      	ldr	r3, [pc, #248]	@ (8007de4 <__mdiff+0x120>)
 8007cec:	483e      	ldr	r0, [pc, #248]	@ (8007de8 <__mdiff+0x124>)
 8007cee:	f001 f9ef 	bl	80090d0 <__assert_func>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	b003      	add	sp, #12
 8007cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d00:	bfbc      	itt	lt
 8007d02:	464b      	movlt	r3, r9
 8007d04:	46a1      	movlt	r9, r4
 8007d06:	4630      	mov	r0, r6
 8007d08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d0c:	bfba      	itte	lt
 8007d0e:	461c      	movlt	r4, r3
 8007d10:	2501      	movlt	r5, #1
 8007d12:	2500      	movge	r5, #0
 8007d14:	f7ff fcfe 	bl	8007714 <_Balloc>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	b918      	cbnz	r0, 8007d24 <__mdiff+0x60>
 8007d1c:	f240 2145 	movw	r1, #581	@ 0x245
 8007d20:	4b30      	ldr	r3, [pc, #192]	@ (8007de4 <__mdiff+0x120>)
 8007d22:	e7e3      	b.n	8007cec <__mdiff+0x28>
 8007d24:	f100 0b14 	add.w	fp, r0, #20
 8007d28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d2c:	f109 0310 	add.w	r3, r9, #16
 8007d30:	60c5      	str	r5, [r0, #12]
 8007d32:	f04f 0c00 	mov.w	ip, #0
 8007d36:	f109 0514 	add.w	r5, r9, #20
 8007d3a:	46d9      	mov	r9, fp
 8007d3c:	6926      	ldr	r6, [r4, #16]
 8007d3e:	f104 0e14 	add.w	lr, r4, #20
 8007d42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d56:	b281      	uxth	r1, r0
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	fa1f f38a 	uxth.w	r3, sl
 8007d5e:	1a5b      	subs	r3, r3, r1
 8007d60:	0c00      	lsrs	r0, r0, #16
 8007d62:	4463      	add	r3, ip
 8007d64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d72:	4576      	cmp	r6, lr
 8007d74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d78:	f849 3b04 	str.w	r3, [r9], #4
 8007d7c:	d8e6      	bhi.n	8007d4c <__mdiff+0x88>
 8007d7e:	1b33      	subs	r3, r6, r4
 8007d80:	3b15      	subs	r3, #21
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	3415      	adds	r4, #21
 8007d88:	3304      	adds	r3, #4
 8007d8a:	42a6      	cmp	r6, r4
 8007d8c:	bf38      	it	cc
 8007d8e:	2304      	movcc	r3, #4
 8007d90:	441d      	add	r5, r3
 8007d92:	445b      	add	r3, fp
 8007d94:	461e      	mov	r6, r3
 8007d96:	462c      	mov	r4, r5
 8007d98:	4544      	cmp	r4, r8
 8007d9a:	d30e      	bcc.n	8007dba <__mdiff+0xf6>
 8007d9c:	f108 0103 	add.w	r1, r8, #3
 8007da0:	1b49      	subs	r1, r1, r5
 8007da2:	f021 0103 	bic.w	r1, r1, #3
 8007da6:	3d03      	subs	r5, #3
 8007da8:	45a8      	cmp	r8, r5
 8007daa:	bf38      	it	cc
 8007dac:	2100      	movcc	r1, #0
 8007dae:	440b      	add	r3, r1
 8007db0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007db4:	b199      	cbz	r1, 8007dde <__mdiff+0x11a>
 8007db6:	6117      	str	r7, [r2, #16]
 8007db8:	e79e      	b.n	8007cf8 <__mdiff+0x34>
 8007dba:	46e6      	mov	lr, ip
 8007dbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007dc0:	fa1f fc81 	uxth.w	ip, r1
 8007dc4:	44f4      	add	ip, lr
 8007dc6:	0c08      	lsrs	r0, r1, #16
 8007dc8:	4471      	add	r1, lr
 8007dca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007dce:	b289      	uxth	r1, r1
 8007dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007dd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dd8:	f846 1b04 	str.w	r1, [r6], #4
 8007ddc:	e7dc      	b.n	8007d98 <__mdiff+0xd4>
 8007dde:	3f01      	subs	r7, #1
 8007de0:	e7e6      	b.n	8007db0 <__mdiff+0xec>
 8007de2:	bf00      	nop
 8007de4:	0800a0b8 	.word	0x0800a0b8
 8007de8:	0800a0c9 	.word	0x0800a0c9

08007dec <__ulp>:
 8007dec:	4b0e      	ldr	r3, [pc, #56]	@ (8007e28 <__ulp+0x3c>)
 8007dee:	400b      	ands	r3, r1
 8007df0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dc08      	bgt.n	8007e0a <__ulp+0x1e>
 8007df8:	425b      	negs	r3, r3
 8007dfa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007dfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e02:	da04      	bge.n	8007e0e <__ulp+0x22>
 8007e04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e08:	4113      	asrs	r3, r2
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	e008      	b.n	8007e20 <__ulp+0x34>
 8007e0e:	f1a2 0314 	sub.w	r3, r2, #20
 8007e12:	2b1e      	cmp	r3, #30
 8007e14:	bfd6      	itet	le
 8007e16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e1a:	2201      	movgt	r2, #1
 8007e1c:	40da      	lsrle	r2, r3
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	7ff00000 	.word	0x7ff00000

08007e2c <__b2d>:
 8007e2c:	6902      	ldr	r2, [r0, #16]
 8007e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e30:	f100 0614 	add.w	r6, r0, #20
 8007e34:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007e38:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007e3c:	4f1e      	ldr	r7, [pc, #120]	@ (8007eb8 <__b2d+0x8c>)
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7ff fd5a 	bl	80078f8 <__hi0bits>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f1c0 0020 	rsb	r0, r0, #32
 8007e4a:	2b0a      	cmp	r3, #10
 8007e4c:	f1a2 0504 	sub.w	r5, r2, #4
 8007e50:	6008      	str	r0, [r1, #0]
 8007e52:	dc12      	bgt.n	8007e7a <__b2d+0x4e>
 8007e54:	42ae      	cmp	r6, r5
 8007e56:	bf2c      	ite	cs
 8007e58:	2200      	movcs	r2, #0
 8007e5a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007e5e:	f1c3 0c0b 	rsb	ip, r3, #11
 8007e62:	3315      	adds	r3, #21
 8007e64:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007e68:	fa04 f303 	lsl.w	r3, r4, r3
 8007e6c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007e70:	ea4e 0107 	orr.w	r1, lr, r7
 8007e74:	431a      	orrs	r2, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e7a:	42ae      	cmp	r6, r5
 8007e7c:	bf36      	itet	cc
 8007e7e:	f1a2 0508 	subcc.w	r5, r2, #8
 8007e82:	2200      	movcs	r2, #0
 8007e84:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007e88:	3b0b      	subs	r3, #11
 8007e8a:	d012      	beq.n	8007eb2 <__b2d+0x86>
 8007e8c:	f1c3 0720 	rsb	r7, r3, #32
 8007e90:	fa22 f107 	lsr.w	r1, r2, r7
 8007e94:	409c      	lsls	r4, r3
 8007e96:	430c      	orrs	r4, r1
 8007e98:	42b5      	cmp	r5, r6
 8007e9a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007e9e:	bf94      	ite	ls
 8007ea0:	2400      	movls	r4, #0
 8007ea2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	40fc      	lsrs	r4, r7
 8007eaa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007eae:	4322      	orrs	r2, r4
 8007eb0:	e7e1      	b.n	8007e76 <__b2d+0x4a>
 8007eb2:	ea44 0107 	orr.w	r1, r4, r7
 8007eb6:	e7de      	b.n	8007e76 <__b2d+0x4a>
 8007eb8:	3ff00000 	.word	0x3ff00000

08007ebc <__d2b>:
 8007ebc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4690      	mov	r8, r2
 8007ec4:	4699      	mov	r9, r3
 8007ec6:	9e08      	ldr	r6, [sp, #32]
 8007ec8:	f7ff fc24 	bl	8007714 <_Balloc>
 8007ecc:	4604      	mov	r4, r0
 8007ece:	b930      	cbnz	r0, 8007ede <__d2b+0x22>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ed6:	4b23      	ldr	r3, [pc, #140]	@ (8007f64 <__d2b+0xa8>)
 8007ed8:	4823      	ldr	r0, [pc, #140]	@ (8007f68 <__d2b+0xac>)
 8007eda:	f001 f8f9 	bl	80090d0 <__assert_func>
 8007ede:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ee2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ee6:	b10d      	cbz	r5, 8007eec <__d2b+0x30>
 8007ee8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	f1b8 0300 	subs.w	r3, r8, #0
 8007ef2:	d024      	beq.n	8007f3e <__d2b+0x82>
 8007ef4:	4668      	mov	r0, sp
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	f7ff fd1d 	bl	8007936 <__lo0bits>
 8007efc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f00:	b1d8      	cbz	r0, 8007f3a <__d2b+0x7e>
 8007f02:	f1c0 0320 	rsb	r3, r0, #32
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	430b      	orrs	r3, r1
 8007f0c:	40c2      	lsrs	r2, r0
 8007f0e:	6163      	str	r3, [r4, #20]
 8007f10:	9201      	str	r2, [sp, #4]
 8007f12:	9b01      	ldr	r3, [sp, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	bf0c      	ite	eq
 8007f18:	2201      	moveq	r2, #1
 8007f1a:	2202      	movne	r2, #2
 8007f1c:	61a3      	str	r3, [r4, #24]
 8007f1e:	6122      	str	r2, [r4, #16]
 8007f20:	b1ad      	cbz	r5, 8007f4e <__d2b+0x92>
 8007f22:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f26:	4405      	add	r5, r0
 8007f28:	6035      	str	r5, [r6, #0]
 8007f2a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	6018      	str	r0, [r3, #0]
 8007f32:	4620      	mov	r0, r4
 8007f34:	b002      	add	sp, #8
 8007f36:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007f3a:	6161      	str	r1, [r4, #20]
 8007f3c:	e7e9      	b.n	8007f12 <__d2b+0x56>
 8007f3e:	a801      	add	r0, sp, #4
 8007f40:	f7ff fcf9 	bl	8007936 <__lo0bits>
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	6163      	str	r3, [r4, #20]
 8007f4a:	3020      	adds	r0, #32
 8007f4c:	e7e7      	b.n	8007f1e <__d2b+0x62>
 8007f4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f56:	6030      	str	r0, [r6, #0]
 8007f58:	6918      	ldr	r0, [r3, #16]
 8007f5a:	f7ff fccd 	bl	80078f8 <__hi0bits>
 8007f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f62:	e7e4      	b.n	8007f2e <__d2b+0x72>
 8007f64:	0800a0b8 	.word	0x0800a0b8
 8007f68:	0800a0c9 	.word	0x0800a0c9

08007f6c <__ratio>:
 8007f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	b085      	sub	sp, #20
 8007f72:	e9cd 1000 	strd	r1, r0, [sp]
 8007f76:	a902      	add	r1, sp, #8
 8007f78:	f7ff ff58 	bl	8007e2c <__b2d>
 8007f7c:	468b      	mov	fp, r1
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460f      	mov	r7, r1
 8007f82:	9800      	ldr	r0, [sp, #0]
 8007f84:	a903      	add	r1, sp, #12
 8007f86:	f7ff ff51 	bl	8007e2c <__b2d>
 8007f8a:	460d      	mov	r5, r1
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	4689      	mov	r9, r1
 8007f90:	6919      	ldr	r1, [r3, #16]
 8007f92:	9b00      	ldr	r3, [sp, #0]
 8007f94:	4604      	mov	r4, r0
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	4630      	mov	r0, r6
 8007f9a:	1ac9      	subs	r1, r1, r3
 8007f9c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bfcd      	iteet	gt
 8007faa:	463a      	movgt	r2, r7
 8007fac:	462a      	movle	r2, r5
 8007fae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007fb2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007fb6:	bfd8      	it	le
 8007fb8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007fbc:	464b      	mov	r3, r9
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	f7f8 fc67 	bl	8000894 <__aeabi_ddiv>
 8007fc6:	b005      	add	sp, #20
 8007fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fcc <__copybits>:
 8007fcc:	3901      	subs	r1, #1
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	1149      	asrs	r1, r1, #5
 8007fd2:	6914      	ldr	r4, [r2, #16]
 8007fd4:	3101      	adds	r1, #1
 8007fd6:	f102 0314 	add.w	r3, r2, #20
 8007fda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fe2:	1f05      	subs	r5, r0, #4
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	d30c      	bcc.n	8008002 <__copybits+0x36>
 8007fe8:	1aa3      	subs	r3, r4, r2
 8007fea:	3b11      	subs	r3, #17
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	3211      	adds	r2, #17
 8007ff2:	42a2      	cmp	r2, r4
 8007ff4:	bf88      	it	hi
 8007ff6:	2300      	movhi	r3, #0
 8007ff8:	4418      	add	r0, r3
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4288      	cmp	r0, r1
 8007ffe:	d305      	bcc.n	800800c <__copybits+0x40>
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	f853 6b04 	ldr.w	r6, [r3], #4
 8008006:	f845 6f04 	str.w	r6, [r5, #4]!
 800800a:	e7eb      	b.n	8007fe4 <__copybits+0x18>
 800800c:	f840 3b04 	str.w	r3, [r0], #4
 8008010:	e7f4      	b.n	8007ffc <__copybits+0x30>

08008012 <__any_on>:
 8008012:	f100 0214 	add.w	r2, r0, #20
 8008016:	6900      	ldr	r0, [r0, #16]
 8008018:	114b      	asrs	r3, r1, #5
 800801a:	4298      	cmp	r0, r3
 800801c:	b510      	push	{r4, lr}
 800801e:	db11      	blt.n	8008044 <__any_on+0x32>
 8008020:	dd0a      	ble.n	8008038 <__any_on+0x26>
 8008022:	f011 011f 	ands.w	r1, r1, #31
 8008026:	d007      	beq.n	8008038 <__any_on+0x26>
 8008028:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800802c:	fa24 f001 	lsr.w	r0, r4, r1
 8008030:	fa00 f101 	lsl.w	r1, r0, r1
 8008034:	428c      	cmp	r4, r1
 8008036:	d10b      	bne.n	8008050 <__any_on+0x3e>
 8008038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800803c:	4293      	cmp	r3, r2
 800803e:	d803      	bhi.n	8008048 <__any_on+0x36>
 8008040:	2000      	movs	r0, #0
 8008042:	bd10      	pop	{r4, pc}
 8008044:	4603      	mov	r3, r0
 8008046:	e7f7      	b.n	8008038 <__any_on+0x26>
 8008048:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800804c:	2900      	cmp	r1, #0
 800804e:	d0f5      	beq.n	800803c <__any_on+0x2a>
 8008050:	2001      	movs	r0, #1
 8008052:	e7f6      	b.n	8008042 <__any_on+0x30>

08008054 <sulp>:
 8008054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008058:	460f      	mov	r7, r1
 800805a:	4690      	mov	r8, r2
 800805c:	f7ff fec6 	bl	8007dec <__ulp>
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	f1b8 0f00 	cmp.w	r8, #0
 8008068:	d011      	beq.n	800808e <sulp+0x3a>
 800806a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800806e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008072:	2b00      	cmp	r3, #0
 8008074:	dd0b      	ble.n	800808e <sulp+0x3a>
 8008076:	2400      	movs	r4, #0
 8008078:	051b      	lsls	r3, r3, #20
 800807a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800807e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008082:	4622      	mov	r2, r4
 8008084:	462b      	mov	r3, r5
 8008086:	f7f8 fadb 	bl	8000640 <__aeabi_dmul>
 800808a:	4604      	mov	r4, r0
 800808c:	460d      	mov	r5, r1
 800808e:	4620      	mov	r0, r4
 8008090:	4629      	mov	r1, r5
 8008092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008098 <_strtod_l>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	b09f      	sub	sp, #124	@ 0x7c
 800809e:	9217      	str	r2, [sp, #92]	@ 0x5c
 80080a0:	2200      	movs	r2, #0
 80080a2:	460c      	mov	r4, r1
 80080a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80080a6:	f04f 0a00 	mov.w	sl, #0
 80080aa:	f04f 0b00 	mov.w	fp, #0
 80080ae:	460a      	mov	r2, r1
 80080b0:	9005      	str	r0, [sp, #20]
 80080b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80080b4:	7811      	ldrb	r1, [r2, #0]
 80080b6:	292b      	cmp	r1, #43	@ 0x2b
 80080b8:	d048      	beq.n	800814c <_strtod_l+0xb4>
 80080ba:	d836      	bhi.n	800812a <_strtod_l+0x92>
 80080bc:	290d      	cmp	r1, #13
 80080be:	d830      	bhi.n	8008122 <_strtod_l+0x8a>
 80080c0:	2908      	cmp	r1, #8
 80080c2:	d830      	bhi.n	8008126 <_strtod_l+0x8e>
 80080c4:	2900      	cmp	r1, #0
 80080c6:	d039      	beq.n	800813c <_strtod_l+0xa4>
 80080c8:	2200      	movs	r2, #0
 80080ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80080cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80080ce:	782a      	ldrb	r2, [r5, #0]
 80080d0:	2a30      	cmp	r2, #48	@ 0x30
 80080d2:	f040 80b0 	bne.w	8008236 <_strtod_l+0x19e>
 80080d6:	786a      	ldrb	r2, [r5, #1]
 80080d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080dc:	2a58      	cmp	r2, #88	@ 0x58
 80080de:	d16c      	bne.n	80081ba <_strtod_l+0x122>
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080e4:	4a8f      	ldr	r2, [pc, #572]	@ (8008324 <_strtod_l+0x28c>)
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	9805      	ldr	r0, [sp, #20]
 80080ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80080f0:	a919      	add	r1, sp, #100	@ 0x64
 80080f2:	f001 f887 	bl	8009204 <__gethex>
 80080f6:	f010 060f 	ands.w	r6, r0, #15
 80080fa:	4604      	mov	r4, r0
 80080fc:	d005      	beq.n	800810a <_strtod_l+0x72>
 80080fe:	2e06      	cmp	r6, #6
 8008100:	d126      	bne.n	8008150 <_strtod_l+0xb8>
 8008102:	2300      	movs	r3, #0
 8008104:	3501      	adds	r5, #1
 8008106:	9519      	str	r5, [sp, #100]	@ 0x64
 8008108:	930e      	str	r3, [sp, #56]	@ 0x38
 800810a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 8582 	bne.w	8008c16 <_strtod_l+0xb7e>
 8008112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008114:	b1bb      	cbz	r3, 8008146 <_strtod_l+0xae>
 8008116:	4650      	mov	r0, sl
 8008118:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800811c:	b01f      	add	sp, #124	@ 0x7c
 800811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008122:	2920      	cmp	r1, #32
 8008124:	d1d0      	bne.n	80080c8 <_strtod_l+0x30>
 8008126:	3201      	adds	r2, #1
 8008128:	e7c3      	b.n	80080b2 <_strtod_l+0x1a>
 800812a:	292d      	cmp	r1, #45	@ 0x2d
 800812c:	d1cc      	bne.n	80080c8 <_strtod_l+0x30>
 800812e:	2101      	movs	r1, #1
 8008130:	910e      	str	r1, [sp, #56]	@ 0x38
 8008132:	1c51      	adds	r1, r2, #1
 8008134:	9119      	str	r1, [sp, #100]	@ 0x64
 8008136:	7852      	ldrb	r2, [r2, #1]
 8008138:	2a00      	cmp	r2, #0
 800813a:	d1c7      	bne.n	80080cc <_strtod_l+0x34>
 800813c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800813e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008140:	2b00      	cmp	r3, #0
 8008142:	f040 8566 	bne.w	8008c12 <_strtod_l+0xb7a>
 8008146:	4650      	mov	r0, sl
 8008148:	4659      	mov	r1, fp
 800814a:	e7e7      	b.n	800811c <_strtod_l+0x84>
 800814c:	2100      	movs	r1, #0
 800814e:	e7ef      	b.n	8008130 <_strtod_l+0x98>
 8008150:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008152:	b13a      	cbz	r2, 8008164 <_strtod_l+0xcc>
 8008154:	2135      	movs	r1, #53	@ 0x35
 8008156:	a81c      	add	r0, sp, #112	@ 0x70
 8008158:	f7ff ff38 	bl	8007fcc <__copybits>
 800815c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800815e:	9805      	ldr	r0, [sp, #20]
 8008160:	f7ff fb18 	bl	8007794 <_Bfree>
 8008164:	3e01      	subs	r6, #1
 8008166:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008168:	2e04      	cmp	r6, #4
 800816a:	d806      	bhi.n	800817a <_strtod_l+0xe2>
 800816c:	e8df f006 	tbb	[pc, r6]
 8008170:	201d0314 	.word	0x201d0314
 8008174:	14          	.byte	0x14
 8008175:	00          	.byte	0x00
 8008176:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800817a:	05e1      	lsls	r1, r4, #23
 800817c:	bf48      	it	mi
 800817e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008182:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008186:	0d1b      	lsrs	r3, r3, #20
 8008188:	051b      	lsls	r3, r3, #20
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1bd      	bne.n	800810a <_strtod_l+0x72>
 800818e:	f7fe fb25 	bl	80067dc <__errno>
 8008192:	2322      	movs	r3, #34	@ 0x22
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	e7b8      	b.n	800810a <_strtod_l+0x72>
 8008198:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800819c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80081a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80081a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081a8:	e7e7      	b.n	800817a <_strtod_l+0xe2>
 80081aa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008328 <_strtod_l+0x290>
 80081ae:	e7e4      	b.n	800817a <_strtod_l+0xe2>
 80081b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80081b4:	f04f 3aff 	mov.w	sl, #4294967295
 80081b8:	e7df      	b.n	800817a <_strtod_l+0xe2>
 80081ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	9219      	str	r2, [sp, #100]	@ 0x64
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b30      	cmp	r3, #48	@ 0x30
 80081c4:	d0f9      	beq.n	80081ba <_strtod_l+0x122>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d09f      	beq.n	800810a <_strtod_l+0x72>
 80081ca:	2301      	movs	r3, #1
 80081cc:	2700      	movs	r7, #0
 80081ce:	220a      	movs	r2, #10
 80081d0:	46b9      	mov	r9, r7
 80081d2:	9308      	str	r3, [sp, #32]
 80081d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081d6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80081d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80081da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80081dc:	7805      	ldrb	r5, [r0, #0]
 80081de:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80081e2:	b2d9      	uxtb	r1, r3
 80081e4:	2909      	cmp	r1, #9
 80081e6:	d928      	bls.n	800823a <_strtod_l+0x1a2>
 80081e8:	2201      	movs	r2, #1
 80081ea:	4950      	ldr	r1, [pc, #320]	@ (800832c <_strtod_l+0x294>)
 80081ec:	f7fe fa83 	bl	80066f6 <strncmp>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d032      	beq.n	800825a <_strtod_l+0x1c2>
 80081f4:	2000      	movs	r0, #0
 80081f6:	462a      	mov	r2, r5
 80081f8:	4603      	mov	r3, r0
 80081fa:	464d      	mov	r5, r9
 80081fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80081fe:	2a65      	cmp	r2, #101	@ 0x65
 8008200:	d001      	beq.n	8008206 <_strtod_l+0x16e>
 8008202:	2a45      	cmp	r2, #69	@ 0x45
 8008204:	d114      	bne.n	8008230 <_strtod_l+0x198>
 8008206:	b91d      	cbnz	r5, 8008210 <_strtod_l+0x178>
 8008208:	9a08      	ldr	r2, [sp, #32]
 800820a:	4302      	orrs	r2, r0
 800820c:	d096      	beq.n	800813c <_strtod_l+0xa4>
 800820e:	2500      	movs	r5, #0
 8008210:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008212:	1c62      	adds	r2, r4, #1
 8008214:	9219      	str	r2, [sp, #100]	@ 0x64
 8008216:	7862      	ldrb	r2, [r4, #1]
 8008218:	2a2b      	cmp	r2, #43	@ 0x2b
 800821a:	d07a      	beq.n	8008312 <_strtod_l+0x27a>
 800821c:	2a2d      	cmp	r2, #45	@ 0x2d
 800821e:	d07e      	beq.n	800831e <_strtod_l+0x286>
 8008220:	f04f 0c00 	mov.w	ip, #0
 8008224:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008228:	2909      	cmp	r1, #9
 800822a:	f240 8085 	bls.w	8008338 <_strtod_l+0x2a0>
 800822e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008230:	f04f 0800 	mov.w	r8, #0
 8008234:	e0a5      	b.n	8008382 <_strtod_l+0x2ea>
 8008236:	2300      	movs	r3, #0
 8008238:	e7c8      	b.n	80081cc <_strtod_l+0x134>
 800823a:	f1b9 0f08 	cmp.w	r9, #8
 800823e:	bfd8      	it	le
 8008240:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008242:	f100 0001 	add.w	r0, r0, #1
 8008246:	bfd6      	itet	le
 8008248:	fb02 3301 	mlale	r3, r2, r1, r3
 800824c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008250:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008252:	f109 0901 	add.w	r9, r9, #1
 8008256:	9019      	str	r0, [sp, #100]	@ 0x64
 8008258:	e7bf      	b.n	80081da <_strtod_l+0x142>
 800825a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008260:	785a      	ldrb	r2, [r3, #1]
 8008262:	f1b9 0f00 	cmp.w	r9, #0
 8008266:	d03b      	beq.n	80082e0 <_strtod_l+0x248>
 8008268:	464d      	mov	r5, r9
 800826a:	900a      	str	r0, [sp, #40]	@ 0x28
 800826c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008270:	2b09      	cmp	r3, #9
 8008272:	d912      	bls.n	800829a <_strtod_l+0x202>
 8008274:	2301      	movs	r3, #1
 8008276:	e7c2      	b.n	80081fe <_strtod_l+0x166>
 8008278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800827a:	3001      	adds	r0, #1
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008280:	785a      	ldrb	r2, [r3, #1]
 8008282:	2a30      	cmp	r2, #48	@ 0x30
 8008284:	d0f8      	beq.n	8008278 <_strtod_l+0x1e0>
 8008286:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800828a:	2b08      	cmp	r3, #8
 800828c:	f200 84c8 	bhi.w	8008c20 <_strtod_l+0xb88>
 8008290:	900a      	str	r0, [sp, #40]	@ 0x28
 8008292:	2000      	movs	r0, #0
 8008294:	4605      	mov	r5, r0
 8008296:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008298:	930c      	str	r3, [sp, #48]	@ 0x30
 800829a:	3a30      	subs	r2, #48	@ 0x30
 800829c:	f100 0301 	add.w	r3, r0, #1
 80082a0:	d018      	beq.n	80082d4 <_strtod_l+0x23c>
 80082a2:	462e      	mov	r6, r5
 80082a4:	f04f 0e0a 	mov.w	lr, #10
 80082a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082aa:	4419      	add	r1, r3
 80082ac:	910a      	str	r1, [sp, #40]	@ 0x28
 80082ae:	1c71      	adds	r1, r6, #1
 80082b0:	eba1 0c05 	sub.w	ip, r1, r5
 80082b4:	4563      	cmp	r3, ip
 80082b6:	dc15      	bgt.n	80082e4 <_strtod_l+0x24c>
 80082b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80082bc:	182b      	adds	r3, r5, r0
 80082be:	2b08      	cmp	r3, #8
 80082c0:	f105 0501 	add.w	r5, r5, #1
 80082c4:	4405      	add	r5, r0
 80082c6:	dc1a      	bgt.n	80082fe <_strtod_l+0x266>
 80082c8:	230a      	movs	r3, #10
 80082ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082cc:	fb03 2301 	mla	r3, r3, r1, r2
 80082d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082d2:	2300      	movs	r3, #0
 80082d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082d6:	4618      	mov	r0, r3
 80082d8:	1c51      	adds	r1, r2, #1
 80082da:	9119      	str	r1, [sp, #100]	@ 0x64
 80082dc:	7852      	ldrb	r2, [r2, #1]
 80082de:	e7c5      	b.n	800826c <_strtod_l+0x1d4>
 80082e0:	4648      	mov	r0, r9
 80082e2:	e7ce      	b.n	8008282 <_strtod_l+0x1ea>
 80082e4:	2e08      	cmp	r6, #8
 80082e6:	dc05      	bgt.n	80082f4 <_strtod_l+0x25c>
 80082e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80082ea:	fb0e f606 	mul.w	r6, lr, r6
 80082ee:	960b      	str	r6, [sp, #44]	@ 0x2c
 80082f0:	460e      	mov	r6, r1
 80082f2:	e7dc      	b.n	80082ae <_strtod_l+0x216>
 80082f4:	2910      	cmp	r1, #16
 80082f6:	bfd8      	it	le
 80082f8:	fb0e f707 	mulle.w	r7, lr, r7
 80082fc:	e7f8      	b.n	80082f0 <_strtod_l+0x258>
 80082fe:	2b0f      	cmp	r3, #15
 8008300:	bfdc      	itt	le
 8008302:	230a      	movle	r3, #10
 8008304:	fb03 2707 	mlale	r7, r3, r7, r2
 8008308:	e7e3      	b.n	80082d2 <_strtod_l+0x23a>
 800830a:	2300      	movs	r3, #0
 800830c:	930a      	str	r3, [sp, #40]	@ 0x28
 800830e:	2301      	movs	r3, #1
 8008310:	e77a      	b.n	8008208 <_strtod_l+0x170>
 8008312:	f04f 0c00 	mov.w	ip, #0
 8008316:	1ca2      	adds	r2, r4, #2
 8008318:	9219      	str	r2, [sp, #100]	@ 0x64
 800831a:	78a2      	ldrb	r2, [r4, #2]
 800831c:	e782      	b.n	8008224 <_strtod_l+0x18c>
 800831e:	f04f 0c01 	mov.w	ip, #1
 8008322:	e7f8      	b.n	8008316 <_strtod_l+0x27e>
 8008324:	0800a2ec 	.word	0x0800a2ec
 8008328:	7ff00000 	.word	0x7ff00000
 800832c:	0800a122 	.word	0x0800a122
 8008330:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008332:	1c51      	adds	r1, r2, #1
 8008334:	9119      	str	r1, [sp, #100]	@ 0x64
 8008336:	7852      	ldrb	r2, [r2, #1]
 8008338:	2a30      	cmp	r2, #48	@ 0x30
 800833a:	d0f9      	beq.n	8008330 <_strtod_l+0x298>
 800833c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008340:	2908      	cmp	r1, #8
 8008342:	f63f af75 	bhi.w	8008230 <_strtod_l+0x198>
 8008346:	f04f 080a 	mov.w	r8, #10
 800834a:	3a30      	subs	r2, #48	@ 0x30
 800834c:	9209      	str	r2, [sp, #36]	@ 0x24
 800834e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008350:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008352:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008354:	1c56      	adds	r6, r2, #1
 8008356:	9619      	str	r6, [sp, #100]	@ 0x64
 8008358:	7852      	ldrb	r2, [r2, #1]
 800835a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800835e:	f1be 0f09 	cmp.w	lr, #9
 8008362:	d939      	bls.n	80083d8 <_strtod_l+0x340>
 8008364:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008366:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800836a:	1a76      	subs	r6, r6, r1
 800836c:	2e08      	cmp	r6, #8
 800836e:	dc03      	bgt.n	8008378 <_strtod_l+0x2e0>
 8008370:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008372:	4588      	cmp	r8, r1
 8008374:	bfa8      	it	ge
 8008376:	4688      	movge	r8, r1
 8008378:	f1bc 0f00 	cmp.w	ip, #0
 800837c:	d001      	beq.n	8008382 <_strtod_l+0x2ea>
 800837e:	f1c8 0800 	rsb	r8, r8, #0
 8008382:	2d00      	cmp	r5, #0
 8008384:	d14e      	bne.n	8008424 <_strtod_l+0x38c>
 8008386:	9908      	ldr	r1, [sp, #32]
 8008388:	4308      	orrs	r0, r1
 800838a:	f47f aebe 	bne.w	800810a <_strtod_l+0x72>
 800838e:	2b00      	cmp	r3, #0
 8008390:	f47f aed4 	bne.w	800813c <_strtod_l+0xa4>
 8008394:	2a69      	cmp	r2, #105	@ 0x69
 8008396:	d028      	beq.n	80083ea <_strtod_l+0x352>
 8008398:	dc25      	bgt.n	80083e6 <_strtod_l+0x34e>
 800839a:	2a49      	cmp	r2, #73	@ 0x49
 800839c:	d025      	beq.n	80083ea <_strtod_l+0x352>
 800839e:	2a4e      	cmp	r2, #78	@ 0x4e
 80083a0:	f47f aecc 	bne.w	800813c <_strtod_l+0xa4>
 80083a4:	4999      	ldr	r1, [pc, #612]	@ (800860c <_strtod_l+0x574>)
 80083a6:	a819      	add	r0, sp, #100	@ 0x64
 80083a8:	f001 f94e 	bl	8009648 <__match>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f43f aec5 	beq.w	800813c <_strtod_l+0xa4>
 80083b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b28      	cmp	r3, #40	@ 0x28
 80083b8:	d12e      	bne.n	8008418 <_strtod_l+0x380>
 80083ba:	4995      	ldr	r1, [pc, #596]	@ (8008610 <_strtod_l+0x578>)
 80083bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80083be:	a819      	add	r0, sp, #100	@ 0x64
 80083c0:	f001 f956 	bl	8009670 <__hexnan>
 80083c4:	2805      	cmp	r0, #5
 80083c6:	d127      	bne.n	8008418 <_strtod_l+0x380>
 80083c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80083ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80083d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80083d6:	e698      	b.n	800810a <_strtod_l+0x72>
 80083d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083da:	fb08 2101 	mla	r1, r8, r1, r2
 80083de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80083e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083e4:	e7b5      	b.n	8008352 <_strtod_l+0x2ba>
 80083e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80083e8:	e7da      	b.n	80083a0 <_strtod_l+0x308>
 80083ea:	498a      	ldr	r1, [pc, #552]	@ (8008614 <_strtod_l+0x57c>)
 80083ec:	a819      	add	r0, sp, #100	@ 0x64
 80083ee:	f001 f92b 	bl	8009648 <__match>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f43f aea2 	beq.w	800813c <_strtod_l+0xa4>
 80083f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083fa:	4987      	ldr	r1, [pc, #540]	@ (8008618 <_strtod_l+0x580>)
 80083fc:	3b01      	subs	r3, #1
 80083fe:	a819      	add	r0, sp, #100	@ 0x64
 8008400:	9319      	str	r3, [sp, #100]	@ 0x64
 8008402:	f001 f921 	bl	8009648 <__match>
 8008406:	b910      	cbnz	r0, 800840e <_strtod_l+0x376>
 8008408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800840a:	3301      	adds	r3, #1
 800840c:	9319      	str	r3, [sp, #100]	@ 0x64
 800840e:	f04f 0a00 	mov.w	sl, #0
 8008412:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800861c <_strtod_l+0x584>
 8008416:	e678      	b.n	800810a <_strtod_l+0x72>
 8008418:	4881      	ldr	r0, [pc, #516]	@ (8008620 <_strtod_l+0x588>)
 800841a:	f000 fe53 	bl	80090c4 <nan>
 800841e:	4682      	mov	sl, r0
 8008420:	468b      	mov	fp, r1
 8008422:	e672      	b.n	800810a <_strtod_l+0x72>
 8008424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	bf08      	it	eq
 800842c:	46a9      	moveq	r9, r5
 800842e:	eba8 0303 	sub.w	r3, r8, r3
 8008432:	2d10      	cmp	r5, #16
 8008434:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008436:	462c      	mov	r4, r5
 8008438:	9309      	str	r3, [sp, #36]	@ 0x24
 800843a:	bfa8      	it	ge
 800843c:	2410      	movge	r4, #16
 800843e:	f7f8 f885 	bl	800054c <__aeabi_ui2d>
 8008442:	2d09      	cmp	r5, #9
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	dc11      	bgt.n	800846e <_strtod_l+0x3d6>
 800844a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	f43f ae5c 	beq.w	800810a <_strtod_l+0x72>
 8008452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008454:	dd76      	ble.n	8008544 <_strtod_l+0x4ac>
 8008456:	2b16      	cmp	r3, #22
 8008458:	dc5d      	bgt.n	8008516 <_strtod_l+0x47e>
 800845a:	4972      	ldr	r1, [pc, #456]	@ (8008624 <_strtod_l+0x58c>)
 800845c:	4652      	mov	r2, sl
 800845e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008462:	465b      	mov	r3, fp
 8008464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008468:	f7f8 f8ea 	bl	8000640 <__aeabi_dmul>
 800846c:	e7d7      	b.n	800841e <_strtod_l+0x386>
 800846e:	4b6d      	ldr	r3, [pc, #436]	@ (8008624 <_strtod_l+0x58c>)
 8008470:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008474:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008478:	f7f8 f8e2 	bl	8000640 <__aeabi_dmul>
 800847c:	4682      	mov	sl, r0
 800847e:	4638      	mov	r0, r7
 8008480:	468b      	mov	fp, r1
 8008482:	f7f8 f863 	bl	800054c <__aeabi_ui2d>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4650      	mov	r0, sl
 800848c:	4659      	mov	r1, fp
 800848e:	f7f7 ff21 	bl	80002d4 <__adddf3>
 8008492:	2d0f      	cmp	r5, #15
 8008494:	4682      	mov	sl, r0
 8008496:	468b      	mov	fp, r1
 8008498:	ddd7      	ble.n	800844a <_strtod_l+0x3b2>
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	1b2c      	subs	r4, r5, r4
 800849e:	441c      	add	r4, r3
 80084a0:	2c00      	cmp	r4, #0
 80084a2:	f340 8093 	ble.w	80085cc <_strtod_l+0x534>
 80084a6:	f014 030f 	ands.w	r3, r4, #15
 80084aa:	d00a      	beq.n	80084c2 <_strtod_l+0x42a>
 80084ac:	495d      	ldr	r1, [pc, #372]	@ (8008624 <_strtod_l+0x58c>)
 80084ae:	4652      	mov	r2, sl
 80084b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b8:	465b      	mov	r3, fp
 80084ba:	f7f8 f8c1 	bl	8000640 <__aeabi_dmul>
 80084be:	4682      	mov	sl, r0
 80084c0:	468b      	mov	fp, r1
 80084c2:	f034 040f 	bics.w	r4, r4, #15
 80084c6:	d073      	beq.n	80085b0 <_strtod_l+0x518>
 80084c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80084cc:	dd49      	ble.n	8008562 <_strtod_l+0x4ca>
 80084ce:	2400      	movs	r4, #0
 80084d0:	46a0      	mov	r8, r4
 80084d2:	46a1      	mov	r9, r4
 80084d4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084d6:	2322      	movs	r3, #34	@ 0x22
 80084d8:	f04f 0a00 	mov.w	sl, #0
 80084dc:	9a05      	ldr	r2, [sp, #20]
 80084de:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800861c <_strtod_l+0x584>
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f43f ae0f 	beq.w	800810a <_strtod_l+0x72>
 80084ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084ee:	9805      	ldr	r0, [sp, #20]
 80084f0:	f7ff f950 	bl	8007794 <_Bfree>
 80084f4:	4649      	mov	r1, r9
 80084f6:	9805      	ldr	r0, [sp, #20]
 80084f8:	f7ff f94c 	bl	8007794 <_Bfree>
 80084fc:	4641      	mov	r1, r8
 80084fe:	9805      	ldr	r0, [sp, #20]
 8008500:	f7ff f948 	bl	8007794 <_Bfree>
 8008504:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008506:	9805      	ldr	r0, [sp, #20]
 8008508:	f7ff f944 	bl	8007794 <_Bfree>
 800850c:	4621      	mov	r1, r4
 800850e:	9805      	ldr	r0, [sp, #20]
 8008510:	f7ff f940 	bl	8007794 <_Bfree>
 8008514:	e5f9      	b.n	800810a <_strtod_l+0x72>
 8008516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008518:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800851c:	4293      	cmp	r3, r2
 800851e:	dbbc      	blt.n	800849a <_strtod_l+0x402>
 8008520:	4c40      	ldr	r4, [pc, #256]	@ (8008624 <_strtod_l+0x58c>)
 8008522:	f1c5 050f 	rsb	r5, r5, #15
 8008526:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800852a:	4652      	mov	r2, sl
 800852c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008530:	465b      	mov	r3, fp
 8008532:	f7f8 f885 	bl	8000640 <__aeabi_dmul>
 8008536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008538:	1b5d      	subs	r5, r3, r5
 800853a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800853e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008542:	e791      	b.n	8008468 <_strtod_l+0x3d0>
 8008544:	3316      	adds	r3, #22
 8008546:	dba8      	blt.n	800849a <_strtod_l+0x402>
 8008548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800854a:	4650      	mov	r0, sl
 800854c:	eba3 0808 	sub.w	r8, r3, r8
 8008550:	4b34      	ldr	r3, [pc, #208]	@ (8008624 <_strtod_l+0x58c>)
 8008552:	4659      	mov	r1, fp
 8008554:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008558:	e9d8 2300 	ldrd	r2, r3, [r8]
 800855c:	f7f8 f99a 	bl	8000894 <__aeabi_ddiv>
 8008560:	e75d      	b.n	800841e <_strtod_l+0x386>
 8008562:	2300      	movs	r3, #0
 8008564:	4650      	mov	r0, sl
 8008566:	4659      	mov	r1, fp
 8008568:	461e      	mov	r6, r3
 800856a:	4f2f      	ldr	r7, [pc, #188]	@ (8008628 <_strtod_l+0x590>)
 800856c:	1124      	asrs	r4, r4, #4
 800856e:	2c01      	cmp	r4, #1
 8008570:	dc21      	bgt.n	80085b6 <_strtod_l+0x51e>
 8008572:	b10b      	cbz	r3, 8008578 <_strtod_l+0x4e0>
 8008574:	4682      	mov	sl, r0
 8008576:	468b      	mov	fp, r1
 8008578:	492b      	ldr	r1, [pc, #172]	@ (8008628 <_strtod_l+0x590>)
 800857a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800857e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008582:	4652      	mov	r2, sl
 8008584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008588:	465b      	mov	r3, fp
 800858a:	f7f8 f859 	bl	8000640 <__aeabi_dmul>
 800858e:	4b23      	ldr	r3, [pc, #140]	@ (800861c <_strtod_l+0x584>)
 8008590:	460a      	mov	r2, r1
 8008592:	400b      	ands	r3, r1
 8008594:	4925      	ldr	r1, [pc, #148]	@ (800862c <_strtod_l+0x594>)
 8008596:	4682      	mov	sl, r0
 8008598:	428b      	cmp	r3, r1
 800859a:	d898      	bhi.n	80084ce <_strtod_l+0x436>
 800859c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf86      	itte	hi
 80085a4:	f04f 3aff 	movhi.w	sl, #4294967295
 80085a8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008630 <_strtod_l+0x598>
 80085ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80085b0:	2300      	movs	r3, #0
 80085b2:	9308      	str	r3, [sp, #32]
 80085b4:	e076      	b.n	80086a4 <_strtod_l+0x60c>
 80085b6:	07e2      	lsls	r2, r4, #31
 80085b8:	d504      	bpl.n	80085c4 <_strtod_l+0x52c>
 80085ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085be:	f7f8 f83f 	bl	8000640 <__aeabi_dmul>
 80085c2:	2301      	movs	r3, #1
 80085c4:	3601      	adds	r6, #1
 80085c6:	1064      	asrs	r4, r4, #1
 80085c8:	3708      	adds	r7, #8
 80085ca:	e7d0      	b.n	800856e <_strtod_l+0x4d6>
 80085cc:	d0f0      	beq.n	80085b0 <_strtod_l+0x518>
 80085ce:	4264      	negs	r4, r4
 80085d0:	f014 020f 	ands.w	r2, r4, #15
 80085d4:	d00a      	beq.n	80085ec <_strtod_l+0x554>
 80085d6:	4b13      	ldr	r3, [pc, #76]	@ (8008624 <_strtod_l+0x58c>)
 80085d8:	4650      	mov	r0, sl
 80085da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085de:	4659      	mov	r1, fp
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f7f8 f956 	bl	8000894 <__aeabi_ddiv>
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	1124      	asrs	r4, r4, #4
 80085ee:	d0df      	beq.n	80085b0 <_strtod_l+0x518>
 80085f0:	2c1f      	cmp	r4, #31
 80085f2:	dd1f      	ble.n	8008634 <_strtod_l+0x59c>
 80085f4:	2400      	movs	r4, #0
 80085f6:	46a0      	mov	r8, r4
 80085f8:	46a1      	mov	r9, r4
 80085fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085fc:	2322      	movs	r3, #34	@ 0x22
 80085fe:	9a05      	ldr	r2, [sp, #20]
 8008600:	f04f 0a00 	mov.w	sl, #0
 8008604:	f04f 0b00 	mov.w	fp, #0
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	e76b      	b.n	80084e4 <_strtod_l+0x44c>
 800860c:	0800a010 	.word	0x0800a010
 8008610:	0800a2d8 	.word	0x0800a2d8
 8008614:	0800a008 	.word	0x0800a008
 8008618:	0800a03f 	.word	0x0800a03f
 800861c:	7ff00000 	.word	0x7ff00000
 8008620:	0800a178 	.word	0x0800a178
 8008624:	0800a210 	.word	0x0800a210
 8008628:	0800a1e8 	.word	0x0800a1e8
 800862c:	7ca00000 	.word	0x7ca00000
 8008630:	7fefffff 	.word	0x7fefffff
 8008634:	f014 0310 	ands.w	r3, r4, #16
 8008638:	bf18      	it	ne
 800863a:	236a      	movne	r3, #106	@ 0x6a
 800863c:	4650      	mov	r0, sl
 800863e:	9308      	str	r3, [sp, #32]
 8008640:	4659      	mov	r1, fp
 8008642:	2300      	movs	r3, #0
 8008644:	4e77      	ldr	r6, [pc, #476]	@ (8008824 <_strtod_l+0x78c>)
 8008646:	07e7      	lsls	r7, r4, #31
 8008648:	d504      	bpl.n	8008654 <_strtod_l+0x5bc>
 800864a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800864e:	f7f7 fff7 	bl	8000640 <__aeabi_dmul>
 8008652:	2301      	movs	r3, #1
 8008654:	1064      	asrs	r4, r4, #1
 8008656:	f106 0608 	add.w	r6, r6, #8
 800865a:	d1f4      	bne.n	8008646 <_strtod_l+0x5ae>
 800865c:	b10b      	cbz	r3, 8008662 <_strtod_l+0x5ca>
 800865e:	4682      	mov	sl, r0
 8008660:	468b      	mov	fp, r1
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	b1b3      	cbz	r3, 8008694 <_strtod_l+0x5fc>
 8008666:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800866a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800866e:	2b00      	cmp	r3, #0
 8008670:	4659      	mov	r1, fp
 8008672:	dd0f      	ble.n	8008694 <_strtod_l+0x5fc>
 8008674:	2b1f      	cmp	r3, #31
 8008676:	dd58      	ble.n	800872a <_strtod_l+0x692>
 8008678:	2b34      	cmp	r3, #52	@ 0x34
 800867a:	bfd8      	it	le
 800867c:	f04f 33ff 	movle.w	r3, #4294967295
 8008680:	f04f 0a00 	mov.w	sl, #0
 8008684:	bfcf      	iteee	gt
 8008686:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800868a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800868e:	4093      	lslle	r3, r2
 8008690:	ea03 0b01 	andle.w	fp, r3, r1
 8008694:	2200      	movs	r2, #0
 8008696:	2300      	movs	r3, #0
 8008698:	4650      	mov	r0, sl
 800869a:	4659      	mov	r1, fp
 800869c:	f7f8 fa38 	bl	8000b10 <__aeabi_dcmpeq>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d1a7      	bne.n	80085f4 <_strtod_l+0x55c>
 80086a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086a6:	464a      	mov	r2, r9
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80086ac:	462b      	mov	r3, r5
 80086ae:	9805      	ldr	r0, [sp, #20]
 80086b0:	f7ff f8d8 	bl	8007864 <__s2b>
 80086b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f43f af09 	beq.w	80084ce <_strtod_l+0x436>
 80086bc:	2400      	movs	r4, #0
 80086be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	eba3 0308 	sub.w	r3, r3, r8
 80086c8:	bfa8      	it	ge
 80086ca:	2300      	movge	r3, #0
 80086cc:	46a0      	mov	r8, r4
 80086ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80086d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80086d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80086d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d8:	9805      	ldr	r0, [sp, #20]
 80086da:	6859      	ldr	r1, [r3, #4]
 80086dc:	f7ff f81a 	bl	8007714 <_Balloc>
 80086e0:	4681      	mov	r9, r0
 80086e2:	2800      	cmp	r0, #0
 80086e4:	f43f aef7 	beq.w	80084d6 <_strtod_l+0x43e>
 80086e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ea:	300c      	adds	r0, #12
 80086ec:	691a      	ldr	r2, [r3, #16]
 80086ee:	f103 010c 	add.w	r1, r3, #12
 80086f2:	3202      	adds	r2, #2
 80086f4:	0092      	lsls	r2, r2, #2
 80086f6:	f000 fcd7 	bl	80090a8 <memcpy>
 80086fa:	ab1c      	add	r3, sp, #112	@ 0x70
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4652      	mov	r2, sl
 8008704:	465b      	mov	r3, fp
 8008706:	9805      	ldr	r0, [sp, #20]
 8008708:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800870c:	f7ff fbd6 	bl	8007ebc <__d2b>
 8008710:	901a      	str	r0, [sp, #104]	@ 0x68
 8008712:	2800      	cmp	r0, #0
 8008714:	f43f aedf 	beq.w	80084d6 <_strtod_l+0x43e>
 8008718:	2101      	movs	r1, #1
 800871a:	9805      	ldr	r0, [sp, #20]
 800871c:	f7ff f938 	bl	8007990 <__i2b>
 8008720:	4680      	mov	r8, r0
 8008722:	b948      	cbnz	r0, 8008738 <_strtod_l+0x6a0>
 8008724:	f04f 0800 	mov.w	r8, #0
 8008728:	e6d5      	b.n	80084d6 <_strtod_l+0x43e>
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	ea03 0a0a 	and.w	sl, r3, sl
 8008736:	e7ad      	b.n	8008694 <_strtod_l+0x5fc>
 8008738:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800873a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800873c:	2d00      	cmp	r5, #0
 800873e:	bfab      	itete	ge
 8008740:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008742:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008744:	18ef      	addge	r7, r5, r3
 8008746:	1b5e      	sublt	r6, r3, r5
 8008748:	9b08      	ldr	r3, [sp, #32]
 800874a:	bfa8      	it	ge
 800874c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800874e:	eba5 0503 	sub.w	r5, r5, r3
 8008752:	4415      	add	r5, r2
 8008754:	4b34      	ldr	r3, [pc, #208]	@ (8008828 <_strtod_l+0x790>)
 8008756:	f105 35ff 	add.w	r5, r5, #4294967295
 800875a:	bfb8      	it	lt
 800875c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800875e:	429d      	cmp	r5, r3
 8008760:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008764:	da50      	bge.n	8008808 <_strtod_l+0x770>
 8008766:	1b5b      	subs	r3, r3, r5
 8008768:	2b1f      	cmp	r3, #31
 800876a:	f04f 0101 	mov.w	r1, #1
 800876e:	eba2 0203 	sub.w	r2, r2, r3
 8008772:	dc3d      	bgt.n	80087f0 <_strtod_l+0x758>
 8008774:	fa01 f303 	lsl.w	r3, r1, r3
 8008778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800877a:	2300      	movs	r3, #0
 800877c:	9310      	str	r3, [sp, #64]	@ 0x40
 800877e:	18bd      	adds	r5, r7, r2
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	42af      	cmp	r7, r5
 8008784:	4416      	add	r6, r2
 8008786:	441e      	add	r6, r3
 8008788:	463b      	mov	r3, r7
 800878a:	bfa8      	it	ge
 800878c:	462b      	movge	r3, r5
 800878e:	42b3      	cmp	r3, r6
 8008790:	bfa8      	it	ge
 8008792:	4633      	movge	r3, r6
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfc2      	ittt	gt
 8008798:	1aed      	subgt	r5, r5, r3
 800879a:	1af6      	subgt	r6, r6, r3
 800879c:	1aff      	subgt	r7, r7, r3
 800879e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	dd16      	ble.n	80087d2 <_strtod_l+0x73a>
 80087a4:	4641      	mov	r1, r8
 80087a6:	461a      	mov	r2, r3
 80087a8:	9805      	ldr	r0, [sp, #20]
 80087aa:	f7ff f9a9 	bl	8007b00 <__pow5mult>
 80087ae:	4680      	mov	r8, r0
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d0b7      	beq.n	8008724 <_strtod_l+0x68c>
 80087b4:	4601      	mov	r1, r0
 80087b6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087b8:	9805      	ldr	r0, [sp, #20]
 80087ba:	f7ff f8ff 	bl	80079bc <__multiply>
 80087be:	900a      	str	r0, [sp, #40]	@ 0x28
 80087c0:	2800      	cmp	r0, #0
 80087c2:	f43f ae88 	beq.w	80084d6 <_strtod_l+0x43e>
 80087c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087c8:	9805      	ldr	r0, [sp, #20]
 80087ca:	f7fe ffe3 	bl	8007794 <_Bfree>
 80087ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80087d2:	2d00      	cmp	r5, #0
 80087d4:	dc1d      	bgt.n	8008812 <_strtod_l+0x77a>
 80087d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dd27      	ble.n	800882c <_strtod_l+0x794>
 80087dc:	4649      	mov	r1, r9
 80087de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80087e0:	9805      	ldr	r0, [sp, #20]
 80087e2:	f7ff f98d 	bl	8007b00 <__pow5mult>
 80087e6:	4681      	mov	r9, r0
 80087e8:	bb00      	cbnz	r0, 800882c <_strtod_l+0x794>
 80087ea:	f04f 0900 	mov.w	r9, #0
 80087ee:	e672      	b.n	80084d6 <_strtod_l+0x43e>
 80087f0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80087f4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80087f8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80087fc:	35e2      	adds	r5, #226	@ 0xe2
 80087fe:	fa01 f305 	lsl.w	r3, r1, r5
 8008802:	9310      	str	r3, [sp, #64]	@ 0x40
 8008804:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008806:	e7ba      	b.n	800877e <_strtod_l+0x6e6>
 8008808:	2300      	movs	r3, #0
 800880a:	9310      	str	r3, [sp, #64]	@ 0x40
 800880c:	2301      	movs	r3, #1
 800880e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008810:	e7b5      	b.n	800877e <_strtod_l+0x6e6>
 8008812:	462a      	mov	r2, r5
 8008814:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008816:	9805      	ldr	r0, [sp, #20]
 8008818:	f7ff f9cc 	bl	8007bb4 <__lshift>
 800881c:	901a      	str	r0, [sp, #104]	@ 0x68
 800881e:	2800      	cmp	r0, #0
 8008820:	d1d9      	bne.n	80087d6 <_strtod_l+0x73e>
 8008822:	e658      	b.n	80084d6 <_strtod_l+0x43e>
 8008824:	0800a300 	.word	0x0800a300
 8008828:	fffffc02 	.word	0xfffffc02
 800882c:	2e00      	cmp	r6, #0
 800882e:	dd07      	ble.n	8008840 <_strtod_l+0x7a8>
 8008830:	4649      	mov	r1, r9
 8008832:	4632      	mov	r2, r6
 8008834:	9805      	ldr	r0, [sp, #20]
 8008836:	f7ff f9bd 	bl	8007bb4 <__lshift>
 800883a:	4681      	mov	r9, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d0d4      	beq.n	80087ea <_strtod_l+0x752>
 8008840:	2f00      	cmp	r7, #0
 8008842:	dd08      	ble.n	8008856 <_strtod_l+0x7be>
 8008844:	4641      	mov	r1, r8
 8008846:	463a      	mov	r2, r7
 8008848:	9805      	ldr	r0, [sp, #20]
 800884a:	f7ff f9b3 	bl	8007bb4 <__lshift>
 800884e:	4680      	mov	r8, r0
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f ae40 	beq.w	80084d6 <_strtod_l+0x43e>
 8008856:	464a      	mov	r2, r9
 8008858:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800885a:	9805      	ldr	r0, [sp, #20]
 800885c:	f7ff fa32 	bl	8007cc4 <__mdiff>
 8008860:	4604      	mov	r4, r0
 8008862:	2800      	cmp	r0, #0
 8008864:	f43f ae37 	beq.w	80084d6 <_strtod_l+0x43e>
 8008868:	68c3      	ldr	r3, [r0, #12]
 800886a:	4641      	mov	r1, r8
 800886c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800886e:	2300      	movs	r3, #0
 8008870:	60c3      	str	r3, [r0, #12]
 8008872:	f7ff fa0b 	bl	8007c8c <__mcmp>
 8008876:	2800      	cmp	r0, #0
 8008878:	da3d      	bge.n	80088f6 <_strtod_l+0x85e>
 800887a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800887c:	ea53 030a 	orrs.w	r3, r3, sl
 8008880:	d163      	bne.n	800894a <_strtod_l+0x8b2>
 8008882:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008886:	2b00      	cmp	r3, #0
 8008888:	d15f      	bne.n	800894a <_strtod_l+0x8b2>
 800888a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800888e:	0d1b      	lsrs	r3, r3, #20
 8008890:	051b      	lsls	r3, r3, #20
 8008892:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008896:	d958      	bls.n	800894a <_strtod_l+0x8b2>
 8008898:	6963      	ldr	r3, [r4, #20]
 800889a:	b913      	cbnz	r3, 80088a2 <_strtod_l+0x80a>
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	dd53      	ble.n	800894a <_strtod_l+0x8b2>
 80088a2:	4621      	mov	r1, r4
 80088a4:	2201      	movs	r2, #1
 80088a6:	9805      	ldr	r0, [sp, #20]
 80088a8:	f7ff f984 	bl	8007bb4 <__lshift>
 80088ac:	4641      	mov	r1, r8
 80088ae:	4604      	mov	r4, r0
 80088b0:	f7ff f9ec 	bl	8007c8c <__mcmp>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	dd48      	ble.n	800894a <_strtod_l+0x8b2>
 80088b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088bc:	9a08      	ldr	r2, [sp, #32]
 80088be:	0d1b      	lsrs	r3, r3, #20
 80088c0:	051b      	lsls	r3, r3, #20
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	d062      	beq.n	800898c <_strtod_l+0x8f4>
 80088c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80088ca:	d85f      	bhi.n	800898c <_strtod_l+0x8f4>
 80088cc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80088d0:	f67f ae94 	bls.w	80085fc <_strtod_l+0x564>
 80088d4:	4650      	mov	r0, sl
 80088d6:	4659      	mov	r1, fp
 80088d8:	4ba3      	ldr	r3, [pc, #652]	@ (8008b68 <_strtod_l+0xad0>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 feb0 	bl	8000640 <__aeabi_dmul>
 80088e0:	4ba2      	ldr	r3, [pc, #648]	@ (8008b6c <_strtod_l+0xad4>)
 80088e2:	4682      	mov	sl, r0
 80088e4:	400b      	ands	r3, r1
 80088e6:	468b      	mov	fp, r1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f47f adff 	bne.w	80084ec <_strtod_l+0x454>
 80088ee:	2322      	movs	r3, #34	@ 0x22
 80088f0:	9a05      	ldr	r2, [sp, #20]
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e5fa      	b.n	80084ec <_strtod_l+0x454>
 80088f6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80088fa:	d165      	bne.n	80089c8 <_strtod_l+0x930>
 80088fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80088fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008902:	b35a      	cbz	r2, 800895c <_strtod_l+0x8c4>
 8008904:	4a9a      	ldr	r2, [pc, #616]	@ (8008b70 <_strtod_l+0xad8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d12b      	bne.n	8008962 <_strtod_l+0x8ca>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	4651      	mov	r1, sl
 800890e:	b303      	cbz	r3, 8008952 <_strtod_l+0x8ba>
 8008910:	465a      	mov	r2, fp
 8008912:	4b96      	ldr	r3, [pc, #600]	@ (8008b6c <_strtod_l+0xad4>)
 8008914:	4013      	ands	r3, r2
 8008916:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800891a:	f04f 32ff 	mov.w	r2, #4294967295
 800891e:	d81b      	bhi.n	8008958 <_strtod_l+0x8c0>
 8008920:	0d1b      	lsrs	r3, r3, #20
 8008922:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	4299      	cmp	r1, r3
 800892c:	d119      	bne.n	8008962 <_strtod_l+0x8ca>
 800892e:	4b91      	ldr	r3, [pc, #580]	@ (8008b74 <_strtod_l+0xadc>)
 8008930:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008932:	429a      	cmp	r2, r3
 8008934:	d102      	bne.n	800893c <_strtod_l+0x8a4>
 8008936:	3101      	adds	r1, #1
 8008938:	f43f adcd 	beq.w	80084d6 <_strtod_l+0x43e>
 800893c:	f04f 0a00 	mov.w	sl, #0
 8008940:	4b8a      	ldr	r3, [pc, #552]	@ (8008b6c <_strtod_l+0xad4>)
 8008942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008944:	401a      	ands	r2, r3
 8008946:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1c1      	bne.n	80088d4 <_strtod_l+0x83c>
 8008950:	e5cc      	b.n	80084ec <_strtod_l+0x454>
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	e7e8      	b.n	800892a <_strtod_l+0x892>
 8008958:	4613      	mov	r3, r2
 800895a:	e7e6      	b.n	800892a <_strtod_l+0x892>
 800895c:	ea53 030a 	orrs.w	r3, r3, sl
 8008960:	d0aa      	beq.n	80088b8 <_strtod_l+0x820>
 8008962:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008964:	b1db      	cbz	r3, 800899e <_strtod_l+0x906>
 8008966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008968:	4213      	tst	r3, r2
 800896a:	d0ee      	beq.n	800894a <_strtod_l+0x8b2>
 800896c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800896e:	4650      	mov	r0, sl
 8008970:	4659      	mov	r1, fp
 8008972:	9a08      	ldr	r2, [sp, #32]
 8008974:	b1bb      	cbz	r3, 80089a6 <_strtod_l+0x90e>
 8008976:	f7ff fb6d 	bl	8008054 <sulp>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008982:	f7f7 fca7 	bl	80002d4 <__adddf3>
 8008986:	4682      	mov	sl, r0
 8008988:	468b      	mov	fp, r1
 800898a:	e7de      	b.n	800894a <_strtod_l+0x8b2>
 800898c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008990:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008994:	f04f 3aff 	mov.w	sl, #4294967295
 8008998:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800899c:	e7d5      	b.n	800894a <_strtod_l+0x8b2>
 800899e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089a0:	ea13 0f0a 	tst.w	r3, sl
 80089a4:	e7e1      	b.n	800896a <_strtod_l+0x8d2>
 80089a6:	f7ff fb55 	bl	8008054 <sulp>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089b2:	f7f7 fc8d 	bl	80002d0 <__aeabi_dsub>
 80089b6:	2200      	movs	r2, #0
 80089b8:	2300      	movs	r3, #0
 80089ba:	4682      	mov	sl, r0
 80089bc:	468b      	mov	fp, r1
 80089be:	f7f8 f8a7 	bl	8000b10 <__aeabi_dcmpeq>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d0c1      	beq.n	800894a <_strtod_l+0x8b2>
 80089c6:	e619      	b.n	80085fc <_strtod_l+0x564>
 80089c8:	4641      	mov	r1, r8
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7ff face 	bl	8007f6c <__ratio>
 80089d0:	2200      	movs	r2, #0
 80089d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	f7f8 f8ad 	bl	8000b38 <__aeabi_dcmple>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d06d      	beq.n	8008abe <_strtod_l+0xa26>
 80089e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d178      	bne.n	8008ada <_strtod_l+0xa42>
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	d156      	bne.n	8008a9c <_strtod_l+0xa04>
 80089ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d158      	bne.n	8008aaa <_strtod_l+0xa12>
 80089f8:	2200      	movs	r2, #0
 80089fa:	4630      	mov	r0, r6
 80089fc:	4639      	mov	r1, r7
 80089fe:	4b5e      	ldr	r3, [pc, #376]	@ (8008b78 <_strtod_l+0xae0>)
 8008a00:	f7f8 f890 	bl	8000b24 <__aeabi_dcmplt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d157      	bne.n	8008ab8 <_strtod_l+0xa20>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8008b7c <_strtod_l+0xae4>)
 8008a10:	f7f7 fe16 	bl	8000640 <__aeabi_dmul>
 8008a14:	4606      	mov	r6, r0
 8008a16:	460f      	mov	r7, r1
 8008a18:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008a1c:	9606      	str	r6, [sp, #24]
 8008a1e:	9307      	str	r3, [sp, #28]
 8008a20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a24:	4d51      	ldr	r5, [pc, #324]	@ (8008b6c <_strtod_l+0xad4>)
 8008a26:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a2c:	401d      	ands	r5, r3
 8008a2e:	4b54      	ldr	r3, [pc, #336]	@ (8008b80 <_strtod_l+0xae8>)
 8008a30:	429d      	cmp	r5, r3
 8008a32:	f040 80ab 	bne.w	8008b8c <_strtod_l+0xaf4>
 8008a36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a38:	4650      	mov	r0, sl
 8008a3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008a3e:	4659      	mov	r1, fp
 8008a40:	f7ff f9d4 	bl	8007dec <__ulp>
 8008a44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a48:	f7f7 fdfa 	bl	8000640 <__aeabi_dmul>
 8008a4c:	4652      	mov	r2, sl
 8008a4e:	465b      	mov	r3, fp
 8008a50:	f7f7 fc40 	bl	80002d4 <__adddf3>
 8008a54:	460b      	mov	r3, r1
 8008a56:	4945      	ldr	r1, [pc, #276]	@ (8008b6c <_strtod_l+0xad4>)
 8008a58:	4a4a      	ldr	r2, [pc, #296]	@ (8008b84 <_strtod_l+0xaec>)
 8008a5a:	4019      	ands	r1, r3
 8008a5c:	4291      	cmp	r1, r2
 8008a5e:	4682      	mov	sl, r0
 8008a60:	d942      	bls.n	8008ae8 <_strtod_l+0xa50>
 8008a62:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a64:	4b43      	ldr	r3, [pc, #268]	@ (8008b74 <_strtod_l+0xadc>)
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d103      	bne.n	8008a72 <_strtod_l+0x9da>
 8008a6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f43f ad32 	beq.w	80084d6 <_strtod_l+0x43e>
 8008a72:	f04f 3aff 	mov.w	sl, #4294967295
 8008a76:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8008b74 <_strtod_l+0xadc>
 8008a7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a7c:	9805      	ldr	r0, [sp, #20]
 8008a7e:	f7fe fe89 	bl	8007794 <_Bfree>
 8008a82:	4649      	mov	r1, r9
 8008a84:	9805      	ldr	r0, [sp, #20]
 8008a86:	f7fe fe85 	bl	8007794 <_Bfree>
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	9805      	ldr	r0, [sp, #20]
 8008a8e:	f7fe fe81 	bl	8007794 <_Bfree>
 8008a92:	4621      	mov	r1, r4
 8008a94:	9805      	ldr	r0, [sp, #20]
 8008a96:	f7fe fe7d 	bl	8007794 <_Bfree>
 8008a9a:	e61c      	b.n	80086d6 <_strtod_l+0x63e>
 8008a9c:	f1ba 0f01 	cmp.w	sl, #1
 8008aa0:	d103      	bne.n	8008aaa <_strtod_l+0xa12>
 8008aa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f43f ada9 	beq.w	80085fc <_strtod_l+0x564>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4b36      	ldr	r3, [pc, #216]	@ (8008b88 <_strtod_l+0xaf0>)
 8008aae:	2600      	movs	r6, #0
 8008ab0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ab4:	4f30      	ldr	r7, [pc, #192]	@ (8008b78 <_strtod_l+0xae0>)
 8008ab6:	e7b3      	b.n	8008a20 <_strtod_l+0x988>
 8008ab8:	2600      	movs	r6, #0
 8008aba:	4f30      	ldr	r7, [pc, #192]	@ (8008b7c <_strtod_l+0xae4>)
 8008abc:	e7ac      	b.n	8008a18 <_strtod_l+0x980>
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8008b7c <_strtod_l+0xae4>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f7f7 fdbb 	bl	8000640 <__aeabi_dmul>
 8008aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008acc:	4606      	mov	r6, r0
 8008ace:	460f      	mov	r7, r1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0a1      	beq.n	8008a18 <_strtod_l+0x980>
 8008ad4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ad8:	e7a2      	b.n	8008a20 <_strtod_l+0x988>
 8008ada:	2200      	movs	r2, #0
 8008adc:	4b26      	ldr	r3, [pc, #152]	@ (8008b78 <_strtod_l+0xae0>)
 8008ade:	4616      	mov	r6, r2
 8008ae0:	461f      	mov	r7, r3
 8008ae2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ae6:	e79b      	b.n	8008a20 <_strtod_l+0x988>
 8008ae8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008aec:	9b08      	ldr	r3, [sp, #32]
 8008aee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1c1      	bne.n	8008a7a <_strtod_l+0x9e2>
 8008af6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008afa:	0d1b      	lsrs	r3, r3, #20
 8008afc:	051b      	lsls	r3, r3, #20
 8008afe:	429d      	cmp	r5, r3
 8008b00:	d1bb      	bne.n	8008a7a <_strtod_l+0x9e2>
 8008b02:	4630      	mov	r0, r6
 8008b04:	4639      	mov	r1, r7
 8008b06:	f7f8 fa17 	bl	8000f38 <__aeabi_d2lz>
 8008b0a:	f7f7 fd6b 	bl	80005e4 <__aeabi_l2d>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fbdb 	bl	80002d0 <__aeabi_dsub>
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008b22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b28:	ea46 060a 	orr.w	r6, r6, sl
 8008b2c:	431e      	orrs	r6, r3
 8008b2e:	d06a      	beq.n	8008c06 <_strtod_l+0xb6e>
 8008b30:	a309      	add	r3, pc, #36	@ (adr r3, 8008b58 <_strtod_l+0xac0>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 fff5 	bl	8000b24 <__aeabi_dcmplt>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	f47f acd6 	bne.w	80084ec <_strtod_l+0x454>
 8008b40:	a307      	add	r3, pc, #28	@ (adr r3, 8008b60 <_strtod_l+0xac8>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b4a:	f7f8 f809 	bl	8000b60 <__aeabi_dcmpgt>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d093      	beq.n	8008a7a <_strtod_l+0x9e2>
 8008b52:	e4cb      	b.n	80084ec <_strtod_l+0x454>
 8008b54:	f3af 8000 	nop.w
 8008b58:	94a03595 	.word	0x94a03595
 8008b5c:	3fdfffff 	.word	0x3fdfffff
 8008b60:	35afe535 	.word	0x35afe535
 8008b64:	3fe00000 	.word	0x3fe00000
 8008b68:	39500000 	.word	0x39500000
 8008b6c:	7ff00000 	.word	0x7ff00000
 8008b70:	000fffff 	.word	0x000fffff
 8008b74:	7fefffff 	.word	0x7fefffff
 8008b78:	3ff00000 	.word	0x3ff00000
 8008b7c:	3fe00000 	.word	0x3fe00000
 8008b80:	7fe00000 	.word	0x7fe00000
 8008b84:	7c9fffff 	.word	0x7c9fffff
 8008b88:	bff00000 	.word	0xbff00000
 8008b8c:	9b08      	ldr	r3, [sp, #32]
 8008b8e:	b323      	cbz	r3, 8008bda <_strtod_l+0xb42>
 8008b90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b94:	d821      	bhi.n	8008bda <_strtod_l+0xb42>
 8008b96:	a328      	add	r3, pc, #160	@ (adr r3, 8008c38 <_strtod_l+0xba0>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7f7 ffca 	bl	8000b38 <__aeabi_dcmple>
 8008ba4:	b1a0      	cbz	r0, 8008bd0 <_strtod_l+0xb38>
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7f8 f821 	bl	8000bf0 <__aeabi_d2uiz>
 8008bae:	2801      	cmp	r0, #1
 8008bb0:	bf38      	it	cc
 8008bb2:	2001      	movcc	r0, #1
 8008bb4:	f7f7 fcca 	bl	800054c <__aeabi_ui2d>
 8008bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	b9fb      	cbnz	r3, 8008c00 <_strtod_l+0xb68>
 8008bc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008bc4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008bc6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008bcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008bd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008bd6:	1b5b      	subs	r3, r3, r5
 8008bd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008bda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008be2:	f7ff f903 	bl	8007dec <__ulp>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4650      	mov	r0, sl
 8008bec:	4659      	mov	r1, fp
 8008bee:	f7f7 fd27 	bl	8000640 <__aeabi_dmul>
 8008bf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008bf6:	f7f7 fb6d 	bl	80002d4 <__adddf3>
 8008bfa:	4682      	mov	sl, r0
 8008bfc:	468b      	mov	fp, r1
 8008bfe:	e775      	b.n	8008aec <_strtod_l+0xa54>
 8008c00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008c04:	e7e0      	b.n	8008bc8 <_strtod_l+0xb30>
 8008c06:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c40 <_strtod_l+0xba8>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 ff8a 	bl	8000b24 <__aeabi_dcmplt>
 8008c10:	e79d      	b.n	8008b4e <_strtod_l+0xab6>
 8008c12:	2300      	movs	r3, #0
 8008c14:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c18:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	f7ff ba79 	b.w	8008112 <_strtod_l+0x7a>
 8008c20:	2a65      	cmp	r2, #101	@ 0x65
 8008c22:	f43f ab72 	beq.w	800830a <_strtod_l+0x272>
 8008c26:	2a45      	cmp	r2, #69	@ 0x45
 8008c28:	f43f ab6f 	beq.w	800830a <_strtod_l+0x272>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f7ff bbaa 	b.w	8008386 <_strtod_l+0x2ee>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
 8008c38:	ffc00000 	.word	0xffc00000
 8008c3c:	41dfffff 	.word	0x41dfffff
 8008c40:	94a03595 	.word	0x94a03595
 8008c44:	3fcfffff 	.word	0x3fcfffff

08008c48 <_strtod_r>:
 8008c48:	4b01      	ldr	r3, [pc, #4]	@ (8008c50 <_strtod_r+0x8>)
 8008c4a:	f7ff ba25 	b.w	8008098 <_strtod_l>
 8008c4e:	bf00      	nop
 8008c50:	20000068 	.word	0x20000068

08008c54 <__ssputs_r>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	461f      	mov	r7, r3
 8008c5a:	688e      	ldr	r6, [r1, #8]
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	42be      	cmp	r6, r7
 8008c60:	460c      	mov	r4, r1
 8008c62:	4690      	mov	r8, r2
 8008c64:	680b      	ldr	r3, [r1, #0]
 8008c66:	d82d      	bhi.n	8008cc4 <__ssputs_r+0x70>
 8008c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c70:	d026      	beq.n	8008cc0 <__ssputs_r+0x6c>
 8008c72:	6965      	ldr	r5, [r4, #20]
 8008c74:	6909      	ldr	r1, [r1, #16]
 8008c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c7a:	eba3 0901 	sub.w	r9, r3, r1
 8008c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c82:	1c7b      	adds	r3, r7, #1
 8008c84:	444b      	add	r3, r9
 8008c86:	106d      	asrs	r5, r5, #1
 8008c88:	429d      	cmp	r5, r3
 8008c8a:	bf38      	it	cc
 8008c8c:	461d      	movcc	r5, r3
 8008c8e:	0553      	lsls	r3, r2, #21
 8008c90:	d527      	bpl.n	8008ce2 <__ssputs_r+0x8e>
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7fe fcb2 	bl	80075fc <_malloc_r>
 8008c98:	4606      	mov	r6, r0
 8008c9a:	b360      	cbz	r0, 8008cf6 <__ssputs_r+0xa2>
 8008c9c:	464a      	mov	r2, r9
 8008c9e:	6921      	ldr	r1, [r4, #16]
 8008ca0:	f000 fa02 	bl	80090a8 <memcpy>
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	6126      	str	r6, [r4, #16]
 8008cb2:	444e      	add	r6, r9
 8008cb4:	6026      	str	r6, [r4, #0]
 8008cb6:	463e      	mov	r6, r7
 8008cb8:	6165      	str	r5, [r4, #20]
 8008cba:	eba5 0509 	sub.w	r5, r5, r9
 8008cbe:	60a5      	str	r5, [r4, #8]
 8008cc0:	42be      	cmp	r6, r7
 8008cc2:	d900      	bls.n	8008cc6 <__ssputs_r+0x72>
 8008cc4:	463e      	mov	r6, r7
 8008cc6:	4632      	mov	r2, r6
 8008cc8:	4641      	mov	r1, r8
 8008cca:	6820      	ldr	r0, [r4, #0]
 8008ccc:	f000 f9c2 	bl	8009054 <memmove>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	68a3      	ldr	r3, [r4, #8]
 8008cd4:	1b9b      	subs	r3, r3, r6
 8008cd6:	60a3      	str	r3, [r4, #8]
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	4433      	add	r3, r6
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	f000 fd71 	bl	80097ca <_realloc_r>
 8008ce8:	4606      	mov	r6, r0
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d1e0      	bne.n	8008cb0 <__ssputs_r+0x5c>
 8008cee:	4650      	mov	r0, sl
 8008cf0:	6921      	ldr	r1, [r4, #16]
 8008cf2:	f7fe fc11 	bl	8007518 <_free_r>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	f8ca 3000 	str.w	r3, [sl]
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	e7e9      	b.n	8008cde <__ssputs_r+0x8a>
	...

08008d0c <_svfiprintf_r>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	4698      	mov	r8, r3
 8008d12:	898b      	ldrh	r3, [r1, #12]
 8008d14:	4607      	mov	r7, r0
 8008d16:	061b      	lsls	r3, r3, #24
 8008d18:	460d      	mov	r5, r1
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	b09d      	sub	sp, #116	@ 0x74
 8008d1e:	d510      	bpl.n	8008d42 <_svfiprintf_r+0x36>
 8008d20:	690b      	ldr	r3, [r1, #16]
 8008d22:	b973      	cbnz	r3, 8008d42 <_svfiprintf_r+0x36>
 8008d24:	2140      	movs	r1, #64	@ 0x40
 8008d26:	f7fe fc69 	bl	80075fc <_malloc_r>
 8008d2a:	6028      	str	r0, [r5, #0]
 8008d2c:	6128      	str	r0, [r5, #16]
 8008d2e:	b930      	cbnz	r0, 8008d3e <_svfiprintf_r+0x32>
 8008d30:	230c      	movs	r3, #12
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	b01d      	add	sp, #116	@ 0x74
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	2340      	movs	r3, #64	@ 0x40
 8008d40:	616b      	str	r3, [r5, #20]
 8008d42:	2300      	movs	r3, #0
 8008d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d46:	2320      	movs	r3, #32
 8008d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d4c:	2330      	movs	r3, #48	@ 0x30
 8008d4e:	f04f 0901 	mov.w	r9, #1
 8008d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008ef0 <_svfiprintf_r+0x1e4>
 8008d5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d5e:	4623      	mov	r3, r4
 8008d60:	469a      	mov	sl, r3
 8008d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d66:	b10a      	cbz	r2, 8008d6c <_svfiprintf_r+0x60>
 8008d68:	2a25      	cmp	r2, #37	@ 0x25
 8008d6a:	d1f9      	bne.n	8008d60 <_svfiprintf_r+0x54>
 8008d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d70:	d00b      	beq.n	8008d8a <_svfiprintf_r+0x7e>
 8008d72:	465b      	mov	r3, fp
 8008d74:	4622      	mov	r2, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff ff6b 	bl	8008c54 <__ssputs_r>
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f000 80a7 	beq.w	8008ed2 <_svfiprintf_r+0x1c6>
 8008d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d86:	445a      	add	r2, fp
 8008d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 809f 	beq.w	8008ed2 <_svfiprintf_r+0x1c6>
 8008d94:	2300      	movs	r3, #0
 8008d96:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9e:	f10a 0a01 	add.w	sl, sl, #1
 8008da2:	9304      	str	r3, [sp, #16]
 8008da4:	9307      	str	r3, [sp, #28]
 8008da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dac:	4654      	mov	r4, sl
 8008dae:	2205      	movs	r2, #5
 8008db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db4:	484e      	ldr	r0, [pc, #312]	@ (8008ef0 <_svfiprintf_r+0x1e4>)
 8008db6:	f7fd fd3e 	bl	8006836 <memchr>
 8008dba:	9a04      	ldr	r2, [sp, #16]
 8008dbc:	b9d8      	cbnz	r0, 8008df6 <_svfiprintf_r+0xea>
 8008dbe:	06d0      	lsls	r0, r2, #27
 8008dc0:	bf44      	itt	mi
 8008dc2:	2320      	movmi	r3, #32
 8008dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc8:	0711      	lsls	r1, r2, #28
 8008dca:	bf44      	itt	mi
 8008dcc:	232b      	movmi	r3, #43	@ 0x2b
 8008dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd8:	d015      	beq.n	8008e06 <_svfiprintf_r+0xfa>
 8008dda:	4654      	mov	r4, sl
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f04f 0c0a 	mov.w	ip, #10
 8008de2:	9a07      	ldr	r2, [sp, #28]
 8008de4:	4621      	mov	r1, r4
 8008de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dea:	3b30      	subs	r3, #48	@ 0x30
 8008dec:	2b09      	cmp	r3, #9
 8008dee:	d94b      	bls.n	8008e88 <_svfiprintf_r+0x17c>
 8008df0:	b1b0      	cbz	r0, 8008e20 <_svfiprintf_r+0x114>
 8008df2:	9207      	str	r2, [sp, #28]
 8008df4:	e014      	b.n	8008e20 <_svfiprintf_r+0x114>
 8008df6:	eba0 0308 	sub.w	r3, r0, r8
 8008dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	46a2      	mov	sl, r4
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	e7d2      	b.n	8008dac <_svfiprintf_r+0xa0>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	1d19      	adds	r1, r3, #4
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	9103      	str	r1, [sp, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bfbb      	ittet	lt
 8008e12:	425b      	neglt	r3, r3
 8008e14:	f042 0202 	orrlt.w	r2, r2, #2
 8008e18:	9307      	strge	r3, [sp, #28]
 8008e1a:	9307      	strlt	r3, [sp, #28]
 8008e1c:	bfb8      	it	lt
 8008e1e:	9204      	strlt	r2, [sp, #16]
 8008e20:	7823      	ldrb	r3, [r4, #0]
 8008e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e24:	d10a      	bne.n	8008e3c <_svfiprintf_r+0x130>
 8008e26:	7863      	ldrb	r3, [r4, #1]
 8008e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e2a:	d132      	bne.n	8008e92 <_svfiprintf_r+0x186>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	3402      	adds	r4, #2
 8008e30:	1d1a      	adds	r2, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9203      	str	r2, [sp, #12]
 8008e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e3a:	9305      	str	r3, [sp, #20]
 8008e3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008ef4 <_svfiprintf_r+0x1e8>
 8008e40:	2203      	movs	r2, #3
 8008e42:	4650      	mov	r0, sl
 8008e44:	7821      	ldrb	r1, [r4, #0]
 8008e46:	f7fd fcf6 	bl	8006836 <memchr>
 8008e4a:	b138      	cbz	r0, 8008e5c <_svfiprintf_r+0x150>
 8008e4c:	2240      	movs	r2, #64	@ 0x40
 8008e4e:	9b04      	ldr	r3, [sp, #16]
 8008e50:	eba0 000a 	sub.w	r0, r0, sl
 8008e54:	4082      	lsls	r2, r0
 8008e56:	4313      	orrs	r3, r2
 8008e58:	3401      	adds	r4, #1
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e60:	2206      	movs	r2, #6
 8008e62:	4825      	ldr	r0, [pc, #148]	@ (8008ef8 <_svfiprintf_r+0x1ec>)
 8008e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e68:	f7fd fce5 	bl	8006836 <memchr>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d036      	beq.n	8008ede <_svfiprintf_r+0x1d2>
 8008e70:	4b22      	ldr	r3, [pc, #136]	@ (8008efc <_svfiprintf_r+0x1f0>)
 8008e72:	bb1b      	cbnz	r3, 8008ebc <_svfiprintf_r+0x1b0>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	3307      	adds	r3, #7
 8008e78:	f023 0307 	bic.w	r3, r3, #7
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	9303      	str	r3, [sp, #12]
 8008e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e82:	4433      	add	r3, r6
 8008e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e86:	e76a      	b.n	8008d5e <_svfiprintf_r+0x52>
 8008e88:	460c      	mov	r4, r1
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e90:	e7a8      	b.n	8008de4 <_svfiprintf_r+0xd8>
 8008e92:	2300      	movs	r3, #0
 8008e94:	f04f 0c0a 	mov.w	ip, #10
 8008e98:	4619      	mov	r1, r3
 8008e9a:	3401      	adds	r4, #1
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea4:	3a30      	subs	r2, #48	@ 0x30
 8008ea6:	2a09      	cmp	r2, #9
 8008ea8:	d903      	bls.n	8008eb2 <_svfiprintf_r+0x1a6>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0c6      	beq.n	8008e3c <_svfiprintf_r+0x130>
 8008eae:	9105      	str	r1, [sp, #20]
 8008eb0:	e7c4      	b.n	8008e3c <_svfiprintf_r+0x130>
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eba:	e7f0      	b.n	8008e9e <_svfiprintf_r+0x192>
 8008ebc:	ab03      	add	r3, sp, #12
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8008f00 <_svfiprintf_r+0x1f4>)
 8008ec6:	a904      	add	r1, sp, #16
 8008ec8:	f7fc fd20 	bl	800590c <_printf_float>
 8008ecc:	1c42      	adds	r2, r0, #1
 8008ece:	4606      	mov	r6, r0
 8008ed0:	d1d6      	bne.n	8008e80 <_svfiprintf_r+0x174>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	065b      	lsls	r3, r3, #25
 8008ed6:	f53f af2d 	bmi.w	8008d34 <_svfiprintf_r+0x28>
 8008eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008edc:	e72c      	b.n	8008d38 <_svfiprintf_r+0x2c>
 8008ede:	ab03      	add	r3, sp, #12
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	4b06      	ldr	r3, [pc, #24]	@ (8008f00 <_svfiprintf_r+0x1f4>)
 8008ee8:	a904      	add	r1, sp, #16
 8008eea:	f7fc ffad 	bl	8005e48 <_printf_i>
 8008eee:	e7ed      	b.n	8008ecc <_svfiprintf_r+0x1c0>
 8008ef0:	0800a124 	.word	0x0800a124
 8008ef4:	0800a12a 	.word	0x0800a12a
 8008ef8:	0800a12e 	.word	0x0800a12e
 8008efc:	0800590d 	.word	0x0800590d
 8008f00:	08008c55 	.word	0x08008c55

08008f04 <__sflush_r>:
 8008f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	0716      	lsls	r6, r2, #28
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d454      	bmi.n	8008fbc <__sflush_r+0xb8>
 8008f12:	684b      	ldr	r3, [r1, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc02      	bgt.n	8008f1e <__sflush_r+0x1a>
 8008f18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dd48      	ble.n	8008fb0 <__sflush_r+0xac>
 8008f1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f20:	2e00      	cmp	r6, #0
 8008f22:	d045      	beq.n	8008fb0 <__sflush_r+0xac>
 8008f24:	2300      	movs	r3, #0
 8008f26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f2a:	682f      	ldr	r7, [r5, #0]
 8008f2c:	6a21      	ldr	r1, [r4, #32]
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	d030      	beq.n	8008f94 <__sflush_r+0x90>
 8008f32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	0759      	lsls	r1, r3, #29
 8008f38:	d505      	bpl.n	8008f46 <__sflush_r+0x42>
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	1ad2      	subs	r2, r2, r3
 8008f3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f40:	b10b      	cbz	r3, 8008f46 <__sflush_r+0x42>
 8008f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f44:	1ad2      	subs	r2, r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	4628      	mov	r0, r5
 8008f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f4c:	6a21      	ldr	r1, [r4, #32]
 8008f4e:	47b0      	blx	r6
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	d106      	bne.n	8008f64 <__sflush_r+0x60>
 8008f56:	6829      	ldr	r1, [r5, #0]
 8008f58:	291d      	cmp	r1, #29
 8008f5a:	d82b      	bhi.n	8008fb4 <__sflush_r+0xb0>
 8008f5c:	4a28      	ldr	r2, [pc, #160]	@ (8009000 <__sflush_r+0xfc>)
 8008f5e:	40ca      	lsrs	r2, r1
 8008f60:	07d6      	lsls	r6, r2, #31
 8008f62:	d527      	bpl.n	8008fb4 <__sflush_r+0xb0>
 8008f64:	2200      	movs	r2, #0
 8008f66:	6062      	str	r2, [r4, #4]
 8008f68:	6922      	ldr	r2, [r4, #16]
 8008f6a:	04d9      	lsls	r1, r3, #19
 8008f6c:	6022      	str	r2, [r4, #0]
 8008f6e:	d504      	bpl.n	8008f7a <__sflush_r+0x76>
 8008f70:	1c42      	adds	r2, r0, #1
 8008f72:	d101      	bne.n	8008f78 <__sflush_r+0x74>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b903      	cbnz	r3, 8008f7a <__sflush_r+0x76>
 8008f78:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f7c:	602f      	str	r7, [r5, #0]
 8008f7e:	b1b9      	cbz	r1, 8008fb0 <__sflush_r+0xac>
 8008f80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f84:	4299      	cmp	r1, r3
 8008f86:	d002      	beq.n	8008f8e <__sflush_r+0x8a>
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f7fe fac5 	bl	8007518 <_free_r>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f92:	e00d      	b.n	8008fb0 <__sflush_r+0xac>
 8008f94:	2301      	movs	r3, #1
 8008f96:	4628      	mov	r0, r5
 8008f98:	47b0      	blx	r6
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	1c50      	adds	r0, r2, #1
 8008f9e:	d1c9      	bne.n	8008f34 <__sflush_r+0x30>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0c6      	beq.n	8008f34 <__sflush_r+0x30>
 8008fa6:	2b1d      	cmp	r3, #29
 8008fa8:	d001      	beq.n	8008fae <__sflush_r+0xaa>
 8008faa:	2b16      	cmp	r3, #22
 8008fac:	d11d      	bne.n	8008fea <__sflush_r+0xe6>
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e021      	b.n	8008ff8 <__sflush_r+0xf4>
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb8:	b21b      	sxth	r3, r3
 8008fba:	e01a      	b.n	8008ff2 <__sflush_r+0xee>
 8008fbc:	690f      	ldr	r7, [r1, #16]
 8008fbe:	2f00      	cmp	r7, #0
 8008fc0:	d0f6      	beq.n	8008fb0 <__sflush_r+0xac>
 8008fc2:	0793      	lsls	r3, r2, #30
 8008fc4:	bf18      	it	ne
 8008fc6:	2300      	movne	r3, #0
 8008fc8:	680e      	ldr	r6, [r1, #0]
 8008fca:	bf08      	it	eq
 8008fcc:	694b      	ldreq	r3, [r1, #20]
 8008fce:	1bf6      	subs	r6, r6, r7
 8008fd0:	600f      	str	r7, [r1, #0]
 8008fd2:	608b      	str	r3, [r1, #8]
 8008fd4:	2e00      	cmp	r6, #0
 8008fd6:	ddeb      	ble.n	8008fb0 <__sflush_r+0xac>
 8008fd8:	4633      	mov	r3, r6
 8008fda:	463a      	mov	r2, r7
 8008fdc:	4628      	mov	r0, r5
 8008fde:	6a21      	ldr	r1, [r4, #32]
 8008fe0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008fe4:	47e0      	blx	ip
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	dc07      	bgt.n	8008ffa <__sflush_r+0xf6>
 8008fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffa:	4407      	add	r7, r0
 8008ffc:	1a36      	subs	r6, r6, r0
 8008ffe:	e7e9      	b.n	8008fd4 <__sflush_r+0xd0>
 8009000:	20400001 	.word	0x20400001

08009004 <_fflush_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	690b      	ldr	r3, [r1, #16]
 8009008:	4605      	mov	r5, r0
 800900a:	460c      	mov	r4, r1
 800900c:	b913      	cbnz	r3, 8009014 <_fflush_r+0x10>
 800900e:	2500      	movs	r5, #0
 8009010:	4628      	mov	r0, r5
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	b118      	cbz	r0, 800901e <_fflush_r+0x1a>
 8009016:	6a03      	ldr	r3, [r0, #32]
 8009018:	b90b      	cbnz	r3, 800901e <_fflush_r+0x1a>
 800901a:	f7fd fac9 	bl	80065b0 <__sinit>
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f3      	beq.n	800900e <_fflush_r+0xa>
 8009026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009028:	07d0      	lsls	r0, r2, #31
 800902a:	d404      	bmi.n	8009036 <_fflush_r+0x32>
 800902c:	0599      	lsls	r1, r3, #22
 800902e:	d402      	bmi.n	8009036 <_fflush_r+0x32>
 8009030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009032:	f7fd fbfe 	bl	8006832 <__retarget_lock_acquire_recursive>
 8009036:	4628      	mov	r0, r5
 8009038:	4621      	mov	r1, r4
 800903a:	f7ff ff63 	bl	8008f04 <__sflush_r>
 800903e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009040:	4605      	mov	r5, r0
 8009042:	07da      	lsls	r2, r3, #31
 8009044:	d4e4      	bmi.n	8009010 <_fflush_r+0xc>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	059b      	lsls	r3, r3, #22
 800904a:	d4e1      	bmi.n	8009010 <_fflush_r+0xc>
 800904c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800904e:	f7fd fbf1 	bl	8006834 <__retarget_lock_release_recursive>
 8009052:	e7dd      	b.n	8009010 <_fflush_r+0xc>

08009054 <memmove>:
 8009054:	4288      	cmp	r0, r1
 8009056:	b510      	push	{r4, lr}
 8009058:	eb01 0402 	add.w	r4, r1, r2
 800905c:	d902      	bls.n	8009064 <memmove+0x10>
 800905e:	4284      	cmp	r4, r0
 8009060:	4623      	mov	r3, r4
 8009062:	d807      	bhi.n	8009074 <memmove+0x20>
 8009064:	1e43      	subs	r3, r0, #1
 8009066:	42a1      	cmp	r1, r4
 8009068:	d008      	beq.n	800907c <memmove+0x28>
 800906a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800906e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009072:	e7f8      	b.n	8009066 <memmove+0x12>
 8009074:	4601      	mov	r1, r0
 8009076:	4402      	add	r2, r0
 8009078:	428a      	cmp	r2, r1
 800907a:	d100      	bne.n	800907e <memmove+0x2a>
 800907c:	bd10      	pop	{r4, pc}
 800907e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009086:	e7f7      	b.n	8009078 <memmove+0x24>

08009088 <_sbrk_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	2300      	movs	r3, #0
 800908c:	4d05      	ldr	r5, [pc, #20]	@ (80090a4 <_sbrk_r+0x1c>)
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f8 fff4 	bl	8002080 <_sbrk>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_sbrk_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_sbrk_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	200004d0 	.word	0x200004d0

080090a8 <memcpy>:
 80090a8:	440a      	add	r2, r1
 80090aa:	4291      	cmp	r1, r2
 80090ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b0:	d100      	bne.n	80090b4 <memcpy+0xc>
 80090b2:	4770      	bx	lr
 80090b4:	b510      	push	{r4, lr}
 80090b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ba:	4291      	cmp	r1, r2
 80090bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c0:	d1f9      	bne.n	80090b6 <memcpy+0xe>
 80090c2:	bd10      	pop	{r4, pc}

080090c4 <nan>:
 80090c4:	2000      	movs	r0, #0
 80090c6:	4901      	ldr	r1, [pc, #4]	@ (80090cc <nan+0x8>)
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	7ff80000 	.word	0x7ff80000

080090d0 <__assert_func>:
 80090d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090d2:	4614      	mov	r4, r2
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b09      	ldr	r3, [pc, #36]	@ (80090fc <__assert_func+0x2c>)
 80090d8:	4605      	mov	r5, r0
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68d8      	ldr	r0, [r3, #12]
 80090de:	b14c      	cbz	r4, 80090f4 <__assert_func+0x24>
 80090e0:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <__assert_func+0x30>)
 80090e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090e6:	9100      	str	r1, [sp, #0]
 80090e8:	462b      	mov	r3, r5
 80090ea:	4906      	ldr	r1, [pc, #24]	@ (8009104 <__assert_func+0x34>)
 80090ec:	f000 fba8 	bl	8009840 <fiprintf>
 80090f0:	f000 fbb8 	bl	8009864 <abort>
 80090f4:	4b04      	ldr	r3, [pc, #16]	@ (8009108 <__assert_func+0x38>)
 80090f6:	461c      	mov	r4, r3
 80090f8:	e7f3      	b.n	80090e2 <__assert_func+0x12>
 80090fa:	bf00      	nop
 80090fc:	20000018 	.word	0x20000018
 8009100:	0800a13d 	.word	0x0800a13d
 8009104:	0800a14a 	.word	0x0800a14a
 8009108:	0800a178 	.word	0x0800a178

0800910c <_calloc_r>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	fba1 5402 	umull	r5, r4, r1, r2
 8009112:	b934      	cbnz	r4, 8009122 <_calloc_r+0x16>
 8009114:	4629      	mov	r1, r5
 8009116:	f7fe fa71 	bl	80075fc <_malloc_r>
 800911a:	4606      	mov	r6, r0
 800911c:	b928      	cbnz	r0, 800912a <_calloc_r+0x1e>
 800911e:	4630      	mov	r0, r6
 8009120:	bd70      	pop	{r4, r5, r6, pc}
 8009122:	220c      	movs	r2, #12
 8009124:	2600      	movs	r6, #0
 8009126:	6002      	str	r2, [r0, #0]
 8009128:	e7f9      	b.n	800911e <_calloc_r+0x12>
 800912a:	462a      	mov	r2, r5
 800912c:	4621      	mov	r1, r4
 800912e:	f7fd fada 	bl	80066e6 <memset>
 8009132:	e7f4      	b.n	800911e <_calloc_r+0x12>

08009134 <rshift>:
 8009134:	6903      	ldr	r3, [r0, #16]
 8009136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800913a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800913e:	f100 0414 	add.w	r4, r0, #20
 8009142:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009146:	dd46      	ble.n	80091d6 <rshift+0xa2>
 8009148:	f011 011f 	ands.w	r1, r1, #31
 800914c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009150:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009154:	d10c      	bne.n	8009170 <rshift+0x3c>
 8009156:	4629      	mov	r1, r5
 8009158:	f100 0710 	add.w	r7, r0, #16
 800915c:	42b1      	cmp	r1, r6
 800915e:	d335      	bcc.n	80091cc <rshift+0x98>
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	1eea      	subs	r2, r5, #3
 8009166:	4296      	cmp	r6, r2
 8009168:	bf38      	it	cc
 800916a:	2300      	movcc	r3, #0
 800916c:	4423      	add	r3, r4
 800916e:	e015      	b.n	800919c <rshift+0x68>
 8009170:	46a1      	mov	r9, r4
 8009172:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009176:	f1c1 0820 	rsb	r8, r1, #32
 800917a:	40cf      	lsrs	r7, r1
 800917c:	f105 0e04 	add.w	lr, r5, #4
 8009180:	4576      	cmp	r6, lr
 8009182:	46f4      	mov	ip, lr
 8009184:	d816      	bhi.n	80091b4 <rshift+0x80>
 8009186:	1a9a      	subs	r2, r3, r2
 8009188:	0092      	lsls	r2, r2, #2
 800918a:	3a04      	subs	r2, #4
 800918c:	3501      	adds	r5, #1
 800918e:	42ae      	cmp	r6, r5
 8009190:	bf38      	it	cc
 8009192:	2200      	movcc	r2, #0
 8009194:	18a3      	adds	r3, r4, r2
 8009196:	50a7      	str	r7, [r4, r2]
 8009198:	b107      	cbz	r7, 800919c <rshift+0x68>
 800919a:	3304      	adds	r3, #4
 800919c:	42a3      	cmp	r3, r4
 800919e:	eba3 0204 	sub.w	r2, r3, r4
 80091a2:	bf08      	it	eq
 80091a4:	2300      	moveq	r3, #0
 80091a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091aa:	6102      	str	r2, [r0, #16]
 80091ac:	bf08      	it	eq
 80091ae:	6143      	streq	r3, [r0, #20]
 80091b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091b4:	f8dc c000 	ldr.w	ip, [ip]
 80091b8:	fa0c fc08 	lsl.w	ip, ip, r8
 80091bc:	ea4c 0707 	orr.w	r7, ip, r7
 80091c0:	f849 7b04 	str.w	r7, [r9], #4
 80091c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091c8:	40cf      	lsrs	r7, r1
 80091ca:	e7d9      	b.n	8009180 <rshift+0x4c>
 80091cc:	f851 cb04 	ldr.w	ip, [r1], #4
 80091d0:	f847 cf04 	str.w	ip, [r7, #4]!
 80091d4:	e7c2      	b.n	800915c <rshift+0x28>
 80091d6:	4623      	mov	r3, r4
 80091d8:	e7e0      	b.n	800919c <rshift+0x68>

080091da <__hexdig_fun>:
 80091da:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80091de:	2b09      	cmp	r3, #9
 80091e0:	d802      	bhi.n	80091e8 <__hexdig_fun+0xe>
 80091e2:	3820      	subs	r0, #32
 80091e4:	b2c0      	uxtb	r0, r0
 80091e6:	4770      	bx	lr
 80091e8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80091ec:	2b05      	cmp	r3, #5
 80091ee:	d801      	bhi.n	80091f4 <__hexdig_fun+0x1a>
 80091f0:	3847      	subs	r0, #71	@ 0x47
 80091f2:	e7f7      	b.n	80091e4 <__hexdig_fun+0xa>
 80091f4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	d801      	bhi.n	8009200 <__hexdig_fun+0x26>
 80091fc:	3827      	subs	r0, #39	@ 0x27
 80091fe:	e7f1      	b.n	80091e4 <__hexdig_fun+0xa>
 8009200:	2000      	movs	r0, #0
 8009202:	4770      	bx	lr

08009204 <__gethex>:
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	468a      	mov	sl, r1
 800920a:	4690      	mov	r8, r2
 800920c:	b085      	sub	sp, #20
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	680b      	ldr	r3, [r1, #0]
 8009212:	9001      	str	r0, [sp, #4]
 8009214:	1c9c      	adds	r4, r3, #2
 8009216:	46a1      	mov	r9, r4
 8009218:	f814 0b01 	ldrb.w	r0, [r4], #1
 800921c:	2830      	cmp	r0, #48	@ 0x30
 800921e:	d0fa      	beq.n	8009216 <__gethex+0x12>
 8009220:	eba9 0303 	sub.w	r3, r9, r3
 8009224:	f1a3 0b02 	sub.w	fp, r3, #2
 8009228:	f7ff ffd7 	bl	80091da <__hexdig_fun>
 800922c:	4605      	mov	r5, r0
 800922e:	2800      	cmp	r0, #0
 8009230:	d168      	bne.n	8009304 <__gethex+0x100>
 8009232:	2201      	movs	r2, #1
 8009234:	4648      	mov	r0, r9
 8009236:	499f      	ldr	r1, [pc, #636]	@ (80094b4 <__gethex+0x2b0>)
 8009238:	f7fd fa5d 	bl	80066f6 <strncmp>
 800923c:	4607      	mov	r7, r0
 800923e:	2800      	cmp	r0, #0
 8009240:	d167      	bne.n	8009312 <__gethex+0x10e>
 8009242:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009246:	4626      	mov	r6, r4
 8009248:	f7ff ffc7 	bl	80091da <__hexdig_fun>
 800924c:	2800      	cmp	r0, #0
 800924e:	d062      	beq.n	8009316 <__gethex+0x112>
 8009250:	4623      	mov	r3, r4
 8009252:	7818      	ldrb	r0, [r3, #0]
 8009254:	4699      	mov	r9, r3
 8009256:	2830      	cmp	r0, #48	@ 0x30
 8009258:	f103 0301 	add.w	r3, r3, #1
 800925c:	d0f9      	beq.n	8009252 <__gethex+0x4e>
 800925e:	f7ff ffbc 	bl	80091da <__hexdig_fun>
 8009262:	fab0 f580 	clz	r5, r0
 8009266:	f04f 0b01 	mov.w	fp, #1
 800926a:	096d      	lsrs	r5, r5, #5
 800926c:	464a      	mov	r2, r9
 800926e:	4616      	mov	r6, r2
 8009270:	7830      	ldrb	r0, [r6, #0]
 8009272:	3201      	adds	r2, #1
 8009274:	f7ff ffb1 	bl	80091da <__hexdig_fun>
 8009278:	2800      	cmp	r0, #0
 800927a:	d1f8      	bne.n	800926e <__gethex+0x6a>
 800927c:	2201      	movs	r2, #1
 800927e:	4630      	mov	r0, r6
 8009280:	498c      	ldr	r1, [pc, #560]	@ (80094b4 <__gethex+0x2b0>)
 8009282:	f7fd fa38 	bl	80066f6 <strncmp>
 8009286:	2800      	cmp	r0, #0
 8009288:	d13f      	bne.n	800930a <__gethex+0x106>
 800928a:	b944      	cbnz	r4, 800929e <__gethex+0x9a>
 800928c:	1c74      	adds	r4, r6, #1
 800928e:	4622      	mov	r2, r4
 8009290:	4616      	mov	r6, r2
 8009292:	7830      	ldrb	r0, [r6, #0]
 8009294:	3201      	adds	r2, #1
 8009296:	f7ff ffa0 	bl	80091da <__hexdig_fun>
 800929a:	2800      	cmp	r0, #0
 800929c:	d1f8      	bne.n	8009290 <__gethex+0x8c>
 800929e:	1ba4      	subs	r4, r4, r6
 80092a0:	00a7      	lsls	r7, r4, #2
 80092a2:	7833      	ldrb	r3, [r6, #0]
 80092a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80092a8:	2b50      	cmp	r3, #80	@ 0x50
 80092aa:	d13e      	bne.n	800932a <__gethex+0x126>
 80092ac:	7873      	ldrb	r3, [r6, #1]
 80092ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80092b0:	d033      	beq.n	800931a <__gethex+0x116>
 80092b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80092b4:	d034      	beq.n	8009320 <__gethex+0x11c>
 80092b6:	2400      	movs	r4, #0
 80092b8:	1c71      	adds	r1, r6, #1
 80092ba:	7808      	ldrb	r0, [r1, #0]
 80092bc:	f7ff ff8d 	bl	80091da <__hexdig_fun>
 80092c0:	1e43      	subs	r3, r0, #1
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b18      	cmp	r3, #24
 80092c6:	d830      	bhi.n	800932a <__gethex+0x126>
 80092c8:	f1a0 0210 	sub.w	r2, r0, #16
 80092cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092d0:	f7ff ff83 	bl	80091da <__hexdig_fun>
 80092d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80092d8:	fa5f fc8c 	uxtb.w	ip, ip
 80092dc:	f1bc 0f18 	cmp.w	ip, #24
 80092e0:	f04f 030a 	mov.w	r3, #10
 80092e4:	d91e      	bls.n	8009324 <__gethex+0x120>
 80092e6:	b104      	cbz	r4, 80092ea <__gethex+0xe6>
 80092e8:	4252      	negs	r2, r2
 80092ea:	4417      	add	r7, r2
 80092ec:	f8ca 1000 	str.w	r1, [sl]
 80092f0:	b1ed      	cbz	r5, 800932e <__gethex+0x12a>
 80092f2:	f1bb 0f00 	cmp.w	fp, #0
 80092f6:	bf0c      	ite	eq
 80092f8:	2506      	moveq	r5, #6
 80092fa:	2500      	movne	r5, #0
 80092fc:	4628      	mov	r0, r5
 80092fe:	b005      	add	sp, #20
 8009300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009304:	2500      	movs	r5, #0
 8009306:	462c      	mov	r4, r5
 8009308:	e7b0      	b.n	800926c <__gethex+0x68>
 800930a:	2c00      	cmp	r4, #0
 800930c:	d1c7      	bne.n	800929e <__gethex+0x9a>
 800930e:	4627      	mov	r7, r4
 8009310:	e7c7      	b.n	80092a2 <__gethex+0x9e>
 8009312:	464e      	mov	r6, r9
 8009314:	462f      	mov	r7, r5
 8009316:	2501      	movs	r5, #1
 8009318:	e7c3      	b.n	80092a2 <__gethex+0x9e>
 800931a:	2400      	movs	r4, #0
 800931c:	1cb1      	adds	r1, r6, #2
 800931e:	e7cc      	b.n	80092ba <__gethex+0xb6>
 8009320:	2401      	movs	r4, #1
 8009322:	e7fb      	b.n	800931c <__gethex+0x118>
 8009324:	fb03 0002 	mla	r0, r3, r2, r0
 8009328:	e7ce      	b.n	80092c8 <__gethex+0xc4>
 800932a:	4631      	mov	r1, r6
 800932c:	e7de      	b.n	80092ec <__gethex+0xe8>
 800932e:	4629      	mov	r1, r5
 8009330:	eba6 0309 	sub.w	r3, r6, r9
 8009334:	3b01      	subs	r3, #1
 8009336:	2b07      	cmp	r3, #7
 8009338:	dc0a      	bgt.n	8009350 <__gethex+0x14c>
 800933a:	9801      	ldr	r0, [sp, #4]
 800933c:	f7fe f9ea 	bl	8007714 <_Balloc>
 8009340:	4604      	mov	r4, r0
 8009342:	b940      	cbnz	r0, 8009356 <__gethex+0x152>
 8009344:	4602      	mov	r2, r0
 8009346:	21e4      	movs	r1, #228	@ 0xe4
 8009348:	4b5b      	ldr	r3, [pc, #364]	@ (80094b8 <__gethex+0x2b4>)
 800934a:	485c      	ldr	r0, [pc, #368]	@ (80094bc <__gethex+0x2b8>)
 800934c:	f7ff fec0 	bl	80090d0 <__assert_func>
 8009350:	3101      	adds	r1, #1
 8009352:	105b      	asrs	r3, r3, #1
 8009354:	e7ef      	b.n	8009336 <__gethex+0x132>
 8009356:	2300      	movs	r3, #0
 8009358:	f100 0a14 	add.w	sl, r0, #20
 800935c:	4655      	mov	r5, sl
 800935e:	469b      	mov	fp, r3
 8009360:	45b1      	cmp	r9, r6
 8009362:	d337      	bcc.n	80093d4 <__gethex+0x1d0>
 8009364:	f845 bb04 	str.w	fp, [r5], #4
 8009368:	eba5 050a 	sub.w	r5, r5, sl
 800936c:	10ad      	asrs	r5, r5, #2
 800936e:	6125      	str	r5, [r4, #16]
 8009370:	4658      	mov	r0, fp
 8009372:	f7fe fac1 	bl	80078f8 <__hi0bits>
 8009376:	016d      	lsls	r5, r5, #5
 8009378:	f8d8 6000 	ldr.w	r6, [r8]
 800937c:	1a2d      	subs	r5, r5, r0
 800937e:	42b5      	cmp	r5, r6
 8009380:	dd54      	ble.n	800942c <__gethex+0x228>
 8009382:	1bad      	subs	r5, r5, r6
 8009384:	4629      	mov	r1, r5
 8009386:	4620      	mov	r0, r4
 8009388:	f7fe fe43 	bl	8008012 <__any_on>
 800938c:	4681      	mov	r9, r0
 800938e:	b178      	cbz	r0, 80093b0 <__gethex+0x1ac>
 8009390:	f04f 0901 	mov.w	r9, #1
 8009394:	1e6b      	subs	r3, r5, #1
 8009396:	1159      	asrs	r1, r3, #5
 8009398:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800939c:	f003 021f 	and.w	r2, r3, #31
 80093a0:	fa09 f202 	lsl.w	r2, r9, r2
 80093a4:	420a      	tst	r2, r1
 80093a6:	d003      	beq.n	80093b0 <__gethex+0x1ac>
 80093a8:	454b      	cmp	r3, r9
 80093aa:	dc36      	bgt.n	800941a <__gethex+0x216>
 80093ac:	f04f 0902 	mov.w	r9, #2
 80093b0:	4629      	mov	r1, r5
 80093b2:	4620      	mov	r0, r4
 80093b4:	f7ff febe 	bl	8009134 <rshift>
 80093b8:	442f      	add	r7, r5
 80093ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093be:	42bb      	cmp	r3, r7
 80093c0:	da42      	bge.n	8009448 <__gethex+0x244>
 80093c2:	4621      	mov	r1, r4
 80093c4:	9801      	ldr	r0, [sp, #4]
 80093c6:	f7fe f9e5 	bl	8007794 <_Bfree>
 80093ca:	2300      	movs	r3, #0
 80093cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093ce:	25a3      	movs	r5, #163	@ 0xa3
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	e793      	b.n	80092fc <__gethex+0xf8>
 80093d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80093da:	d012      	beq.n	8009402 <__gethex+0x1fe>
 80093dc:	2b20      	cmp	r3, #32
 80093de:	d104      	bne.n	80093ea <__gethex+0x1e6>
 80093e0:	f845 bb04 	str.w	fp, [r5], #4
 80093e4:	f04f 0b00 	mov.w	fp, #0
 80093e8:	465b      	mov	r3, fp
 80093ea:	7830      	ldrb	r0, [r6, #0]
 80093ec:	9303      	str	r3, [sp, #12]
 80093ee:	f7ff fef4 	bl	80091da <__hexdig_fun>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	f000 000f 	and.w	r0, r0, #15
 80093f8:	4098      	lsls	r0, r3
 80093fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80093fe:	3304      	adds	r3, #4
 8009400:	e7ae      	b.n	8009360 <__gethex+0x15c>
 8009402:	45b1      	cmp	r9, r6
 8009404:	d8ea      	bhi.n	80093dc <__gethex+0x1d8>
 8009406:	2201      	movs	r2, #1
 8009408:	4630      	mov	r0, r6
 800940a:	492a      	ldr	r1, [pc, #168]	@ (80094b4 <__gethex+0x2b0>)
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	f7fd f972 	bl	80066f6 <strncmp>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	2800      	cmp	r0, #0
 8009416:	d1e1      	bne.n	80093dc <__gethex+0x1d8>
 8009418:	e7a2      	b.n	8009360 <__gethex+0x15c>
 800941a:	4620      	mov	r0, r4
 800941c:	1ea9      	subs	r1, r5, #2
 800941e:	f7fe fdf8 	bl	8008012 <__any_on>
 8009422:	2800      	cmp	r0, #0
 8009424:	d0c2      	beq.n	80093ac <__gethex+0x1a8>
 8009426:	f04f 0903 	mov.w	r9, #3
 800942a:	e7c1      	b.n	80093b0 <__gethex+0x1ac>
 800942c:	da09      	bge.n	8009442 <__gethex+0x23e>
 800942e:	1b75      	subs	r5, r6, r5
 8009430:	4621      	mov	r1, r4
 8009432:	462a      	mov	r2, r5
 8009434:	9801      	ldr	r0, [sp, #4]
 8009436:	f7fe fbbd 	bl	8007bb4 <__lshift>
 800943a:	4604      	mov	r4, r0
 800943c:	1b7f      	subs	r7, r7, r5
 800943e:	f100 0a14 	add.w	sl, r0, #20
 8009442:	f04f 0900 	mov.w	r9, #0
 8009446:	e7b8      	b.n	80093ba <__gethex+0x1b6>
 8009448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800944c:	42bd      	cmp	r5, r7
 800944e:	dd6f      	ble.n	8009530 <__gethex+0x32c>
 8009450:	1bed      	subs	r5, r5, r7
 8009452:	42ae      	cmp	r6, r5
 8009454:	dc34      	bgt.n	80094c0 <__gethex+0x2bc>
 8009456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800945a:	2b02      	cmp	r3, #2
 800945c:	d022      	beq.n	80094a4 <__gethex+0x2a0>
 800945e:	2b03      	cmp	r3, #3
 8009460:	d024      	beq.n	80094ac <__gethex+0x2a8>
 8009462:	2b01      	cmp	r3, #1
 8009464:	d115      	bne.n	8009492 <__gethex+0x28e>
 8009466:	42ae      	cmp	r6, r5
 8009468:	d113      	bne.n	8009492 <__gethex+0x28e>
 800946a:	2e01      	cmp	r6, #1
 800946c:	d10b      	bne.n	8009486 <__gethex+0x282>
 800946e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009472:	9a02      	ldr	r2, [sp, #8]
 8009474:	2562      	movs	r5, #98	@ 0x62
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	2301      	movs	r3, #1
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	f8ca 3000 	str.w	r3, [sl]
 8009480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009482:	601c      	str	r4, [r3, #0]
 8009484:	e73a      	b.n	80092fc <__gethex+0xf8>
 8009486:	4620      	mov	r0, r4
 8009488:	1e71      	subs	r1, r6, #1
 800948a:	f7fe fdc2 	bl	8008012 <__any_on>
 800948e:	2800      	cmp	r0, #0
 8009490:	d1ed      	bne.n	800946e <__gethex+0x26a>
 8009492:	4621      	mov	r1, r4
 8009494:	9801      	ldr	r0, [sp, #4]
 8009496:	f7fe f97d 	bl	8007794 <_Bfree>
 800949a:	2300      	movs	r3, #0
 800949c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800949e:	2550      	movs	r5, #80	@ 0x50
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	e72b      	b.n	80092fc <__gethex+0xf8>
 80094a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1f3      	bne.n	8009492 <__gethex+0x28e>
 80094aa:	e7e0      	b.n	800946e <__gethex+0x26a>
 80094ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1dd      	bne.n	800946e <__gethex+0x26a>
 80094b2:	e7ee      	b.n	8009492 <__gethex+0x28e>
 80094b4:	0800a122 	.word	0x0800a122
 80094b8:	0800a0b8 	.word	0x0800a0b8
 80094bc:	0800a179 	.word	0x0800a179
 80094c0:	1e6f      	subs	r7, r5, #1
 80094c2:	f1b9 0f00 	cmp.w	r9, #0
 80094c6:	d130      	bne.n	800952a <__gethex+0x326>
 80094c8:	b127      	cbz	r7, 80094d4 <__gethex+0x2d0>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4620      	mov	r0, r4
 80094ce:	f7fe fda0 	bl	8008012 <__any_on>
 80094d2:	4681      	mov	r9, r0
 80094d4:	2301      	movs	r3, #1
 80094d6:	4629      	mov	r1, r5
 80094d8:	1b76      	subs	r6, r6, r5
 80094da:	2502      	movs	r5, #2
 80094dc:	117a      	asrs	r2, r7, #5
 80094de:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80094e2:	f007 071f 	and.w	r7, r7, #31
 80094e6:	40bb      	lsls	r3, r7
 80094e8:	4213      	tst	r3, r2
 80094ea:	4620      	mov	r0, r4
 80094ec:	bf18      	it	ne
 80094ee:	f049 0902 	orrne.w	r9, r9, #2
 80094f2:	f7ff fe1f 	bl	8009134 <rshift>
 80094f6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80094fa:	f1b9 0f00 	cmp.w	r9, #0
 80094fe:	d047      	beq.n	8009590 <__gethex+0x38c>
 8009500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d015      	beq.n	8009534 <__gethex+0x330>
 8009508:	2b03      	cmp	r3, #3
 800950a:	d017      	beq.n	800953c <__gethex+0x338>
 800950c:	2b01      	cmp	r3, #1
 800950e:	d109      	bne.n	8009524 <__gethex+0x320>
 8009510:	f019 0f02 	tst.w	r9, #2
 8009514:	d006      	beq.n	8009524 <__gethex+0x320>
 8009516:	f8da 3000 	ldr.w	r3, [sl]
 800951a:	ea49 0903 	orr.w	r9, r9, r3
 800951e:	f019 0f01 	tst.w	r9, #1
 8009522:	d10e      	bne.n	8009542 <__gethex+0x33e>
 8009524:	f045 0510 	orr.w	r5, r5, #16
 8009528:	e032      	b.n	8009590 <__gethex+0x38c>
 800952a:	f04f 0901 	mov.w	r9, #1
 800952e:	e7d1      	b.n	80094d4 <__gethex+0x2d0>
 8009530:	2501      	movs	r5, #1
 8009532:	e7e2      	b.n	80094fa <__gethex+0x2f6>
 8009534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009536:	f1c3 0301 	rsb	r3, r3, #1
 800953a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800953c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0f0      	beq.n	8009524 <__gethex+0x320>
 8009542:	f04f 0c00 	mov.w	ip, #0
 8009546:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800954a:	f104 0314 	add.w	r3, r4, #20
 800954e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009552:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009556:	4618      	mov	r0, r3
 8009558:	f853 2b04 	ldr.w	r2, [r3], #4
 800955c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009560:	d01b      	beq.n	800959a <__gethex+0x396>
 8009562:	3201      	adds	r2, #1
 8009564:	6002      	str	r2, [r0, #0]
 8009566:	2d02      	cmp	r5, #2
 8009568:	f104 0314 	add.w	r3, r4, #20
 800956c:	d13c      	bne.n	80095e8 <__gethex+0x3e4>
 800956e:	f8d8 2000 	ldr.w	r2, [r8]
 8009572:	3a01      	subs	r2, #1
 8009574:	42b2      	cmp	r2, r6
 8009576:	d109      	bne.n	800958c <__gethex+0x388>
 8009578:	2201      	movs	r2, #1
 800957a:	1171      	asrs	r1, r6, #5
 800957c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009580:	f006 061f 	and.w	r6, r6, #31
 8009584:	fa02 f606 	lsl.w	r6, r2, r6
 8009588:	421e      	tst	r6, r3
 800958a:	d13a      	bne.n	8009602 <__gethex+0x3fe>
 800958c:	f045 0520 	orr.w	r5, r5, #32
 8009590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009592:	601c      	str	r4, [r3, #0]
 8009594:	9b02      	ldr	r3, [sp, #8]
 8009596:	601f      	str	r7, [r3, #0]
 8009598:	e6b0      	b.n	80092fc <__gethex+0xf8>
 800959a:	4299      	cmp	r1, r3
 800959c:	f843 cc04 	str.w	ip, [r3, #-4]
 80095a0:	d8d9      	bhi.n	8009556 <__gethex+0x352>
 80095a2:	68a3      	ldr	r3, [r4, #8]
 80095a4:	459b      	cmp	fp, r3
 80095a6:	db17      	blt.n	80095d8 <__gethex+0x3d4>
 80095a8:	6861      	ldr	r1, [r4, #4]
 80095aa:	9801      	ldr	r0, [sp, #4]
 80095ac:	3101      	adds	r1, #1
 80095ae:	f7fe f8b1 	bl	8007714 <_Balloc>
 80095b2:	4681      	mov	r9, r0
 80095b4:	b918      	cbnz	r0, 80095be <__gethex+0x3ba>
 80095b6:	4602      	mov	r2, r0
 80095b8:	2184      	movs	r1, #132	@ 0x84
 80095ba:	4b19      	ldr	r3, [pc, #100]	@ (8009620 <__gethex+0x41c>)
 80095bc:	e6c5      	b.n	800934a <__gethex+0x146>
 80095be:	6922      	ldr	r2, [r4, #16]
 80095c0:	f104 010c 	add.w	r1, r4, #12
 80095c4:	3202      	adds	r2, #2
 80095c6:	0092      	lsls	r2, r2, #2
 80095c8:	300c      	adds	r0, #12
 80095ca:	f7ff fd6d 	bl	80090a8 <memcpy>
 80095ce:	4621      	mov	r1, r4
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	f7fe f8df 	bl	8007794 <_Bfree>
 80095d6:	464c      	mov	r4, r9
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	6122      	str	r2, [r4, #16]
 80095de:	2201      	movs	r2, #1
 80095e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095e4:	615a      	str	r2, [r3, #20]
 80095e6:	e7be      	b.n	8009566 <__gethex+0x362>
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	455a      	cmp	r2, fp
 80095ec:	dd0b      	ble.n	8009606 <__gethex+0x402>
 80095ee:	2101      	movs	r1, #1
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7ff fd9f 	bl	8009134 <rshift>
 80095f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095fa:	3701      	adds	r7, #1
 80095fc:	42bb      	cmp	r3, r7
 80095fe:	f6ff aee0 	blt.w	80093c2 <__gethex+0x1be>
 8009602:	2501      	movs	r5, #1
 8009604:	e7c2      	b.n	800958c <__gethex+0x388>
 8009606:	f016 061f 	ands.w	r6, r6, #31
 800960a:	d0fa      	beq.n	8009602 <__gethex+0x3fe>
 800960c:	4453      	add	r3, sl
 800960e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009612:	f7fe f971 	bl	80078f8 <__hi0bits>
 8009616:	f1c6 0620 	rsb	r6, r6, #32
 800961a:	42b0      	cmp	r0, r6
 800961c:	dbe7      	blt.n	80095ee <__gethex+0x3ea>
 800961e:	e7f0      	b.n	8009602 <__gethex+0x3fe>
 8009620:	0800a0b8 	.word	0x0800a0b8

08009624 <L_shift>:
 8009624:	f1c2 0208 	rsb	r2, r2, #8
 8009628:	0092      	lsls	r2, r2, #2
 800962a:	b570      	push	{r4, r5, r6, lr}
 800962c:	f1c2 0620 	rsb	r6, r2, #32
 8009630:	6843      	ldr	r3, [r0, #4]
 8009632:	6804      	ldr	r4, [r0, #0]
 8009634:	fa03 f506 	lsl.w	r5, r3, r6
 8009638:	432c      	orrs	r4, r5
 800963a:	40d3      	lsrs	r3, r2
 800963c:	6004      	str	r4, [r0, #0]
 800963e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009642:	4288      	cmp	r0, r1
 8009644:	d3f4      	bcc.n	8009630 <L_shift+0xc>
 8009646:	bd70      	pop	{r4, r5, r6, pc}

08009648 <__match>:
 8009648:	b530      	push	{r4, r5, lr}
 800964a:	6803      	ldr	r3, [r0, #0]
 800964c:	3301      	adds	r3, #1
 800964e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009652:	b914      	cbnz	r4, 800965a <__match+0x12>
 8009654:	6003      	str	r3, [r0, #0]
 8009656:	2001      	movs	r0, #1
 8009658:	bd30      	pop	{r4, r5, pc}
 800965a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800965e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009662:	2d19      	cmp	r5, #25
 8009664:	bf98      	it	ls
 8009666:	3220      	addls	r2, #32
 8009668:	42a2      	cmp	r2, r4
 800966a:	d0f0      	beq.n	800964e <__match+0x6>
 800966c:	2000      	movs	r0, #0
 800966e:	e7f3      	b.n	8009658 <__match+0x10>

08009670 <__hexnan>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	2500      	movs	r5, #0
 8009676:	680b      	ldr	r3, [r1, #0]
 8009678:	4682      	mov	sl, r0
 800967a:	115e      	asrs	r6, r3, #5
 800967c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009680:	f013 031f 	ands.w	r3, r3, #31
 8009684:	bf18      	it	ne
 8009686:	3604      	addne	r6, #4
 8009688:	1f37      	subs	r7, r6, #4
 800968a:	4690      	mov	r8, r2
 800968c:	46b9      	mov	r9, r7
 800968e:	463c      	mov	r4, r7
 8009690:	46ab      	mov	fp, r5
 8009692:	b087      	sub	sp, #28
 8009694:	6801      	ldr	r1, [r0, #0]
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	f846 5c04 	str.w	r5, [r6, #-4]
 800969c:	9502      	str	r5, [sp, #8]
 800969e:	784a      	ldrb	r2, [r1, #1]
 80096a0:	1c4b      	adds	r3, r1, #1
 80096a2:	9303      	str	r3, [sp, #12]
 80096a4:	b342      	cbz	r2, 80096f8 <__hexnan+0x88>
 80096a6:	4610      	mov	r0, r2
 80096a8:	9105      	str	r1, [sp, #20]
 80096aa:	9204      	str	r2, [sp, #16]
 80096ac:	f7ff fd95 	bl	80091da <__hexdig_fun>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d151      	bne.n	8009758 <__hexnan+0xe8>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	9905      	ldr	r1, [sp, #20]
 80096b8:	2a20      	cmp	r2, #32
 80096ba:	d818      	bhi.n	80096ee <__hexnan+0x7e>
 80096bc:	9b02      	ldr	r3, [sp, #8]
 80096be:	459b      	cmp	fp, r3
 80096c0:	dd13      	ble.n	80096ea <__hexnan+0x7a>
 80096c2:	454c      	cmp	r4, r9
 80096c4:	d206      	bcs.n	80096d4 <__hexnan+0x64>
 80096c6:	2d07      	cmp	r5, #7
 80096c8:	dc04      	bgt.n	80096d4 <__hexnan+0x64>
 80096ca:	462a      	mov	r2, r5
 80096cc:	4649      	mov	r1, r9
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7ff ffa8 	bl	8009624 <L_shift>
 80096d4:	4544      	cmp	r4, r8
 80096d6:	d952      	bls.n	800977e <__hexnan+0x10e>
 80096d8:	2300      	movs	r3, #0
 80096da:	f1a4 0904 	sub.w	r9, r4, #4
 80096de:	f844 3c04 	str.w	r3, [r4, #-4]
 80096e2:	461d      	mov	r5, r3
 80096e4:	464c      	mov	r4, r9
 80096e6:	f8cd b008 	str.w	fp, [sp, #8]
 80096ea:	9903      	ldr	r1, [sp, #12]
 80096ec:	e7d7      	b.n	800969e <__hexnan+0x2e>
 80096ee:	2a29      	cmp	r2, #41	@ 0x29
 80096f0:	d157      	bne.n	80097a2 <__hexnan+0x132>
 80096f2:	3102      	adds	r1, #2
 80096f4:	f8ca 1000 	str.w	r1, [sl]
 80096f8:	f1bb 0f00 	cmp.w	fp, #0
 80096fc:	d051      	beq.n	80097a2 <__hexnan+0x132>
 80096fe:	454c      	cmp	r4, r9
 8009700:	d206      	bcs.n	8009710 <__hexnan+0xa0>
 8009702:	2d07      	cmp	r5, #7
 8009704:	dc04      	bgt.n	8009710 <__hexnan+0xa0>
 8009706:	462a      	mov	r2, r5
 8009708:	4649      	mov	r1, r9
 800970a:	4620      	mov	r0, r4
 800970c:	f7ff ff8a 	bl	8009624 <L_shift>
 8009710:	4544      	cmp	r4, r8
 8009712:	d936      	bls.n	8009782 <__hexnan+0x112>
 8009714:	4623      	mov	r3, r4
 8009716:	f1a8 0204 	sub.w	r2, r8, #4
 800971a:	f853 1b04 	ldr.w	r1, [r3], #4
 800971e:	429f      	cmp	r7, r3
 8009720:	f842 1f04 	str.w	r1, [r2, #4]!
 8009724:	d2f9      	bcs.n	800971a <__hexnan+0xaa>
 8009726:	1b3b      	subs	r3, r7, r4
 8009728:	f023 0303 	bic.w	r3, r3, #3
 800972c:	3304      	adds	r3, #4
 800972e:	3401      	adds	r4, #1
 8009730:	3e03      	subs	r6, #3
 8009732:	42b4      	cmp	r4, r6
 8009734:	bf88      	it	hi
 8009736:	2304      	movhi	r3, #4
 8009738:	2200      	movs	r2, #0
 800973a:	4443      	add	r3, r8
 800973c:	f843 2b04 	str.w	r2, [r3], #4
 8009740:	429f      	cmp	r7, r3
 8009742:	d2fb      	bcs.n	800973c <__hexnan+0xcc>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	b91b      	cbnz	r3, 8009750 <__hexnan+0xe0>
 8009748:	4547      	cmp	r7, r8
 800974a:	d128      	bne.n	800979e <__hexnan+0x12e>
 800974c:	2301      	movs	r3, #1
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	2005      	movs	r0, #5
 8009752:	b007      	add	sp, #28
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	3501      	adds	r5, #1
 800975a:	2d08      	cmp	r5, #8
 800975c:	f10b 0b01 	add.w	fp, fp, #1
 8009760:	dd06      	ble.n	8009770 <__hexnan+0x100>
 8009762:	4544      	cmp	r4, r8
 8009764:	d9c1      	bls.n	80096ea <__hexnan+0x7a>
 8009766:	2300      	movs	r3, #0
 8009768:	2501      	movs	r5, #1
 800976a:	f844 3c04 	str.w	r3, [r4, #-4]
 800976e:	3c04      	subs	r4, #4
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	f000 000f 	and.w	r0, r0, #15
 8009776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800977a:	6020      	str	r0, [r4, #0]
 800977c:	e7b5      	b.n	80096ea <__hexnan+0x7a>
 800977e:	2508      	movs	r5, #8
 8009780:	e7b3      	b.n	80096ea <__hexnan+0x7a>
 8009782:	9b01      	ldr	r3, [sp, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0dd      	beq.n	8009744 <__hexnan+0xd4>
 8009788:	f04f 32ff 	mov.w	r2, #4294967295
 800978c:	f1c3 0320 	rsb	r3, r3, #32
 8009790:	40da      	lsrs	r2, r3
 8009792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009796:	4013      	ands	r3, r2
 8009798:	f846 3c04 	str.w	r3, [r6, #-4]
 800979c:	e7d2      	b.n	8009744 <__hexnan+0xd4>
 800979e:	3f04      	subs	r7, #4
 80097a0:	e7d0      	b.n	8009744 <__hexnan+0xd4>
 80097a2:	2004      	movs	r0, #4
 80097a4:	e7d5      	b.n	8009752 <__hexnan+0xe2>

080097a6 <__ascii_mbtowc>:
 80097a6:	b082      	sub	sp, #8
 80097a8:	b901      	cbnz	r1, 80097ac <__ascii_mbtowc+0x6>
 80097aa:	a901      	add	r1, sp, #4
 80097ac:	b142      	cbz	r2, 80097c0 <__ascii_mbtowc+0x1a>
 80097ae:	b14b      	cbz	r3, 80097c4 <__ascii_mbtowc+0x1e>
 80097b0:	7813      	ldrb	r3, [r2, #0]
 80097b2:	600b      	str	r3, [r1, #0]
 80097b4:	7812      	ldrb	r2, [r2, #0]
 80097b6:	1e10      	subs	r0, r2, #0
 80097b8:	bf18      	it	ne
 80097ba:	2001      	movne	r0, #1
 80097bc:	b002      	add	sp, #8
 80097be:	4770      	bx	lr
 80097c0:	4610      	mov	r0, r2
 80097c2:	e7fb      	b.n	80097bc <__ascii_mbtowc+0x16>
 80097c4:	f06f 0001 	mvn.w	r0, #1
 80097c8:	e7f8      	b.n	80097bc <__ascii_mbtowc+0x16>

080097ca <_realloc_r>:
 80097ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ce:	4607      	mov	r7, r0
 80097d0:	4614      	mov	r4, r2
 80097d2:	460d      	mov	r5, r1
 80097d4:	b921      	cbnz	r1, 80097e0 <_realloc_r+0x16>
 80097d6:	4611      	mov	r1, r2
 80097d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097dc:	f7fd bf0e 	b.w	80075fc <_malloc_r>
 80097e0:	b92a      	cbnz	r2, 80097ee <_realloc_r+0x24>
 80097e2:	f7fd fe99 	bl	8007518 <_free_r>
 80097e6:	4625      	mov	r5, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ee:	f000 f840 	bl	8009872 <_malloc_usable_size_r>
 80097f2:	4284      	cmp	r4, r0
 80097f4:	4606      	mov	r6, r0
 80097f6:	d802      	bhi.n	80097fe <_realloc_r+0x34>
 80097f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097fc:	d8f4      	bhi.n	80097e8 <_realloc_r+0x1e>
 80097fe:	4621      	mov	r1, r4
 8009800:	4638      	mov	r0, r7
 8009802:	f7fd fefb 	bl	80075fc <_malloc_r>
 8009806:	4680      	mov	r8, r0
 8009808:	b908      	cbnz	r0, 800980e <_realloc_r+0x44>
 800980a:	4645      	mov	r5, r8
 800980c:	e7ec      	b.n	80097e8 <_realloc_r+0x1e>
 800980e:	42b4      	cmp	r4, r6
 8009810:	4622      	mov	r2, r4
 8009812:	4629      	mov	r1, r5
 8009814:	bf28      	it	cs
 8009816:	4632      	movcs	r2, r6
 8009818:	f7ff fc46 	bl	80090a8 <memcpy>
 800981c:	4629      	mov	r1, r5
 800981e:	4638      	mov	r0, r7
 8009820:	f7fd fe7a 	bl	8007518 <_free_r>
 8009824:	e7f1      	b.n	800980a <_realloc_r+0x40>

08009826 <__ascii_wctomb>:
 8009826:	4603      	mov	r3, r0
 8009828:	4608      	mov	r0, r1
 800982a:	b141      	cbz	r1, 800983e <__ascii_wctomb+0x18>
 800982c:	2aff      	cmp	r2, #255	@ 0xff
 800982e:	d904      	bls.n	800983a <__ascii_wctomb+0x14>
 8009830:	228a      	movs	r2, #138	@ 0x8a
 8009832:	f04f 30ff 	mov.w	r0, #4294967295
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	4770      	bx	lr
 800983a:	2001      	movs	r0, #1
 800983c:	700a      	strb	r2, [r1, #0]
 800983e:	4770      	bx	lr

08009840 <fiprintf>:
 8009840:	b40e      	push	{r1, r2, r3}
 8009842:	b503      	push	{r0, r1, lr}
 8009844:	4601      	mov	r1, r0
 8009846:	ab03      	add	r3, sp, #12
 8009848:	4805      	ldr	r0, [pc, #20]	@ (8009860 <fiprintf+0x20>)
 800984a:	f853 2b04 	ldr.w	r2, [r3], #4
 800984e:	6800      	ldr	r0, [r0, #0]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f000 f83d 	bl	80098d0 <_vfiprintf_r>
 8009856:	b002      	add	sp, #8
 8009858:	f85d eb04 	ldr.w	lr, [sp], #4
 800985c:	b003      	add	sp, #12
 800985e:	4770      	bx	lr
 8009860:	20000018 	.word	0x20000018

08009864 <abort>:
 8009864:	2006      	movs	r0, #6
 8009866:	b508      	push	{r3, lr}
 8009868:	f000 fa06 	bl	8009c78 <raise>
 800986c:	2001      	movs	r0, #1
 800986e:	f7f8 fb92 	bl	8001f96 <_exit>

08009872 <_malloc_usable_size_r>:
 8009872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009876:	1f18      	subs	r0, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfbc      	itt	lt
 800987c:	580b      	ldrlt	r3, [r1, r0]
 800987e:	18c0      	addlt	r0, r0, r3
 8009880:	4770      	bx	lr

08009882 <__sfputc_r>:
 8009882:	6893      	ldr	r3, [r2, #8]
 8009884:	b410      	push	{r4}
 8009886:	3b01      	subs	r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	6093      	str	r3, [r2, #8]
 800988c:	da07      	bge.n	800989e <__sfputc_r+0x1c>
 800988e:	6994      	ldr	r4, [r2, #24]
 8009890:	42a3      	cmp	r3, r4
 8009892:	db01      	blt.n	8009898 <__sfputc_r+0x16>
 8009894:	290a      	cmp	r1, #10
 8009896:	d102      	bne.n	800989e <__sfputc_r+0x1c>
 8009898:	bc10      	pop	{r4}
 800989a:	f000 b931 	b.w	8009b00 <__swbuf_r>
 800989e:	6813      	ldr	r3, [r2, #0]
 80098a0:	1c58      	adds	r0, r3, #1
 80098a2:	6010      	str	r0, [r2, #0]
 80098a4:	7019      	strb	r1, [r3, #0]
 80098a6:	4608      	mov	r0, r1
 80098a8:	bc10      	pop	{r4}
 80098aa:	4770      	bx	lr

080098ac <__sfputs_r>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	4606      	mov	r6, r0
 80098b0:	460f      	mov	r7, r1
 80098b2:	4614      	mov	r4, r2
 80098b4:	18d5      	adds	r5, r2, r3
 80098b6:	42ac      	cmp	r4, r5
 80098b8:	d101      	bne.n	80098be <__sfputs_r+0x12>
 80098ba:	2000      	movs	r0, #0
 80098bc:	e007      	b.n	80098ce <__sfputs_r+0x22>
 80098be:	463a      	mov	r2, r7
 80098c0:	4630      	mov	r0, r6
 80098c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c6:	f7ff ffdc 	bl	8009882 <__sfputc_r>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d1f3      	bne.n	80098b6 <__sfputs_r+0xa>
 80098ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098d0 <_vfiprintf_r>:
 80098d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d4:	460d      	mov	r5, r1
 80098d6:	4614      	mov	r4, r2
 80098d8:	4698      	mov	r8, r3
 80098da:	4606      	mov	r6, r0
 80098dc:	b09d      	sub	sp, #116	@ 0x74
 80098de:	b118      	cbz	r0, 80098e8 <_vfiprintf_r+0x18>
 80098e0:	6a03      	ldr	r3, [r0, #32]
 80098e2:	b90b      	cbnz	r3, 80098e8 <_vfiprintf_r+0x18>
 80098e4:	f7fc fe64 	bl	80065b0 <__sinit>
 80098e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098ea:	07d9      	lsls	r1, r3, #31
 80098ec:	d405      	bmi.n	80098fa <_vfiprintf_r+0x2a>
 80098ee:	89ab      	ldrh	r3, [r5, #12]
 80098f0:	059a      	lsls	r2, r3, #22
 80098f2:	d402      	bmi.n	80098fa <_vfiprintf_r+0x2a>
 80098f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098f6:	f7fc ff9c 	bl	8006832 <__retarget_lock_acquire_recursive>
 80098fa:	89ab      	ldrh	r3, [r5, #12]
 80098fc:	071b      	lsls	r3, r3, #28
 80098fe:	d501      	bpl.n	8009904 <_vfiprintf_r+0x34>
 8009900:	692b      	ldr	r3, [r5, #16]
 8009902:	b99b      	cbnz	r3, 800992c <_vfiprintf_r+0x5c>
 8009904:	4629      	mov	r1, r5
 8009906:	4630      	mov	r0, r6
 8009908:	f000 f938 	bl	8009b7c <__swsetup_r>
 800990c:	b170      	cbz	r0, 800992c <_vfiprintf_r+0x5c>
 800990e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009910:	07dc      	lsls	r4, r3, #31
 8009912:	d504      	bpl.n	800991e <_vfiprintf_r+0x4e>
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	b01d      	add	sp, #116	@ 0x74
 800991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991e:	89ab      	ldrh	r3, [r5, #12]
 8009920:	0598      	lsls	r0, r3, #22
 8009922:	d4f7      	bmi.n	8009914 <_vfiprintf_r+0x44>
 8009924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009926:	f7fc ff85 	bl	8006834 <__retarget_lock_release_recursive>
 800992a:	e7f3      	b.n	8009914 <_vfiprintf_r+0x44>
 800992c:	2300      	movs	r3, #0
 800992e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009930:	2320      	movs	r3, #32
 8009932:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009936:	2330      	movs	r3, #48	@ 0x30
 8009938:	f04f 0901 	mov.w	r9, #1
 800993c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009940:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009aec <_vfiprintf_r+0x21c>
 8009944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009948:	4623      	mov	r3, r4
 800994a:	469a      	mov	sl, r3
 800994c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009950:	b10a      	cbz	r2, 8009956 <_vfiprintf_r+0x86>
 8009952:	2a25      	cmp	r2, #37	@ 0x25
 8009954:	d1f9      	bne.n	800994a <_vfiprintf_r+0x7a>
 8009956:	ebba 0b04 	subs.w	fp, sl, r4
 800995a:	d00b      	beq.n	8009974 <_vfiprintf_r+0xa4>
 800995c:	465b      	mov	r3, fp
 800995e:	4622      	mov	r2, r4
 8009960:	4629      	mov	r1, r5
 8009962:	4630      	mov	r0, r6
 8009964:	f7ff ffa2 	bl	80098ac <__sfputs_r>
 8009968:	3001      	adds	r0, #1
 800996a:	f000 80a7 	beq.w	8009abc <_vfiprintf_r+0x1ec>
 800996e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009970:	445a      	add	r2, fp
 8009972:	9209      	str	r2, [sp, #36]	@ 0x24
 8009974:	f89a 3000 	ldrb.w	r3, [sl]
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 809f 	beq.w	8009abc <_vfiprintf_r+0x1ec>
 800997e:	2300      	movs	r3, #0
 8009980:	f04f 32ff 	mov.w	r2, #4294967295
 8009984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009988:	f10a 0a01 	add.w	sl, sl, #1
 800998c:	9304      	str	r3, [sp, #16]
 800998e:	9307      	str	r3, [sp, #28]
 8009990:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009994:	931a      	str	r3, [sp, #104]	@ 0x68
 8009996:	4654      	mov	r4, sl
 8009998:	2205      	movs	r2, #5
 800999a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999e:	4853      	ldr	r0, [pc, #332]	@ (8009aec <_vfiprintf_r+0x21c>)
 80099a0:	f7fc ff49 	bl	8006836 <memchr>
 80099a4:	9a04      	ldr	r2, [sp, #16]
 80099a6:	b9d8      	cbnz	r0, 80099e0 <_vfiprintf_r+0x110>
 80099a8:	06d1      	lsls	r1, r2, #27
 80099aa:	bf44      	itt	mi
 80099ac:	2320      	movmi	r3, #32
 80099ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099b2:	0713      	lsls	r3, r2, #28
 80099b4:	bf44      	itt	mi
 80099b6:	232b      	movmi	r3, #43	@ 0x2b
 80099b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099bc:	f89a 3000 	ldrb.w	r3, [sl]
 80099c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80099c2:	d015      	beq.n	80099f0 <_vfiprintf_r+0x120>
 80099c4:	4654      	mov	r4, sl
 80099c6:	2000      	movs	r0, #0
 80099c8:	f04f 0c0a 	mov.w	ip, #10
 80099cc:	9a07      	ldr	r2, [sp, #28]
 80099ce:	4621      	mov	r1, r4
 80099d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099d4:	3b30      	subs	r3, #48	@ 0x30
 80099d6:	2b09      	cmp	r3, #9
 80099d8:	d94b      	bls.n	8009a72 <_vfiprintf_r+0x1a2>
 80099da:	b1b0      	cbz	r0, 8009a0a <_vfiprintf_r+0x13a>
 80099dc:	9207      	str	r2, [sp, #28]
 80099de:	e014      	b.n	8009a0a <_vfiprintf_r+0x13a>
 80099e0:	eba0 0308 	sub.w	r3, r0, r8
 80099e4:	fa09 f303 	lsl.w	r3, r9, r3
 80099e8:	4313      	orrs	r3, r2
 80099ea:	46a2      	mov	sl, r4
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	e7d2      	b.n	8009996 <_vfiprintf_r+0xc6>
 80099f0:	9b03      	ldr	r3, [sp, #12]
 80099f2:	1d19      	adds	r1, r3, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	9103      	str	r1, [sp, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bfbb      	ittet	lt
 80099fc:	425b      	neglt	r3, r3
 80099fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009a02:	9307      	strge	r3, [sp, #28]
 8009a04:	9307      	strlt	r3, [sp, #28]
 8009a06:	bfb8      	it	lt
 8009a08:	9204      	strlt	r2, [sp, #16]
 8009a0a:	7823      	ldrb	r3, [r4, #0]
 8009a0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a0e:	d10a      	bne.n	8009a26 <_vfiprintf_r+0x156>
 8009a10:	7863      	ldrb	r3, [r4, #1]
 8009a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a14:	d132      	bne.n	8009a7c <_vfiprintf_r+0x1ac>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	3402      	adds	r4, #2
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	9203      	str	r2, [sp, #12]
 8009a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009af0 <_vfiprintf_r+0x220>
 8009a2a:	2203      	movs	r2, #3
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	7821      	ldrb	r1, [r4, #0]
 8009a30:	f7fc ff01 	bl	8006836 <memchr>
 8009a34:	b138      	cbz	r0, 8009a46 <_vfiprintf_r+0x176>
 8009a36:	2240      	movs	r2, #64	@ 0x40
 8009a38:	9b04      	ldr	r3, [sp, #16]
 8009a3a:	eba0 000a 	sub.w	r0, r0, sl
 8009a3e:	4082      	lsls	r2, r0
 8009a40:	4313      	orrs	r3, r2
 8009a42:	3401      	adds	r4, #1
 8009a44:	9304      	str	r3, [sp, #16]
 8009a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4a:	2206      	movs	r2, #6
 8009a4c:	4829      	ldr	r0, [pc, #164]	@ (8009af4 <_vfiprintf_r+0x224>)
 8009a4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a52:	f7fc fef0 	bl	8006836 <memchr>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d03f      	beq.n	8009ada <_vfiprintf_r+0x20a>
 8009a5a:	4b27      	ldr	r3, [pc, #156]	@ (8009af8 <_vfiprintf_r+0x228>)
 8009a5c:	bb1b      	cbnz	r3, 8009aa6 <_vfiprintf_r+0x1d6>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	3307      	adds	r3, #7
 8009a62:	f023 0307 	bic.w	r3, r3, #7
 8009a66:	3308      	adds	r3, #8
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a6c:	443b      	add	r3, r7
 8009a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a70:	e76a      	b.n	8009948 <_vfiprintf_r+0x78>
 8009a72:	460c      	mov	r4, r1
 8009a74:	2001      	movs	r0, #1
 8009a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a7a:	e7a8      	b.n	80099ce <_vfiprintf_r+0xfe>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f04f 0c0a 	mov.w	ip, #10
 8009a82:	4619      	mov	r1, r3
 8009a84:	3401      	adds	r4, #1
 8009a86:	9305      	str	r3, [sp, #20]
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a8e:	3a30      	subs	r2, #48	@ 0x30
 8009a90:	2a09      	cmp	r2, #9
 8009a92:	d903      	bls.n	8009a9c <_vfiprintf_r+0x1cc>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0c6      	beq.n	8009a26 <_vfiprintf_r+0x156>
 8009a98:	9105      	str	r1, [sp, #20]
 8009a9a:	e7c4      	b.n	8009a26 <_vfiprintf_r+0x156>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aa4:	e7f0      	b.n	8009a88 <_vfiprintf_r+0x1b8>
 8009aa6:	ab03      	add	r3, sp, #12
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	462a      	mov	r2, r5
 8009aac:	4630      	mov	r0, r6
 8009aae:	4b13      	ldr	r3, [pc, #76]	@ (8009afc <_vfiprintf_r+0x22c>)
 8009ab0:	a904      	add	r1, sp, #16
 8009ab2:	f7fb ff2b 	bl	800590c <_printf_float>
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	1c78      	adds	r0, r7, #1
 8009aba:	d1d6      	bne.n	8009a6a <_vfiprintf_r+0x19a>
 8009abc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009abe:	07d9      	lsls	r1, r3, #31
 8009ac0:	d405      	bmi.n	8009ace <_vfiprintf_r+0x1fe>
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	059a      	lsls	r2, r3, #22
 8009ac6:	d402      	bmi.n	8009ace <_vfiprintf_r+0x1fe>
 8009ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aca:	f7fc feb3 	bl	8006834 <__retarget_lock_release_recursive>
 8009ace:	89ab      	ldrh	r3, [r5, #12]
 8009ad0:	065b      	lsls	r3, r3, #25
 8009ad2:	f53f af1f 	bmi.w	8009914 <_vfiprintf_r+0x44>
 8009ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ad8:	e71e      	b.n	8009918 <_vfiprintf_r+0x48>
 8009ada:	ab03      	add	r3, sp, #12
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <_vfiprintf_r+0x22c>)
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	f7fc f9af 	bl	8005e48 <_printf_i>
 8009aea:	e7e4      	b.n	8009ab6 <_vfiprintf_r+0x1e6>
 8009aec:	0800a124 	.word	0x0800a124
 8009af0:	0800a12a 	.word	0x0800a12a
 8009af4:	0800a12e 	.word	0x0800a12e
 8009af8:	0800590d 	.word	0x0800590d
 8009afc:	080098ad 	.word	0x080098ad

08009b00 <__swbuf_r>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	460e      	mov	r6, r1
 8009b04:	4614      	mov	r4, r2
 8009b06:	4605      	mov	r5, r0
 8009b08:	b118      	cbz	r0, 8009b12 <__swbuf_r+0x12>
 8009b0a:	6a03      	ldr	r3, [r0, #32]
 8009b0c:	b90b      	cbnz	r3, 8009b12 <__swbuf_r+0x12>
 8009b0e:	f7fc fd4f 	bl	80065b0 <__sinit>
 8009b12:	69a3      	ldr	r3, [r4, #24]
 8009b14:	60a3      	str	r3, [r4, #8]
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	071a      	lsls	r2, r3, #28
 8009b1a:	d501      	bpl.n	8009b20 <__swbuf_r+0x20>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	b943      	cbnz	r3, 8009b32 <__swbuf_r+0x32>
 8009b20:	4621      	mov	r1, r4
 8009b22:	4628      	mov	r0, r5
 8009b24:	f000 f82a 	bl	8009b7c <__swsetup_r>
 8009b28:	b118      	cbz	r0, 8009b32 <__swbuf_r+0x32>
 8009b2a:	f04f 37ff 	mov.w	r7, #4294967295
 8009b2e:	4638      	mov	r0, r7
 8009b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	6922      	ldr	r2, [r4, #16]
 8009b36:	b2f6      	uxtb	r6, r6
 8009b38:	1a98      	subs	r0, r3, r2
 8009b3a:	6963      	ldr	r3, [r4, #20]
 8009b3c:	4637      	mov	r7, r6
 8009b3e:	4283      	cmp	r3, r0
 8009b40:	dc05      	bgt.n	8009b4e <__swbuf_r+0x4e>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f7ff fa5d 	bl	8009004 <_fflush_r>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d1ed      	bne.n	8009b2a <__swbuf_r+0x2a>
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	60a3      	str	r3, [r4, #8]
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	701e      	strb	r6, [r3, #0]
 8009b5c:	6962      	ldr	r2, [r4, #20]
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d004      	beq.n	8009b6e <__swbuf_r+0x6e>
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	07db      	lsls	r3, r3, #31
 8009b68:	d5e1      	bpl.n	8009b2e <__swbuf_r+0x2e>
 8009b6a:	2e0a      	cmp	r6, #10
 8009b6c:	d1df      	bne.n	8009b2e <__swbuf_r+0x2e>
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4628      	mov	r0, r5
 8009b72:	f7ff fa47 	bl	8009004 <_fflush_r>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d0d9      	beq.n	8009b2e <__swbuf_r+0x2e>
 8009b7a:	e7d6      	b.n	8009b2a <__swbuf_r+0x2a>

08009b7c <__swsetup_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4b29      	ldr	r3, [pc, #164]	@ (8009c24 <__swsetup_r+0xa8>)
 8009b80:	4605      	mov	r5, r0
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	460c      	mov	r4, r1
 8009b86:	b118      	cbz	r0, 8009b90 <__swsetup_r+0x14>
 8009b88:	6a03      	ldr	r3, [r0, #32]
 8009b8a:	b90b      	cbnz	r3, 8009b90 <__swsetup_r+0x14>
 8009b8c:	f7fc fd10 	bl	80065b0 <__sinit>
 8009b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b94:	0719      	lsls	r1, r3, #28
 8009b96:	d422      	bmi.n	8009bde <__swsetup_r+0x62>
 8009b98:	06da      	lsls	r2, r3, #27
 8009b9a:	d407      	bmi.n	8009bac <__swsetup_r+0x30>
 8009b9c:	2209      	movs	r2, #9
 8009b9e:	602a      	str	r2, [r5, #0]
 8009ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	e033      	b.n	8009c14 <__swsetup_r+0x98>
 8009bac:	0758      	lsls	r0, r3, #29
 8009bae:	d512      	bpl.n	8009bd6 <__swsetup_r+0x5a>
 8009bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bb2:	b141      	cbz	r1, 8009bc6 <__swsetup_r+0x4a>
 8009bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bb8:	4299      	cmp	r1, r3
 8009bba:	d002      	beq.n	8009bc2 <__swsetup_r+0x46>
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f7fd fcab 	bl	8007518 <_free_r>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	6063      	str	r3, [r4, #4]
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	f043 0308 	orr.w	r3, r3, #8
 8009bdc:	81a3      	strh	r3, [r4, #12]
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	b94b      	cbnz	r3, 8009bf6 <__swsetup_r+0x7a>
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bec:	d003      	beq.n	8009bf6 <__swsetup_r+0x7a>
 8009bee:	4621      	mov	r1, r4
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	f000 f882 	bl	8009cfa <__smakebuf_r>
 8009bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bfa:	f013 0201 	ands.w	r2, r3, #1
 8009bfe:	d00a      	beq.n	8009c16 <__swsetup_r+0x9a>
 8009c00:	2200      	movs	r2, #0
 8009c02:	60a2      	str	r2, [r4, #8]
 8009c04:	6962      	ldr	r2, [r4, #20]
 8009c06:	4252      	negs	r2, r2
 8009c08:	61a2      	str	r2, [r4, #24]
 8009c0a:	6922      	ldr	r2, [r4, #16]
 8009c0c:	b942      	cbnz	r2, 8009c20 <__swsetup_r+0xa4>
 8009c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c12:	d1c5      	bne.n	8009ba0 <__swsetup_r+0x24>
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
 8009c16:	0799      	lsls	r1, r3, #30
 8009c18:	bf58      	it	pl
 8009c1a:	6962      	ldrpl	r2, [r4, #20]
 8009c1c:	60a2      	str	r2, [r4, #8]
 8009c1e:	e7f4      	b.n	8009c0a <__swsetup_r+0x8e>
 8009c20:	2000      	movs	r0, #0
 8009c22:	e7f7      	b.n	8009c14 <__swsetup_r+0x98>
 8009c24:	20000018 	.word	0x20000018

08009c28 <_raise_r>:
 8009c28:	291f      	cmp	r1, #31
 8009c2a:	b538      	push	{r3, r4, r5, lr}
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	d904      	bls.n	8009c3c <_raise_r+0x14>
 8009c32:	2316      	movs	r3, #22
 8009c34:	6003      	str	r3, [r0, #0]
 8009c36:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c3e:	b112      	cbz	r2, 8009c46 <_raise_r+0x1e>
 8009c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c44:	b94b      	cbnz	r3, 8009c5a <_raise_r+0x32>
 8009c46:	4628      	mov	r0, r5
 8009c48:	f000 f830 	bl	8009cac <_getpid_r>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4601      	mov	r1, r0
 8009c50:	4628      	mov	r0, r5
 8009c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c56:	f000 b817 	b.w	8009c88 <_kill_r>
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d00a      	beq.n	8009c74 <_raise_r+0x4c>
 8009c5e:	1c59      	adds	r1, r3, #1
 8009c60:	d103      	bne.n	8009c6a <_raise_r+0x42>
 8009c62:	2316      	movs	r3, #22
 8009c64:	6003      	str	r3, [r0, #0]
 8009c66:	2001      	movs	r0, #1
 8009c68:	e7e7      	b.n	8009c3a <_raise_r+0x12>
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c72:	4798      	blx	r3
 8009c74:	2000      	movs	r0, #0
 8009c76:	e7e0      	b.n	8009c3a <_raise_r+0x12>

08009c78 <raise>:
 8009c78:	4b02      	ldr	r3, [pc, #8]	@ (8009c84 <raise+0xc>)
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	f7ff bfd3 	b.w	8009c28 <_raise_r>
 8009c82:	bf00      	nop
 8009c84:	20000018 	.word	0x20000018

08009c88 <_kill_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4d06      	ldr	r5, [pc, #24]	@ (8009ca8 <_kill_r+0x20>)
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	4611      	mov	r1, r2
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	f7f8 f96e 	bl	8001f76 <_kill>
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	d102      	bne.n	8009ca4 <_kill_r+0x1c>
 8009c9e:	682b      	ldr	r3, [r5, #0]
 8009ca0:	b103      	cbz	r3, 8009ca4 <_kill_r+0x1c>
 8009ca2:	6023      	str	r3, [r4, #0]
 8009ca4:	bd38      	pop	{r3, r4, r5, pc}
 8009ca6:	bf00      	nop
 8009ca8:	200004d0 	.word	0x200004d0

08009cac <_getpid_r>:
 8009cac:	f7f8 b95c 	b.w	8001f68 <_getpid>

08009cb0 <__swhatbuf_r>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb8:	4615      	mov	r5, r2
 8009cba:	2900      	cmp	r1, #0
 8009cbc:	461e      	mov	r6, r3
 8009cbe:	b096      	sub	sp, #88	@ 0x58
 8009cc0:	da0c      	bge.n	8009cdc <__swhatbuf_r+0x2c>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cca:	bf14      	ite	ne
 8009ccc:	2340      	movne	r3, #64	@ 0x40
 8009cce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	6031      	str	r1, [r6, #0]
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	b016      	add	sp, #88	@ 0x58
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	466a      	mov	r2, sp
 8009cde:	f000 f849 	bl	8009d74 <_fstat_r>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	dbed      	blt.n	8009cc2 <__swhatbuf_r+0x12>
 8009ce6:	9901      	ldr	r1, [sp, #4]
 8009ce8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cf0:	4259      	negs	r1, r3
 8009cf2:	4159      	adcs	r1, r3
 8009cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cf8:	e7eb      	b.n	8009cd2 <__swhatbuf_r+0x22>

08009cfa <__smakebuf_r>:
 8009cfa:	898b      	ldrh	r3, [r1, #12]
 8009cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cfe:	079d      	lsls	r5, r3, #30
 8009d00:	4606      	mov	r6, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	d507      	bpl.n	8009d16 <__smakebuf_r+0x1c>
 8009d06:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	6123      	str	r3, [r4, #16]
 8009d0e:	2301      	movs	r3, #1
 8009d10:	6163      	str	r3, [r4, #20]
 8009d12:	b003      	add	sp, #12
 8009d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d16:	466a      	mov	r2, sp
 8009d18:	ab01      	add	r3, sp, #4
 8009d1a:	f7ff ffc9 	bl	8009cb0 <__swhatbuf_r>
 8009d1e:	9f00      	ldr	r7, [sp, #0]
 8009d20:	4605      	mov	r5, r0
 8009d22:	4639      	mov	r1, r7
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7fd fc69 	bl	80075fc <_malloc_r>
 8009d2a:	b948      	cbnz	r0, 8009d40 <__smakebuf_r+0x46>
 8009d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d30:	059a      	lsls	r2, r3, #22
 8009d32:	d4ee      	bmi.n	8009d12 <__smakebuf_r+0x18>
 8009d34:	f023 0303 	bic.w	r3, r3, #3
 8009d38:	f043 0302 	orr.w	r3, r3, #2
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e7e2      	b.n	8009d06 <__smakebuf_r+0xc>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	6020      	str	r0, [r4, #0]
 8009d50:	b15b      	cbz	r3, 8009d6a <__smakebuf_r+0x70>
 8009d52:	4630      	mov	r0, r6
 8009d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d58:	f000 f81e 	bl	8009d98 <_isatty_r>
 8009d5c:	b128      	cbz	r0, 8009d6a <__smakebuf_r+0x70>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f023 0303 	bic.w	r3, r3, #3
 8009d64:	f043 0301 	orr.w	r3, r3, #1
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	431d      	orrs	r5, r3
 8009d6e:	81a5      	strh	r5, [r4, #12]
 8009d70:	e7cf      	b.n	8009d12 <__smakebuf_r+0x18>
	...

08009d74 <_fstat_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	2300      	movs	r3, #0
 8009d78:	4d06      	ldr	r5, [pc, #24]	@ (8009d94 <_fstat_r+0x20>)
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	602b      	str	r3, [r5, #0]
 8009d82:	f7f8 f957 	bl	8002034 <_fstat>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d102      	bne.n	8009d90 <_fstat_r+0x1c>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	b103      	cbz	r3, 8009d90 <_fstat_r+0x1c>
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	bf00      	nop
 8009d94:	200004d0 	.word	0x200004d0

08009d98 <_isatty_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	4d05      	ldr	r5, [pc, #20]	@ (8009db4 <_isatty_r+0x1c>)
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f8 f955 	bl	8002052 <_isatty>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_isatty_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_isatty_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	200004d0 	.word	0x200004d0

08009db8 <_init>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr

08009dc4 <_fini>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr
