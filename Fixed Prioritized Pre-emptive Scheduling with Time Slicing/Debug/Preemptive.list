
Preemptive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800db18  0800db18  0000eb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e204  0800e204  000101ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e204  0800e204  0000f204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e20c  0800e20c  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e20c  0800e20c  0000f20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e210  0800e210  0000f210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800e214  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003170  200001ec  0800e400  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000335c  0800e400  0001035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce42  00000000  00000000  00010215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f89  00000000  00000000  0002d057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00030fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138e  00000000  00000000  000328e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a515  00000000  00000000  00033c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7d5  00000000  00000000  0004e18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099bba  00000000  00000000  0006a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010451a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f18  00000000  00000000  00104560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0010c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db00 	.word	0x0800db00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800db00 	.word	0x0800db00

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <AHT10_Init>:
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart1;


void AHT10_Init(AHT10_HandleTypeDef *dev) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[3] = {0xE1, 0x08, 0x00};
 8000d60:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <AHT10_Init+0x44>)
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	8019      	strh	r1, [r3, #0]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	0c12      	lsrs	r2, r2, #16
 8000d70:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2303      	movs	r3, #3
 8000d88:	f002 f9b2 	bl	80030f0 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f001 fd19 	bl	80027c4 <HAL_Delay>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	0800db18 	.word	0x0800db18

08000da0 <AHT10_ReadRaw>:

uint8_t AHT10_ReadRaw(AHT10_HandleTypeDef *dev, uint32_t *humidity_raw, uint32_t *temperature_raw) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t cmd[3] = {0xAC, 0x33, 0x00}; // chuẩn AHT10 command
 8000dac:	4a25      	ldr	r2, [pc, #148]	@ (8000e44 <AHT10_ReadRaw+0xa4>)
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	4611      	mov	r1, r2
 8000db6:	8019      	strh	r1, [r3, #0]
 8000db8:	3302      	adds	r3, #2
 8000dba:	0c12      	lsrs	r2, r2, #16
 8000dbc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f107 0214 	add.w	r2, r7, #20
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f002 f98c 	bl	80030f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8000dd8:	2050      	movs	r0, #80	@ 0x50
 8000dda:	f001 fcf3 	bl	80027c4 <HAL_Delay>

	if (HAL_I2C_Master_Receive(dev->hi2c, dev->address, data, 6, HAL_MAX_DELAY) != HAL_OK)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	4619      	mov	r1, r3
 8000de8:	f107 0218 	add.w	r2, r7, #24
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2306      	movs	r3, #6
 8000df4:	f002 fa7a 	bl	80032ec <HAL_I2C_Master_Receive>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <AHT10_ReadRaw+0x62>
	    return 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e01c      	b.n	8000e3c <AHT10_ReadRaw+0x9c>
//	char buf[64];
//	sprintf(buf, "Raw bytes: %02X %02X %02X %02X %02X %02X\r\n",
//	        data[0], data[1], data[2], data[3], data[4], data[5]);
//	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);

	if (data[0] & 0x80)
 8000e02:	7e3b      	ldrb	r3, [r7, #24]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	da01      	bge.n	8000e0e <AHT10_ReadRaw+0x6e>
	    return 0;  // still busy, không đọc được
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e016      	b.n	8000e3c <AHT10_ReadRaw+0x9c>

	*humidity_raw = ((uint32_t)(data[1]) << 12) | ((uint32_t)(data[2]) << 4) | (data[3] >> 4);
 8000e0e:	7e7b      	ldrb	r3, [r7, #25]
 8000e10:	031a      	lsls	r2, r3, #12
 8000e12:	7ebb      	ldrb	r3, [r7, #26]
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	4313      	orrs	r3, r2
 8000e18:	7efa      	ldrb	r2, [r7, #27]
 8000e1a:	0912      	lsrs	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	601a      	str	r2, [r3, #0]
	*temperature_raw = (((uint32_t)(data[3] & 0x0F)) << 16) | ((uint32_t)(data[4]) << 8) | (data[5]);
 8000e24:	7efb      	ldrb	r3, [r7, #27]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000e2c:	7f3b      	ldrb	r3, [r7, #28]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	4313      	orrs	r3, r2
 8000e32:	7f7a      	ldrb	r2, [r7, #29]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
	return 1;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0800db1c 	.word	0x0800db1c

08000e48 <AHT10_ReadTemperature>:


float AHT10_ReadTemperature(uint32_t temp_raw) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    return ((float)temp_raw / 1048576.0) * 200.0 - 50.0;
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff29 	bl	8000ca8 <__aeabi_ui2f>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff faef 	bl	800043c <__aeabi_f2d>
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <AHT10_ReadTemperature+0x5c>)
 8000e64:	f7ff fc6c 	bl	8000740 <__aeabi_ddiv>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <AHT10_ReadTemperature+0x60>)
 8000e76:	f7ff fb39 	bl	80004ec <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <AHT10_ReadTemperature+0x64>)
 8000e88:	f7ff f978 	bl	800017c <__aeabi_dsub>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fe02 	bl	8000a9c <__aeabi_d2f>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	41300000 	.word	0x41300000
 8000ea8:	40690000 	.word	0x40690000
 8000eac:	40490000 	.word	0x40490000

08000eb0 <AHT10_ReadHumidity>:

float AHT10_ReadHumidity(uint32_t hum_raw) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    return ((float)hum_raw / 1048576.0) * 100.0;
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fef5 	bl	8000ca8 <__aeabi_ui2f>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fabb 	bl	800043c <__aeabi_f2d>
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <AHT10_ReadHumidity+0x48>)
 8000ecc:	f7ff fc38 	bl	8000740 <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <AHT10_ReadHumidity+0x4c>)
 8000ede:	f7ff fb05 	bl	80004ec <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fdd7 	bl	8000a9c <__aeabi_d2f>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	41300000 	.word	0x41300000
 8000efc:	40590000 	.word	0x40590000

08000f00 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	f023 030f 	bic.w	r3, r3, #15
 8000f12:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 030c 	orr.w	r3, r3, #12
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	f043 030c 	orr.w	r3, r3, #12
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	791b      	ldrb	r3, [r3, #4]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f107 0208 	add.w	r2, r7, #8
 8000f50:	2364      	movs	r3, #100	@ 0x64
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2304      	movs	r3, #4
 8000f56:	f002 f8cb 	bl	80030f0 <HAL_I2C_Master_Transmit>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f043 030d 	orr.w	r3, r3, #13
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	f043 0309 	orr.w	r3, r3, #9
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	f043 030d 	orr.w	r3, r3, #13
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f043 0309 	orr.w	r3, r3, #9
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f107 0208 	add.w	r2, r7, #8
 8000fb2:	2364      	movs	r3, #100	@ 0x64
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	f002 f89a 	bl	80030f0 <HAL_I2C_Master_Transmit>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff96 	bl	8000f00 <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e006      	b.n	8000fe8 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000fda:	2120      	movs	r1, #32
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffc0 	bl	8000f62 <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b4f      	cmp	r3, #79	@ 0x4f
 8000fec:	ddf5      	ble.n	8000fda <lcd_clear+0x16>
    }
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d824      	bhi.n	8001054 <lcd_gotoxy+0x5c>
 800100a:	a201      	add	r2, pc, #4	@ (adr r2, 8001010 <lcd_gotoxy+0x18>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001021 	.word	0x08001021
 8001014:	0800102b 	.word	0x0800102b
 8001018:	08001035 	.word	0x08001035
 800101c:	0800103f 	.word	0x0800103f
    {
        case 0: address = 0x80 + col; break;  // First row
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3b80      	subs	r3, #128	@ 0x80
 8001026:	75fb      	strb	r3, [r7, #23]
 8001028:	e00e      	b.n	8001048 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3b40      	subs	r3, #64	@ 0x40
 8001030:	75fb      	strb	r3, [r7, #23]
 8001032:	e009      	b.n	8001048 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	3b6c      	subs	r3, #108	@ 0x6c
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e004      	b.n	8001048 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	3b2c      	subs	r3, #44	@ 0x2c
 8001044:	75fb      	strb	r3, [r7, #23]
 8001046:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	4619      	mov	r1, r3
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ff57 	bl	8000f00 <lcd_send_cmd>
 8001052:	e000      	b.n	8001056 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001054:	bf00      	nop
}
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8001064:	2032      	movs	r0, #50	@ 0x32
 8001066:	f001 fbad 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800106a:	2130      	movs	r1, #48	@ 0x30
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff47 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(5);
 8001072:	2005      	movs	r0, #5
 8001074:	f001 fba6 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001078:	2130      	movs	r1, #48	@ 0x30
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff40 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f001 fb9f 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001086:	2130      	movs	r1, #48	@ 0x30
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff39 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(10);
 800108e:	200a      	movs	r0, #10
 8001090:	f001 fb98 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001094:	2120      	movs	r1, #32
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff32 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(10);
 800109c:	200a      	movs	r0, #10
 800109e:	f001 fb91 	bl	80027c4 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80010a2:	2128      	movs	r1, #40	@ 0x28
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff2b 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 fb8a 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80010b0:	2108      	movs	r1, #8
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff24 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f001 fb83 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 80010be:	2101      	movs	r1, #1
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff1d 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(2);
 80010c6:	2002      	movs	r0, #2
 80010c8:	f001 fb7c 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 80010cc:	2106      	movs	r1, #6
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff16 	bl	8000f00 <lcd_send_cmd>
    HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f001 fb75 	bl	80027c4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 80010da:	210c      	movs	r1, #12
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff0f 	bl	8000f00 <lcd_send_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80010f4:	e007      	b.n	8001106 <lcd_puts+0x1c>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	603a      	str	r2, [r7, #0]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff2e 	bl	8000f62 <lcd_send_data>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f3      	bne.n	80010f6 <lcd_puts+0xc>
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
Putchar_Prototype
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 8001120:	1d39      	adds	r1, r7, #4
 8001122:	230a      	movs	r3, #10
 8001124:	2201      	movs	r2, #1
 8001126:	4804      	ldr	r0, [pc, #16]	@ (8001138 <__io_putchar+0x20>)
 8001128:	f004 fabc 	bl	80056a4 <HAL_UART_Transmit>
	return ch;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200002f8 	.word	0x200002f8

0800113c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if(huart->Instance == USART1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <HAL_UART_RxCpltCallback+0x7c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d130      	bne.n	80011b0 <HAL_UART_RxCpltCallback+0x74>
	{
		if(RxByte != 13) {
 800114e:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_UART_RxCpltCallback+0x80>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b0d      	cmp	r3, #13
 8001154:	d018      	beq.n	8001188 <HAL_UART_RxCpltCallback+0x4c>
			if(RxIndex < RX_BUFFER_SIZE - 1) {
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_UART_RxCpltCallback+0x84>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b1e      	cmp	r3, #30
 800115c:	d80b      	bhi.n	8001176 <HAL_UART_RxCpltCallback+0x3a>
				RxBuffer[RxIndex++] = RxByte;
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_UART_RxCpltCallback+0x84>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	b2d1      	uxtb	r1, r2
 8001166:	4a16      	ldr	r2, [pc, #88]	@ (80011c0 <HAL_UART_RxCpltCallback+0x84>)
 8001168:	7011      	strb	r1, [r2, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_UART_RxCpltCallback+0x80>)
 800116e:	7819      	ldrb	r1, [r3, #0]
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_UART_RxCpltCallback+0x88>)
 8001172:	5499      	strb	r1, [r3, r2]
 8001174:	e017      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x6a>
			} else {
				memset(&RxBuffer, 0, RX_BUFFER_SIZE);
 8001176:	2220      	movs	r2, #32
 8001178:	2100      	movs	r1, #0
 800117a:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <HAL_UART_RxCpltCallback+0x88>)
 800117c:	f009 fed1 	bl	800af22 <memset>
				RxIndex = 0;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_UART_RxCpltCallback+0x84>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e00e      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x6a>
			}

		} else {
			RxBuffer[RxIndex] = '\0';
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_UART_RxCpltCallback+0x84>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_UART_RxCpltCallback+0x88>)
 8001190:	2100      	movs	r1, #0
 8001192:	5499      	strb	r1, [r3, r2]
			RxIndex = 0;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_UART_RxCpltCallback+0x84>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]

			osEventFlagsSet(ISR_RxUARTHandle, FlagISR);
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_UART_RxCpltCallback+0x8c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 fa39 	bl	8006618 <osEventFlagsSet>
		}
		// Gọi lại HAL_UART_Receive_IT để tiếp tục nhận byte tiếp theo
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxByte, 1);
 80011a6:	2201      	movs	r2, #1
 80011a8:	4904      	ldr	r1, [pc, #16]	@ (80011bc <HAL_UART_RxCpltCallback+0x80>)
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <HAL_UART_RxCpltCallback+0x90>)
 80011ac:	f004 fb05 	bl	80057ba <HAL_UART_Receive_IT>
	}
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013800 	.word	0x40013800
 80011bc:	20000388 	.word	0x20000388
 80011c0:	20000389 	.word	0x20000389
 80011c4:	2000038c 	.word	0x2000038c
 80011c8:	20000374 	.word	0x20000374
 80011cc:	200002f8 	.word	0x200002f8

080011d0 <MOTOR_SetSpeed>:

void MOTOR_SetSpeed(uint8_t speed)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	if(speed > 100) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b64      	cmp	r3, #100	@ 0x64
 80011de:	d901      	bls.n	80011e4 <MOTOR_SetSpeed+0x14>
		speed = 100;
 80011e0:	2364      	movs	r3, #100	@ 0x64
 80011e2:	71fb      	strb	r3, [r7, #7]
	}

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed);
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <MOTOR_SetSpeed+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200002b0 	.word	0x200002b0

080011fc <MOTOR_SetDirection>:

void MOTOR_SetDirection(CommandParameter_t rotate)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	if(rotate == CW) {
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d10a      	bne.n	8001222 <MOTOR_SetDirection+0x26>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2101      	movs	r1, #1
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <MOTOR_SetDirection+0x48>)
 8001212:	f001 fe11 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	480a      	ldr	r0, [pc, #40]	@ (8001244 <MOTOR_SetDirection+0x48>)
 800121c:	f001 fe0c 	bl	8002e38 <HAL_GPIO_WritePin>
	}
	else if(rotate == CCW) {
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
	}
}
 8001220:	e00c      	b.n	800123c <MOTOR_SetDirection+0x40>
	else if(rotate == CCW) {
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d109      	bne.n	800123c <MOTOR_SetDirection+0x40>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2101      	movs	r1, #1
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MOTOR_SetDirection+0x48>)
 800122e:	f001 fe03 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2102      	movs	r1, #2
 8001236:	4803      	ldr	r0, [pc, #12]	@ (8001244 <MOTOR_SetDirection+0x48>)
 8001238:	f001 fdfe 	bl	8002e38 <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010800 	.word	0x40010800

08001248 <MOTOR_Stop>:

void MOTOR_Stop(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	MOTOR_SetSpeed(0);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff ffbf 	bl	80011d0 <MOTOR_SetSpeed>
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <MOTOR_Stop+0x24>)
 8001258:	f001 fdee 	bl	8002e38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <MOTOR_Stop+0x24>)
 8001262:	f001 fde9 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40010800 	.word	0x40010800

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f001 fa74 	bl	8002760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f8e6 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 fa24 	bl	80016c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001280:	f000 f9f8 	bl	8001674 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001284:	f000 f926 	bl	80014d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001288:	f000 f952 	bl	8001530 <MX_I2C2_Init>
  MX_TIM2_Init();
 800128c:	f000 f97e 	bl	800158c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Khởi tạo AHT10
  aht10.hi2c = &hi2c2;
 8001290:	4b44      	ldr	r3, [pc, #272]	@ (80013a4 <main+0x134>)
 8001292:	4a45      	ldr	r2, [pc, #276]	@ (80013a8 <main+0x138>)
 8001294:	601a      	str	r2, [r3, #0]
  aht10.address = 0x38<<1;
 8001296:	4b43      	ldr	r3, [pc, #268]	@ (80013a4 <main+0x134>)
 8001298:	2270      	movs	r2, #112	@ 0x70
 800129a:	711a      	strb	r2, [r3, #4]
  AHT10_Init(&aht10);
 800129c:	4841      	ldr	r0, [pc, #260]	@ (80013a4 <main+0x134>)
 800129e:	f7ff fd5b 	bl	8000d58 <AHT10_Init>
  HAL_Delay(50);
 80012a2:	2032      	movs	r0, #50	@ 0x32
 80012a4:	f001 fa8e 	bl	80027c4 <HAL_Delay>

  // Khởi tạo LCD
  lcd.hi2c = &hi2c1;
 80012a8:	4b40      	ldr	r3, [pc, #256]	@ (80013ac <main+0x13c>)
 80012aa:	4a41      	ldr	r2, [pc, #260]	@ (80013b0 <main+0x140>)
 80012ac:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 80012ae:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <main+0x13c>)
 80012b0:	224e      	movs	r2, #78	@ 0x4e
 80012b2:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 80012b4:	483d      	ldr	r0, [pc, #244]	@ (80013ac <main+0x13c>)
 80012b6:	f7ff fed1 	bl	800105c <lcd_init>
  lcd_clear(&lcd);
 80012ba:	483c      	ldr	r0, [pc, #240]	@ (80013ac <main+0x13c>)
 80012bc:	f7ff fe82 	bl	8000fc4 <lcd_clear>
  // Khởi tạo TIM PWN
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012c0:	2108      	movs	r1, #8
 80012c2:	483c      	ldr	r0, [pc, #240]	@ (80013b4 <main+0x144>)
 80012c4:	f003 fb3e 	bl	8004944 <HAL_TIM_PWM_Start>
  // Bắt đầu nhận dữ liệu ngắt UART
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxByte, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	493b      	ldr	r1, [pc, #236]	@ (80013b8 <main+0x148>)
 80012cc:	483b      	ldr	r0, [pc, #236]	@ (80013bc <main+0x14c>)
 80012ce:	f004 fa74 	bl	80057ba <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012d2:	f005 f845 	bl	8006360 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of SensorDataMutex */
  SensorDataMutexHandle = osMutexNew(&SensorDataMutex_attributes);
 80012d6:	483a      	ldr	r0, [pc, #232]	@ (80013c0 <main+0x150>)
 80012d8:	f005 fa76 	bl	80067c8 <osMutexNew>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a39      	ldr	r2, [pc, #228]	@ (80013c4 <main+0x154>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* creation of DisplayModeMutex */
  DisplayModeMutexHandle = osMutexNew(&DisplayModeMutex_attributes);
 80012e2:	4839      	ldr	r0, [pc, #228]	@ (80013c8 <main+0x158>)
 80012e4:	f005 fa70 	bl	80067c8 <osMutexNew>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a38      	ldr	r2, [pc, #224]	@ (80013cc <main+0x15c>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* creation of UART_AccessMutex */
  UART_AccessMutexHandle = osMutexNew(&UART_AccessMutex_attributes);
 80012ee:	4838      	ldr	r0, [pc, #224]	@ (80013d0 <main+0x160>)
 80012f0:	f005 fa6a 	bl	80067c8 <osMutexNew>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a37      	ldr	r2, [pc, #220]	@ (80013d4 <main+0x164>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* creation of SpeedValueMutex */
  SpeedValueMutexHandle = osMutexNew(&SpeedValueMutex_attributes);
 80012fa:	4837      	ldr	r0, [pc, #220]	@ (80013d8 <main+0x168>)
 80012fc:	f005 fa64 	bl	80067c8 <osMutexNew>
 8001300:	4603      	mov	r3, r0
 8001302:	4a36      	ldr	r2, [pc, #216]	@ (80013dc <main+0x16c>)
 8001304:	6013      	str	r3, [r2, #0]

  /* creation of DirectionMutex */
  DirectionMutexHandle = osMutexNew(&DirectionMutex_attributes);
 8001306:	4836      	ldr	r0, [pc, #216]	@ (80013e0 <main+0x170>)
 8001308:	f005 fa5e 	bl	80067c8 <osMutexNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a35      	ldr	r2, [pc, #212]	@ (80013e4 <main+0x174>)
 8001310:	6013      	str	r3, [r2, #0]

  /* creation of MotorModeMutex */
  MotorModeMutexHandle = osMutexNew(&MotorModeMutex_attributes);
 8001312:	4835      	ldr	r0, [pc, #212]	@ (80013e8 <main+0x178>)
 8001314:	f005 fa58 	bl	80067c8 <osMutexNew>
 8001318:	4603      	mov	r3, r0
 800131a:	4a34      	ldr	r2, [pc, #208]	@ (80013ec <main+0x17c>)
 800131c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (5, sizeof(Command_t), &CommandQueue_attributes);
 800131e:	4a34      	ldr	r2, [pc, #208]	@ (80013f0 <main+0x180>)
 8001320:	2108      	movs	r1, #8
 8001322:	2005      	movs	r0, #5
 8001324:	f005 fb5e 	bl	80069e4 <osMessageQueueNew>
 8001328:	4603      	mov	r3, r0
 800132a:	4a32      	ldr	r2, [pc, #200]	@ (80013f4 <main+0x184>)
 800132c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(UART_CommandHandlerTask, NULL, &Task1_attributes);
 800132e:	4a32      	ldr	r2, [pc, #200]	@ (80013f8 <main+0x188>)
 8001330:	2100      	movs	r1, #0
 8001332:	4832      	ldr	r0, [pc, #200]	@ (80013fc <main+0x18c>)
 8001334:	f005 f871 	bl	800641a <osThreadNew>
 8001338:	4603      	mov	r3, r0
 800133a:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <main+0x190>)
 800133c:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(MotorControlTask, NULL, &Task2_attributes);
 800133e:	4a31      	ldr	r2, [pc, #196]	@ (8001404 <main+0x194>)
 8001340:	2100      	movs	r1, #0
 8001342:	4831      	ldr	r0, [pc, #196]	@ (8001408 <main+0x198>)
 8001344:	f005 f869 	bl	800641a <osThreadNew>
 8001348:	4603      	mov	r3, r0
 800134a:	4a30      	ldr	r2, [pc, #192]	@ (800140c <main+0x19c>)
 800134c:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(SensorReadTask, NULL, &Task3_attributes);
 800134e:	4a30      	ldr	r2, [pc, #192]	@ (8001410 <main+0x1a0>)
 8001350:	2100      	movs	r1, #0
 8001352:	4830      	ldr	r0, [pc, #192]	@ (8001414 <main+0x1a4>)
 8001354:	f005 f861 	bl	800641a <osThreadNew>
 8001358:	4603      	mov	r3, r0
 800135a:	4a2f      	ldr	r2, [pc, #188]	@ (8001418 <main+0x1a8>)
 800135c:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(LCD_DisplayTask, NULL, &Task4_attributes);
 800135e:	4a2f      	ldr	r2, [pc, #188]	@ (800141c <main+0x1ac>)
 8001360:	2100      	movs	r1, #0
 8001362:	482f      	ldr	r0, [pc, #188]	@ (8001420 <main+0x1b0>)
 8001364:	f005 f859 	bl	800641a <osThreadNew>
 8001368:	4603      	mov	r3, r0
 800136a:	4a2e      	ldr	r2, [pc, #184]	@ (8001424 <main+0x1b4>)
 800136c:	6013      	str	r3, [r2, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(UART_ReportSendTask, NULL, &Task5_attributes);
 800136e:	4a2e      	ldr	r2, [pc, #184]	@ (8001428 <main+0x1b8>)
 8001370:	2100      	movs	r1, #0
 8001372:	482e      	ldr	r0, [pc, #184]	@ (800142c <main+0x1bc>)
 8001374:	f005 f851 	bl	800641a <osThreadNew>
 8001378:	4603      	mov	r3, r0
 800137a:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <main+0x1c0>)
 800137c:	6013      	str	r3, [r2, #0]

  /* creation of TaskISR */
  TaskISRHandle = osThreadNew(UART_ParseCommandTask, NULL, &TaskISR_attributes);
 800137e:	4a2d      	ldr	r2, [pc, #180]	@ (8001434 <main+0x1c4>)
 8001380:	2100      	movs	r1, #0
 8001382:	482d      	ldr	r0, [pc, #180]	@ (8001438 <main+0x1c8>)
 8001384:	f005 f849 	bl	800641a <osThreadNew>
 8001388:	4603      	mov	r3, r0
 800138a:	4a2c      	ldr	r2, [pc, #176]	@ (800143c <main+0x1cc>)
 800138c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of ISR_RxUART */
  ISR_RxUARTHandle = osEventFlagsNew(&ISR_RxUART_attributes);
 800138e:	482c      	ldr	r0, [pc, #176]	@ (8001440 <main+0x1d0>)
 8001390:	f005 f902 	bl	8006598 <osEventFlagsNew>
 8001394:	4603      	mov	r3, r0
 8001396:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <main+0x1d4>)
 8001398:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800139a:	f005 f803 	bl	80063a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800139e:	bf00      	nop
 80013a0:	e7fd      	b.n	800139e <main+0x12e>
 80013a2:	bf00      	nop
 80013a4:	20000378 	.word	0x20000378
 80013a8:	2000025c 	.word	0x2000025c
 80013ac:	20000380 	.word	0x20000380
 80013b0:	20000208 	.word	0x20000208
 80013b4:	200002b0 	.word	0x200002b0
 80013b8:	20000388 	.word	0x20000388
 80013bc:	200002f8 	.word	0x200002f8
 80013c0:	0800dddc 	.word	0x0800dddc
 80013c4:	2000035c 	.word	0x2000035c
 80013c8:	0800ddec 	.word	0x0800ddec
 80013cc:	20000360 	.word	0x20000360
 80013d0:	0800ddfc 	.word	0x0800ddfc
 80013d4:	20000364 	.word	0x20000364
 80013d8:	0800de0c 	.word	0x0800de0c
 80013dc:	20000368 	.word	0x20000368
 80013e0:	0800de1c 	.word	0x0800de1c
 80013e4:	2000036c 	.word	0x2000036c
 80013e8:	0800de2c 	.word	0x0800de2c
 80013ec:	20000370 	.word	0x20000370
 80013f0:	0800ddc4 	.word	0x0800ddc4
 80013f4:	20000358 	.word	0x20000358
 80013f8:	0800dcec 	.word	0x0800dcec
 80013fc:	0800175d 	.word	0x0800175d
 8001400:	20000340 	.word	0x20000340
 8001404:	0800dd10 	.word	0x0800dd10
 8001408:	0800199d 	.word	0x0800199d
 800140c:	20000344 	.word	0x20000344
 8001410:	0800dd34 	.word	0x0800dd34
 8001414:	08001a85 	.word	0x08001a85
 8001418:	20000348 	.word	0x20000348
 800141c:	0800dd58 	.word	0x0800dd58
 8001420:	08001b25 	.word	0x08001b25
 8001424:	2000034c 	.word	0x2000034c
 8001428:	0800dd7c 	.word	0x0800dd7c
 800142c:	08001ce1 	.word	0x08001ce1
 8001430:	20000350 	.word	0x20000350
 8001434:	0800dda0 	.word	0x0800dda0
 8001438:	08001da1 	.word	0x08001da1
 800143c:	20000354 	.word	0x20000354
 8001440:	0800de3c 	.word	0x0800de3c
 8001444:	20000374 	.word	0x20000374

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b090      	sub	sp, #64	@ 0x40
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	2228      	movs	r2, #40	@ 0x28
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f009 fd63 	bl	800af22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001472:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001478:	2301      	movs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
 800147e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001486:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fd1d 	bl	8003ed0 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800149c:	f000 fe88 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2302      	movs	r3, #2
 80014a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2102      	movs	r1, #2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 ff8a 	bl	80043d4 <HAL_RCC_ClockConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014c6:	f000 fe73 	bl	80021b0 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3740      	adds	r7, #64	@ 0x40
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <MX_I2C1_Init+0x50>)
 80014da:	4a13      	ldr	r2, [pc, #76]	@ (8001528 <MX_I2C1_Init+0x54>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MX_I2C1_Init+0x50>)
 80014e0:	4a12      	ldr	r2, [pc, #72]	@ (800152c <MX_I2C1_Init+0x58>)
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <MX_I2C1_Init+0x50>)
 80014f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <MX_I2C1_Init+0x50>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_I2C1_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_I2C1_Init+0x50>)
 8001512:	f001 fca9 	bl	8002e68 <HAL_I2C_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800151c:	f000 fe48 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000208 	.word	0x20000208
 8001528:	40005400 	.word	0x40005400
 800152c:	000186a0 	.word	0x000186a0

08001530 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_I2C2_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	@ (8001584 <MX_I2C2_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_I2C2_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_I2C2_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_I2C2_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_I2C2_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_I2C2_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <MX_I2C2_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_I2C2_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <MX_I2C2_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_I2C2_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <MX_I2C2_Init+0x50>)
 800156e:	f001 fc7b 	bl	8002e68 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 fe1a 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000025c 	.word	0x2000025c
 8001584:	40005800 	.word	0x40005800
 8001588:	00061a80 	.word	0x00061a80

0800158c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	@ 0x38
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <MX_TIM2_Init+0xe4>)
 80015be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <MX_TIM2_Init+0xe4>)
 80015c6:	2247      	movs	r2, #71	@ 0x47
 80015c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <MX_TIM2_Init+0xe4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80015d0:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <MX_TIM2_Init+0xe4>)
 80015d2:	2264      	movs	r2, #100	@ 0x64
 80015d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <MX_TIM2_Init+0xe4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_TIM2_Init+0xe4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e2:	4823      	ldr	r0, [pc, #140]	@ (8001670 <MX_TIM2_Init+0xe4>)
 80015e4:	f003 f8b4 	bl	8004750 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80015ee:	f000 fddf 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fc:	4619      	mov	r1, r3
 80015fe:	481c      	ldr	r0, [pc, #112]	@ (8001670 <MX_TIM2_Init+0xe4>)
 8001600:	f003 fbf4 	bl	8004dec <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800160a:	f000 fdd1 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800160e:	4818      	ldr	r0, [pc, #96]	@ (8001670 <MX_TIM2_Init+0xe4>)
 8001610:	f003 f940 	bl	8004894 <HAL_TIM_PWM_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800161a:	f000 fdc9 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	4619      	mov	r1, r3
 800162c:	4810      	ldr	r0, [pc, #64]	@ (8001670 <MX_TIM2_Init+0xe4>)
 800162e:	f003 ff79 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001638:	f000 fdba 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	@ 0x60
 800163e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2208      	movs	r2, #8
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	@ (8001670 <MX_TIM2_Init+0xe4>)
 8001654:	f003 fb08 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800165e:	f000 fda7 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001662:	4803      	ldr	r0, [pc, #12]	@ (8001670 <MX_TIM2_Init+0xe4>)
 8001664:	f000 fe6a 	bl	800233c <HAL_TIM_MspPostInit>

}
 8001668:	bf00      	nop
 800166a:	3738      	adds	r7, #56	@ 0x38
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200002b0 	.word	0x200002b0

08001674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <MX_USART1_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_USART1_UART_Init+0x4c>)
 80016ac:	f003 ffaa 	bl	8005604 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f000 fd7b 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002f8 	.word	0x200002f8
 80016c4:	40013800 	.word	0x40013800

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a16      	ldr	r2, [pc, #88]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_GPIO_Init+0x8c>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <MX_GPIO_Init+0x8c>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	2103      	movs	r1, #3
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <MX_GPIO_Init+0x90>)
 800172a:	f001 fb85 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 800172e:	2303      	movs	r3, #3
 8001730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2302      	movs	r3, #2
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	4804      	ldr	r0, [pc, #16]	@ (8001758 <MX_GPIO_Init+0x90>)
 8001746:	f001 f9f3 	bl	8002b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	40010800 	.word	0x40010800

0800175c <UART_CommandHandlerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UART_CommandHandlerTask */
void UART_CommandHandlerTask(void *argument)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  // Chờ nhận một lệnh từ Queue
	  // osMessageQueueGet là hàm CMSIS_V2 tương đương với xQueueReceive
	  // osWaitForever: Task sẽ block vô thời hạn cho đến khi có lệnh trong Queue
	  status = osMessageQueueGet(CommandQueueHandle, &command, NULL, osWaitForever);
 8001764:	4b80      	ldr	r3, [pc, #512]	@ (8001968 <UART_CommandHandlerTask+0x20c>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	f107 010c 	add.w	r1, r7, #12
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2200      	movs	r2, #0
 8001772:	f005 fa0b 	bl	8006b8c <osMessageQueueGet>
 8001776:	6178      	str	r0, [r7, #20]
	  if(status == osOK)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f2      	bne.n	8001764 <UART_CommandHandlerTask+0x8>
	  {
		  switch(command.cmd)
 800177e:	7b3b      	ldrb	r3, [r7, #12]
 8001780:	2b08      	cmp	r3, #8
 8001782:	f200 80ec 	bhi.w	800195e <UART_CommandHandlerTask+0x202>
 8001786:	a201      	add	r2, pc, #4	@ (adr r2, 800178c <UART_CommandHandlerTask+0x30>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	080017b1 	.word	0x080017b1
 8001790:	08001815 	.word	0x08001815
 8001794:	08001879 	.word	0x08001879
 8001798:	080018a3 	.word	0x080018a3
 800179c:	0800193f 	.word	0x0800193f
 80017a0:	08001947 	.word	0x08001947
 80017a4:	0800194f 	.word	0x0800194f
 80017a8:	08001957 	.word	0x08001957
 80017ac:	0800195f 	.word	0x0800195f
		  {
		  case MOTOR:
			  switch(command.param) {
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <UART_CommandHandlerTask+0x60>
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d014      	beq.n	80017e4 <UART_CommandHandlerTask+0x88>
					  Mode = OFF;
					  osMutexRelease(MotorModeMutexHandle);
				  }
				  break;
			  default:
				  break;
 80017ba:	e02a      	b.n	8001812 <UART_CommandHandlerTask+0xb6>
				  status = osMutexAcquire(MotorModeMutexHandle, osWaitForever);
 80017bc:	4b6b      	ldr	r3, [pc, #428]	@ (800196c <UART_CommandHandlerTask+0x210>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 f885 	bl	80068d4 <osMutexAcquire>
 80017ca:	6178      	str	r0, [r7, #20]
				  if(status == osOK) {
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11c      	bne.n	800180c <UART_CommandHandlerTask+0xb0>
					  Mode = ON;
 80017d2:	4b67      	ldr	r3, [pc, #412]	@ (8001970 <UART_CommandHandlerTask+0x214>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
					  osMutexRelease(MotorModeMutexHandle);
 80017d8:	4b64      	ldr	r3, [pc, #400]	@ (800196c <UART_CommandHandlerTask+0x210>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 f8c4 	bl	800696a <osMutexRelease>
				  break;
 80017e2:	e013      	b.n	800180c <UART_CommandHandlerTask+0xb0>
				  status = osMutexAcquire(MotorModeMutexHandle, osWaitForever);
 80017e4:	4b61      	ldr	r3, [pc, #388]	@ (800196c <UART_CommandHandlerTask+0x210>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 f871 	bl	80068d4 <osMutexAcquire>
 80017f2:	6178      	str	r0, [r7, #20]
				  if(status == osOK) {
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10a      	bne.n	8001810 <UART_CommandHandlerTask+0xb4>
					  Mode = OFF;
 80017fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001970 <UART_CommandHandlerTask+0x214>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
					  osMutexRelease(MotorModeMutexHandle);
 8001800:	4b5a      	ldr	r3, [pc, #360]	@ (800196c <UART_CommandHandlerTask+0x210>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f005 f8b0 	bl	800696a <osMutexRelease>
				  break;
 800180a:	e001      	b.n	8001810 <UART_CommandHandlerTask+0xb4>
				  break;
 800180c:	bf00      	nop
 800180e:	e0a9      	b.n	8001964 <UART_CommandHandlerTask+0x208>
				  break;
 8001810:	bf00      	nop
			  }
			  break;
 8001812:	e0a7      	b.n	8001964 <UART_CommandHandlerTask+0x208>
		  case ROTATE:
			  switch(command.param) {
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d002      	beq.n	8001820 <UART_CommandHandlerTask+0xc4>
 800181a:	2b03      	cmp	r3, #3
 800181c:	d014      	beq.n	8001848 <UART_CommandHandlerTask+0xec>
					  Direction = CCW;
					  osMutexRelease(DirectionMutexHandle);
				  }
				  break;
			  default:
				  break;
 800181e:	e02a      	b.n	8001876 <UART_CommandHandlerTask+0x11a>
				  status = osMutexAcquire(DirectionMutexHandle, osWaitForever);
 8001820:	4b54      	ldr	r3, [pc, #336]	@ (8001974 <UART_CommandHandlerTask+0x218>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	4618      	mov	r0, r3
 800182a:	f005 f853 	bl	80068d4 <osMutexAcquire>
 800182e:	6178      	str	r0, [r7, #20]
				  if(status == osOK) {
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11c      	bne.n	8001870 <UART_CommandHandlerTask+0x114>
					  Direction = CW;
 8001836:	4b50      	ldr	r3, [pc, #320]	@ (8001978 <UART_CommandHandlerTask+0x21c>)
 8001838:	2202      	movs	r2, #2
 800183a:	701a      	strb	r2, [r3, #0]
					  osMutexRelease(DirectionMutexHandle);
 800183c:	4b4d      	ldr	r3, [pc, #308]	@ (8001974 <UART_CommandHandlerTask+0x218>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f005 f892 	bl	800696a <osMutexRelease>
				  break;
 8001846:	e013      	b.n	8001870 <UART_CommandHandlerTask+0x114>
				  status = osMutexAcquire(DirectionMutexHandle, osWaitForever);
 8001848:	4b4a      	ldr	r3, [pc, #296]	@ (8001974 <UART_CommandHandlerTask+0x218>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	4618      	mov	r0, r3
 8001852:	f005 f83f 	bl	80068d4 <osMutexAcquire>
 8001856:	6178      	str	r0, [r7, #20]
				  if(status == osOK) {
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <UART_CommandHandlerTask+0x118>
					  Direction = CCW;
 800185e:	4b46      	ldr	r3, [pc, #280]	@ (8001978 <UART_CommandHandlerTask+0x21c>)
 8001860:	2203      	movs	r2, #3
 8001862:	701a      	strb	r2, [r3, #0]
					  osMutexRelease(DirectionMutexHandle);
 8001864:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <UART_CommandHandlerTask+0x218>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f005 f87e 	bl	800696a <osMutexRelease>
				  break;
 800186e:	e001      	b.n	8001874 <UART_CommandHandlerTask+0x118>
				  break;
 8001870:	bf00      	nop
 8001872:	e077      	b.n	8001964 <UART_CommandHandlerTask+0x208>
				  break;
 8001874:	bf00      	nop
			  }
			  break;
 8001876:	e075      	b.n	8001964 <UART_CommandHandlerTask+0x208>
		  case SPEED:
			  status = osMutexAcquire(SpeedValueMutexHandle, osWaitForever);
 8001878:	4b40      	ldr	r3, [pc, #256]	@ (800197c <UART_CommandHandlerTask+0x220>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	4618      	mov	r0, r3
 8001882:	f005 f827 	bl	80068d4 <osMutexAcquire>
 8001886:	6178      	str	r0, [r7, #20]
			  if(status == osOK) {
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d169      	bne.n	8001962 <UART_CommandHandlerTask+0x206>
				  SpeedValue = command.param;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b3b      	ldr	r3, [pc, #236]	@ (8001980 <UART_CommandHandlerTask+0x224>)
 8001894:	701a      	strb	r2, [r3, #0]
				  osMutexRelease(SpeedValueMutexHandle);
 8001896:	4b39      	ldr	r3, [pc, #228]	@ (800197c <UART_CommandHandlerTask+0x220>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f005 f865 	bl	800696a <osMutexRelease>
			  }
			  break;
 80018a0:	e05f      	b.n	8001962 <UART_CommandHandlerTask+0x206>
		  case DISPLAY:
			  switch(command.param) {
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	d02e      	beq.n	8001906 <UART_CommandHandlerTask+0x1aa>
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d840      	bhi.n	800192e <UART_CommandHandlerTask+0x1d2>
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d002      	beq.n	80018b6 <UART_CommandHandlerTask+0x15a>
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d014      	beq.n	80018de <UART_CommandHandlerTask+0x182>
					  currentModeLCD = HUMID;
					  osMutexRelease(DisplayModeMutexHandle);
				  }
				  break;
			  default:
				  break;
 80018b4:	e03b      	b.n	800192e <UART_CommandHandlerTask+0x1d2>
				  status = osMutexAcquire(DisplayModeMutexHandle, osWaitForever);
 80018b6:	4b33      	ldr	r3, [pc, #204]	@ (8001984 <UART_CommandHandlerTask+0x228>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f04f 31ff 	mov.w	r1, #4294967295
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 f808 	bl	80068d4 <osMutexAcquire>
 80018c4:	6178      	str	r0, [r7, #20]
				  if(status == osOK) {
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d132      	bne.n	8001932 <UART_CommandHandlerTask+0x1d6>
					  currentModeLCD = ALL;
 80018cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <UART_CommandHandlerTask+0x22c>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	701a      	strb	r2, [r3, #0]
					  osMutexRelease(DisplayModeMutexHandle);
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <UART_CommandHandlerTask+0x228>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f005 f847 	bl	800696a <osMutexRelease>
				  break;
 80018dc:	e029      	b.n	8001932 <UART_CommandHandlerTask+0x1d6>
				  status = osMutexAcquire(DisplayModeMutexHandle, osWaitForever);
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <UART_CommandHandlerTask+0x228>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f04f 31ff 	mov.w	r1, #4294967295
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fff4 	bl	80068d4 <osMutexAcquire>
 80018ec:	6178      	str	r0, [r7, #20]
				  if(status == osOK) {
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d120      	bne.n	8001936 <UART_CommandHandlerTask+0x1da>
					  currentModeLCD = TEMP;
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <UART_CommandHandlerTask+0x22c>)
 80018f6:	2205      	movs	r2, #5
 80018f8:	701a      	strb	r2, [r3, #0]
					  osMutexRelease(DisplayModeMutexHandle);
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <UART_CommandHandlerTask+0x228>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 f833 	bl	800696a <osMutexRelease>
				  break;
 8001904:	e017      	b.n	8001936 <UART_CommandHandlerTask+0x1da>
				  status = osMutexAcquire(DisplayModeMutexHandle, osWaitForever);
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <UART_CommandHandlerTask+0x228>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 31ff 	mov.w	r1, #4294967295
 800190e:	4618      	mov	r0, r3
 8001910:	f004 ffe0 	bl	80068d4 <osMutexAcquire>
 8001914:	6178      	str	r0, [r7, #20]
				  if(status == osOK) {
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10e      	bne.n	800193a <UART_CommandHandlerTask+0x1de>
					  currentModeLCD = HUMID;
 800191c:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <UART_CommandHandlerTask+0x22c>)
 800191e:	2206      	movs	r2, #6
 8001920:	701a      	strb	r2, [r3, #0]
					  osMutexRelease(DisplayModeMutexHandle);
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <UART_CommandHandlerTask+0x228>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f005 f81f 	bl	800696a <osMutexRelease>
				  break;
 800192c:	e005      	b.n	800193a <UART_CommandHandlerTask+0x1de>
				  break;
 800192e:	bf00      	nop
 8001930:	e018      	b.n	8001964 <UART_CommandHandlerTask+0x208>
				  break;
 8001932:	bf00      	nop
 8001934:	e016      	b.n	8001964 <UART_CommandHandlerTask+0x208>
				  break;
 8001936:	bf00      	nop
 8001938:	e014      	b.n	8001964 <UART_CommandHandlerTask+0x208>
				  break;
 800193a:	bf00      	nop
			  }
			  break;
 800193c:	e012      	b.n	8001964 <UART_CommandHandlerTask+0x208>
		  case PTASK2:
			  periodTask2 = command.param;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4a12      	ldr	r2, [pc, #72]	@ (800198c <UART_CommandHandlerTask+0x230>)
 8001942:	6013      	str	r3, [r2, #0]
			  break;
 8001944:	e00e      	b.n	8001964 <UART_CommandHandlerTask+0x208>
		  case PTASK3:
			  periodTask3 = command.param;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <UART_CommandHandlerTask+0x234>)
 800194a:	6013      	str	r3, [r2, #0]
			  break;
 800194c:	e00a      	b.n	8001964 <UART_CommandHandlerTask+0x208>
		  case PTASK4:
			  periodTask4 = command.param;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <UART_CommandHandlerTask+0x238>)
 8001952:	6013      	str	r3, [r2, #0]
			  break;
 8001954:	e006      	b.n	8001964 <UART_CommandHandlerTask+0x208>
		  case PTASK5:
			  periodTask5 = command.param;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4a0f      	ldr	r2, [pc, #60]	@ (8001998 <UART_CommandHandlerTask+0x23c>)
 800195a:	6013      	str	r3, [r2, #0]
			  break;
 800195c:	e002      	b.n	8001964 <UART_CommandHandlerTask+0x208>
		  case CMD_INVALID:
			  break;
		  default:
			  break;
 800195e:	bf00      	nop
 8001960:	e700      	b.n	8001764 <UART_CommandHandlerTask+0x8>
			  break;
 8001962:	bf00      	nop
	  status = osMessageQueueGet(CommandQueueHandle, &command, NULL, osWaitForever);
 8001964:	e6fe      	b.n	8001764 <UART_CommandHandlerTask+0x8>
 8001966:	bf00      	nop
 8001968:	20000358 	.word	0x20000358
 800196c:	20000370 	.word	0x20000370
 8001970:	20000010 	.word	0x20000010
 8001974:	2000036c 	.word	0x2000036c
 8001978:	20000011 	.word	0x20000011
 800197c:	20000368 	.word	0x20000368
 8001980:	200003ac 	.word	0x200003ac
 8001984:	20000360 	.word	0x20000360
 8001988:	20000012 	.word	0x20000012
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004
 8001994:	20000008 	.word	0x20000008
 8001998:	2000000c 	.word	0x2000000c

0800199c <MotorControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorControlTask */
void MotorControlTask(void *argument)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  osStatus_t status;
  CommandParameter_t localMode;
  uint8_t localSpeed;
  CommandParameter_t localDirection;

  TickType_t xLastWakeTime = osKernelGetTickCount();
 80019a4:	f004 fd24 	bl	80063f0 <osKernelGetTickCount>
 80019a8:	6138      	str	r0, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  status = osMutexAcquire(MotorModeMutexHandle, osWaitForever);
 80019aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <MotorControlTask+0xc8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f04f 31ff 	mov.w	r1, #4294967295
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 ff8e 	bl	80068d4 <osMutexAcquire>
 80019b8:	60f8      	str	r0, [r7, #12]
	  if(status == osOK) {
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <MotorControlTask+0x34>
		  localMode = Mode;
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <MotorControlTask+0xcc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	75fb      	strb	r3, [r7, #23]
		  osMutexRelease(MotorModeMutexHandle);
 80019c6:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <MotorControlTask+0xc8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 ffcd 	bl	800696a <osMutexRelease>
	  }
	  status = osMutexAcquire(DirectionMutexHandle, osWaitForever);
 80019d0:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <MotorControlTask+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 ff7b 	bl	80068d4 <osMutexAcquire>
 80019de:	60f8      	str	r0, [r7, #12]
	  if(status == osOK) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d107      	bne.n	80019f6 <MotorControlTask+0x5a>
		  localDirection = Direction;
 80019e6:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <MotorControlTask+0xd4>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	757b      	strb	r3, [r7, #21]
		  osMutexRelease(DirectionMutexHandle);
 80019ec:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <MotorControlTask+0xd0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 ffba 	bl	800696a <osMutexRelease>
	  }
	  status = osMutexAcquire(SpeedValueMutexHandle, osWaitForever);
 80019f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <MotorControlTask+0xd8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f04f 31ff 	mov.w	r1, #4294967295
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 ff68 	bl	80068d4 <osMutexAcquire>
 8001a04:	60f8      	str	r0, [r7, #12]
	  if(status == osOK) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <MotorControlTask+0x80>
		  localSpeed = SpeedValue;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MotorControlTask+0xdc>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	75bb      	strb	r3, [r7, #22]
		  osMutexRelease(SpeedValueMutexHandle);
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <MotorControlTask+0xd8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 ffa7 	bl	800696a <osMutexRelease>
	  }

	  if(localMode == ON) {
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <MotorControlTask+0x98>
		  MOTOR_SetDirection(localDirection);
 8001a22:	7d7b      	ldrb	r3, [r7, #21]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fbe9 	bl	80011fc <MOTOR_SetDirection>
		  MOTOR_SetSpeed(localSpeed);
 8001a2a:	7dbb      	ldrb	r3, [r7, #22]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fbcf 	bl	80011d0 <MOTOR_SetSpeed>
 8001a32:	e004      	b.n	8001a3e <MotorControlTask+0xa2>
	  }
	  else if(localMode == OFF) {
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <MotorControlTask+0xa2>
		  MOTOR_Stop();
 8001a3a:	f7ff fc05 	bl	8001248 <MOTOR_Stop>
	  }

	  osDelayUntil(xLastWakeTime + pdMS_TO_TICKS(periodTask2));
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <MotorControlTask+0xe0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <MotorControlTask+0xe4>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	099a      	lsrs	r2, r3, #6
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 fd71 	bl	800653e <osDelayUntil>
	  xLastWakeTime = osKernelGetTickCount();
 8001a5c:	f004 fcc8 	bl	80063f0 <osKernelGetTickCount>
 8001a60:	6138      	str	r0, [r7, #16]
	  status = osMutexAcquire(MotorModeMutexHandle, osWaitForever);
 8001a62:	e7a2      	b.n	80019aa <MotorControlTask+0xe>
 8001a64:	20000370 	.word	0x20000370
 8001a68:	20000010 	.word	0x20000010
 8001a6c:	2000036c 	.word	0x2000036c
 8001a70:	20000011 	.word	0x20000011
 8001a74:	20000368 	.word	0x20000368
 8001a78:	200003ac 	.word	0x200003ac
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <SensorReadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorReadTask */
void SensorReadTask(void *argument)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorReadTask */
  uint32_t temperature_raw, humidity_raw;
  float temperature, humidity;
  osStatus_t status;

  TickType_t xLastWakeTime = osKernelGetTickCount();
 8001a8c:	f004 fcb0 	bl	80063f0 <osKernelGetTickCount>
 8001a90:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  if(AHT10_ReadRaw(&aht10, &humidity_raw, &temperature_raw))
 8001a92:	f107 020c 	add.w	r2, r7, #12
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481c      	ldr	r0, [pc, #112]	@ (8001b10 <SensorReadTask+0x8c>)
 8001a9e:	f7ff f97f 	bl	8000da0 <AHT10_ReadRaw>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01f      	beq.n	8001ae8 <SensorReadTask+0x64>
	  {
          // Chuyển đổi dữ liệu thô sang giá trị thực
		  temperature = AHT10_ReadTemperature(temperature_raw);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f9cc 	bl	8000e48 <AHT10_ReadTemperature>
 8001ab0:	61b8      	str	r0, [r7, #24]
		  humidity = AHT10_ReadHumidity(humidity_raw);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9fb 	bl	8000eb0 <AHT10_ReadHumidity>
 8001aba:	6178      	str	r0, [r7, #20]

		  status = osMutexAcquire(SensorDataMutexHandle, osWaitForever);
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <SensorReadTask+0x90>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 ff05 	bl	80068d4 <osMutexAcquire>
 8001aca:	6138      	str	r0, [r7, #16]
		  if(status == osOK) {
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <SensorReadTask+0x64>
			  SensorData.temp = temperature;
 8001ad2:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <SensorReadTask+0x94>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6013      	str	r3, [r2, #0]
			  SensorData.humid = humidity;
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b18 <SensorReadTask+0x94>)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	6053      	str	r3, [r2, #4]
			  osMutexRelease(SensorDataMutexHandle);
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <SensorReadTask+0x90>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 ff41 	bl	800696a <osMutexRelease>
		  }
	  } else {
		  // Debug
	  }

	  osDelayUntil(xLastWakeTime + pdMS_TO_TICKS(periodTask3));
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <SensorReadTask+0x98>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <SensorReadTask+0x9c>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	099a      	lsrs	r2, r3, #6
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fd1c 	bl	800653e <osDelayUntil>
	  xLastWakeTime = osKernelGetTickCount();
 8001b06:	f004 fc73 	bl	80063f0 <osKernelGetTickCount>
 8001b0a:	61f8      	str	r0, [r7, #28]
	  if(AHT10_ReadRaw(&aht10, &humidity_raw, &temperature_raw))
 8001b0c:	e7c1      	b.n	8001a92 <SensorReadTask+0xe>
 8001b0e:	bf00      	nop
 8001b10:	20000378 	.word	0x20000378
 8001b14:	2000035c 	.word	0x2000035c
 8001b18:	200003b0 	.word	0x200003b0
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	10624dd3 	.word	0x10624dd3

08001b24 <LCD_DisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCD_DisplayTask */
void LCD_DisplayTask(void *argument)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b094      	sub	sp, #80	@ 0x50
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	6078      	str	r0, [r7, #4]
  CommandParameter_t localMode;
  char line1[17];
  char line2[17];
  osStatus_t status;

  TickType_t xLastWakeTime = osKernelGetTickCount();
 8001b2c:	f004 fc60 	bl	80063f0 <osKernelGetTickCount>
 8001b30:	6438      	str	r0, [r7, #64]	@ 0x40
  /* Infinite loop */
  for(;;)
  {
	  status = osMutexAcquire(DisplayModeMutexHandle, osWaitForever);
 8001b32:	4b61      	ldr	r3, [pc, #388]	@ (8001cb8 <LCD_DisplayTask+0x194>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 feca 	bl	80068d4 <osMutexAcquire>
 8001b40:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  if(status == osOK) {
 8001b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d108      	bne.n	8001b5a <LCD_DisplayTask+0x36>
		  localMode = currentModeLCD;
 8001b48:	4b5c      	ldr	r3, [pc, #368]	@ (8001cbc <LCD_DisplayTask+0x198>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		  osMutexRelease(DisplayModeMutexHandle);
 8001b50:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <LCD_DisplayTask+0x194>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 ff08 	bl	800696a <osMutexRelease>
	  } else {
		  // Debug
	  }

	  status = osMutexAcquire(SensorDataMutexHandle, osWaitForever);
 8001b5a:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <LCD_DisplayTask+0x19c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 feb6 	bl	80068d4 <osMutexAcquire>
 8001b68:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  if(status == osOK) {
 8001b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <LCD_DisplayTask+0x64>
		  localData = SensorData;
 8001b70:	4a54      	ldr	r2, [pc, #336]	@ (8001cc4 <LCD_DisplayTask+0x1a0>)
 8001b72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b7a:	e883 0003 	stmia.w	r3, {r0, r1}
		  osMutexRelease(SensorDataMutexHandle);
 8001b7e:	4b50      	ldr	r3, [pc, #320]	@ (8001cc0 <LCD_DisplayTask+0x19c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fef1 	bl	800696a <osMutexRelease>
	  } else {
		  // Debug
	  }

	  switch(localMode)
 8001b88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d05c      	beq.n	8001c4a <LCD_DisplayTask+0x126>
 8001b90:	2b06      	cmp	r3, #6
 8001b92:	dc7d      	bgt.n	8001c90 <LCD_DisplayTask+0x16c>
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d002      	beq.n	8001b9e <LCD_DisplayTask+0x7a>
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d033      	beq.n	8001c04 <LCD_DisplayTask+0xe0>
		  lcd_gotoxy(&lcd, 0, 1);
		  lcd_puts(&lcd, "                ");

		  break;
	  default:
		  break;
 8001b9c:	e078      	b.n	8001c90 <LCD_DisplayTask+0x16c>
		  lcd_gotoxy(&lcd, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4849      	ldr	r0, [pc, #292]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001ba4:	f7ff fa28 	bl	8000ff8 <lcd_gotoxy>
		  snprintf(line1, sizeof(line1), "Temp: %.2f C   ", localData.temp);
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fc46 	bl	800043c <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	f107 0020 	add.w	r0, r7, #32
 8001bb8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bbc:	4a43      	ldr	r2, [pc, #268]	@ (8001ccc <LCD_DisplayTask+0x1a8>)
 8001bbe:	2111      	movs	r1, #17
 8001bc0:	f009 f908 	bl	800add4 <sniprintf>
		  lcd_puts(&lcd, line1);
 8001bc4:	f107 0320 	add.w	r3, r7, #32
 8001bc8:	4619      	mov	r1, r3
 8001bca:	483f      	ldr	r0, [pc, #252]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001bcc:	f7ff fa8d 	bl	80010ea <lcd_puts>
		  lcd_gotoxy(&lcd, 0, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	483c      	ldr	r0, [pc, #240]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001bd6:	f7ff fa0f 	bl	8000ff8 <lcd_gotoxy>
		  snprintf(line2, sizeof(line2), "Humid: %.2f %%  ", localData.humid);
 8001bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc2d 	bl	800043c <__aeabi_f2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	f107 000c 	add.w	r0, r7, #12
 8001bea:	e9cd 2300 	strd	r2, r3, [sp]
 8001bee:	4a38      	ldr	r2, [pc, #224]	@ (8001cd0 <LCD_DisplayTask+0x1ac>)
 8001bf0:	2111      	movs	r1, #17
 8001bf2:	f009 f8ef 	bl	800add4 <sniprintf>
		  lcd_puts(&lcd, line2);
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4832      	ldr	r0, [pc, #200]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001bfe:	f7ff fa74 	bl	80010ea <lcd_puts>
		  break;
 8001c02:	e046      	b.n	8001c92 <LCD_DisplayTask+0x16e>
		  lcd_gotoxy(&lcd, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	482f      	ldr	r0, [pc, #188]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c0a:	f7ff f9f5 	bl	8000ff8 <lcd_gotoxy>
		  snprintf(line1, sizeof(line1), "Temp: %.2f C   ", localData.temp);
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc13 	bl	800043c <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	f107 0020 	add.w	r0, r7, #32
 8001c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8001c22:	4a2a      	ldr	r2, [pc, #168]	@ (8001ccc <LCD_DisplayTask+0x1a8>)
 8001c24:	2111      	movs	r1, #17
 8001c26:	f009 f8d5 	bl	800add4 <sniprintf>
		  lcd_puts(&lcd, line1);
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4825      	ldr	r0, [pc, #148]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c32:	f7ff fa5a 	bl	80010ea <lcd_puts>
		  lcd_gotoxy(&lcd, 0, 1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4823      	ldr	r0, [pc, #140]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c3c:	f7ff f9dc 	bl	8000ff8 <lcd_gotoxy>
		  lcd_puts(&lcd, "                ");
 8001c40:	4924      	ldr	r1, [pc, #144]	@ (8001cd4 <LCD_DisplayTask+0x1b0>)
 8001c42:	4821      	ldr	r0, [pc, #132]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c44:	f7ff fa51 	bl	80010ea <lcd_puts>
		  break;
 8001c48:	e023      	b.n	8001c92 <LCD_DisplayTask+0x16e>
		  lcd_gotoxy(&lcd, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	481e      	ldr	r0, [pc, #120]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c50:	f7ff f9d2 	bl	8000ff8 <lcd_gotoxy>
		  snprintf(line1, sizeof(line1), "Humid: %.2f %%  ", localData.humid);
 8001c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fbf0 	bl	800043c <__aeabi_f2d>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	f107 0020 	add.w	r0, r7, #32
 8001c64:	e9cd 2300 	strd	r2, r3, [sp]
 8001c68:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <LCD_DisplayTask+0x1ac>)
 8001c6a:	2111      	movs	r1, #17
 8001c6c:	f009 f8b2 	bl	800add4 <sniprintf>
		  lcd_puts(&lcd, line1);
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4619      	mov	r1, r3
 8001c76:	4814      	ldr	r0, [pc, #80]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c78:	f7ff fa37 	bl	80010ea <lcd_puts>
		  lcd_gotoxy(&lcd, 0, 1);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4811      	ldr	r0, [pc, #68]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c82:	f7ff f9b9 	bl	8000ff8 <lcd_gotoxy>
		  lcd_puts(&lcd, "                ");
 8001c86:	4913      	ldr	r1, [pc, #76]	@ (8001cd4 <LCD_DisplayTask+0x1b0>)
 8001c88:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <LCD_DisplayTask+0x1a4>)
 8001c8a:	f7ff fa2e 	bl	80010ea <lcd_puts>
		  break;
 8001c8e:	e000      	b.n	8001c92 <LCD_DisplayTask+0x16e>
		  break;
 8001c90:	bf00      	nop
	  }

	  osDelayUntil(xLastWakeTime + pdMS_TO_TICKS(periodTask4));
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <LCD_DisplayTask+0x1b4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001cdc <LCD_DisplayTask+0x1b8>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099a      	lsrs	r2, r3, #6
 8001ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca8:	4413      	add	r3, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fc47 	bl	800653e <osDelayUntil>
	  xLastWakeTime = osKernelGetTickCount();
 8001cb0:	f004 fb9e 	bl	80063f0 <osKernelGetTickCount>
 8001cb4:	6438      	str	r0, [r7, #64]	@ 0x40
	  status = osMutexAcquire(DisplayModeMutexHandle, osWaitForever);
 8001cb6:	e73c      	b.n	8001b32 <LCD_DisplayTask+0xe>
 8001cb8:	20000360 	.word	0x20000360
 8001cbc:	20000012 	.word	0x20000012
 8001cc0:	2000035c 	.word	0x2000035c
 8001cc4:	200003b0 	.word	0x200003b0
 8001cc8:	20000380 	.word	0x20000380
 8001ccc:	0800dbd4 	.word	0x0800dbd4
 8001cd0:	0800dbe4 	.word	0x0800dbe4
 8001cd4:	0800dbf8 	.word	0x0800dbf8
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	10624dd3 	.word	0x10624dd3

08001ce0 <UART_ReportSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_ReportSendTask */
void UART_ReportSendTask(void *argument)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_ReportSendTask */
  SensorData_t localData;
  osStatus_t status;

  TickType_t xLastWakeTime = osKernelGetTickCount();
 8001ce8:	f004 fb82 	bl	80063f0 <osKernelGetTickCount>
 8001cec:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  status = osMutexAcquire(SensorDataMutexHandle, osWaitForever);
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <UART_ReportSendTask+0xa8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fdec 	bl	80068d4 <osMutexAcquire>
 8001cfc:	6138      	str	r0, [r7, #16]
	  if(status == osOK) {
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <UART_ReportSendTask+0x3c>
		  localData = SensorData;
 8001d04:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <UART_ReportSendTask+0xac>)
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d0e:	e883 0003 	stmia.w	r3, {r0, r1}
		  osMutexRelease(SensorDataMutexHandle);
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <UART_ReportSendTask+0xa8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fe27 	bl	800696a <osMutexRelease>
	  } else {
		  // Debug
	  }

	  status = osMutexAcquire(UART_AccessMutexHandle, osWaitForever);
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <UART_ReportSendTask+0xb0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fdd5 	bl	80068d4 <osMutexAcquire>
 8001d2a:	6138      	str	r0, [r7, #16]
	  if(status == osOK) {
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d117      	bne.n	8001d62 <UART_ReportSendTask+0x82>
		  printf("Sensor Data: Temp = %.2f C, Humid = %.2f %%\r\n", localData.temp, localData.humid);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fb81 	bl	800043c <__aeabi_f2d>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460d      	mov	r5, r1
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fb7b 	bl	800043c <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d4e:	4622      	mov	r2, r4
 8001d50:	462b      	mov	r3, r5
 8001d52:	4810      	ldr	r0, [pc, #64]	@ (8001d94 <UART_ReportSendTask+0xb4>)
 8001d54:	f009 f82c 	bl	800adb0 <iprintf>
		  osMutexRelease(UART_AccessMutexHandle);
 8001d58:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <UART_ReportSendTask+0xb0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 fe04 	bl	800696a <osMutexRelease>
	  }

	  osDelayUntil(xLastWakeTime + pdMS_TO_TICKS(periodTask5));
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <UART_ReportSendTask+0xb8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d9c <UART_ReportSendTask+0xbc>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	099a      	lsrs	r2, r3, #6
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fbdf 	bl	800653e <osDelayUntil>
	  xLastWakeTime = osKernelGetTickCount();
 8001d80:	f004 fb36 	bl	80063f0 <osKernelGetTickCount>
 8001d84:	6178      	str	r0, [r7, #20]
	  status = osMutexAcquire(SensorDataMutexHandle, osWaitForever);
 8001d86:	e7b2      	b.n	8001cee <UART_ReportSendTask+0xe>
 8001d88:	2000035c 	.word	0x2000035c
 8001d8c:	200003b0 	.word	0x200003b0
 8001d90:	20000364 	.word	0x20000364
 8001d94:	0800dc0c 	.word	0x0800dc0c
 8001d98:	2000000c 	.word	0x2000000c
 8001d9c:	10624dd3 	.word	0x10624dd3

08001da0 <UART_ParseCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_ParseCommandTask */
void UART_ParseCommandTask(void *argument)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	@ 0x38
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  osStatus_t status;
  static char OriginCommand[RX_BUFFER_SIZE];
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(ISR_RxUARTHandle, FlagISR, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8001da8:	4baa      	ldr	r3, [pc, #680]	@ (8002054 <UART_ParseCommandTask+0x2b4>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	2202      	movs	r2, #2
 8001db2:	2101      	movs	r1, #1
 8001db4:	f004 fca3 	bl	80066fe <osEventFlagsWait>
	  osEventFlagsClear(ISR_RxUARTHandle, FlagISR);
 8001db8:	4ba6      	ldr	r3, [pc, #664]	@ (8002054 <UART_ParseCommandTask+0x2b4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fc6c 	bl	800669c <osEventFlagsClear>

	  strncpy(OriginCommand, RxBuffer, RX_BUFFER_SIZE - 1);
 8001dc4:	221f      	movs	r2, #31
 8001dc6:	49a4      	ldr	r1, [pc, #656]	@ (8002058 <UART_ParseCommandTask+0x2b8>)
 8001dc8:	48a4      	ldr	r0, [pc, #656]	@ (800205c <UART_ParseCommandTask+0x2bc>)
 8001dca:	f009 f8b2 	bl	800af32 <strncpy>
	  OriginCommand[RX_BUFFER_SIZE - 1] = '\0';
 8001dce:	4ba3      	ldr	r3, [pc, #652]	@ (800205c <UART_ParseCommandTask+0x2bc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	77da      	strb	r2, [r3, #31]

	  Command_t command;
	  command.cmd = CMD_INVALID;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	f887 3020 	strb.w	r3, [r7, #32]
	  command.param = PARAM_INVALID;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24

	  char *token;
	  char *save_ptr;

	  char *start_ptr = RxBuffer; // Con trỏ tới ký tự đầu đầu của chuỗi lệnh
 8001dde:	4b9e      	ldr	r3, [pc, #632]	@ (8002058 <UART_ParseCommandTask+0x2b8>)
 8001de0:	637b      	str	r3, [r7, #52]	@ 0x34
	  while(*start_ptr == ' ' || *start_ptr == '\t') {
 8001de2:	e002      	b.n	8001dea <UART_ParseCommandTask+0x4a>
		  start_ptr++; // Bỏ qua ký tự này và kiểm tra tiếp
 8001de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de6:	3301      	adds	r3, #1
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
	  while(*start_ptr == ' ' || *start_ptr == '\t') {
 8001dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d0f8      	beq.n	8001de4 <UART_ParseCommandTask+0x44>
 8001df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d0f4      	beq.n	8001de4 <UART_ParseCommandTask+0x44>
	  }
      char *end_ptr = start_ptr + strlen(start_ptr) - 1; // Con trỏ đến ký tự cuối cùng của chuỗi lệnh
 8001dfa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dfc:	f7fe f9b2 	bl	8000164 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e06:	4413      	add	r3, r2
 8001e08:	633b      	str	r3, [r7, #48]	@ 0x30
      while (end_ptr > start_ptr && (*end_ptr == '\n' || *end_ptr == '\r' || *end_ptr == ' ' || *end_ptr == '\t')) {
 8001e0a:	e005      	b.n	8001e18 <UART_ParseCommandTask+0x78>
          *end_ptr = '\0'; // Thay thế thành ký tự kết thúc chuỗi
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
          end_ptr--;       // Lùi con trỏ để kiểm tra tiếp
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	3b01      	subs	r3, #1
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
      while (end_ptr > start_ptr && (*end_ptr == '\n' || *end_ptr == '\r' || *end_ptr == ' ' || *end_ptr == '\t')) {
 8001e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d90f      	bls.n	8001e40 <UART_ParseCommandTask+0xa0>
 8001e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b0a      	cmp	r3, #10
 8001e26:	d0f1      	beq.n	8001e0c <UART_ParseCommandTask+0x6c>
 8001e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b0d      	cmp	r3, #13
 8001e2e:	d0ed      	beq.n	8001e0c <UART_ParseCommandTask+0x6c>
 8001e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d0e9      	beq.n	8001e0c <UART_ParseCommandTask+0x6c>
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d0e5      	beq.n	8001e0c <UART_ParseCommandTask+0x6c>
      }

      // Kiểm tra tiền tố '!"
      if (start_ptr[0] == '!') {
 8001e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b21      	cmp	r3, #33	@ 0x21
 8001e46:	f040 816c 	bne.w	8002122 <UART_ParseCommandTask+0x382>
    	  start_ptr++; // Di chuyển con trỏ qua ký tự '!'
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34

    	  // Tách từ dầu tiên
    	  token = strtok_r(start_ptr, " ", &save_ptr);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	461a      	mov	r2, r3
 8001e56:	4982      	ldr	r1, [pc, #520]	@ (8002060 <UART_ParseCommandTask+0x2c0>)
 8001e58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e5a:	f009 f8a5 	bl	800afa8 <strtok_r>
 8001e5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    	  if(token != NULL) {
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 815d 	beq.w	8002122 <UART_ParseCommandTask+0x382>
    		  if(strcmp(token, "motor") == 0) {
 8001e68:	497e      	ldr	r1, [pc, #504]	@ (8002064 <UART_ParseCommandTask+0x2c4>)
 8001e6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e6c:	f7fe f970 	bl	8000150 <strcmp>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d123      	bne.n	8001ebe <UART_ParseCommandTask+0x11e>
    			  command.cmd = MOTOR;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	461a      	mov	r2, r3
 8001e82:	4977      	ldr	r1, [pc, #476]	@ (8002060 <UART_ParseCommandTask+0x2c0>)
 8001e84:	2000      	movs	r0, #0
 8001e86:	f009 f88f 	bl	800afa8 <strtok_r>
 8001e8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 8001e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8147 	beq.w	8002122 <UART_ParseCommandTask+0x382>
    				  if (strcmp(token, "on") == 0) command.param = ON;
 8001e94:	4974      	ldr	r1, [pc, #464]	@ (8002068 <UART_ParseCommandTask+0x2c8>)
 8001e96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e98:	f7fe f95a 	bl	8000150 <strcmp>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <UART_ParseCommandTask+0x108>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	e13c      	b.n	8002122 <UART_ParseCommandTask+0x382>
    				  else if (strcmp(token, "off") == 0) command.param = OFF;
 8001ea8:	4970      	ldr	r1, [pc, #448]	@ (800206c <UART_ParseCommandTask+0x2cc>)
 8001eaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001eac:	f7fe f950 	bl	8000150 <strcmp>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 8135 	bne.w	8002122 <UART_ParseCommandTask+0x382>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebc:	e131      	b.n	8002122 <UART_ParseCommandTask+0x382>
    			  }
    		  }
    		  else if(strcmp(token, "rotate") == 0) {
 8001ebe:	496c      	ldr	r1, [pc, #432]	@ (8002070 <UART_ParseCommandTask+0x2d0>)
 8001ec0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ec2:	f7fe f945 	bl	8000150 <strcmp>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d123      	bne.n	8001f14 <UART_ParseCommandTask+0x174>
    			  command.cmd = ROTATE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4961      	ldr	r1, [pc, #388]	@ (8002060 <UART_ParseCommandTask+0x2c0>)
 8001eda:	2000      	movs	r0, #0
 8001edc:	f009 f864 	bl	800afa8 <strtok_r>
 8001ee0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 811c 	beq.w	8002122 <UART_ParseCommandTask+0x382>
    				  if (strcmp(token, "cw") == 0) command.param = CW;
 8001eea:	4962      	ldr	r1, [pc, #392]	@ (8002074 <UART_ParseCommandTask+0x2d4>)
 8001eec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001eee:	f7fe f92f 	bl	8000150 <strcmp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <UART_ParseCommandTask+0x15e>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	e111      	b.n	8002122 <UART_ParseCommandTask+0x382>
    				  else if (strcmp(token, "ccw") == 0) command.param = CCW;
 8001efe:	495e      	ldr	r1, [pc, #376]	@ (8002078 <UART_ParseCommandTask+0x2d8>)
 8001f00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f02:	f7fe f925 	bl	8000150 <strcmp>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f040 810a 	bne.w	8002122 <UART_ParseCommandTask+0x382>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f12:	e106      	b.n	8002122 <UART_ParseCommandTask+0x382>
    			  }
    		  }
    		  else if (strcmp(token, "speed") == 0) {
 8001f14:	4959      	ldr	r1, [pc, #356]	@ (800207c <UART_ParseCommandTask+0x2dc>)
 8001f16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f18:	f7fe f91a 	bl	8000150 <strcmp>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d11c      	bne.n	8001f5c <UART_ParseCommandTask+0x1bc>
    			  command.cmd = SPEED;
 8001f22:	2302      	movs	r3, #2
 8001f24:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	494c      	ldr	r1, [pc, #304]	@ (8002060 <UART_ParseCommandTask+0x2c0>)
 8001f30:	2000      	movs	r0, #0
 8001f32:	f009 f839 	bl	800afa8 <strtok_r>
 8001f36:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 8001f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80f1 	beq.w	8002122 <UART_ParseCommandTask+0x382>
    				  int speed_val;
    				  if (sscanf(token, "%d", &speed_val) == 1) {
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	461a      	mov	r2, r3
 8001f46:	494e      	ldr	r1, [pc, #312]	@ (8002080 <UART_ParseCommandTask+0x2e0>)
 8001f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f4a:	f008 ff79 	bl	800ae40 <siscanf>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f040 80e6 	bne.w	8002122 <UART_ParseCommandTask+0x382>
    					  command.param = (uint32_t)speed_val;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5a:	e0e2      	b.n	8002122 <UART_ParseCommandTask+0x382>
    				  }
    			  }
    		  }
    		  else if (strcmp(token, "display") == 0) {
 8001f5c:	4949      	ldr	r1, [pc, #292]	@ (8002084 <UART_ParseCommandTask+0x2e4>)
 8001f5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f60:	f7fe f8f6 	bl	8000150 <strcmp>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d12d      	bne.n	8001fc6 <UART_ParseCommandTask+0x226>
    			  command.cmd = DISPLAY;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	461a      	mov	r2, r3
 8001f76:	493a      	ldr	r1, [pc, #232]	@ (8002060 <UART_ParseCommandTask+0x2c0>)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f009 f815 	bl	800afa8 <strtok_r>
 8001f7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 8001f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80cd 	beq.w	8002122 <UART_ParseCommandTask+0x382>
    				  if (strcmp(token, "all") == 0) command.param = ALL;
 8001f88:	493f      	ldr	r1, [pc, #252]	@ (8002088 <UART_ParseCommandTask+0x2e8>)
 8001f8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f8c:	f7fe f8e0 	bl	8000150 <strcmp>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <UART_ParseCommandTask+0x1fc>
 8001f96:	2304      	movs	r3, #4
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	e0c2      	b.n	8002122 <UART_ParseCommandTask+0x382>
    				  else if (strcmp(token, "temp") == 0) command.param = TEMP;
 8001f9c:	493b      	ldr	r1, [pc, #236]	@ (800208c <UART_ParseCommandTask+0x2ec>)
 8001f9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fa0:	f7fe f8d6 	bl	8000150 <strcmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <UART_ParseCommandTask+0x210>
 8001faa:	2305      	movs	r3, #5
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fae:	e0b8      	b.n	8002122 <UART_ParseCommandTask+0x382>
    				  else if (strcmp(token, "humid") == 0) command.param = HUMID;
 8001fb0:	4937      	ldr	r1, [pc, #220]	@ (8002090 <UART_ParseCommandTask+0x2f0>)
 8001fb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fb4:	f7fe f8cc 	bl	8000150 <strcmp>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 80b1 	bne.w	8002122 <UART_ParseCommandTask+0x382>
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc4:	e0ad      	b.n	8002122 <UART_ParseCommandTask+0x382>
    			  }
    		  }
    		  else if (strcmp(token, "ptask2") == 0) {
 8001fc6:	4933      	ldr	r1, [pc, #204]	@ (8002094 <UART_ParseCommandTask+0x2f4>)
 8001fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fca:	f7fe f8c1 	bl	8000150 <strcmp>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11c      	bne.n	800200e <UART_ParseCommandTask+0x26e>
    			  command.cmd = PTASK2;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	461a      	mov	r2, r3
 8001fe0:	491f      	ldr	r1, [pc, #124]	@ (8002060 <UART_ParseCommandTask+0x2c0>)
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f008 ffe0 	bl	800afa8 <strtok_r>
 8001fe8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 8001fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8098 	beq.w	8002122 <UART_ParseCommandTask+0x382>
    				  int period;
    				  if (sscanf(token, "%d", &period) == 1) {
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4921      	ldr	r1, [pc, #132]	@ (8002080 <UART_ParseCommandTask+0x2e0>)
 8001ffa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ffc:	f008 ff20 	bl	800ae40 <siscanf>
 8002000:	4603      	mov	r3, r0
 8002002:	2b01      	cmp	r3, #1
 8002004:	f040 808d 	bne.w	8002122 <UART_ParseCommandTask+0x382>
    					  command.param = (uint32_t)period;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
 800200c:	e089      	b.n	8002122 <UART_ParseCommandTask+0x382>
    				  }
    			  }
    		  }
    		  else if (strcmp(token, "ptask3") == 0) {
 800200e:	4922      	ldr	r1, [pc, #136]	@ (8002098 <UART_ParseCommandTask+0x2f8>)
 8002010:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002012:	f7fe f89d 	bl	8000150 <strcmp>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d13f      	bne.n	800209c <UART_ParseCommandTask+0x2fc>
    			  command.cmd = PTASK3;
 800201c:	2305      	movs	r3, #5
 800201e:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	461a      	mov	r2, r3
 8002028:	490d      	ldr	r1, [pc, #52]	@ (8002060 <UART_ParseCommandTask+0x2c0>)
 800202a:	2000      	movs	r0, #0
 800202c:	f008 ffbc 	bl	800afa8 <strtok_r>
 8002030:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 8002032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d074      	beq.n	8002122 <UART_ParseCommandTask+0x382>
    				  int period;
    				  if (sscanf(token, "%d", &period) == 1) {
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	461a      	mov	r2, r3
 800203e:	4910      	ldr	r1, [pc, #64]	@ (8002080 <UART_ParseCommandTask+0x2e0>)
 8002040:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002042:	f008 fefd 	bl	800ae40 <siscanf>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d16a      	bne.n	8002122 <UART_ParseCommandTask+0x382>
    					  command.param = (uint32_t)period;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002050:	e067      	b.n	8002122 <UART_ParseCommandTask+0x382>
 8002052:	bf00      	nop
 8002054:	20000374 	.word	0x20000374
 8002058:	2000038c 	.word	0x2000038c
 800205c:	200003b8 	.word	0x200003b8
 8002060:	0800dc3c 	.word	0x0800dc3c
 8002064:	0800dc40 	.word	0x0800dc40
 8002068:	0800dc48 	.word	0x0800dc48
 800206c:	0800dc4c 	.word	0x0800dc4c
 8002070:	0800dc50 	.word	0x0800dc50
 8002074:	0800dc58 	.word	0x0800dc58
 8002078:	0800dc5c 	.word	0x0800dc5c
 800207c:	0800dc60 	.word	0x0800dc60
 8002080:	0800dc68 	.word	0x0800dc68
 8002084:	0800dc6c 	.word	0x0800dc6c
 8002088:	0800dc74 	.word	0x0800dc74
 800208c:	0800dc78 	.word	0x0800dc78
 8002090:	0800dc80 	.word	0x0800dc80
 8002094:	0800dc88 	.word	0x0800dc88
 8002098:	0800dc90 	.word	0x0800dc90
    				  }
    			  }
    		  }
    		  else if (strcmp(token, "ptask4") == 0) {
 800209c:	4933      	ldr	r1, [pc, #204]	@ (800216c <UART_ParseCommandTask+0x3cc>)
 800209e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020a0:	f7fe f856 	bl	8000150 <strcmp>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11a      	bne.n	80020e0 <UART_ParseCommandTask+0x340>
    			  command.cmd = PTASK4;
 80020aa:	2306      	movs	r3, #6
 80020ac:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	461a      	mov	r2, r3
 80020b6:	492e      	ldr	r1, [pc, #184]	@ (8002170 <UART_ParseCommandTask+0x3d0>)
 80020b8:	2000      	movs	r0, #0
 80020ba:	f008 ff75 	bl	800afa8 <strtok_r>
 80020be:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 80020c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d02d      	beq.n	8002122 <UART_ParseCommandTask+0x382>
    				  int period;
    				  if (sscanf(token, "%d", &period) == 1) {
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	461a      	mov	r2, r3
 80020cc:	4929      	ldr	r1, [pc, #164]	@ (8002174 <UART_ParseCommandTask+0x3d4>)
 80020ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020d0:	f008 feb6 	bl	800ae40 <siscanf>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d123      	bne.n	8002122 <UART_ParseCommandTask+0x382>
    					  command.param = (uint32_t)period;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80020de:	e020      	b.n	8002122 <UART_ParseCommandTask+0x382>
    				  }
    			  }
    		  }
    		  else if (strcmp(token, "ptask5") == 0) {
 80020e0:	4925      	ldr	r1, [pc, #148]	@ (8002178 <UART_ParseCommandTask+0x3d8>)
 80020e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020e4:	f7fe f834 	bl	8000150 <strcmp>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d119      	bne.n	8002122 <UART_ParseCommandTask+0x382>
    			  command.cmd = PTASK5;
 80020ee:	2307      	movs	r3, #7
 80020f0:	f887 3020 	strb.w	r3, [r7, #32]
    			  token = strtok_r(NULL, " ", &save_ptr);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	461a      	mov	r2, r3
 80020fa:	491d      	ldr	r1, [pc, #116]	@ (8002170 <UART_ParseCommandTask+0x3d0>)
 80020fc:	2000      	movs	r0, #0
 80020fe:	f008 ff53 	bl	800afa8 <strtok_r>
 8002102:	62f8      	str	r0, [r7, #44]	@ 0x2c
    			  if (token != NULL) {
 8002104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <UART_ParseCommandTask+0x382>
    				  int period;
    				  if (sscanf(token, "%d", &period) == 1) {
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	461a      	mov	r2, r3
 8002110:	4918      	ldr	r1, [pc, #96]	@ (8002174 <UART_ParseCommandTask+0x3d4>)
 8002112:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002114:	f008 fe94 	bl	800ae40 <siscanf>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <UART_ParseCommandTask+0x382>
    					  command.param = (uint32_t)period;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    			  }
    		  }
    	  }
      }

      status = osMessageQueuePut(CommandQueueHandle, &command, 0, osWaitForever);
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <UART_ParseCommandTask+0x3dc>)
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f107 0120 	add.w	r1, r7, #32
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	2200      	movs	r2, #0
 8002130:	f004 fccc 	bl	8006acc <osMessageQueuePut>
 8002134:	62b8      	str	r0, [r7, #40]	@ 0x28
      if(status == osOK) {
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	f47f ae35 	bne.w	8001da8 <UART_ParseCommandTask+0x8>
    	  status =  osMutexAcquire(UART_AccessMutexHandle, osWaitForever);
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <UART_ParseCommandTask+0x3e0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 31ff 	mov.w	r1, #4294967295
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fbc4 	bl	80068d4 <osMutexAcquire>
 800214c:	62b8      	str	r0, [r7, #40]	@ 0x28
    	  if(status == osOK) {
 800214e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f ae29 	bne.w	8001da8 <UART_ParseCommandTask+0x8>
    		  printf("Command sent successfully: %s\r\n", OriginCommand);
 8002156:	490b      	ldr	r1, [pc, #44]	@ (8002184 <UART_ParseCommandTask+0x3e4>)
 8002158:	480b      	ldr	r0, [pc, #44]	@ (8002188 <UART_ParseCommandTask+0x3e8>)
 800215a:	f008 fe29 	bl	800adb0 <iprintf>
    		  osMutexRelease(UART_AccessMutexHandle);
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <UART_ParseCommandTask+0x3e0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 fc01 	bl	800696a <osMutexRelease>
  {
 8002168:	e61e      	b.n	8001da8 <UART_ParseCommandTask+0x8>
 800216a:	bf00      	nop
 800216c:	0800dc98 	.word	0x0800dc98
 8002170:	0800dc3c 	.word	0x0800dc3c
 8002174:	0800dc68 	.word	0x0800dc68
 8002178:	0800dca0 	.word	0x0800dca0
 800217c:	20000358 	.word	0x20000358
 8002180:	20000364 	.word	0x20000364
 8002184:	200003b8 	.word	0x200003b8
 8002188:	0800dca8 	.word	0x0800dca8

0800218c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800219e:	f000 faf5 	bl	800278c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40012c00 	.word	0x40012c00

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <Error_Handler+0x8>

080021bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021c2:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <HAL_MspInit+0x68>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <HAL_MspInit+0x68>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6193      	str	r3, [r2, #24]
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_MspInit+0x68>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_MspInit+0x68>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a11      	ldr	r2, [pc, #68]	@ (8002224 <HAL_MspInit+0x68>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_MspInit+0x68>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	210f      	movs	r1, #15
 80021f6:	f06f 0001 	mvn.w	r0, #1
 80021fa:	f000 fbbc 	bl	8002976 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_MspInit+0x6c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_MspInit+0x6c>)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000

0800222c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2b      	ldr	r2, [pc, #172]	@ (80022f4 <HAL_I2C_MspInit+0xc8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d124      	bne.n	8002296 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b2a      	ldr	r3, [pc, #168]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a29      	ldr	r2, [pc, #164]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002264:	23c0      	movs	r3, #192	@ 0xc0
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002268:	2312      	movs	r3, #18
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	4619      	mov	r1, r3
 8002276:	4821      	ldr	r0, [pc, #132]	@ (80022fc <HAL_I2C_MspInit+0xd0>)
 8002278:	f000 fc5a 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a1d      	ldr	r2, [pc, #116]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 8002282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002294:	e029      	b.n	80022ea <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <HAL_I2C_MspInit+0xd4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d124      	bne.n	80022ea <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a14      	ldr	r2, [pc, #80]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 80022b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022be:	2312      	movs	r3, #18
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	4619      	mov	r1, r3
 80022cc:	480b      	ldr	r0, [pc, #44]	@ (80022fc <HAL_I2C_MspInit+0xd0>)
 80022ce:	f000 fc2f 	bl	8002b30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022d2:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 80022d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_I2C_MspInit+0xcc>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	@ 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010c00 	.word	0x40010c00
 8002300:	40005800 	.word	0x40005800

08002304 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002314:	d10b      	bne.n	800232e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <HAL_TIM_Base_MspInit+0x34>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <HAL_TIM_Base_MspInit+0x34>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	61d3      	str	r3, [r2, #28]
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_TIM_Base_MspInit+0x34>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800235a:	d117      	bne.n	800238c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235c:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <HAL_TIM_MspPostInit+0x58>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a0c      	ldr	r2, [pc, #48]	@ (8002394 <HAL_TIM_MspPostInit+0x58>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <HAL_TIM_MspPostInit+0x58>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ENA_Pin;
 8002374:	2304      	movs	r3, #4
 8002376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2302      	movs	r3, #2
 800237e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	4619      	mov	r1, r3
 8002386:	4804      	ldr	r0, [pc, #16]	@ (8002398 <HAL_TIM_MspPostInit+0x5c>)
 8002388:	f000 fbd2 	bl	8002b30 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800238c:	bf00      	nop
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	40010800 	.word	0x40010800

0800239c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <HAL_UART_MspInit+0x9c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d139      	bne.n	8002430 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023bc:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <HAL_UART_MspInit+0xa0>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <HAL_UART_MspInit+0xa0>)
 80023c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <HAL_UART_MspInit+0xa0>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_UART_MspInit+0xa0>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a18      	ldr	r2, [pc, #96]	@ (800243c <HAL_UART_MspInit+0xa0>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b16      	ldr	r3, [pc, #88]	@ (800243c <HAL_UART_MspInit+0xa0>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4619      	mov	r1, r3
 8002400:	480f      	ldr	r0, [pc, #60]	@ (8002440 <HAL_UART_MspInit+0xa4>)
 8002402:	f000 fb95 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800240a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4619      	mov	r1, r3
 800241a:	4809      	ldr	r0, [pc, #36]	@ (8002440 <HAL_UART_MspInit+0xa4>)
 800241c:	f000 fb88 	bl	8002b30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2105      	movs	r1, #5
 8002424:	2025      	movs	r0, #37	@ 0x25
 8002426:	f000 faa6 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800242a:	2025      	movs	r0, #37	@ 0x25
 800242c:	f000 fabf 	bl	80029ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013800 	.word	0x40013800
 800243c:	40021000 	.word	0x40021000
 8002440:	40010800 	.word	0x40010800

08002444 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	@ 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800245a:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <HAL_InitTick+0xd0>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a2d      	ldr	r2, [pc, #180]	@ (8002514 <HAL_InitTick+0xd0>)
 8002460:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <HAL_InitTick+0xd0>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f002 f919 	bl	80046b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002482:	f002 f903 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8002486:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248a:	4a23      	ldr	r2, [pc, #140]	@ (8002518 <HAL_InitTick+0xd4>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9b      	lsrs	r3, r3, #18
 8002492:	3b01      	subs	r3, #1
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <HAL_InitTick+0xd8>)
 8002498:	4a21      	ldr	r2, [pc, #132]	@ (8002520 <HAL_InitTick+0xdc>)
 800249a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <HAL_InitTick+0xd8>)
 800249e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_InitTick+0xd8>)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <HAL_InitTick+0xd8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_InitTick+0xd8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_InitTick+0xd8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80024bc:	4817      	ldr	r0, [pc, #92]	@ (800251c <HAL_InitTick+0xd8>)
 80024be:	f002 f947 	bl	8004750 <HAL_TIM_Base_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80024c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11b      	bne.n	8002508 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80024d0:	4812      	ldr	r0, [pc, #72]	@ (800251c <HAL_InitTick+0xd8>)
 80024d2:	f002 f98d 	bl	80047f0 <HAL_TIM_Base_Start_IT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80024dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80024e4:	2019      	movs	r0, #25
 80024e6:	f000 fa62 	bl	80029ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d808      	bhi.n	8002502 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	2019      	movs	r0, #25
 80024f6:	f000 fa3e 	bl	8002976 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <HAL_InitTick+0xe0>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e002      	b.n	8002508 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002508:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800250c:	4618      	mov	r0, r3
 800250e:	3730      	adds	r7, #48	@ 0x30
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	431bde83 	.word	0x431bde83
 800251c:	200003d8 	.word	0x200003d8
 8002520:	40012c00 	.word	0x40012c00
 8002524:	20000018 	.word	0x20000018

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <UsageFault_Handler+0x4>

08002550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <TIM1_UP_IRQHandler+0x10>)
 8002562:	f002 fa91 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200003d8 	.word	0x200003d8

08002570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <USART1_IRQHandler+0x10>)
 8002576:	f003 f945 	bl	8005804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200002f8 	.word	0x200002f8

08002584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return 1;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <_kill>:

int _kill(int pid, int sig)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800259c:	f008 fdb0 	bl	800b100 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2216      	movs	r2, #22
 80025a4:	601a      	str	r2, [r3, #0]
  return -1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_exit>:

void _exit (int status)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025ba:	f04f 31ff 	mov.w	r1, #4294967295
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffe7 	bl	8002592 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <_exit+0x12>

080025c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e00a      	b.n	80025f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025da:	f3af 8000 	nop.w
 80025de:	4601      	mov	r1, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	b2ca      	uxtb	r2, r1
 80025e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf0      	blt.n	80025da <_read+0x12>
  }

  return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e009      	b.n	8002628 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	60ba      	str	r2, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fd7b 	bl	8001118 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf1      	blt.n	8002614 <_write+0x12>
  }
  return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_close>:

int _close(int file)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002660:	605a      	str	r2, [r3, #4]
  return 0;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <_isatty>:

int _isatty(int file)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <_sbrk+0x5c>)
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <_sbrk+0x60>)
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b0:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <_sbrk+0x64>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <_sbrk+0x68>)
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d207      	bcs.n	80026dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026cc:	f008 fd18 	bl	800b100 <__errno>
 80026d0:	4603      	mov	r3, r0
 80026d2:	220c      	movs	r2, #12
 80026d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e009      	b.n	80026f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <_sbrk+0x64>)
 80026ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20005000 	.word	0x20005000
 80026fc:	00000400 	.word	0x00000400
 8002700:	20000420 	.word	0x20000420
 8002704:	20003360 	.word	0x20003360

08002708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002714:	f7ff fff8 	bl	8002708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480b      	ldr	r0, [pc, #44]	@ (8002748 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800271a:	490c      	ldr	r1, [pc, #48]	@ (800274c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800271c:	4a0c      	ldr	r2, [pc, #48]	@ (8002750 <LoopFillZerobss+0x16>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002730:	4c09      	ldr	r4, [pc, #36]	@ (8002758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f008 fce5 	bl	800b10c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002742:	f7fe fd95 	bl	8001270 <main>
  bx lr
 8002746:	4770      	bx	lr
  ldr r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800274c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002750:	0800e214 	.word	0x0800e214
  ldr r2, =_sbss
 8002754:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002758:	2000335c 	.word	0x2000335c

0800275c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC1_2_IRQHandler>
	...

08002760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002764:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <HAL_Init+0x28>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <HAL_Init+0x28>)
 800276a:	f043 0310 	orr.w	r3, r3, #16
 800276e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002770:	2003      	movs	r0, #3
 8002772:	f000 f8f5 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002776:	200f      	movs	r0, #15
 8002778:	f7ff fe64 	bl	8002444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800277c:	f7ff fd1e 	bl	80021bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40022000 	.word	0x40022000

0800278c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_IncTick+0x1c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_IncTick+0x20>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a03      	ldr	r2, [pc, #12]	@ (80027ac <HAL_IncTick+0x20>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	2000001c 	.word	0x2000001c
 80027ac:	20000424 	.word	0x20000424

080027b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return uwTick;
 80027b4:	4b02      	ldr	r3, [pc, #8]	@ (80027c0 <HAL_GetTick+0x10>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	20000424 	.word	0x20000424

080027c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027de:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffe0 	bl	80027b0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000001c 	.word	0x2000001c

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4906      	ldr	r1, [pc, #24]	@ (80028a4 <__NVIC_EnableIRQ+0x34>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff4f 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff64 	bl	8002854 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ffb2 	bl	80028fc <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff81 	bl	80028a8 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff57 	bl	8002870 <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d008      	beq.n	80029f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2204      	movs	r2, #4
 80029e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e020      	b.n	8002a36 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 020e 	bic.w	r2, r2, #14
 8002a02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d005      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e051      	b.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 020e 	bic.w	r2, r2, #14
 8002a72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <HAL_DMA_Abort_IT+0xd4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d029      	beq.n	8002ae2 <HAL_DMA_Abort_IT+0xa2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a21      	ldr	r2, [pc, #132]	@ (8002b18 <HAL_DMA_Abort_IT+0xd8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d022      	beq.n	8002ade <HAL_DMA_Abort_IT+0x9e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b1c <HAL_DMA_Abort_IT+0xdc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01a      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0x98>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b20 <HAL_DMA_Abort_IT+0xe0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d012      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x92>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <HAL_DMA_Abort_IT+0xe4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00a      	beq.n	8002acc <HAL_DMA_Abort_IT+0x8c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_DMA_Abort_IT+0xe8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <HAL_DMA_Abort_IT+0x86>
 8002ac0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ac4:	e00e      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xa4>
 8002ac6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aca:	e00b      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xa4>
 8002acc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ad0:	e008      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xa4>
 8002ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad6:	e005      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xa4>
 8002ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002adc:	e002      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xa4>
 8002ade:	2310      	movs	r3, #16
 8002ae0:	e000      	b.n	8002ae4 <HAL_DMA_Abort_IT+0xa4>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4a11      	ldr	r2, [pc, #68]	@ (8002b2c <HAL_DMA_Abort_IT+0xec>)
 8002ae6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
    } 
  }
  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40020008 	.word	0x40020008
 8002b18:	4002001c 	.word	0x4002001c
 8002b1c:	40020030 	.word	0x40020030
 8002b20:	40020044 	.word	0x40020044
 8002b24:	40020058 	.word	0x40020058
 8002b28:	4002006c 	.word	0x4002006c
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b08b      	sub	sp, #44	@ 0x2c
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b42:	e169      	b.n	8002e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b44:	2201      	movs	r2, #1
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	f040 8158 	bne.w	8002e12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a9a      	ldr	r2, [pc, #616]	@ (8002dd0 <HAL_GPIO_Init+0x2a0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d05e      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b6c:	4a98      	ldr	r2, [pc, #608]	@ (8002dd0 <HAL_GPIO_Init+0x2a0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d875      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b72:	4a98      	ldr	r2, [pc, #608]	@ (8002dd4 <HAL_GPIO_Init+0x2a4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d058      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b78:	4a96      	ldr	r2, [pc, #600]	@ (8002dd4 <HAL_GPIO_Init+0x2a4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d86f      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b7e:	4a96      	ldr	r2, [pc, #600]	@ (8002dd8 <HAL_GPIO_Init+0x2a8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d052      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b84:	4a94      	ldr	r2, [pc, #592]	@ (8002dd8 <HAL_GPIO_Init+0x2a8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d869      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b8a:	4a94      	ldr	r2, [pc, #592]	@ (8002ddc <HAL_GPIO_Init+0x2ac>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d04c      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b90:	4a92      	ldr	r2, [pc, #584]	@ (8002ddc <HAL_GPIO_Init+0x2ac>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d863      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b96:	4a92      	ldr	r2, [pc, #584]	@ (8002de0 <HAL_GPIO_Init+0x2b0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d046      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b9c:	4a90      	ldr	r2, [pc, #576]	@ (8002de0 <HAL_GPIO_Init+0x2b0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d85d      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002ba2:	2b12      	cmp	r3, #18
 8002ba4:	d82a      	bhi.n	8002bfc <HAL_GPIO_Init+0xcc>
 8002ba6:	2b12      	cmp	r3, #18
 8002ba8:	d859      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002baa:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <HAL_GPIO_Init+0x80>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002c2b 	.word	0x08002c2b
 8002bb4:	08002c05 	.word	0x08002c05
 8002bb8:	08002c17 	.word	0x08002c17
 8002bbc:	08002c59 	.word	0x08002c59
 8002bc0:	08002c5f 	.word	0x08002c5f
 8002bc4:	08002c5f 	.word	0x08002c5f
 8002bc8:	08002c5f 	.word	0x08002c5f
 8002bcc:	08002c5f 	.word	0x08002c5f
 8002bd0:	08002c5f 	.word	0x08002c5f
 8002bd4:	08002c5f 	.word	0x08002c5f
 8002bd8:	08002c5f 	.word	0x08002c5f
 8002bdc:	08002c5f 	.word	0x08002c5f
 8002be0:	08002c5f 	.word	0x08002c5f
 8002be4:	08002c5f 	.word	0x08002c5f
 8002be8:	08002c5f 	.word	0x08002c5f
 8002bec:	08002c5f 	.word	0x08002c5f
 8002bf0:	08002c5f 	.word	0x08002c5f
 8002bf4:	08002c0d 	.word	0x08002c0d
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	4a79      	ldr	r2, [pc, #484]	@ (8002de4 <HAL_GPIO_Init+0x2b4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c02:	e02c      	b.n	8002c5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	623b      	str	r3, [r7, #32]
          break;
 8002c0a:	e029      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	3304      	adds	r3, #4
 8002c12:	623b      	str	r3, [r7, #32]
          break;
 8002c14:	e024      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	623b      	str	r3, [r7, #32]
          break;
 8002c1e:	e01f      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	330c      	adds	r3, #12
 8002c26:	623b      	str	r3, [r7, #32]
          break;
 8002c28:	e01a      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c32:	2304      	movs	r3, #4
 8002c34:	623b      	str	r3, [r7, #32]
          break;
 8002c36:	e013      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c40:	2308      	movs	r3, #8
 8002c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	611a      	str	r2, [r3, #16]
          break;
 8002c4a:	e009      	b.n	8002c60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	615a      	str	r2, [r3, #20]
          break;
 8002c56:	e003      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
          break;
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          break;
 8002c5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2bff      	cmp	r3, #255	@ 0xff
 8002c64:	d801      	bhi.n	8002c6a <HAL_GPIO_Init+0x13a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e001      	b.n	8002c6e <HAL_GPIO_Init+0x13e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2bff      	cmp	r3, #255	@ 0xff
 8002c74:	d802      	bhi.n	8002c7c <HAL_GPIO_Init+0x14c>
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x152>
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	3b08      	subs	r3, #8
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	210f      	movs	r1, #15
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	401a      	ands	r2, r3
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80b1 	beq.w	8002e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002de8 <HAL_GPIO_Init+0x2b8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002de8 <HAL_GPIO_Init+0x2b8>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6193      	str	r3, [r2, #24]
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8002de8 <HAL_GPIO_Init+0x2b8>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cc8:	4a48      	ldr	r2, [pc, #288]	@ (8002dec <HAL_GPIO_Init+0x2bc>)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3302      	adds	r3, #2
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a40      	ldr	r2, [pc, #256]	@ (8002df0 <HAL_GPIO_Init+0x2c0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_GPIO_Init+0x1ec>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8002df4 <HAL_GPIO_Init+0x2c4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00d      	beq.n	8002d18 <HAL_GPIO_Init+0x1e8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002df8 <HAL_GPIO_Init+0x2c8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d007      	beq.n	8002d14 <HAL_GPIO_Init+0x1e4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3d      	ldr	r2, [pc, #244]	@ (8002dfc <HAL_GPIO_Init+0x2cc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_GPIO_Init+0x1e0>
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e006      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e004      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e002      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d20:	f002 0203 	and.w	r2, r2, #3
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	4093      	lsls	r3, r2
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d2e:	492f      	ldr	r1, [pc, #188]	@ (8002dec <HAL_GPIO_Init+0x2bc>)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d48:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	492c      	ldr	r1, [pc, #176]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d56:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	4928      	ldr	r1, [pc, #160]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d70:	4b23      	ldr	r3, [pc, #140]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	4922      	ldr	r1, [pc, #136]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d7e:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	491e      	ldr	r1, [pc, #120]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d98:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4918      	ldr	r1, [pc, #96]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002da6:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	4914      	ldr	r1, [pc, #80]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d021      	beq.n	8002e04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	490e      	ldr	r1, [pc, #56]	@ (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	e021      	b.n	8002e12 <HAL_GPIO_Init+0x2e2>
 8002dce:	bf00      	nop
 8002dd0:	10320000 	.word	0x10320000
 8002dd4:	10310000 	.word	0x10310000
 8002dd8:	10220000 	.word	0x10220000
 8002ddc:	10210000 	.word	0x10210000
 8002de0:	10120000 	.word	0x10120000
 8002de4:	10110000 	.word	0x10110000
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40010800 	.word	0x40010800
 8002df4:	40010c00 	.word	0x40010c00
 8002df8:	40011000 	.word	0x40011000
 8002dfc:	40011400 	.word	0x40011400
 8002e00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_GPIO_Init+0x304>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	4909      	ldr	r1, [pc, #36]	@ (8002e34 <HAL_GPIO_Init+0x304>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	3301      	adds	r3, #1
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f47f ae8e 	bne.w	8002b44 <HAL_GPIO_Init+0x14>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	372c      	adds	r7, #44	@ 0x2c
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e12b      	b.n	80030d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff f9cc 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	@ 0x24
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ecc:	f001 fbca 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8002ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a81      	ldr	r2, [pc, #516]	@ (80030dc <HAL_I2C_Init+0x274>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d807      	bhi.n	8002eec <HAL_I2C_Init+0x84>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a80      	ldr	r2, [pc, #512]	@ (80030e0 <HAL_I2C_Init+0x278>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf94      	ite	ls
 8002ee4:	2301      	movls	r3, #1
 8002ee6:	2300      	movhi	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e006      	b.n	8002efa <HAL_I2C_Init+0x92>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a7d      	ldr	r2, [pc, #500]	@ (80030e4 <HAL_I2C_Init+0x27c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bf94      	ite	ls
 8002ef4:	2301      	movls	r3, #1
 8002ef6:	2300      	movhi	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0e7      	b.n	80030d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a78      	ldr	r2, [pc, #480]	@ (80030e8 <HAL_I2C_Init+0x280>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a6a      	ldr	r2, [pc, #424]	@ (80030dc <HAL_I2C_Init+0x274>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d802      	bhi.n	8002f3c <HAL_I2C_Init+0xd4>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	e009      	b.n	8002f50 <HAL_I2C_Init+0xe8>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	4a69      	ldr	r2, [pc, #420]	@ (80030ec <HAL_I2C_Init+0x284>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	3301      	adds	r3, #1
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	495c      	ldr	r1, [pc, #368]	@ (80030dc <HAL_I2C_Init+0x274>)
 8002f6c:	428b      	cmp	r3, r1
 8002f6e:	d819      	bhi.n	8002fa4 <HAL_I2C_Init+0x13c>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e59      	subs	r1, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7e:	1c59      	adds	r1, r3, #1
 8002f80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f84:	400b      	ands	r3, r1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_I2C_Init+0x138>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e59      	subs	r1, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9e:	e051      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	e04f      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d111      	bne.n	8002fd0 <HAL_I2C_Init+0x168>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e012      	b.n	8002ff6 <HAL_I2C_Init+0x18e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	0099      	lsls	r1, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Init+0x196>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e022      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10e      	bne.n	8003024 <HAL_I2C_Init+0x1bc>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1e58      	subs	r0, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	440b      	add	r3, r1
 8003014:	fbb0 f3f3 	udiv	r3, r0, r3
 8003018:	3301      	adds	r3, #1
 800301a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003022:	e00f      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	6809      	ldr	r1, [r1, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003072:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6911      	ldr	r1, [r2, #16]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68d2      	ldr	r2, [r2, #12]
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	000186a0 	.word	0x000186a0
 80030e0:	001e847f 	.word	0x001e847f
 80030e4:	003d08ff 	.word	0x003d08ff
 80030e8:	431bde83 	.word	0x431bde83
 80030ec:	10624dd3 	.word	0x10624dd3

080030f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	461a      	mov	r2, r3
 80030fc:	460b      	mov	r3, r1
 80030fe:	817b      	strh	r3, [r7, #10]
 8003100:	4613      	mov	r3, r2
 8003102:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff fb54 	bl	80027b0 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b20      	cmp	r3, #32
 8003114:	f040 80e0 	bne.w	80032d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2319      	movs	r3, #25
 800311e:	2201      	movs	r2, #1
 8003120:	4970      	ldr	r1, [pc, #448]	@ (80032e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fc9e 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
 8003130:	e0d3      	b.n	80032da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_I2C_Master_Transmit+0x50>
 800313c:	2302      	movs	r3, #2
 800313e:	e0cc      	b.n	80032da <HAL_I2C_Master_Transmit+0x1ea>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d007      	beq.n	8003166 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003174:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2221      	movs	r2, #33	@ 0x21
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2210      	movs	r2, #16
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	893a      	ldrh	r2, [r7, #8]
 8003196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a50      	ldr	r2, [pc, #320]	@ (80032e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80031a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031a8:	8979      	ldrh	r1, [r7, #10]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fb08 	bl	80037c4 <I2C_MasterRequestWrite>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e08d      	b.n	80032da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031d4:	e066      	b.n	80032a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	6a39      	ldr	r1, [r7, #32]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fd5c 	bl	8003c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d107      	bne.n	80031fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06b      	b.n	80032da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b04      	cmp	r3, #4
 800323e:	d11b      	bne.n	8003278 <HAL_I2C_Master_Transmit+0x188>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	6a39      	ldr	r1, [r7, #32]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fd53 	bl	8003d28 <I2C_WaitOnBTFFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	2b04      	cmp	r3, #4
 800328e:	d107      	bne.n	80032a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e01a      	b.n	80032da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d194      	bne.n	80031d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	00100002 	.word	0x00100002
 80032e8:	ffff0000 	.word	0xffff0000

080032ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	@ 0x30
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	460b      	mov	r3, r1
 80032fa:	817b      	strh	r3, [r7, #10]
 80032fc:	4613      	mov	r3, r2
 80032fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff fa54 	bl	80027b0 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	f040 824b 	bne.w	80037ae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2319      	movs	r3, #25
 800331e:	2201      	movs	r2, #1
 8003320:	497f      	ldr	r1, [pc, #508]	@ (8003520 <HAL_I2C_Master_Receive+0x234>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fb9e 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
 8003330:	e23e      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_I2C_Master_Receive+0x54>
 800333c:	2302      	movs	r3, #2
 800333e:	e237      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d007      	beq.n	8003366 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003374:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2222      	movs	r2, #34	@ 0x22
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2210      	movs	r2, #16
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	893a      	ldrh	r2, [r7, #8]
 8003396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003524 <HAL_I2C_Master_Receive+0x238>)
 80033a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033a8:	8979      	ldrh	r1, [r7, #10]
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa8a 	bl	80038c8 <I2C_MasterRequestRead>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e1f8      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d113      	bne.n	80033ee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e1cc      	b.n	8003788 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d11e      	bne.n	8003434 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003406:	b672      	cpsid	i
}
 8003408:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003430:	b662      	cpsie	i
}
 8003432:	e035      	b.n	80034a0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	2b02      	cmp	r3, #2
 800343a:	d11e      	bne.n	800347a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800344c:	b672      	cpsid	i
}
 800344e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003474:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003476:	b662      	cpsie	i
}
 8003478:	e012      	b.n	80034a0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034a0:	e172      	b.n	8003788 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	f200 811f 	bhi.w	80036ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d123      	bne.n	80034fc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fc7d 	bl	8003db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e173      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034fa:	e145      	b.n	8003788 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	2b02      	cmp	r3, #2
 8003502:	d152      	bne.n	80035aa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	4906      	ldr	r1, [pc, #24]	@ (8003528 <HAL_I2C_Master_Receive+0x23c>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 faa8 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e148      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
 800351e:	bf00      	nop
 8003520:	00100002 	.word	0x00100002
 8003524:	ffff0000 	.word	0xffff0000
 8003528:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800352c:	b672      	cpsid	i
}
 800352e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003572:	b662      	cpsie	i
}
 8003574:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a8:	e0ee      	b.n	8003788 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	2200      	movs	r2, #0
 80035b2:	4981      	ldr	r1, [pc, #516]	@ (80037b8 <HAL_I2C_Master_Receive+0x4cc>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fa55 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0f5      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035d4:	b672      	cpsid	i
}
 80035d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800360a:	4b6c      	ldr	r3, [pc, #432]	@ (80037bc <HAL_I2C_Master_Receive+0x4d0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	08db      	lsrs	r3, r3, #3
 8003610:	4a6b      	ldr	r2, [pc, #428]	@ (80037c0 <HAL_I2C_Master_Receive+0x4d4>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0a1a      	lsrs	r2, r3, #8
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00da      	lsls	r2, r3, #3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	3b01      	subs	r3, #1
 8003628:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d118      	bne.n	8003662 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003652:	b662      	cpsie	i
}
 8003654:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e0a6      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d1d9      	bne.n	8003624 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036b2:	b662      	cpsie	i
}
 80036b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e8:	e04e      	b.n	8003788 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fb62 	bl	8003db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e058      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d124      	bne.n	8003788 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	2b03      	cmp	r3, #3
 8003744:	d107      	bne.n	8003756 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003754:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	f47f ae88 	bne.w	80034a2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3728      	adds	r7, #40	@ 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	00010004 	.word	0x00010004
 80037bc:	20000014 	.word	0x20000014
 80037c0:	14f8b589 	.word	0x14f8b589

080037c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	460b      	mov	r3, r1
 80037d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d006      	beq.n	80037ee <I2C_MasterRequestWrite+0x2a>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d003      	beq.n	80037ee <I2C_MasterRequestWrite+0x2a>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037ec:	d108      	bne.n	8003800 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e00b      	b.n	8003818 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	2b12      	cmp	r3, #18
 8003806:	d107      	bne.n	8003818 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003816:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f91d 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383e:	d103      	bne.n	8003848 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e035      	b.n	80038b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003854:	d108      	bne.n	8003868 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003864:	611a      	str	r2, [r3, #16]
 8003866:	e01b      	b.n	80038a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003868:	897b      	ldrh	r3, [r7, #10]
 800386a:	11db      	asrs	r3, r3, #7
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0306 	and.w	r3, r3, #6
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f063 030f 	orn	r3, r3, #15
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	490e      	ldr	r1, [pc, #56]	@ (80038c0 <I2C_MasterRequestWrite+0xfc>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f966 	bl	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e010      	b.n	80038b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003896:	897b      	ldrh	r3, [r7, #10]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4907      	ldr	r1, [pc, #28]	@ (80038c4 <I2C_MasterRequestWrite+0x100>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f956 	bl	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00010008 	.word	0x00010008
 80038c4:	00010002 	.word	0x00010002

080038c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	460b      	mov	r3, r1
 80038d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d006      	beq.n	8003902 <I2C_MasterRequestRead+0x3a>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d003      	beq.n	8003902 <I2C_MasterRequestRead+0x3a>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003900:	d108      	bne.n	8003914 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e00b      	b.n	800392c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	2b11      	cmp	r3, #17
 800391a:	d107      	bne.n	800392c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800392a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f893 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003952:	d103      	bne.n	800395c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e079      	b.n	8003a54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003968:	d108      	bne.n	800397c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]
 800397a:	e05f      	b.n	8003a3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	11db      	asrs	r3, r3, #7
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 0306 	and.w	r3, r3, #6
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f063 030f 	orn	r3, r3, #15
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4930      	ldr	r1, [pc, #192]	@ (8003a5c <I2C_MasterRequestRead+0x194>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f8dc 	bl	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e054      	b.n	8003a54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039aa:	897b      	ldrh	r3, [r7, #10]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4929      	ldr	r1, [pc, #164]	@ (8003a60 <I2C_MasterRequestRead+0x198>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f8cc 	bl	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e044      	b.n	8003a54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f831 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a16:	d103      	bne.n	8003a20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e017      	b.n	8003a54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a24:	897b      	ldrh	r3, [r7, #10]
 8003a26:	11db      	asrs	r3, r3, #7
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 0306 	and.w	r3, r3, #6
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f063 030e 	orn	r3, r3, #14
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4907      	ldr	r1, [pc, #28]	@ (8003a60 <I2C_MasterRequestRead+0x198>)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f888 	bl	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	00010008 	.word	0x00010008
 8003a60:	00010002 	.word	0x00010002

08003a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a74:	e048      	b.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d044      	beq.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7fe fe97 	bl	80027b0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d139      	bne.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	0c1b      	lsrs	r3, r3, #16
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10d      	bne.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	e00c      	b.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d116      	bne.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e023      	b.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10d      	bne.n	8003b2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	e00c      	b.n	8003b48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	43da      	mvns	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d093      	beq.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b66:	e071      	b.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b76:	d123      	bne.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e067      	b.n	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d041      	beq.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc8:	f7fe fdf2 	bl	80027b0 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d302      	bcc.n	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d136      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10c      	bne.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	e00b      	b.n	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	f043 0220 	orr.w	r2, r3, #32
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e021      	b.n	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	0c1b      	lsrs	r3, r3, #16
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10c      	bne.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e00b      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f47f af6d 	bne.w	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca4:	e034      	b.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f8e3 	bl	8003e72 <I2C_IsAcknowledgeFailed>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e034      	b.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d028      	beq.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbe:	f7fe fd77 	bl	80027b0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d302      	bcc.n	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d11d      	bne.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cde:	2b80      	cmp	r3, #128	@ 0x80
 8003ce0:	d016      	beq.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e007      	b.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d1c3      	bne.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d34:	e034      	b.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f89b 	bl	8003e72 <I2C_IsAcknowledgeFailed>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e034      	b.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d028      	beq.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe fd2f 	bl	80027b0 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11d      	bne.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d016      	beq.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e007      	b.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d1c3      	bne.n	8003d36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dc4:	e049      	b.n	8003e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d119      	bne.n	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0210 	mvn.w	r2, #16
 8003ddc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e030      	b.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e08:	f7fe fcd2 	bl	80027b0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d11d      	bne.n	8003e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d016      	beq.n	8003e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e64:	2b40      	cmp	r3, #64	@ 0x40
 8003e66:	d1ae      	bne.n	8003dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e88:	d11b      	bne.n	8003ec2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e272      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8087 	beq.w	8003ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef0:	4b92      	ldr	r3, [pc, #584]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d00c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003efc:	4b8f      	ldr	r3, [pc, #572]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d112      	bne.n	8003f2e <HAL_RCC_OscConfig+0x5e>
 8003f08:	4b8c      	ldr	r3, [pc, #560]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f16:	4b89      	ldr	r3, [pc, #548]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d06c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x12c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d168      	bne.n	8003ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e24c      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x76>
 8003f38:	4b80      	ldr	r3, [pc, #512]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a7f      	ldr	r2, [pc, #508]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e02e      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x98>
 8003f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7a      	ldr	r2, [pc, #488]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b78      	ldr	r3, [pc, #480]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a77      	ldr	r2, [pc, #476]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0xbc>
 8003f72:	4b72      	ldr	r3, [pc, #456]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a71      	ldr	r2, [pc, #452]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6e      	ldr	r2, [pc, #440]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a6a      	ldr	r2, [pc, #424]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b68      	ldr	r3, [pc, #416]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a67      	ldr	r2, [pc, #412]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fc00 	bl	80027b0 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fe fbfc 	bl	80027b0 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	@ 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e200      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xe4>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fbec 	bl	80027b0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe fbe8 	bl	80027b0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	@ 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1ec      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	4b53      	ldr	r3, [pc, #332]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x10c>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d063      	beq.n	80040d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800400a:	4b4c      	ldr	r3, [pc, #304]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004016:	4b49      	ldr	r3, [pc, #292]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b08      	cmp	r3, #8
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x18c>
 8004022:	4b46      	ldr	r3, [pc, #280]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x176>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1c0      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b3d      	ldr	r3, [pc, #244]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4939      	ldr	r1, [pc, #228]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	e03a      	b.n	80040d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004064:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <HAL_RCC_OscConfig+0x270>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fe fba1 	bl	80027b0 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004072:	f7fe fb9d 	bl	80027b0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1a1      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	4b2d      	ldr	r3, [pc, #180]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b2a      	ldr	r3, [pc, #168]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4927      	ldr	r1, [pc, #156]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <HAL_RCC_OscConfig+0x270>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fb80 	bl	80027b0 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fe fb7c 	bl	80027b0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e180      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03a      	beq.n	8004154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b17      	ldr	r3, [pc, #92]	@ (8004144 <HAL_RCC_OscConfig+0x274>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ec:	f7fe fb60 	bl	80027b0 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fe fb5c 	bl	80027b0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e160      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <HAL_RCC_OscConfig+0x26c>)
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004112:	2001      	movs	r0, #1
 8004114:	f000 fafe 	bl	8004714 <RCC_Delay>
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_RCC_OscConfig+0x274>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004120:	f7fe fb46 	bl	80027b0 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004126:	e00f      	b.n	8004148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004128:	f7fe fb42 	bl	80027b0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d908      	bls.n	8004148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e146      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	42420000 	.word	0x42420000
 8004144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	4b92      	ldr	r3, [pc, #584]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e9      	bne.n	8004128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a6 	beq.w	80042ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b8b      	ldr	r3, [pc, #556]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	4b88      	ldr	r3, [pc, #544]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4a87      	ldr	r2, [pc, #540]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800417c:	61d3      	str	r3, [r2, #28]
 800417e:	4b85      	ldr	r3, [pc, #532]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418e:	4b82      	ldr	r3, [pc, #520]	@ (8004398 <HAL_RCC_OscConfig+0x4c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d118      	bne.n	80041cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419a:	4b7f      	ldr	r3, [pc, #508]	@ (8004398 <HAL_RCC_OscConfig+0x4c8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7e      	ldr	r2, [pc, #504]	@ (8004398 <HAL_RCC_OscConfig+0x4c8>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a6:	f7fe fb03 	bl	80027b0 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fe faff 	bl	80027b0 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b64      	cmp	r3, #100	@ 0x64
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e103      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	4b75      	ldr	r3, [pc, #468]	@ (8004398 <HAL_RCC_OscConfig+0x4c8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x312>
 80041d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	e02d      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x334>
 80041ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4a69      	ldr	r2, [pc, #420]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	6213      	str	r3, [r2, #32]
 80041f6:	4b67      	ldr	r3, [pc, #412]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4a66      	ldr	r2, [pc, #408]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	6213      	str	r3, [r2, #32]
 8004202:	e01c      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_OscConfig+0x356>
 800420c:	4b61      	ldr	r3, [pc, #388]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a60      	ldr	r2, [pc, #384]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	4b5e      	ldr	r3, [pc, #376]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a5d      	ldr	r2, [pc, #372]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6213      	str	r3, [r2, #32]
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 8004226:	4b5b      	ldr	r3, [pc, #364]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4a5a      	ldr	r2, [pc, #360]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6213      	str	r3, [r2, #32]
 8004232:	4b58      	ldr	r3, [pc, #352]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4a57      	ldr	r2, [pc, #348]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d015      	beq.n	8004272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fe fab3 	bl	80027b0 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fe faaf 	bl	80027b0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0b1      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	4b4b      	ldr	r3, [pc, #300]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ee      	beq.n	800424e <HAL_RCC_OscConfig+0x37e>
 8004270:	e014      	b.n	800429c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fe fa9d 	bl	80027b0 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fe fa99 	bl	80027b0 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e09b      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	4b40      	ldr	r3, [pc, #256]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ee      	bne.n	800427a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8087 	beq.w	80043c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b8:	4b36      	ldr	r3, [pc, #216]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d061      	beq.n	8004388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d146      	bne.n	800435a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b33      	ldr	r3, [pc, #204]	@ (800439c <HAL_RCC_OscConfig+0x4cc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fe fa6d 	bl	80027b0 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042da:	f7fe fa69 	bl	80027b0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e06d      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ec:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d108      	bne.n	8004314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004302:	4b24      	ldr	r3, [pc, #144]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	4921      	ldr	r1, [pc, #132]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004314:	4b1f      	ldr	r3, [pc, #124]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a19      	ldr	r1, [r3, #32]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	430b      	orrs	r3, r1
 8004326:	491b      	ldr	r1, [pc, #108]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <HAL_RCC_OscConfig+0x4cc>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fe fa3d 	bl	80027b0 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe fa39 	bl	80027b0 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e03d      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800434c:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x46a>
 8004358:	e035      	b.n	80043c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <HAL_RCC_OscConfig+0x4cc>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe fa26 	bl	80027b0 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe fa22 	bl	80027b0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e026      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437a:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x498>
 8004386:	e01e      	b.n	80043c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e019      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
 800439c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCC_OscConfig+0x500>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d106      	bne.n	80043c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000

080043d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0d0      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d910      	bls.n	8004418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b67      	ldr	r3, [pc, #412]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 0207 	bic.w	r2, r3, #7
 80043fe:	4965      	ldr	r1, [pc, #404]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b63      	ldr	r3, [pc, #396]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0b8      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004430:	4b59      	ldr	r3, [pc, #356]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a58      	ldr	r2, [pc, #352]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800443a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004448:	4b53      	ldr	r3, [pc, #332]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a52      	ldr	r2, [pc, #328]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800444e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004454:	4b50      	ldr	r3, [pc, #320]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	494d      	ldr	r1, [pc, #308]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d040      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b47      	ldr	r3, [pc, #284]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d115      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07f      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004492:	4b41      	ldr	r3, [pc, #260]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e073      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06b      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044b2:	4b39      	ldr	r3, [pc, #228]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f023 0203 	bic.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4936      	ldr	r1, [pc, #216]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c4:	f7fe f974 	bl	80027b0 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fe f970 	bl	80027b0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e053      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 020c 	and.w	r2, r3, #12
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1eb      	bne.n	80044cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f4:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d210      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 0207 	bic.w	r2, r3, #7
 800450a:	4922      	ldr	r1, [pc, #136]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e032      	b.n	800458a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004530:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4916      	ldr	r1, [pc, #88]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800454e:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	490e      	ldr	r1, [pc, #56]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004562:	f000 f821 	bl	80045a8 <HAL_RCC_GetSysClockFreq>
 8004566:	4602      	mov	r2, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	490a      	ldr	r1, [pc, #40]	@ (800459c <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	5ccb      	ldrb	r3, [r1, r3]
 8004576:	fa22 f303 	lsr.w	r3, r2, r3
 800457a:	4a09      	ldr	r2, [pc, #36]	@ (80045a0 <HAL_RCC_ClockConfig+0x1cc>)
 800457c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800457e:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd ff5e 	bl	8002444 <HAL_InitTick>

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40022000 	.word	0x40022000
 8004598:	40021000 	.word	0x40021000
 800459c:	0800de4c 	.word	0x0800de4c
 80045a0:	20000014 	.word	0x20000014
 80045a4:	20000018 	.word	0x20000018

080045a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045c2:	4b1e      	ldr	r3, [pc, #120]	@ (800463c <HAL_RCC_GetSysClockFreq+0x94>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d002      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x30>
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d003      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x36>
 80045d6:	e027      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d8:	4b19      	ldr	r3, [pc, #100]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x98>)
 80045da:	613b      	str	r3, [r7, #16]
      break;
 80045dc:	e027      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	0c9b      	lsrs	r3, r3, #18
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	4a17      	ldr	r2, [pc, #92]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045e8:	5cd3      	ldrb	r3, [r2, r3]
 80045ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045f6:	4b11      	ldr	r3, [pc, #68]	@ (800463c <HAL_RCC_GetSysClockFreq+0x94>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	0c5b      	lsrs	r3, r3, #17
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	4a11      	ldr	r2, [pc, #68]	@ (8004648 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a0d      	ldr	r2, [pc, #52]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x98>)
 800460a:	fb03 f202 	mul.w	r2, r3, r2
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e004      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0c      	ldr	r2, [pc, #48]	@ (800464c <HAL_RCC_GetSysClockFreq+0xa4>)
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	613b      	str	r3, [r7, #16]
      break;
 8004626:	e002      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x98>)
 800462a:	613b      	str	r3, [r7, #16]
      break;
 800462c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462e:	693b      	ldr	r3, [r7, #16]
}
 8004630:	4618      	mov	r0, r3
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
 8004640:	007a1200 	.word	0x007a1200
 8004644:	0800de64 	.word	0x0800de64
 8004648:	0800de74 	.word	0x0800de74
 800464c:	003d0900 	.word	0x003d0900

08004650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004654:	4b02      	ldr	r3, [pc, #8]	@ (8004660 <HAL_RCC_GetHCLKFreq+0x10>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	20000014 	.word	0x20000014

08004664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004668:	f7ff fff2 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	4903      	ldr	r1, [pc, #12]	@ (8004688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	0800de5c 	.word	0x0800de5c

0800468c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004690:	f7ff ffde 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0adb      	lsrs	r3, r3, #11
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4903      	ldr	r1, [pc, #12]	@ (80046b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	0800de5c 	.word	0x0800de5c

080046b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	220f      	movs	r2, #15
 80046c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <HAL_RCC_GetClockConfig+0x58>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0203 	and.w	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046d0:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <HAL_RCC_GetClockConfig+0x58>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_GetClockConfig+0x58>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046e8:	4b08      	ldr	r3, [pc, #32]	@ (800470c <HAL_RCC_GetClockConfig+0x58>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046f6:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_RCC_GetClockConfig+0x5c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0207 	and.w	r2, r3, #7
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	40021000 	.word	0x40021000
 8004710:	40022000 	.word	0x40022000

08004714 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800471c:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <RCC_Delay+0x34>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0a      	ldr	r2, [pc, #40]	@ (800474c <RCC_Delay+0x38>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0a5b      	lsrs	r3, r3, #9
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004730:	bf00      	nop
  }
  while (Delay --);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1e5a      	subs	r2, r3, #1
 8004736:	60fa      	str	r2, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f9      	bne.n	8004730 <RCC_Delay+0x1c>
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	20000014 	.word	0x20000014
 800474c:	10624dd3 	.word	0x10624dd3

08004750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e041      	b.n	80047e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fd fdc4 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f000 fc18 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e03a      	b.n	800487e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_TIM_Base_Start_IT+0x98>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x58>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004832:	d009      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x58>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a14      	ldr	r2, [pc, #80]	@ (800488c <HAL_TIM_Base_Start_IT+0x9c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x58>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a13      	ldr	r2, [pc, #76]	@ (8004890 <HAL_TIM_Base_Start_IT+0xa0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d111      	bne.n	800486c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d010      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	e007      	b.n	800487c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800

08004894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e041      	b.n	800492a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f839 	bl	8004932 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f000 fb76 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_TIM_PWM_Start+0x24>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e022      	b.n	80049ae <HAL_TIM_PWM_Start+0x6a>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d109      	bne.n	8004982 <HAL_TIM_PWM_Start+0x3e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e015      	b.n	80049ae <HAL_TIM_PWM_Start+0x6a>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d109      	bne.n	800499c <HAL_TIM_PWM_Start+0x58>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e008      	b.n	80049ae <HAL_TIM_PWM_Start+0x6a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e05e      	b.n	8004a74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0x82>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c4:	e013      	b.n	80049ee <HAL_TIM_PWM_Start+0xaa>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0x92>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d4:	e00b      	b.n	80049ee <HAL_TIM_PWM_Start+0xaa>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0xa2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e4:	e003      	b.n	80049ee <HAL_TIM_PWM_Start+0xaa>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fd70 	bl	80054dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1e      	ldr	r2, [pc, #120]	@ (8004a7c <HAL_TIM_PWM_Start+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d107      	bne.n	8004a16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a18      	ldr	r2, [pc, #96]	@ (8004a7c <HAL_TIM_PWM_Start+0x138>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIM_PWM_Start+0xfa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a28:	d009      	beq.n	8004a3e <HAL_TIM_PWM_Start+0xfa>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a14      	ldr	r2, [pc, #80]	@ (8004a80 <HAL_TIM_PWM_Start+0x13c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIM_PWM_Start+0xfa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a12      	ldr	r2, [pc, #72]	@ (8004a84 <HAL_TIM_PWM_Start+0x140>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d111      	bne.n	8004a62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b06      	cmp	r3, #6
 8004a4e:	d010      	beq.n	8004a72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	e007      	b.n	8004a72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800

08004a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d020      	beq.n	8004aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0202 	mvn.w	r2, #2
 8004abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa5a 	bl	8004f8c <HAL_TIM_IC_CaptureCallback>
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa4d 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fa5c 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0204 	mvn.w	r2, #4
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa34 	bl	8004f8c <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa27 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa36 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0208 	mvn.w	r2, #8
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa0e 	bl	8004f8c <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa01 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fa10 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0210 	mvn.w	r2, #16
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9e8 	bl	8004f8c <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9db 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f9ea 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0201 	mvn.w	r2, #1
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd facc 	bl	800218c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fced 	bl	80055f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9ba 	bl	8004fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0220 	mvn.w	r2, #32
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fcc0 	bl	80055e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e0ae      	b.n	8004de4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b0c      	cmp	r3, #12
 8004c92:	f200 809f 	bhi.w	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c96:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004cd1 	.word	0x08004cd1
 8004ca0:	08004dd5 	.word	0x08004dd5
 8004ca4:	08004dd5 	.word	0x08004dd5
 8004ca8:	08004dd5 	.word	0x08004dd5
 8004cac:	08004d11 	.word	0x08004d11
 8004cb0:	08004dd5 	.word	0x08004dd5
 8004cb4:	08004dd5 	.word	0x08004dd5
 8004cb8:	08004dd5 	.word	0x08004dd5
 8004cbc:	08004d53 	.word	0x08004d53
 8004cc0:	08004dd5 	.word	0x08004dd5
 8004cc4:	08004dd5 	.word	0x08004dd5
 8004cc8:	08004dd5 	.word	0x08004dd5
 8004ccc:	08004d93 	.word	0x08004d93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f9e2 	bl	80050a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0208 	orr.w	r2, r2, #8
 8004cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0204 	bic.w	r2, r2, #4
 8004cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6999      	ldr	r1, [r3, #24]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	619a      	str	r2, [r3, #24]
      break;
 8004d0e:	e064      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fa28 	bl	800516c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6999      	ldr	r1, [r3, #24]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	021a      	lsls	r2, r3, #8
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	619a      	str	r2, [r3, #24]
      break;
 8004d50:	e043      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fa71 	bl	8005240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0208 	orr.w	r2, r2, #8
 8004d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0204 	bic.w	r2, r2, #4
 8004d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69d9      	ldr	r1, [r3, #28]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	61da      	str	r2, [r3, #28]
      break;
 8004d90:	e023      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fabb 	bl	8005314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69d9      	ldr	r1, [r3, #28]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	021a      	lsls	r2, r3, #8
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	61da      	str	r2, [r3, #28]
      break;
 8004dd2:	e002      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_TIM_ConfigClockSource+0x1c>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e0b4      	b.n	8004f72 <HAL_TIM_ConfigClockSource+0x186>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e40:	d03e      	beq.n	8004ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e46:	f200 8087 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e4e:	f000 8086 	beq.w	8004f5e <HAL_TIM_ConfigClockSource+0x172>
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e56:	d87f      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b70      	cmp	r3, #112	@ 0x70
 8004e5a:	d01a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xa6>
 8004e5c:	2b70      	cmp	r3, #112	@ 0x70
 8004e5e:	d87b      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b60      	cmp	r3, #96	@ 0x60
 8004e62:	d050      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x11a>
 8004e64:	2b60      	cmp	r3, #96	@ 0x60
 8004e66:	d877      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b50      	cmp	r3, #80	@ 0x50
 8004e6a:	d03c      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e6c:	2b50      	cmp	r3, #80	@ 0x50
 8004e6e:	d873      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b40      	cmp	r3, #64	@ 0x40
 8004e72:	d058      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x13a>
 8004e74:	2b40      	cmp	r3, #64	@ 0x40
 8004e76:	d86f      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b30      	cmp	r3, #48	@ 0x30
 8004e7a:	d064      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7c:	2b30      	cmp	r3, #48	@ 0x30
 8004e7e:	d86b      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d060      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d867      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d05c      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d05a      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	e062      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea2:	f000 fafc 	bl	800549e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	609a      	str	r2, [r3, #8]
      break;
 8004ebe:	e04f      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ed0:	f000 fae5 	bl	800549e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ee2:	609a      	str	r2, [r3, #8]
      break;
 8004ee4:	e03c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f000 fa5c 	bl	80053b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2150      	movs	r1, #80	@ 0x50
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fab3 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004f04:	e02c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f12:	461a      	mov	r2, r3
 8004f14:	f000 fa7a 	bl	800540c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2160      	movs	r1, #96	@ 0x60
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 faa3 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004f24:	e01c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f32:	461a      	mov	r2, r3
 8004f34:	f000 fa3c 	bl	80053b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2140      	movs	r1, #64	@ 0x40
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fa93 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004f44:	e00c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 fa8a 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004f56:	e003      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	e000      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
	...

08004fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8005094 <TIM_Base_SetConfig+0xd0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_Base_SetConfig+0x30>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe2:	d007      	beq.n	8004ff4 <TIM_Base_SetConfig+0x30>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <TIM_Base_SetConfig+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_Base_SetConfig+0x30>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	@ (800509c <TIM_Base_SetConfig+0xd8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d108      	bne.n	8005006 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a22      	ldr	r2, [pc, #136]	@ (8005094 <TIM_Base_SetConfig+0xd0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0x62>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0x62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1f      	ldr	r2, [pc, #124]	@ (8005098 <TIM_Base_SetConfig+0xd4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0x62>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <TIM_Base_SetConfig+0xd8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0d      	ldr	r2, [pc, #52]	@ (8005094 <TIM_Base_SetConfig+0xd0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]
  }
}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800

080050a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0201 	bic.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 0302 	bic.w	r3, r3, #2
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <TIM_OC1_SetConfig+0xc8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10c      	bne.n	8005116 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0308 	bic.w	r3, r3, #8
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <TIM_OC1_SetConfig+0xc8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d111      	bne.n	8005142 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	621a      	str	r2, [r3, #32]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40012c00 	.word	0x40012c00

0800516c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f023 0210 	bic.w	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 0320 	bic.w	r3, r3, #32
 80051b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1d      	ldr	r2, [pc, #116]	@ (800523c <TIM_OC2_SetConfig+0xd0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10d      	bne.n	80051e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a14      	ldr	r2, [pc, #80]	@ (800523c <TIM_OC2_SetConfig+0xd0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d113      	bne.n	8005218 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr
 800523c:	40012c00 	.word	0x40012c00

08005240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1d      	ldr	r2, [pc, #116]	@ (8005310 <TIM_OC3_SetConfig+0xd0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10d      	bne.n	80052ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <TIM_OC3_SetConfig+0xd0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d113      	bne.n	80052ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00

08005314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800535e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	031b      	lsls	r3, r3, #12
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a0f      	ldr	r2, [pc, #60]	@ (80053ac <TIM_OC4_SetConfig+0x98>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d109      	bne.n	8005388 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	40012c00 	.word	0x40012c00

080053b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 030a 	bic.w	r3, r3, #10
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f023 0210 	bic.w	r2, r3, #16
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	031b      	lsls	r3, r3, #12
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005448:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	621a      	str	r2, [r3, #32]
}
 8005460:	bf00      	nop
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	f043 0307 	orr.w	r3, r3, #7
 800548c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800549e:	b480      	push	{r7}
 80054a0:	b087      	sub	sp, #28
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	021a      	lsls	r2, r3, #8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	609a      	str	r2, [r3, #8]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2201      	movs	r2, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	401a      	ands	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	fa01 f303 	lsl.w	r3, r1, r3
 8005514:	431a      	orrs	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e046      	b.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005588:	d009      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d10c      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800

080055e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e042      	b.n	800569c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc feb6 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	@ 0x24
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fdb7 	bl	80061bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800565c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800566c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800567c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	@ 0x28
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d175      	bne.n	80057b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_UART_Transmit+0x2c>
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e06e      	b.n	80057b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2221      	movs	r2, #33	@ 0x21
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056e2:	f7fd f865 	bl	80027b0 <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fc:	d108      	bne.n	8005710 <HAL_UART_Transmit+0x6c>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e003      	b.n	8005718 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005718:	e02e      	b.n	8005778 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2180      	movs	r1, #128	@ 0x80
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fb1c 	bl	8005d62 <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e03a      	b.n	80057b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3302      	adds	r3, #2
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e007      	b.n	800576a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3301      	adds	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1cb      	bne.n	800571a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2200      	movs	r2, #0
 800578a:	2140      	movs	r1, #64	@ 0x40
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fae8 	bl	8005d62 <UART_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e006      	b.n	80057b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	4613      	mov	r3, r2
 80057c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d112      	bne.n	80057fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_UART_Receive_IT+0x26>
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e00b      	b.n	80057fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	461a      	mov	r2, r3
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fb0f 	bl	8005e14 <UART_Start_Receive_IT>
 80057f6:	4603      	mov	r3, r0
 80057f8:	e000      	b.n	80057fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b0ba      	sub	sp, #232	@ 0xe8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800582a:	2300      	movs	r3, #0
 800582c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10f      	bne.n	800586a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_UART_IRQHandler+0x66>
 8005856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fbec 	bl	8006040 <UART_Receive_IT>
      return;
 8005868:	e25b      	b.n	8005d22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800586a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80de 	beq.w	8005a30 <HAL_UART_IRQHandler+0x22c>
 8005874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005884:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 80d1 	beq.w	8005a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_UART_IRQHandler+0xae>
 800589a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800589e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <HAL_UART_IRQHandler+0xd2>
 80058be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f043 0202 	orr.w	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_UART_IRQHandler+0xf6>
 80058e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d011      	beq.n	800592a <HAL_UART_IRQHandler+0x126>
 8005906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d105      	bne.n	800591e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005922:	f043 0208 	orr.w	r2, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 81f2 	beq.w	8005d18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_UART_IRQHandler+0x14e>
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb77 	bl	8006040 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <HAL_UART_IRQHandler+0x17a>
 8005976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d04f      	beq.n	8005a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa81 	bl	8005e86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d041      	beq.n	8005a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1d9      	bne.n	8005992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d013      	beq.n	8005a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	4a7e      	ldr	r2, [pc, #504]	@ (8005be4 <HAL_UART_IRQHandler+0x3e0>)
 80059ec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fd f824 	bl	8002a40 <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e00e      	b.n	8005a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f993 	bl	8005d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	e00a      	b.n	8005a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f98f 	bl	8005d3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1c:	e006      	b.n	8005a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f98b 	bl	8005d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a2a:	e175      	b.n	8005d18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	bf00      	nop
    return;
 8005a2e:	e173      	b.n	8005d18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	f040 814f 	bne.w	8005cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8148 	beq.w	8005cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8141 	beq.w	8005cd8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80b6 	beq.w	8005be8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8145 	beq.w	8005d1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	f080 813e 	bcs.w	8005d1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	f000 8088 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ace:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ae0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005aec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1d9      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3314      	adds	r3, #20
 8005b06:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b24:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e1      	bne.n	8005b00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3314      	adds	r3, #20
 8005b5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b60:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b62:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e3      	bne.n	8005b3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ba6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ba8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e3      	bne.n	8005b82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fc ff03 	bl	80029ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8b6 	bl	8005d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005be0:	e09c      	b.n	8005d1c <HAL_UART_IRQHandler+0x518>
 8005be2:	bf00      	nop
 8005be4:	08005f4b 	.word	0x08005f4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 808e 	beq.w	8005d20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8089 	beq.w	8005d20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c32:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e3      	bne.n	8005c0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	623b      	str	r3, [r7, #32]
   return(result);
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3314      	adds	r3, #20
 8005c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e3      	bne.n	8005c46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	330c      	adds	r3, #12
 8005c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0310 	bic.w	r3, r3, #16
 8005ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005cb0:	61fa      	str	r2, [r7, #28]
 8005cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	69b9      	ldr	r1, [r7, #24]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e3      	bne.n	8005c8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f83b 	bl	8005d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cd6:	e023      	b.n	8005d20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <HAL_UART_IRQHandler+0x4f4>
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f93e 	bl	8005f72 <UART_Transmit_IT>
    return;
 8005cf6:	e014      	b.n	8005d22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00e      	beq.n	8005d22 <HAL_UART_IRQHandler+0x51e>
 8005d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f97d 	bl	8006010 <UART_EndTransmit_IT>
    return;
 8005d16:	e004      	b.n	8005d22 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d18:	bf00      	nop
 8005d1a:	e002      	b.n	8005d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d1c:	bf00      	nop
 8005d1e:	e000      	b.n	8005d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d20:	bf00      	nop
  }
}
 8005d22:	37e8      	adds	r7, #232	@ 0xe8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b086      	sub	sp, #24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d72:	e03b      	b.n	8005dec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7a:	d037      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7c:	f7fc fd18 	bl	80027b0 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	6a3a      	ldr	r2, [r7, #32]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d302      	bcc.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e03a      	b.n	8005e0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d023      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b80      	cmp	r3, #128	@ 0x80
 8005da8:	d020      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b40      	cmp	r3, #64	@ 0x40
 8005dae:	d01d      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d116      	bne.n	8005dec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f856 	bl	8005e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e00f      	b.n	8005e0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d0b4      	beq.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2222      	movs	r2, #34	@ 0x22
 8005e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d007      	beq.n	8005e5a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0220 	orr.w	r2, r2, #32
 8005e78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr

08005e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b095      	sub	sp, #84	@ 0x54
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eae:	643a      	str	r2, [r7, #64]	@ 0x40
 8005eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d119      	bne.n	8005f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f023 0310 	bic.w	r3, r3, #16
 8005f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f1e:	61ba      	str	r2, [r7, #24]
 8005f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6979      	ldr	r1, [r7, #20]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e5      	bne.n	8005efe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f40:	bf00      	nop
 8005f42:	3754      	adds	r7, #84	@ 0x54
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff fee8 	bl	8005d3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b21      	cmp	r3, #33	@ 0x21
 8005f84:	d13e      	bne.n	8006004 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8e:	d114      	bne.n	8005fba <UART_Transmit_IT+0x48>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d110      	bne.n	8005fba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	1c9a      	adds	r2, r3, #2
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	621a      	str	r2, [r3, #32]
 8005fb8:	e008      	b.n	8005fcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6211      	str	r1, [r2, #32]
 8005fc4:	781a      	ldrb	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10f      	bne.n	8006000 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ffe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e000      	b.n	8006006 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006004:	2302      	movs	r3, #2
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006026:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff fe79 	bl	8005d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08c      	sub	sp, #48	@ 0x30
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b22      	cmp	r3, #34	@ 0x22
 8006052:	f040 80ae 	bne.w	80061b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605e:	d117      	bne.n	8006090 <UART_Receive_IT+0x50>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d113      	bne.n	8006090 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607e:	b29a      	uxth	r2, r3
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	629a      	str	r2, [r3, #40]	@ 0x28
 800608e:	e026      	b.n	80060de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060a2:	d007      	beq.n	80060b4 <UART_Receive_IT+0x74>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <UART_Receive_IT+0x82>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e008      	b.n	80060d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4619      	mov	r1, r3
 80060ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d15d      	bne.n	80061ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0220 	bic.w	r2, r2, #32
 8006100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006134:	2b01      	cmp	r3, #1
 8006136:	d135      	bne.n	80061a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f023 0310 	bic.w	r3, r3, #16
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615e:	623a      	str	r2, [r7, #32]
 8006160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	69f9      	ldr	r1, [r7, #28]
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	61bb      	str	r3, [r7, #24]
   return(result);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e5      	bne.n	800613e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b10      	cmp	r3, #16
 800617e:	d10a      	bne.n	8006196 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fdd5 	bl	8005d4c <HAL_UARTEx_RxEventCallback>
 80061a2:	e002      	b.n	80061aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fa ffc9 	bl	800113c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	e002      	b.n	80061b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3730      	adds	r7, #48	@ 0x30
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80061f6:	f023 030c 	bic.w	r3, r3, #12
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	430b      	orrs	r3, r1
 8006202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2c      	ldr	r2, [pc, #176]	@ (80062d0 <UART_SetConfig+0x114>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d103      	bne.n	800622c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006224:	f7fe fa32 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	e002      	b.n	8006232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800622c:	f7fe fa1a 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8006230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009a      	lsls	r2, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <UART_SetConfig+0x118>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	0119      	lsls	r1, r3, #4
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009a      	lsls	r2, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	fbb2 f2f3 	udiv	r2, r2, r3
 8006268:	4b1a      	ldr	r3, [pc, #104]	@ (80062d4 <UART_SetConfig+0x118>)
 800626a:	fba3 0302 	umull	r0, r3, r3, r2
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2064      	movs	r0, #100	@ 0x64
 8006272:	fb00 f303 	mul.w	r3, r0, r3
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	3332      	adds	r3, #50	@ 0x32
 800627c:	4a15      	ldr	r2, [pc, #84]	@ (80062d4 <UART_SetConfig+0x118>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006288:	4419      	add	r1, r3
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009a      	lsls	r2, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a0:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <UART_SetConfig+0x118>)
 80062a2:	fba3 0302 	umull	r0, r3, r3, r2
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2064      	movs	r0, #100	@ 0x64
 80062aa:	fb00 f303 	mul.w	r3, r0, r3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	3332      	adds	r3, #50	@ 0x32
 80062b4:	4a07      	ldr	r2, [pc, #28]	@ (80062d4 <UART_SetConfig+0x118>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	440a      	add	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40013800 	.word	0x40013800
 80062d4:	51eb851f 	.word	0x51eb851f

080062d8 <__NVIC_SetPriority>:
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	6039      	str	r1, [r7, #0]
 80062e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db0a      	blt.n	8006302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	490c      	ldr	r1, [pc, #48]	@ (8006324 <__NVIC_SetPriority+0x4c>)
 80062f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f6:	0112      	lsls	r2, r2, #4
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	440b      	add	r3, r1
 80062fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006300:	e00a      	b.n	8006318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	4908      	ldr	r1, [pc, #32]	@ (8006328 <__NVIC_SetPriority+0x50>)
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	3b04      	subs	r3, #4
 8006310:	0112      	lsls	r2, r2, #4
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	440b      	add	r3, r1
 8006316:	761a      	strb	r2, [r3, #24]
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000e100 	.word	0xe000e100
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006330:	4b05      	ldr	r3, [pc, #20]	@ (8006348 <SysTick_Handler+0x1c>)
 8006332:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006334:	f002 fed2 	bl	80090dc <xTaskGetSchedulerState>
 8006338:	4603      	mov	r3, r0
 800633a:	2b01      	cmp	r3, #1
 800633c:	d001      	beq.n	8006342 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800633e:	f003 fdab 	bl	8009e98 <xPortSysTickHandler>
  }
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	e000e010 	.word	0xe000e010

0800634c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006350:	2100      	movs	r1, #0
 8006352:	f06f 0004 	mvn.w	r0, #4
 8006356:	f7ff ffbf 	bl	80062d8 <__NVIC_SetPriority>
#endif
}
 800635a:	bf00      	nop
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006366:	f3ef 8305 	mrs	r3, IPSR
 800636a:	603b      	str	r3, [r7, #0]
  return(result);
 800636c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006372:	f06f 0305 	mvn.w	r3, #5
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	e00c      	b.n	8006394 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800637a:	4b09      	ldr	r3, [pc, #36]	@ (80063a0 <osKernelInitialize+0x40>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d105      	bne.n	800638e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006382:	4b07      	ldr	r3, [pc, #28]	@ (80063a0 <osKernelInitialize+0x40>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006388:	2300      	movs	r3, #0
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	e002      	b.n	8006394 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800638e:	f04f 33ff 	mov.w	r3, #4294967295
 8006392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006394:	687b      	ldr	r3, [r7, #4]
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr
 80063a0:	20000428 	.word	0x20000428

080063a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063aa:	f3ef 8305 	mrs	r3, IPSR
 80063ae:	603b      	str	r3, [r7, #0]
  return(result);
 80063b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <osKernelStart+0x1a>
    stat = osErrorISR;
 80063b6:	f06f 0305 	mvn.w	r3, #5
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	e010      	b.n	80063e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063be:	4b0b      	ldr	r3, [pc, #44]	@ (80063ec <osKernelStart+0x48>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d109      	bne.n	80063da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063c6:	f7ff ffc1 	bl	800634c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063ca:	4b08      	ldr	r3, [pc, #32]	@ (80063ec <osKernelStart+0x48>)
 80063cc:	2202      	movs	r2, #2
 80063ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063d0:	f002 f962 	bl	8008698 <vTaskStartScheduler>
      stat = osOK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	e002      	b.n	80063e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063e0:	687b      	ldr	r3, [r7, #4]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000428 	.word	0x20000428

080063f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f6:	f3ef 8305 	mrs	r3, IPSR
 80063fa:	603b      	str	r3, [r7, #0]
  return(result);
 80063fc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006402:	f002 fa73 	bl	80088ec <xTaskGetTickCountFromISR>
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	e002      	b.n	8006410 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800640a:	f002 fa61 	bl	80088d0 <xTaskGetTickCount>
 800640e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006410:	687b      	ldr	r3, [r7, #4]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800641a:	b580      	push	{r7, lr}
 800641c:	b08e      	sub	sp, #56	@ 0x38
 800641e:	af04      	add	r7, sp, #16
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800642a:	f3ef 8305 	mrs	r3, IPSR
 800642e:	617b      	str	r3, [r7, #20]
  return(result);
 8006430:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006432:	2b00      	cmp	r3, #0
 8006434:	d17e      	bne.n	8006534 <osThreadNew+0x11a>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d07b      	beq.n	8006534 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800643c:	2380      	movs	r3, #128	@ 0x80
 800643e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006440:	2318      	movs	r3, #24
 8006442:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006448:	f04f 33ff 	mov.w	r3, #4294967295
 800644c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d045      	beq.n	80064e0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <osThreadNew+0x48>
        name = attr->name;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <osThreadNew+0x6e>
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2b38      	cmp	r3, #56	@ 0x38
 800647a:	d805      	bhi.n	8006488 <osThreadNew+0x6e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <osThreadNew+0x72>
        return (NULL);
 8006488:	2300      	movs	r3, #0
 800648a:	e054      	b.n	8006536 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00e      	beq.n	80064c2 <osThreadNew+0xa8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2ba7      	cmp	r3, #167	@ 0xa7
 80064aa:	d90a      	bls.n	80064c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <osThreadNew+0xa8>
        mem = 1;
 80064bc:	2301      	movs	r3, #1
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e010      	b.n	80064e4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <osThreadNew+0xca>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d108      	bne.n	80064e4 <osThreadNew+0xca>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <osThreadNew+0xca>
          mem = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e001      	b.n	80064e4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d110      	bne.n	800650c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064f2:	9202      	str	r2, [sp, #8]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f001 fe8b 	bl	800821c <xTaskCreateStatic>
 8006506:	4603      	mov	r3, r0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	e013      	b.n	8006534 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d110      	bne.n	8006534 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	b29a      	uxth	r2, r3
 8006516:	f107 0310 	add.w	r3, r7, #16
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 fed9 	bl	80082dc <xTaskCreate>
 800652a:	4603      	mov	r3, r0
 800652c:	2b01      	cmp	r3, #1
 800652e:	d001      	beq.n	8006534 <osThreadNew+0x11a>
            hTask = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006534:	693b      	ldr	r3, [r7, #16]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3728      	adds	r7, #40	@ 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006546:	f3ef 8305 	mrs	r3, IPSR
 800654a:	60fb      	str	r3, [r7, #12]
  return(result);
 800654c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006552:	f06f 0305 	mvn.w	r3, #5
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	e019      	b.n	800658e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800655e:	f002 f9b7 	bl	80088d0 <xTaskGetTickCount>
 8006562:	4603      	mov	r3, r0
 8006564:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <osDelayUntil+0x4a>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	db06      	blt.n	8006588 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800657a:	f107 0308 	add.w	r3, r7, #8
 800657e:	6939      	ldr	r1, [r7, #16]
 8006580:	4618      	mov	r0, r3
 8006582:	f002 f809 	bl	8008598 <vTaskDelayUntil>
 8006586:	e002      	b.n	800658e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006588:	f06f 0303 	mvn.w	r3, #3
 800658c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800658e:	697b      	ldr	r3, [r7, #20]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a4:	f3ef 8305 	mrs	r3, IPSR
 80065a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065aa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d12d      	bne.n	800660c <osEventFlagsNew+0x74>
    mem = -1;
 80065b0:	f04f 33ff 	mov.w	r3, #4294967295
 80065b4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d015      	beq.n	80065e8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d006      	beq.n	80065d2 <osEventFlagsNew+0x3a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b1f      	cmp	r3, #31
 80065ca:	d902      	bls.n	80065d2 <osEventFlagsNew+0x3a>
        mem = 1;
 80065cc:	2301      	movs	r3, #1
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	e00c      	b.n	80065ec <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d108      	bne.n	80065ec <osEventFlagsNew+0x54>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <osEventFlagsNew+0x54>
          mem = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	e001      	b.n	80065ec <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d106      	bne.n	8006600 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fb58 	bl	8006cac <xEventGroupCreateStatic>
 80065fc:	6178      	str	r0, [r7, #20]
 80065fe:	e005      	b.n	800660c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006606:	f000 fb8a 	bl	8006d1e <xEventGroupCreate>
 800660a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800660c:	697b      	ldr	r3, [r7, #20]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <osEventFlagsSet+0x1c>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006632:	d303      	bcc.n	800663c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8006634:	f06f 0303 	mvn.w	r3, #3
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e028      	b.n	800668e <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663c:	f3ef 8305 	mrs	r3, IPSR
 8006640:	60fb      	str	r3, [r7, #12]
  return(result);
 8006642:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01d      	beq.n	8006684 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8006648:	2300      	movs	r3, #0
 800664a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800664c:	f107 0308 	add.w	r3, r7, #8
 8006650:	461a      	mov	r2, r3
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6938      	ldr	r0, [r7, #16]
 8006656:	f000 fd87 	bl	8007168 <xEventGroupSetBitsFromISR>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8006660:	f06f 0302 	mvn.w	r3, #2
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e012      	b.n	800668e <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00d      	beq.n	800668e <osEventFlagsSet+0x76>
 8006672:	4b09      	ldr	r3, [pc, #36]	@ (8006698 <osEventFlagsSet+0x80>)
 8006674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	e004      	b.n	800668e <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6938      	ldr	r0, [r7, #16]
 8006688:	f000 fca7 	bl	8006fda <xEventGroupSetBits>
 800668c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800668e:	697b      	ldr	r3, [r7, #20]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <osEventFlagsClear+0x1c>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066b6:	d303      	bcc.n	80066c0 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 80066b8:	f06f 0303 	mvn.w	r3, #3
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e019      	b.n	80066f4 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c0:	f3ef 8305 	mrs	r3, IPSR
 80066c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00e      	beq.n	80066ea <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80066cc:	6938      	ldr	r0, [r7, #16]
 80066ce:	f000 fc61 	bl	8006f94 <xEventGroupGetBitsFromISR>
 80066d2:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6938      	ldr	r0, [r7, #16]
 80066d8:	f000 fc48 	bl	8006f6c <xEventGroupClearBitsFromISR>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 80066e2:	f06f 0302 	mvn.w	r3, #2
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e004      	b.n	80066f4 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6938      	ldr	r0, [r7, #16]
 80066ee:	f000 fc03 	bl	8006ef8 <xEventGroupClearBits>
 80066f2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80066f4:	697b      	ldr	r3, [r7, #20]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80066fe:	b580      	push	{r7, lr}
 8006700:	b08c      	sub	sp, #48	@ 0x30
 8006702:	af02      	add	r7, sp, #8
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <osEventFlagsWait+0x20>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800671c:	d303      	bcc.n	8006726 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800671e:	f06f 0303 	mvn.w	r3, #3
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e04b      	b.n	80067be <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006726:	f3ef 8305 	mrs	r3, IPSR
 800672a:	617b      	str	r3, [r7, #20]
  return(result);
 800672c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8006732:	f06f 0305 	mvn.w	r3, #5
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e041      	b.n	80067be <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8006744:	2301      	movs	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
 8006748:	e001      	b.n	800674e <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8006758:	2300      	movs	r3, #0
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	e001      	b.n	8006762 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800675e:	2301      	movs	r3, #1
 8006760:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	69b8      	ldr	r0, [r7, #24]
 800676e:	f000 faf1 	bl	8006d54 <xEventGroupWaitBits>
 8006772:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	d019      	beq.n	80067be <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8006790:	f06f 0301 	mvn.w	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	e012      	b.n	80067be <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006798:	f06f 0302 	mvn.w	r3, #2
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e00e      	b.n	80067be <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4013      	ands	r3, r2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80067b0:	f06f 0301 	mvn.w	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e002      	b.n	80067be <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80067b8:	f06f 0302 	mvn.w	r3, #2
 80067bc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80067be:	69fb      	ldr	r3, [r7, #28]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3728      	adds	r7, #40	@ 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067d4:	f3ef 8305 	mrs	r3, IPSR
 80067d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80067da:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d174      	bne.n	80068ca <osMutexNew+0x102>
    if (attr != NULL) {
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <osMutexNew+0x26>
      type = attr->attr_bits;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	e001      	b.n	80067f2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <osMutexNew+0x3a>
      rmtx = 1U;
 80067fc:	2301      	movs	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e001      	b.n	8006806 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d15c      	bne.n	80068ca <osMutexNew+0x102>
      mem = -1;
 8006810:	f04f 33ff 	mov.w	r3, #4294967295
 8006814:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d015      	beq.n	8006848 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d006      	beq.n	8006832 <osMutexNew+0x6a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b4f      	cmp	r3, #79	@ 0x4f
 800682a:	d902      	bls.n	8006832 <osMutexNew+0x6a>
          mem = 1;
 800682c:	2301      	movs	r3, #1
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	e00c      	b.n	800684c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <osMutexNew+0x84>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <osMutexNew+0x84>
            mem = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e001      	b.n	800684c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d112      	bne.n	8006878 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4619      	mov	r1, r3
 800685e:	2004      	movs	r0, #4
 8006860:	f000 febd 	bl	80075de <xQueueCreateMutexStatic>
 8006864:	61f8      	str	r0, [r7, #28]
 8006866:	e016      	b.n	8006896 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4619      	mov	r1, r3
 800686e:	2001      	movs	r0, #1
 8006870:	f000 feb5 	bl	80075de <xQueueCreateMutexStatic>
 8006874:	61f8      	str	r0, [r7, #28]
 8006876:	e00e      	b.n	8006896 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d004      	beq.n	800688e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006884:	2004      	movs	r0, #4
 8006886:	f000 fe92 	bl	80075ae <xQueueCreateMutex>
 800688a:	61f8      	str	r0, [r7, #28]
 800688c:	e003      	b.n	8006896 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800688e:	2001      	movs	r0, #1
 8006890:	f000 fe8d 	bl	80075ae <xQueueCreateMutex>
 8006894:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00c      	beq.n	80068b6 <osMutexNew+0xee>
        if (attr != NULL) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <osMutexNew+0xe2>
          name = attr->name;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e001      	b.n	80068ae <osMutexNew+0xe6>
        } else {
          name = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	69f8      	ldr	r0, [r7, #28]
 80068b2:	f001 fc57 	bl	8008164 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <osMutexNew+0x102>
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80068ca:	69fb      	ldr	r3, [r7, #28]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3720      	adds	r7, #32
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068f2:	f3ef 8305 	mrs	r3, IPSR
 80068f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068f8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80068fe:	f06f 0305 	mvn.w	r3, #5
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e02c      	b.n	8006960 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800690c:	f06f 0303 	mvn.w	r3, #3
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e025      	b.n	8006960 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d011      	beq.n	800693e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6938      	ldr	r0, [r7, #16]
 800691e:	f000 feae 	bl	800767e <xQueueTakeMutexRecursive>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d01b      	beq.n	8006960 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800692e:	f06f 0301 	mvn.w	r3, #1
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e014      	b.n	8006960 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006936:	f06f 0302 	mvn.w	r3, #2
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e010      	b.n	8006960 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6938      	ldr	r0, [r7, #16]
 8006942:	f001 f955 	bl	8007bf0 <xQueueSemaphoreTake>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d009      	beq.n	8006960 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006952:	f06f 0301 	mvn.w	r3, #1
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e002      	b.n	8006960 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800695a:	f06f 0302 	mvn.w	r3, #2
 800695e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006960:	697b      	ldr	r3, [r7, #20]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006986:	f3ef 8305 	mrs	r3, IPSR
 800698a:	60bb      	str	r3, [r7, #8]
  return(result);
 800698c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <osMutexRelease+0x30>
    stat = osErrorISR;
 8006992:	f06f 0305 	mvn.w	r3, #5
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e01f      	b.n	80069da <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80069a0:	f06f 0303 	mvn.w	r3, #3
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e018      	b.n	80069da <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80069ae:	6938      	ldr	r0, [r7, #16]
 80069b0:	f000 fe30 	bl	8007614 <xQueueGiveMutexRecursive>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d00f      	beq.n	80069da <osMutexRelease+0x70>
        stat = osErrorResource;
 80069ba:	f06f 0302 	mvn.w	r3, #2
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e00b      	b.n	80069da <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80069c2:	2300      	movs	r3, #0
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	6938      	ldr	r0, [r7, #16]
 80069ca:	f000 fe8f 	bl	80076ec <xQueueGenericSend>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d002      	beq.n	80069da <osMutexRelease+0x70>
        stat = osErrorResource;
 80069d4:	f06f 0302 	mvn.w	r3, #2
 80069d8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80069da:	697b      	ldr	r3, [r7, #20]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	@ 0x28
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f4:	f3ef 8305 	mrs	r3, IPSR
 80069f8:	613b      	str	r3, [r7, #16]
  return(result);
 80069fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d15f      	bne.n	8006ac0 <osMessageQueueNew+0xdc>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d05c      	beq.n	8006ac0 <osMessageQueueNew+0xdc>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d059      	beq.n	8006ac0 <osMessageQueueNew+0xdc>
    mem = -1;
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d029      	beq.n	8006a6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d012      	beq.n	8006a46 <osMessageQueueNew+0x62>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a26:	d90e      	bls.n	8006a46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	695a      	ldr	r2, [r3, #20]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d302      	bcc.n	8006a46 <osMessageQueueNew+0x62>
        mem = 1;
 8006a40:	2301      	movs	r3, #1
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	e014      	b.n	8006a70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d110      	bne.n	8006a70 <osMessageQueueNew+0x8c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10c      	bne.n	8006a70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <osMessageQueueNew+0x8c>
          mem = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	e001      	b.n	8006a70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10b      	bne.n	8006a8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2100      	movs	r1, #0
 8006a80:	9100      	str	r1, [sp, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fc9d 	bl	80073c4 <xQueueGenericCreateStatic>
 8006a8a:	61f8      	str	r0, [r7, #28]
 8006a8c:	e008      	b.n	8006aa0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006a94:	2200      	movs	r2, #0
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fd10 	bl	80074be <xQueueGenericCreate>
 8006a9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e001      	b.n	8006ab8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	69f8      	ldr	r0, [r7, #28]
 8006abc:	f001 fb52 	bl	8008164 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae4:	f3ef 8305 	mrs	r3, IPSR
 8006ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8006aea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d028      	beq.n	8006b42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <osMessageQueuePut+0x36>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <osMessageQueuePut+0x36>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006b02:	f06f 0303 	mvn.w	r3, #3
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e038      	b.n	8006b7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006b0e:	f107 0210 	add.w	r2, r7, #16
 8006b12:	2300      	movs	r3, #0
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	69b8      	ldr	r0, [r7, #24]
 8006b18:	f000 feea 	bl	80078f0 <xQueueGenericSendFromISR>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d003      	beq.n	8006b2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006b22:	f06f 0302 	mvn.w	r3, #2
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e028      	b.n	8006b7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d025      	beq.n	8006b7c <osMessageQueuePut+0xb0>
 8006b30:	4b15      	ldr	r3, [pc, #84]	@ (8006b88 <osMessageQueuePut+0xbc>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	e01c      	b.n	8006b7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <osMessageQueuePut+0x82>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d103      	bne.n	8006b56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006b4e:	f06f 0303 	mvn.w	r3, #3
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	e012      	b.n	8006b7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b56:	2300      	movs	r3, #0
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	69b8      	ldr	r0, [r7, #24]
 8006b5e:	f000 fdc5 	bl	80076ec <xQueueGenericSend>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d009      	beq.n	8006b7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006b6e:	f06f 0301 	mvn.w	r3, #1
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e002      	b.n	8006b7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006b76:	f06f 0302 	mvn.w	r3, #2
 8006b7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006b7c:	69fb      	ldr	r3, [r7, #28]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ba2:	f3ef 8305 	mrs	r3, IPSR
 8006ba6:	617b      	str	r3, [r7, #20]
  return(result);
 8006ba8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d028      	beq.n	8006c00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <osMessageQueueGet+0x34>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <osMessageQueueGet+0x34>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006bc0:	f06f 0303 	mvn.w	r3, #3
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e037      	b.n	8006c38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006bcc:	f107 0310 	add.w	r3, r7, #16
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	69b8      	ldr	r0, [r7, #24]
 8006bd6:	f001 f91b 	bl	8007e10 <xQueueReceiveFromISR>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d003      	beq.n	8006be8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006be0:	f06f 0302 	mvn.w	r3, #2
 8006be4:	61fb      	str	r3, [r7, #28]
 8006be6:	e027      	b.n	8006c38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d024      	beq.n	8006c38 <osMessageQueueGet+0xac>
 8006bee:	4b15      	ldr	r3, [pc, #84]	@ (8006c44 <osMessageQueueGet+0xb8>)
 8006bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	e01b      	b.n	8006c38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <osMessageQueueGet+0x80>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d103      	bne.n	8006c14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006c0c:	f06f 0303 	mvn.w	r3, #3
 8006c10:	61fb      	str	r3, [r7, #28]
 8006c12:	e011      	b.n	8006c38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	69b8      	ldr	r0, [r7, #24]
 8006c1a:	f000 ff07 	bl	8007a2c <xQueueReceive>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d009      	beq.n	8006c38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006c2a:	f06f 0301 	mvn.w	r3, #1
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	e002      	b.n	8006c38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006c32:	f06f 0302 	mvn.w	r3, #2
 8006c36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006c38:	69fb      	ldr	r3, [r7, #28]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	e000ed04 	.word	0xe000ed04

08006c48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a06      	ldr	r2, [pc, #24]	@ (8006c70 <vApplicationGetIdleTaskMemory+0x28>)
 8006c58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4a05      	ldr	r2, [pc, #20]	@ (8006c74 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2280      	movs	r2, #128	@ 0x80
 8006c64:	601a      	str	r2, [r3, #0]
}
 8006c66:	bf00      	nop
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr
 8006c70:	2000042c 	.word	0x2000042c
 8006c74:	200004d4 	.word	0x200004d4

08006c78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4a07      	ldr	r2, [pc, #28]	@ (8006ca4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	4a06      	ldr	r2, [pc, #24]	@ (8006ca8 <vApplicationGetTimerTaskMemory+0x30>)
 8006c8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c96:	601a      	str	r2, [r3, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	200006d4 	.word	0x200006d4
 8006ca8:	2000077c 	.word	0x2000077c

08006cac <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006cd2:	2320      	movs	r3, #32
 8006cd4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d00b      	beq.n	8006cf4 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60fb      	str	r3, [r7, #12]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fa41 	bl	8007190 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2201      	movs	r2, #1
 8006d12:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006d14:	697b      	ldr	r3, [r7, #20]
	}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006d24:	2020      	movs	r0, #32
 8006d26:	f003 f93b 	bl	8009fa0 <pvPortMalloc>
 8006d2a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fa27 	bl	8007190 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006d48:	687b      	ldr	r3, [r7, #4]
	}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b090      	sub	sp, #64	@ 0x40
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10b      	bne.n	8006d8c <xEventGroupWaitBits+0x38>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	623b      	str	r3, [r7, #32]
}
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d92:	d30b      	bcc.n	8006dac <xEventGroupWaitBits+0x58>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	61fb      	str	r3, [r7, #28]
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <xEventGroupWaitBits+0x76>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	61bb      	str	r3, [r7, #24]
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	e7fd      	b.n	8006dc6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dca:	f002 f987 	bl	80090dc <xTaskGetSchedulerState>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <xEventGroupWaitBits+0x86>
 8006dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <xEventGroupWaitBits+0x8a>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <xEventGroupWaitBits+0x8c>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <xEventGroupWaitBits+0xa8>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	617b      	str	r3, [r7, #20]
}
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
 8006dfa:	e7fd      	b.n	8006df8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8006dfc:	f001 fcbc 	bl	8008778 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e0c:	f000 f98b 	bl	8007126 <prvTestWaitCondition>
 8006e10:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d028      	beq.n	8006e78 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	401a      	ands	r2, r3
 8006e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e020      	b.n	8006e78 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e44:	e018      	b.n	8006e78 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e52:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e60:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	1d18      	adds	r0, r3, #4
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f001 fe92 	bl	8008b98 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006e78:	f001 fc8c 	bl	8008794 <xTaskResumeAll>
 8006e7c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d031      	beq.n	8006ee8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d107      	bne.n	8006e9a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef4 <xEventGroupWaitBits+0x1a0>)
 8006e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006e9a:	f002 fa99 	bl	80093d0 <uxTaskResetEventItemValue>
 8006e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d11a      	bne.n	8006ee0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8006eaa:	f002 ff77 	bl	8009d9c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006eba:	f000 f934 	bl	8007126 <prvTestWaitCondition>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8006edc:	f002 ff8e 	bl	8009dfc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3740      	adds	r7, #64	@ 0x40
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <xEventGroupClearBits+0x2c>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	60fb      	str	r3, [r7, #12]
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	e7fd      	b.n	8006f20 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f2a:	d30b      	bcc.n	8006f44 <xEventGroupClearBits+0x4c>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60bb      	str	r3, [r7, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006f44:	f002 ff2a 	bl	8009d9c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	401a      	ands	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8006f5c:	f002 ff4e 	bl	8009dfc <vPortExitCritical>

	return uxReturn;
 8006f60:	693b      	ldr	r3, [r7, #16]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006f76:	2300      	movs	r3, #0
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4804      	ldr	r0, [pc, #16]	@ (8006f90 <xEventGroupClearBitsFromISR+0x24>)
 8006f7e:	f002 fdff 	bl	8009b80 <xTimerPendFunctionCallFromISR>
 8006f82:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8006f84:	68fb      	ldr	r3, [r7, #12]
	}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	0800710d 	.word	0x0800710d

08006f94 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	@ 0x24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fa0:	f3ef 8211 	mrs	r2, BASEPRI
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	60fa      	str	r2, [r7, #12]
 8006fb6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fba:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fcc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8006fce:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3724      	adds	r7, #36	@ 0x24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b08e      	sub	sp, #56	@ 0x38
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <xEventGroupSetBits+0x34>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	613b      	str	r3, [r7, #16]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007014:	d30b      	bcc.n	800702e <xEventGroupSetBits+0x54>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60fb      	str	r3, [r7, #12]
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	e7fd      	b.n	800702a <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800702e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007030:	3304      	adds	r3, #4
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	3308      	adds	r3, #8
 8007038:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800703a:	f001 fb9d 	bl	8008778 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	431a      	orrs	r2, r3
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007050:	e03c      	b.n	80070cc <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007068:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007070:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d108      	bne.n	800708e <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800708c:	e008      	b.n	80070a0 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	4013      	ands	r3, r2
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	429a      	cmp	r2, r3
 800709a:	d101      	bne.n	80070a0 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d010      	beq.n	80070c8 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80070b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80070c0:	4619      	mov	r1, r3
 80070c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80070c4:	f001 fe36 	bl	8008d34 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80070cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d1be      	bne.n	8007052 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	43db      	mvns	r3, r3
 80070dc:	401a      	ands	r2, r3
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80070e2:	f001 fb57 	bl	8008794 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	681b      	ldr	r3, [r3, #0]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3738      	adds	r7, #56	@ 0x38
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff ff6b 	bl	8006fda <xEventGroupSetBits>
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff feed 	bl	8006ef8 <xEventGroupClearBits>
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007126:	b480      	push	{r7}
 8007128:	b087      	sub	sp, #28
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d107      	bne.n	800714c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007146:	2301      	movs	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e007      	b.n	800715c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4013      	ands	r3, r2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	429a      	cmp	r2, r3
 8007156:	d101      	bne.n	800715c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007158:	2301      	movs	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800715c:	697b      	ldr	r3, [r7, #20]
}
 800715e:	4618      	mov	r0, r3
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	68f9      	ldr	r1, [r7, #12]
 800717a:	4804      	ldr	r0, [pc, #16]	@ (800718c <xEventGroupSetBitsFromISR+0x24>)
 800717c:	f002 fd00 	bl	8009b80 <xTimerPendFunctionCallFromISR>
 8007180:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007182:	697b      	ldr	r3, [r7, #20]
	}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	080070f3 	.word	0x080070f3

08007190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f103 0208 	add.w	r2, r3, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f04f 32ff 	mov.w	r2, #4294967295
 80071a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f103 0208 	add.w	r2, r3, #8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f103 0208 	add.w	r2, r3, #8
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr

080071ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr

080071e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
}
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr

0800722c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d103      	bne.n	800724c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e00c      	b.n	8007266 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3308      	adds	r3, #8
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e002      	b.n	800725a <vListInsert+0x2e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	d2f6      	bcs.n	8007254 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	601a      	str	r2, [r3, #0]
}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6892      	ldr	r2, [r2, #8]
 80072b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6852      	ldr	r2, [r2, #4]
 80072bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d103      	bne.n	80072d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	1e5a      	subs	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr
	...

080072f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <xQueueGenericReset+0x2c>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	60bb      	str	r3, [r7, #8]
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800731c:	f002 fd3e 	bl	8009d9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007328:	68f9      	ldr	r1, [r7, #12]
 800732a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800732c:	fb01 f303 	mul.w	r3, r1, r3
 8007330:	441a      	add	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734c:	3b01      	subs	r3, #1
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	22ff      	movs	r2, #255	@ 0xff
 8007360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	22ff      	movs	r2, #255	@ 0xff
 8007368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d114      	bne.n	800739c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01a      	beq.n	80073b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3310      	adds	r3, #16
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fc74 	bl	8008c6c <xTaskRemoveFromEventList>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d012      	beq.n	80073b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <xQueueGenericReset+0xd0>)
 800738c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	e009      	b.n	80073b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3310      	adds	r3, #16
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fef5 	bl	8007190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3324      	adds	r3, #36	@ 0x24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff fef0 	bl	8007190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073b0:	f002 fd24 	bl	8009dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073b4:	2301      	movs	r3, #1
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	e000ed04 	.word	0xe000ed04

080073c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08e      	sub	sp, #56	@ 0x38
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10b      	bne.n	80073f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	e7fd      	b.n	80073ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	e7fd      	b.n	800740a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <xQueueGenericCreateStatic+0x56>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <xQueueGenericCreateStatic+0x5a>
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <xQueueGenericCreateStatic+0x5c>
 800741e:	2300      	movs	r3, #0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10b      	bne.n	800743c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	623b      	str	r3, [r7, #32]
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d102      	bne.n	8007448 <xQueueGenericCreateStatic+0x84>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <xQueueGenericCreateStatic+0x88>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <xQueueGenericCreateStatic+0x8a>
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	61fb      	str	r3, [r7, #28]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800746a:	2350      	movs	r3, #80	@ 0x50
 800746c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b50      	cmp	r3, #80	@ 0x50
 8007472:	d00b      	beq.n	800748c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	61bb      	str	r3, [r7, #24]
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800748c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f840 	bl	8007534 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3730      	adds	r7, #48	@ 0x30
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b08a      	sub	sp, #40	@ 0x28
 80074c2:	af02      	add	r7, sp, #8
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	4613      	mov	r3, r2
 80074ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10b      	bne.n	80074ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	613b      	str	r3, [r7, #16]
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3350      	adds	r3, #80	@ 0x50
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 fd51 	bl	8009fa0 <pvPortMalloc>
 80074fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d011      	beq.n	800752a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	3350      	adds	r3, #80	@ 0x50
 800750e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007518:	79fa      	ldrb	r2, [r7, #7]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	4613      	mov	r3, r2
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f805 	bl	8007534 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800752a:	69bb      	ldr	r3, [r7, #24]
	}
 800752c:	4618      	mov	r0, r3
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e002      	b.n	8007556 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007562:	2101      	movs	r1, #1
 8007564:	69b8      	ldr	r0, [r7, #24]
 8007566:	f7ff fec3 	bl	80072f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	78fa      	ldrb	r2, [r7, #3]
 800756e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007572:	bf00      	nop
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00e      	beq.n	80075a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800759a:	2300      	movs	r3, #0
 800759c:	2200      	movs	r2, #0
 800759e:	2100      	movs	r1, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f8a3 	bl	80076ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	4603      	mov	r3, r0
 80075b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075b8:	2301      	movs	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	2300      	movs	r3, #0
 80075be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6939      	ldr	r1, [r7, #16]
 80075c6:	6978      	ldr	r0, [r7, #20]
 80075c8:	f7ff ff79 	bl	80074be <xQueueGenericCreate>
 80075cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff ffd3 	bl	800757a <prvInitialiseMutex>

		return xNewQueue;
 80075d4:	68fb      	ldr	r3, [r7, #12]
	}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b088      	sub	sp, #32
 80075e2:	af02      	add	r7, sp, #8
 80075e4:	4603      	mov	r3, r0
 80075e6:	6039      	str	r1, [r7, #0]
 80075e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075ea:	2301      	movs	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2200      	movs	r2, #0
 80075fa:	6939      	ldr	r1, [r7, #16]
 80075fc:	6978      	ldr	r0, [r7, #20]
 80075fe:	f7ff fee1 	bl	80073c4 <xQueueGenericCreateStatic>
 8007602:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff ffb8 	bl	800757a <prvInitialiseMutex>

		return xNewQueue;
 800760a:	68fb      	ldr	r3, [r7, #12]
	}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	689c      	ldr	r4, [r3, #8]
 8007642:	f001 fd3d 	bl	80090c0 <xTaskGetCurrentTaskHandle>
 8007646:	4603      	mov	r3, r0
 8007648:	429c      	cmp	r4, r3
 800764a:	d111      	bne.n	8007670 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	1e5a      	subs	r2, r3, #1
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800765e:	2300      	movs	r3, #0
 8007660:	2200      	movs	r2, #0
 8007662:	2100      	movs	r1, #0
 8007664:	6938      	ldr	r0, [r7, #16]
 8007666:	f000 f841 	bl	80076ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800766a:	2301      	movs	r3, #1
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	e001      	b.n	8007674 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007674:	697b      	ldr	r3, [r7, #20]
	}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd90      	pop	{r4, r7, pc}

0800767e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800767e:	b590      	push	{r4, r7, lr}
 8007680:	b087      	sub	sp, #28
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60fb      	str	r3, [r7, #12]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	689c      	ldr	r4, [r3, #8]
 80076ae:	f001 fd07 	bl	80090c0 <xTaskGetCurrentTaskHandle>
 80076b2:	4603      	mov	r3, r0
 80076b4:	429c      	cmp	r4, r3
 80076b6:	d107      	bne.n	80076c8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80076c2:	2301      	movs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e00c      	b.n	80076e2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6938      	ldr	r0, [r7, #16]
 80076cc:	f000 fa90 	bl	8007bf0 <xQueueSemaphoreTake>
 80076d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80076e2:	697b      	ldr	r3, [r7, #20]
	}
 80076e4:	4618      	mov	r0, r3
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd90      	pop	{r4, r7, pc}

080076ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08e      	sub	sp, #56	@ 0x38
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076fa:	2300      	movs	r3, #0
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10b      	bne.n	8007720 <xQueueGenericSend+0x34>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <xQueueGenericSend+0x42>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <xQueueGenericSend+0x46>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <xQueueGenericSend+0x48>
 8007732:	2300      	movs	r3, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <xQueueGenericSend+0x64>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d103      	bne.n	800775e <xQueueGenericSend+0x72>
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <xQueueGenericSend+0x76>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueGenericSend+0x78>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <xQueueGenericSend+0x94>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	623b      	str	r3, [r7, #32]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007780:	f001 fcac 	bl	80090dc <xTaskGetSchedulerState>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <xQueueGenericSend+0xa4>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <xQueueGenericSend+0xa8>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <xQueueGenericSend+0xaa>
 8007794:	2300      	movs	r3, #0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	61fb      	str	r3, [r7, #28]
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	e7fd      	b.n	80077ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077b2:	f002 faf3 	bl	8009d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <xQueueGenericSend+0xdc>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d129      	bne.n	800781c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077ce:	f000 fbb8 	bl	8007f42 <prvCopyDataToQueue>
 80077d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d010      	beq.n	80077fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	3324      	adds	r3, #36	@ 0x24
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 fa43 	bl	8008c6c <xTaskRemoveFromEventList>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d013      	beq.n	8007814 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077ec:	4b3f      	ldr	r3, [pc, #252]	@ (80078ec <xQueueGenericSend+0x200>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	e00a      	b.n	8007814 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007804:	4b39      	ldr	r3, [pc, #228]	@ (80078ec <xQueueGenericSend+0x200>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007814:	f002 faf2 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 8007818:	2301      	movs	r3, #1
 800781a:	e063      	b.n	80078e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007822:	f002 faeb 	bl	8009dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007826:	2300      	movs	r3, #0
 8007828:	e05c      	b.n	80078e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800782a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782c:	2b00      	cmp	r3, #0
 800782e:	d106      	bne.n	800783e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	4618      	mov	r0, r3
 8007836:	f001 fae1 	bl	8008dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800783a:	2301      	movs	r3, #1
 800783c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800783e:	f002 fadd 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007842:	f000 ff99 	bl	8008778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007846:	f002 faa9 	bl	8009d9c <vPortEnterCritical>
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007850:	b25b      	sxtb	r3, r3
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007856:	d103      	bne.n	8007860 <xQueueGenericSend+0x174>
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007866:	b25b      	sxtb	r3, r3
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d103      	bne.n	8007876 <xQueueGenericSend+0x18a>
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007876:	f002 fac1 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800787a:	1d3a      	adds	r2, r7, #4
 800787c:	f107 0314 	add.w	r3, r7, #20
 8007880:	4611      	mov	r1, r2
 8007882:	4618      	mov	r0, r3
 8007884:	f001 fad0 	bl	8008e28 <xTaskCheckForTimeOut>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d124      	bne.n	80078d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800788e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007890:	f000 fc4f 	bl	8008132 <prvIsQueueFull>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d018      	beq.n	80078cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	3310      	adds	r3, #16
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4611      	mov	r1, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f952 	bl	8008b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078aa:	f000 fbda 	bl	8008062 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078ae:	f000 ff71 	bl	8008794 <xTaskResumeAll>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f47f af7c 	bne.w	80077b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078ba:	4b0c      	ldr	r3, [pc, #48]	@ (80078ec <xQueueGenericSend+0x200>)
 80078bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	e772      	b.n	80077b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078ce:	f000 fbc8 	bl	8008062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078d2:	f000 ff5f 	bl	8008794 <xTaskResumeAll>
 80078d6:	e76c      	b.n	80077b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078da:	f000 fbc2 	bl	8008062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078de:	f000 ff59 	bl	8008794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3738      	adds	r7, #56	@ 0x38
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b090      	sub	sp, #64	@ 0x40
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10b      	bne.n	8007920 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	e7fd      	b.n	800791c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <xQueueGenericSendFromISR+0x3e>
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <xQueueGenericSendFromISR+0x42>
 800792e:	2301      	movs	r3, #1
 8007930:	e000      	b.n	8007934 <xQueueGenericSendFromISR+0x44>
 8007932:	2300      	movs	r3, #0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	e7fd      	b.n	800794c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d103      	bne.n	800795e <xQueueGenericSendFromISR+0x6e>
 8007956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <xQueueGenericSendFromISR+0x72>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <xQueueGenericSendFromISR+0x74>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	623b      	str	r3, [r7, #32]
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007980:	f002 face 	bl	8009f20 <vPortValidateInterruptPriority>
	__asm volatile
 8007984:	f3ef 8211 	mrs	r2, BASEPRI
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	61fa      	str	r2, [r7, #28]
 800799a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800799c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d302      	bcc.n	80079b2 <xQueueGenericSendFromISR+0xc2>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d12f      	bne.n	8007a12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079c8:	f000 fabb 	bl	8007f42 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d112      	bne.n	80079fc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e0:	3324      	adds	r3, #36	@ 0x24
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 f942 	bl	8008c6c <xTaskRemoveFromEventList>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e007      	b.n	8007a0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	b25a      	sxtb	r2, r3
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a10:	e001      	b.n	8007a16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a18:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f383 8811 	msr	BASEPRI, r3
}
 8007a20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3740      	adds	r7, #64	@ 0x40
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08c      	sub	sp, #48	@ 0x30
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <xQueueReceive+0x32>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	623b      	str	r3, [r7, #32]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d103      	bne.n	8007a6c <xQueueReceive+0x40>
 8007a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <xQueueReceive+0x44>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e000      	b.n	8007a72 <xQueueReceive+0x46>
 8007a70:	2300      	movs	r3, #0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10b      	bne.n	8007a8e <xQueueReceive+0x62>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	61fb      	str	r3, [r7, #28]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a8e:	f001 fb25 	bl	80090dc <xTaskGetSchedulerState>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <xQueueReceive+0x72>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <xQueueReceive+0x76>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <xQueueReceive+0x78>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <xQueueReceive+0x94>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	61bb      	str	r3, [r7, #24]
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	e7fd      	b.n	8007abc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ac0:	f002 f96c 	bl	8009d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01f      	beq.n	8007b10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ad4:	f000 fa9f 	bl	8008016 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	1e5a      	subs	r2, r3, #1
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00f      	beq.n	8007b08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	3310      	adds	r3, #16
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f8bd 	bl	8008c6c <xTaskRemoveFromEventList>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007af8:	4b3c      	ldr	r3, [pc, #240]	@ (8007bec <xQueueReceive+0x1c0>)
 8007afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b08:	f002 f978 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e069      	b.n	8007be4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d103      	bne.n	8007b1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b16:	f002 f971 	bl	8009dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e062      	b.n	8007be4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b24:	f107 0310 	add.w	r3, r7, #16
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 f967 	bl	8008dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b32:	f002 f963 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b36:	f000 fe1f 	bl	8008778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b3a:	f002 f92f 	bl	8009d9c <vPortEnterCritical>
 8007b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b44:	b25b      	sxtb	r3, r3
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d103      	bne.n	8007b54 <xQueueReceive+0x128>
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b5a:	b25b      	sxtb	r3, r3
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d103      	bne.n	8007b6a <xQueueReceive+0x13e>
 8007b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b6a:	f002 f947 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b6e:	1d3a      	adds	r2, r7, #4
 8007b70:	f107 0310 	add.w	r3, r7, #16
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 f956 	bl	8008e28 <xTaskCheckForTimeOut>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d123      	bne.n	8007bca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b84:	f000 fabf 	bl	8008106 <prvIsQueueEmpty>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d017      	beq.n	8007bbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	3324      	adds	r3, #36	@ 0x24
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ffd8 	bl	8008b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b9e:	f000 fa60 	bl	8008062 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ba2:	f000 fdf7 	bl	8008794 <xTaskResumeAll>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d189      	bne.n	8007ac0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007bac:	4b0f      	ldr	r3, [pc, #60]	@ (8007bec <xQueueReceive+0x1c0>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	e780      	b.n	8007ac0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bc0:	f000 fa4f 	bl	8008062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bc4:	f000 fde6 	bl	8008794 <xTaskResumeAll>
 8007bc8:	e77a      	b.n	8007ac0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bcc:	f000 fa49 	bl	8008062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bd0:	f000 fde0 	bl	8008794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bd6:	f000 fa96 	bl	8008106 <prvIsQueueEmpty>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f43f af6f 	beq.w	8007ac0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007be2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3730      	adds	r7, #48	@ 0x30
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	@ 0x38
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10b      	bne.n	8007c24 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	623b      	str	r3, [r7, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	e7fd      	b.n	8007c20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	61fb      	str	r3, [r7, #28]
}
 8007c3e:	bf00      	nop
 8007c40:	bf00      	nop
 8007c42:	e7fd      	b.n	8007c40 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c44:	f001 fa4a 	bl	80090dc <xTaskGetSchedulerState>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d102      	bne.n	8007c54 <xQueueSemaphoreTake+0x64>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <xQueueSemaphoreTake+0x68>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <xQueueSemaphoreTake+0x6a>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10b      	bne.n	8007c76 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	61bb      	str	r3, [r7, #24]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c76:	f002 f891 	bl	8009d9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d024      	beq.n	8007cd0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c88:	1e5a      	subs	r2, r3, #1
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c96:	f001 fbb3 	bl	8009400 <pvTaskIncrementMutexHeldCount>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00f      	beq.n	8007cc8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	3310      	adds	r3, #16
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 ffdd 	bl	8008c6c <xTaskRemoveFromEventList>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d007      	beq.n	8007cc8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cb8:	4b54      	ldr	r3, [pc, #336]	@ (8007e0c <xQueueSemaphoreTake+0x21c>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cc8:	f002 f898 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e098      	b.n	8007e02 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d112      	bne.n	8007cfc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	617b      	str	r3, [r7, #20]
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	e7fd      	b.n	8007cf0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007cf4:	f002 f882 	bl	8009dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e082      	b.n	8007e02 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d02:	f107 030c 	add.w	r3, r7, #12
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 f878 	bl	8008dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d10:	f002 f874 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d14:	f000 fd30 	bl	8008778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d18:	f002 f840 	bl	8009d9c <vPortEnterCritical>
 8007d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d22:	b25b      	sxtb	r3, r3
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d103      	bne.n	8007d32 <xQueueSemaphoreTake+0x142>
 8007d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d38:	b25b      	sxtb	r3, r3
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3e:	d103      	bne.n	8007d48 <xQueueSemaphoreTake+0x158>
 8007d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d48:	f002 f858 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d4c:	463a      	mov	r2, r7
 8007d4e:	f107 030c 	add.w	r3, r7, #12
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 f867 	bl	8008e28 <xTaskCheckForTimeOut>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d132      	bne.n	8007dc6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d62:	f000 f9d0 	bl	8008106 <prvIsQueueEmpty>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d026      	beq.n	8007dba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007d74:	f002 f812 	bl	8009d9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f9cb 	bl	8009118 <xTaskPriorityInherit>
 8007d82:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007d84:	f002 f83a 	bl	8009dfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8a:	3324      	adds	r3, #36	@ 0x24
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fedb 	bl	8008b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d98:	f000 f963 	bl	8008062 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d9c:	f000 fcfa 	bl	8008794 <xTaskResumeAll>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f47f af67 	bne.w	8007c76 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007da8:	4b18      	ldr	r3, [pc, #96]	@ (8007e0c <xQueueSemaphoreTake+0x21c>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	e75d      	b.n	8007c76 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007dba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dbc:	f000 f951 	bl	8008062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dc0:	f000 fce8 	bl	8008794 <xTaskResumeAll>
 8007dc4:	e757      	b.n	8007c76 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007dc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dc8:	f000 f94b 	bl	8008062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dcc:	f000 fce2 	bl	8008794 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dd2:	f000 f998 	bl	8008106 <prvIsQueueEmpty>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f43f af4c 	beq.w	8007c76 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00d      	beq.n	8007e00 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007de4:	f001 ffda 	bl	8009d9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007de8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dea:	f000 f893 	bl	8007f14 <prvGetDisinheritPriorityAfterTimeout>
 8007dee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 fa66 	bl	80092c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007dfc:	f001 fffe 	bl	8009dfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3738      	adds	r7, #56	@ 0x38
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08e      	sub	sp, #56	@ 0x38
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10b      	bne.n	8007e3e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	623b      	str	r3, [r7, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <xQueueReceiveFromISR+0x3c>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <xQueueReceiveFromISR+0x40>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <xQueueReceiveFromISR+0x42>
 8007e50:	2300      	movs	r3, #0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	61fb      	str	r3, [r7, #28]
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	e7fd      	b.n	8007e6a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e6e:	f002 f857 	bl	8009f20 <vPortValidateInterruptPriority>
	__asm volatile
 8007e72:	f3ef 8211 	mrs	r2, BASEPRI
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	61ba      	str	r2, [r7, #24]
 8007e88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d02f      	beq.n	8007efa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ea8:	f000 f8b5 	bl	8008016 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	1e5a      	subs	r2, r3, #1
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007eb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebc:	d112      	bne.n	8007ee4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d016      	beq.n	8007ef4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	3310      	adds	r3, #16
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fece 	bl	8008c6c <xTaskRemoveFromEventList>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00e      	beq.n	8007ef4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e007      	b.n	8007ef4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ee8:	3301      	adds	r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	b25a      	sxtb	r2, r3
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef8:	e001      	b.n	8007efe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f383 8811 	msr	BASEPRI, r3
}
 8007f08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3738      	adds	r7, #56	@ 0x38
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	e001      	b.n	8007f36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f36:	68fb      	ldr	r3, [r7, #12]
	}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f56:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10d      	bne.n	8007f7c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d14d      	bne.n	8008004 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 f93b 	bl	80091e8 <xTaskPriorityDisinherit>
 8007f72:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
 8007f7a:	e043      	b.n	8008004 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d119      	bne.n	8007fb6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6858      	ldr	r0, [r3, #4]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	f003 f8f2 	bl	800b176 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9a:	441a      	add	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d32b      	bcc.n	8008004 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	605a      	str	r2, [r3, #4]
 8007fb4:	e026      	b.n	8008004 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	68d8      	ldr	r0, [r3, #12]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	f003 f8d8 	bl	800b176 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fce:	425b      	negs	r3, r3
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d207      	bcs.n	8007ff2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	425b      	negs	r3, r3
 8007fec:	441a      	add	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d105      	bne.n	8008004 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3b01      	subs	r3, #1
 8008002:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800800c:	697b      	ldr	r3, [r7, #20]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d018      	beq.n	800805a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008030:	441a      	add	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	429a      	cmp	r2, r3
 8008040:	d303      	bcc.n	800804a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68d9      	ldr	r1, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008052:	461a      	mov	r2, r3
 8008054:	6838      	ldr	r0, [r7, #0]
 8008056:	f003 f88e 	bl	800b176 <memcpy>
	}
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800806a:	f001 fe97 	bl	8009d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008074:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008076:	e011      	b.n	800809c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d012      	beq.n	80080a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3324      	adds	r3, #36	@ 0x24
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fdf1 	bl	8008c6c <xTaskRemoveFromEventList>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008090:	f000 ff2e 	bl	8008ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	3b01      	subs	r3, #1
 8008098:	b2db      	uxtb	r3, r3
 800809a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800809c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dce9      	bgt.n	8008078 <prvUnlockQueue+0x16>
 80080a4:	e000      	b.n	80080a8 <prvUnlockQueue+0x46>
					break;
 80080a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	22ff      	movs	r2, #255	@ 0xff
 80080ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080b0:	f001 fea4 	bl	8009dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080b4:	f001 fe72 	bl	8009d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080c0:	e011      	b.n	80080e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d012      	beq.n	80080f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3310      	adds	r3, #16
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fdcc 	bl	8008c6c <xTaskRemoveFromEventList>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080da:	f000 ff09 	bl	8008ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dce9      	bgt.n	80080c2 <prvUnlockQueue+0x60>
 80080ee:	e000      	b.n	80080f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	22ff      	movs	r2, #255	@ 0xff
 80080f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080fa:	f001 fe7f 	bl	8009dfc <vPortExitCritical>
}
 80080fe:	bf00      	nop
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800810e:	f001 fe45 	bl	8009d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800811a:	2301      	movs	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e001      	b.n	8008124 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008124:	f001 fe6a 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8008128:	68fb      	ldr	r3, [r7, #12]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800813a:	f001 fe2f 	bl	8009d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008146:	429a      	cmp	r2, r3
 8008148:	d102      	bne.n	8008150 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800814a:	2301      	movs	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e001      	b.n	8008154 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008154:	f001 fe52 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8008158:	68fb      	ldr	r3, [r7, #12]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e014      	b.n	800819e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008174:	4a0e      	ldr	r2, [pc, #56]	@ (80081b0 <vQueueAddToRegistry+0x4c>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008180:	490b      	ldr	r1, [pc, #44]	@ (80081b0 <vQueueAddToRegistry+0x4c>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800818a:	4a09      	ldr	r2, [pc, #36]	@ (80081b0 <vQueueAddToRegistry+0x4c>)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4413      	add	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008196:	e006      	b.n	80081a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b07      	cmp	r3, #7
 80081a2:	d9e7      	bls.n	8008174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr
 80081b0:	20000b7c 	.word	0x20000b7c

080081b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081c4:	f001 fdea 	bl	8009d9c <vPortEnterCritical>
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081ce:	b25b      	sxtb	r3, r3
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d4:	d103      	bne.n	80081de <vQueueWaitForMessageRestricted+0x2a>
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081e4:	b25b      	sxtb	r3, r3
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d103      	bne.n	80081f4 <vQueueWaitForMessageRestricted+0x40>
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081f4:	f001 fe02 	bl	8009dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	3324      	adds	r3, #36	@ 0x24
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fd03 	bl	8008c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800820e:	6978      	ldr	r0, [r7, #20]
 8008210:	f7ff ff27 	bl	8008062 <prvUnlockQueue>
	}
 8008214:	bf00      	nop
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08e      	sub	sp, #56	@ 0x38
 8008220:	af04      	add	r7, sp, #16
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800822a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10b      	bne.n	8008248 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	623b      	str	r3, [r7, #32]
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10b      	bne.n	8008266 <xTaskCreateStatic+0x4a>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	61fb      	str	r3, [r7, #28]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008266:	23a8      	movs	r3, #168	@ 0xa8
 8008268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2ba8      	cmp	r3, #168	@ 0xa8
 800826e:	d00b      	beq.n	8008288 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61bb      	str	r3, [r7, #24]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008288:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d01e      	beq.n	80082ce <xTaskCreateStatic+0xb2>
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01b      	beq.n	80082ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800829e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082a8:	2300      	movs	r3, #0
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f851 	bl	8008368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082c8:	f000 f8f6 	bl	80084b8 <prvAddNewTaskToReadyList>
 80082cc:	e001      	b.n	80082d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082d2:	697b      	ldr	r3, [r7, #20]
	}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3728      	adds	r7, #40	@ 0x28
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08c      	sub	sp, #48	@ 0x30
 80082e0:	af04      	add	r7, sp, #16
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 fe55 	bl	8009fa0 <pvPortMalloc>
 80082f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00e      	beq.n	800831c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082fe:	20a8      	movs	r0, #168	@ 0xa8
 8008300:	f001 fe4e 	bl	8009fa0 <pvPortMalloc>
 8008304:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	631a      	str	r2, [r3, #48]	@ 0x30
 8008312:	e005      	b.n	8008320 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008314:	6978      	ldr	r0, [r7, #20]
 8008316:	f001 ff11 	bl	800a13c <vPortFree>
 800831a:	e001      	b.n	8008320 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d017      	beq.n	8008356 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	2300      	movs	r3, #0
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	9302      	str	r3, [sp, #8]
 8008338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 f80f 	bl	8008368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800834a:	69f8      	ldr	r0, [r7, #28]
 800834c:	f000 f8b4 	bl	80084b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008350:	2301      	movs	r3, #1
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	e002      	b.n	800835c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008356:	f04f 33ff 	mov.w	r3, #4294967295
 800835a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800835c:	69bb      	ldr	r3, [r7, #24]
	}
 800835e:	4618      	mov	r0, r3
 8008360:	3720      	adds	r7, #32
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	461a      	mov	r2, r3
 8008380:	21a5      	movs	r1, #165	@ 0xa5
 8008382:	f002 fdce 	bl	800af22 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008390:	3b01      	subs	r3, #1
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00b      	beq.n	80083c2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	617b      	str	r3, [r7, #20]
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	e7fd      	b.n	80083be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01f      	beq.n	8008408 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083c8:	2300      	movs	r3, #0
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	e012      	b.n	80083f4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	7819      	ldrb	r1, [r3, #0]
 80083d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	4413      	add	r3, r2
 80083dc:	3334      	adds	r3, #52	@ 0x34
 80083de:	460a      	mov	r2, r1
 80083e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	4413      	add	r3, r2
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d006      	beq.n	80083fc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	3301      	adds	r3, #1
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d9e9      	bls.n	80083ce <prvInitialiseNewTask+0x66>
 80083fa:	e000      	b.n	80083fe <prvInitialiseNewTask+0x96>
			{
				break;
 80083fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008406:	e003      	b.n	8008410 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	2b37      	cmp	r3, #55	@ 0x37
 8008414:	d901      	bls.n	800841a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008416:	2337      	movs	r3, #55	@ 0x37
 8008418:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800841e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008424:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	2200      	movs	r2, #0
 800842a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800842c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fecc 	bl	80071ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	3318      	adds	r3, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fec7 	bl	80071ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008444:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008448:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008454:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	2200      	movs	r2, #0
 8008462:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	3354      	adds	r3, #84	@ 0x54
 800846a:	224c      	movs	r2, #76	@ 0x4c
 800846c:	2100      	movs	r1, #0
 800846e:	4618      	mov	r0, r3
 8008470:	f002 fd57 	bl	800af22 <memset>
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	4a0d      	ldr	r2, [pc, #52]	@ (80084ac <prvInitialiseNewTask+0x144>)
 8008478:	659a      	str	r2, [r3, #88]	@ 0x58
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	4a0c      	ldr	r2, [pc, #48]	@ (80084b0 <prvInitialiseNewTask+0x148>)
 800847e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	4a0c      	ldr	r2, [pc, #48]	@ (80084b4 <prvInitialiseNewTask+0x14c>)
 8008484:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	68f9      	ldr	r1, [r7, #12]
 800848a:	69b8      	ldr	r0, [r7, #24]
 800848c:	f001 fb98 	bl	8009bc0 <pxPortInitialiseStack>
 8008490:	4602      	mov	r2, r0
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800849c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084a2:	bf00      	nop
 80084a4:	3720      	adds	r7, #32
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20003210 	.word	0x20003210
 80084b0:	20003278 	.word	0x20003278
 80084b4:	200032e0 	.word	0x200032e0

080084b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084c0:	f001 fc6c 	bl	8009d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084c4:	4b2d      	ldr	r3, [pc, #180]	@ (800857c <prvAddNewTaskToReadyList+0xc4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	4a2c      	ldr	r2, [pc, #176]	@ (800857c <prvAddNewTaskToReadyList+0xc4>)
 80084cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084ce:	4b2c      	ldr	r3, [pc, #176]	@ (8008580 <prvAddNewTaskToReadyList+0xc8>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d109      	bne.n	80084ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008580 <prvAddNewTaskToReadyList+0xc8>)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084dc:	4b27      	ldr	r3, [pc, #156]	@ (800857c <prvAddNewTaskToReadyList+0xc4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d110      	bne.n	8008506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084e4:	f000 fd28 	bl	8008f38 <prvInitialiseTaskLists>
 80084e8:	e00d      	b.n	8008506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084ea:	4b26      	ldr	r3, [pc, #152]	@ (8008584 <prvAddNewTaskToReadyList+0xcc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084f2:	4b23      	ldr	r3, [pc, #140]	@ (8008580 <prvAddNewTaskToReadyList+0xc8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d802      	bhi.n	8008506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008500:	4a1f      	ldr	r2, [pc, #124]	@ (8008580 <prvAddNewTaskToReadyList+0xc8>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008506:	4b20      	ldr	r3, [pc, #128]	@ (8008588 <prvAddNewTaskToReadyList+0xd0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	4a1e      	ldr	r2, [pc, #120]	@ (8008588 <prvAddNewTaskToReadyList+0xd0>)
 800850e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008510:	4b1d      	ldr	r3, [pc, #116]	@ (8008588 <prvAddNewTaskToReadyList+0xd0>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851c:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <prvAddNewTaskToReadyList+0xd4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d903      	bls.n	800852c <prvAddNewTaskToReadyList+0x74>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	4a18      	ldr	r2, [pc, #96]	@ (800858c <prvAddNewTaskToReadyList+0xd4>)
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4a15      	ldr	r2, [pc, #84]	@ (8008590 <prvAddNewTaskToReadyList+0xd8>)
 800853a:	441a      	add	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3304      	adds	r3, #4
 8008540:	4619      	mov	r1, r3
 8008542:	4610      	mov	r0, r2
 8008544:	f7fe fe4f 	bl	80071e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008548:	f001 fc58 	bl	8009dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800854c:	4b0d      	ldr	r3, [pc, #52]	@ (8008584 <prvAddNewTaskToReadyList+0xcc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00e      	beq.n	8008572 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008554:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <prvAddNewTaskToReadyList+0xc8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	429a      	cmp	r2, r3
 8008560:	d207      	bcs.n	8008572 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008562:	4b0c      	ldr	r3, [pc, #48]	@ (8008594 <prvAddNewTaskToReadyList+0xdc>)
 8008564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20001090 	.word	0x20001090
 8008580:	20000bbc 	.word	0x20000bbc
 8008584:	2000109c 	.word	0x2000109c
 8008588:	200010ac 	.word	0x200010ac
 800858c:	20001098 	.word	0x20001098
 8008590:	20000bc0 	.word	0x20000bc0
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	@ 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10b      	bne.n	80085c4 <vTaskDelayUntil+0x2c>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	617b      	str	r3, [r7, #20]
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10b      	bne.n	80085e2 <vTaskDelayUntil+0x4a>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	613b      	str	r3, [r7, #16]
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	e7fd      	b.n	80085de <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80085e2:	4b2a      	ldr	r3, [pc, #168]	@ (800868c <vTaskDelayUntil+0xf4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <vTaskDelayUntil+0x6a>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60fb      	str	r3, [r7, #12]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8008602:	f000 f8b9 	bl	8008778 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008606:	4b22      	ldr	r3, [pc, #136]	@ (8008690 <vTaskDelayUntil+0xf8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	4413      	add	r3, r2
 8008614:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6a3a      	ldr	r2, [r7, #32]
 800861c:	429a      	cmp	r2, r3
 800861e:	d20b      	bcs.n	8008638 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	429a      	cmp	r2, r3
 8008628:	d211      	bcs.n	800864e <vTaskDelayUntil+0xb6>
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	429a      	cmp	r2, r3
 8008630:	d90d      	bls.n	800864e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008632:	2301      	movs	r3, #1
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
 8008636:	e00a      	b.n	800864e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	429a      	cmp	r2, r3
 8008640:	d303      	bcc.n	800864a <vTaskDelayUntil+0xb2>
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	429a      	cmp	r2, r3
 8008648:	d901      	bls.n	800864e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800864a:	2301      	movs	r3, #1
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008656:	2b00      	cmp	r3, #0
 8008658:	d006      	beq.n	8008668 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fee0 	bl	8009428 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008668:	f000 f894 	bl	8008794 <xTaskResumeAll>
 800866c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d107      	bne.n	8008684 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8008674:	4b07      	ldr	r3, [pc, #28]	@ (8008694 <vTaskDelayUntil+0xfc>)
 8008676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008684:	bf00      	nop
 8008686:	3728      	adds	r7, #40	@ 0x28
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	200010b8 	.word	0x200010b8
 8008690:	20001094 	.word	0x20001094
 8008694:	e000ed04 	.word	0xe000ed04

08008698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08a      	sub	sp, #40	@ 0x28
 800869c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086a6:	463a      	mov	r2, r7
 80086a8:	1d39      	adds	r1, r7, #4
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe faca 	bl	8006c48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	9202      	str	r2, [sp, #8]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	2300      	movs	r3, #0
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	2300      	movs	r3, #0
 80086c4:	460a      	mov	r2, r1
 80086c6:	4924      	ldr	r1, [pc, #144]	@ (8008758 <vTaskStartScheduler+0xc0>)
 80086c8:	4824      	ldr	r0, [pc, #144]	@ (800875c <vTaskStartScheduler+0xc4>)
 80086ca:	f7ff fda7 	bl	800821c <xTaskCreateStatic>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4a23      	ldr	r2, [pc, #140]	@ (8008760 <vTaskStartScheduler+0xc8>)
 80086d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086d4:	4b22      	ldr	r3, [pc, #136]	@ (8008760 <vTaskStartScheduler+0xc8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086dc:	2301      	movs	r3, #1
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	e001      	b.n	80086e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086ec:	f000 fef0 	bl	80094d0 <xTimerCreateTimerTask>
 80086f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d11b      	bne.n	8008730 <vTaskStartScheduler+0x98>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	613b      	str	r3, [r7, #16]
}
 800870a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800870c:	4b15      	ldr	r3, [pc, #84]	@ (8008764 <vTaskStartScheduler+0xcc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3354      	adds	r3, #84	@ 0x54
 8008712:	4a15      	ldr	r2, [pc, #84]	@ (8008768 <vTaskStartScheduler+0xd0>)
 8008714:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008716:	4b15      	ldr	r3, [pc, #84]	@ (800876c <vTaskStartScheduler+0xd4>)
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800871e:	4b14      	ldr	r3, [pc, #80]	@ (8008770 <vTaskStartScheduler+0xd8>)
 8008720:	2201      	movs	r2, #1
 8008722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008724:	4b13      	ldr	r3, [pc, #76]	@ (8008774 <vTaskStartScheduler+0xdc>)
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800872a:	f001 fac5 	bl	8009cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800872e:	e00f      	b.n	8008750 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d10b      	bne.n	8008750 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	60fb      	str	r3, [r7, #12]
}
 800874a:	bf00      	nop
 800874c:	bf00      	nop
 800874e:	e7fd      	b.n	800874c <vTaskStartScheduler+0xb4>
}
 8008750:	bf00      	nop
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	0800dcc8 	.word	0x0800dcc8
 800875c:	08008f09 	.word	0x08008f09
 8008760:	200010b4 	.word	0x200010b4
 8008764:	20000bbc 	.word	0x20000bbc
 8008768:	20000030 	.word	0x20000030
 800876c:	200010b0 	.word	0x200010b0
 8008770:	2000109c 	.word	0x2000109c
 8008774:	20001094 	.word	0x20001094

08008778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800877c:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <vTaskSuspendAll+0x18>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	4a03      	ldr	r2, [pc, #12]	@ (8008790 <vTaskSuspendAll+0x18>)
 8008784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008786:	bf00      	nop
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	200010b8 	.word	0x200010b8

08008794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087a2:	4b42      	ldr	r3, [pc, #264]	@ (80088ac <xTaskResumeAll+0x118>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	603b      	str	r3, [r7, #0]
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	e7fd      	b.n	80087be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087c2:	f001 faeb 	bl	8009d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087c6:	4b39      	ldr	r3, [pc, #228]	@ (80088ac <xTaskResumeAll+0x118>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	4a37      	ldr	r2, [pc, #220]	@ (80088ac <xTaskResumeAll+0x118>)
 80087ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d0:	4b36      	ldr	r3, [pc, #216]	@ (80088ac <xTaskResumeAll+0x118>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d162      	bne.n	800889e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087d8:	4b35      	ldr	r3, [pc, #212]	@ (80088b0 <xTaskResumeAll+0x11c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d05e      	beq.n	800889e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087e0:	e02f      	b.n	8008842 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e2:	4b34      	ldr	r3, [pc, #208]	@ (80088b4 <xTaskResumeAll+0x120>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3318      	adds	r3, #24
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fd54 	bl	800729c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fd4f 	bl	800729c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008802:	4b2d      	ldr	r3, [pc, #180]	@ (80088b8 <xTaskResumeAll+0x124>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d903      	bls.n	8008812 <xTaskResumeAll+0x7e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880e:	4a2a      	ldr	r2, [pc, #168]	@ (80088b8 <xTaskResumeAll+0x124>)
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4a27      	ldr	r2, [pc, #156]	@ (80088bc <xTaskResumeAll+0x128>)
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3304      	adds	r3, #4
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f7fe fcdc 	bl	80071e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008832:	4b23      	ldr	r3, [pc, #140]	@ (80088c0 <xTaskResumeAll+0x12c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008838:	429a      	cmp	r2, r3
 800883a:	d302      	bcc.n	8008842 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800883c:	4b21      	ldr	r3, [pc, #132]	@ (80088c4 <xTaskResumeAll+0x130>)
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008842:	4b1c      	ldr	r3, [pc, #112]	@ (80088b4 <xTaskResumeAll+0x120>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1cb      	bne.n	80087e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008850:	f000 fc16 	bl	8009080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008854:	4b1c      	ldr	r3, [pc, #112]	@ (80088c8 <xTaskResumeAll+0x134>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d010      	beq.n	8008882 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008860:	f000 f856 	bl	8008910 <xTaskIncrementTick>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800886a:	4b16      	ldr	r3, [pc, #88]	@ (80088c4 <xTaskResumeAll+0x130>)
 800886c:	2201      	movs	r2, #1
 800886e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3b01      	subs	r3, #1
 8008874:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f1      	bne.n	8008860 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800887c:	4b12      	ldr	r3, [pc, #72]	@ (80088c8 <xTaskResumeAll+0x134>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008882:	4b10      	ldr	r3, [pc, #64]	@ (80088c4 <xTaskResumeAll+0x130>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800888a:	2301      	movs	r3, #1
 800888c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800888e:	4b0f      	ldr	r3, [pc, #60]	@ (80088cc <xTaskResumeAll+0x138>)
 8008890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800889e:	f001 faad 	bl	8009dfc <vPortExitCritical>

	return xAlreadyYielded;
 80088a2:	68bb      	ldr	r3, [r7, #8]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	200010b8 	.word	0x200010b8
 80088b0:	20001090 	.word	0x20001090
 80088b4:	20001050 	.word	0x20001050
 80088b8:	20001098 	.word	0x20001098
 80088bc:	20000bc0 	.word	0x20000bc0
 80088c0:	20000bbc 	.word	0x20000bbc
 80088c4:	200010a4 	.word	0x200010a4
 80088c8:	200010a0 	.word	0x200010a0
 80088cc:	e000ed04 	.word	0xe000ed04

080088d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088d6:	4b04      	ldr	r3, [pc, #16]	@ (80088e8 <xTaskGetTickCount+0x18>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088dc:	687b      	ldr	r3, [r7, #4]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bc80      	pop	{r7}
 80088e6:	4770      	bx	lr
 80088e8:	20001094 	.word	0x20001094

080088ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088f2:	f001 fb15 	bl	8009f20 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80088fa:	4b04      	ldr	r3, [pc, #16]	@ (800890c <xTaskGetTickCountFromISR+0x20>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008900:	683b      	ldr	r3, [r7, #0]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20001094 	.word	0x20001094

08008910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891a:	4b4f      	ldr	r3, [pc, #316]	@ (8008a58 <xTaskIncrementTick+0x148>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 8090 	bne.w	8008a44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008924:	4b4d      	ldr	r3, [pc, #308]	@ (8008a5c <xTaskIncrementTick+0x14c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800892c:	4a4b      	ldr	r2, [pc, #300]	@ (8008a5c <xTaskIncrementTick+0x14c>)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d121      	bne.n	800897c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008938:	4b49      	ldr	r3, [pc, #292]	@ (8008a60 <xTaskIncrementTick+0x150>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	603b      	str	r3, [r7, #0]
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	e7fd      	b.n	8008956 <xTaskIncrementTick+0x46>
 800895a:	4b41      	ldr	r3, [pc, #260]	@ (8008a60 <xTaskIncrementTick+0x150>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	4b40      	ldr	r3, [pc, #256]	@ (8008a64 <xTaskIncrementTick+0x154>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a3e      	ldr	r2, [pc, #248]	@ (8008a60 <xTaskIncrementTick+0x150>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	4a3e      	ldr	r2, [pc, #248]	@ (8008a64 <xTaskIncrementTick+0x154>)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a68 <xTaskIncrementTick+0x158>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	4a3c      	ldr	r2, [pc, #240]	@ (8008a68 <xTaskIncrementTick+0x158>)
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	f000 fb82 	bl	8009080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800897c:	4b3b      	ldr	r3, [pc, #236]	@ (8008a6c <xTaskIncrementTick+0x15c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	429a      	cmp	r2, r3
 8008984:	d349      	bcc.n	8008a1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008986:	4b36      	ldr	r3, [pc, #216]	@ (8008a60 <xTaskIncrementTick+0x150>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008990:	4b36      	ldr	r3, [pc, #216]	@ (8008a6c <xTaskIncrementTick+0x15c>)
 8008992:	f04f 32ff 	mov.w	r2, #4294967295
 8008996:	601a      	str	r2, [r3, #0]
					break;
 8008998:	e03f      	b.n	8008a1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800899a:	4b31      	ldr	r3, [pc, #196]	@ (8008a60 <xTaskIncrementTick+0x150>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d203      	bcs.n	80089ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089b2:	4a2e      	ldr	r2, [pc, #184]	@ (8008a6c <xTaskIncrementTick+0x15c>)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089b8:	e02f      	b.n	8008a1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	3304      	adds	r3, #4
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fc6c 	bl	800729c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d004      	beq.n	80089d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3318      	adds	r3, #24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fc63 	bl	800729c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089da:	4b25      	ldr	r3, [pc, #148]	@ (8008a70 <xTaskIncrementTick+0x160>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d903      	bls.n	80089ea <xTaskIncrementTick+0xda>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e6:	4a22      	ldr	r2, [pc, #136]	@ (8008a70 <xTaskIncrementTick+0x160>)
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ee:	4613      	mov	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a74 <xTaskIncrementTick+0x164>)
 80089f8:	441a      	add	r2, r3
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7fe fbf0 	bl	80071e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a78 <xTaskIncrementTick+0x168>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d3b8      	bcc.n	8008986 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008a14:	2301      	movs	r3, #1
 8008a16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a18:	e7b5      	b.n	8008986 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a1a:	4b17      	ldr	r3, [pc, #92]	@ (8008a78 <xTaskIncrementTick+0x168>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a20:	4914      	ldr	r1, [pc, #80]	@ (8008a74 <xTaskIncrementTick+0x164>)
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	440b      	add	r3, r1
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d901      	bls.n	8008a36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008a32:	2301      	movs	r3, #1
 8008a34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a36:	4b11      	ldr	r3, [pc, #68]	@ (8008a7c <xTaskIncrementTick+0x16c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d007      	beq.n	8008a4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e004      	b.n	8008a4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a44:	4b0e      	ldr	r3, [pc, #56]	@ (8008a80 <xTaskIncrementTick+0x170>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8008a80 <xTaskIncrementTick+0x170>)
 8008a4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a4e:	697b      	ldr	r3, [r7, #20]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	200010b8 	.word	0x200010b8
 8008a5c:	20001094 	.word	0x20001094
 8008a60:	20001048 	.word	0x20001048
 8008a64:	2000104c 	.word	0x2000104c
 8008a68:	200010a8 	.word	0x200010a8
 8008a6c:	200010b0 	.word	0x200010b0
 8008a70:	20001098 	.word	0x20001098
 8008a74:	20000bc0 	.word	0x20000bc0
 8008a78:	20000bbc 	.word	0x20000bbc
 8008a7c:	200010a4 	.word	0x200010a4
 8008a80:	200010a0 	.word	0x200010a0

08008a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8008b34 <vTaskSwitchContext+0xb0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a92:	4b29      	ldr	r3, [pc, #164]	@ (8008b38 <vTaskSwitchContext+0xb4>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a98:	e047      	b.n	8008b2a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008a9a:	4b27      	ldr	r3, [pc, #156]	@ (8008b38 <vTaskSwitchContext+0xb4>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	4b26      	ldr	r3, [pc, #152]	@ (8008b3c <vTaskSwitchContext+0xb8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e011      	b.n	8008acc <vTaskSwitchContext+0x48>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <vTaskSwitchContext+0x3e>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	491c      	ldr	r1, [pc, #112]	@ (8008b40 <vTaskSwitchContext+0xbc>)
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0e3      	beq.n	8008aa8 <vTaskSwitchContext+0x24>
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4a15      	ldr	r2, [pc, #84]	@ (8008b40 <vTaskSwitchContext+0xbc>)
 8008aec:	4413      	add	r3, r2
 8008aee:	60bb      	str	r3, [r7, #8]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	605a      	str	r2, [r3, #4]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	3308      	adds	r3, #8
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d104      	bne.n	8008b10 <vTaskSwitchContext+0x8c>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	605a      	str	r2, [r3, #4]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	4a0b      	ldr	r2, [pc, #44]	@ (8008b44 <vTaskSwitchContext+0xc0>)
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	4a08      	ldr	r2, [pc, #32]	@ (8008b3c <vTaskSwitchContext+0xb8>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b20:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <vTaskSwitchContext+0xc0>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3354      	adds	r3, #84	@ 0x54
 8008b26:	4a08      	ldr	r2, [pc, #32]	@ (8008b48 <vTaskSwitchContext+0xc4>)
 8008b28:	6013      	str	r3, [r2, #0]
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr
 8008b34:	200010b8 	.word	0x200010b8
 8008b38:	200010a4 	.word	0x200010a4
 8008b3c:	20001098 	.word	0x20001098
 8008b40:	20000bc0 	.word	0x20000bc0
 8008b44:	20000bbc 	.word	0x20000bbc
 8008b48:	20000030 	.word	0x20000030

08008b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10b      	bne.n	8008b74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60fb      	str	r3, [r7, #12]
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	e7fd      	b.n	8008b70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b74:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <vTaskPlaceOnEventList+0x48>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3318      	adds	r3, #24
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7fe fb55 	bl	800722c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b82:	2101      	movs	r1, #1
 8008b84:	6838      	ldr	r0, [r7, #0]
 8008b86:	f000 fc4f 	bl	8009428 <prvAddCurrentTaskToDelayedList>
}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000bbc 	.word	0x20000bbc

08008b98 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	617b      	str	r3, [r7, #20]
}
 8008bbc:	bf00      	nop
 8008bbe:	bf00      	nop
 8008bc0:	e7fd      	b.n	8008bbe <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008bc2:	4b12      	ldr	r3, [pc, #72]	@ (8008c0c <vTaskPlaceOnUnorderedEventList+0x74>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	613b      	str	r3, [r7, #16]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008be2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c10 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008bec:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bee:	4b08      	ldr	r3, [pc, #32]	@ (8008c10 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3318      	adds	r3, #24
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7fe faf5 	bl	80071e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fc12 	bl	8009428 <prvAddCurrentTaskToDelayedList>
}
 8008c04:	bf00      	nop
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	200010b8 	.word	0x200010b8
 8008c10:	20000bbc 	.word	0x20000bbc

08008c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	617b      	str	r3, [r7, #20]
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	e7fd      	b.n	8008c3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c68 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3318      	adds	r3, #24
 8008c44:	4619      	mov	r1, r3
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7fe facd 	bl	80071e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008c52:	f04f 33ff 	mov.w	r3, #4294967295
 8008c56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	68b8      	ldr	r0, [r7, #8]
 8008c5c:	f000 fbe4 	bl	8009428 <prvAddCurrentTaskToDelayedList>
	}
 8008c60:	bf00      	nop
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20000bbc 	.word	0x20000bbc

08008c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10b      	bne.n	8008c9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	60fb      	str	r3, [r7, #12]
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	e7fd      	b.n	8008c96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fafc 	bl	800729c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d1c <xTaskRemoveFromEventList+0xb0>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11d      	bne.n	8008ce8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fe faf3 	bl	800729c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cba:	4b19      	ldr	r3, [pc, #100]	@ (8008d20 <xTaskRemoveFromEventList+0xb4>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d903      	bls.n	8008cca <xTaskRemoveFromEventList+0x5e>
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc6:	4a16      	ldr	r2, [pc, #88]	@ (8008d20 <xTaskRemoveFromEventList+0xb4>)
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4a13      	ldr	r2, [pc, #76]	@ (8008d24 <xTaskRemoveFromEventList+0xb8>)
 8008cd8:	441a      	add	r2, r3
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f7fe fa80 	bl	80071e6 <vListInsertEnd>
 8008ce6:	e005      	b.n	8008cf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	3318      	adds	r3, #24
 8008cec:	4619      	mov	r1, r3
 8008cee:	480e      	ldr	r0, [pc, #56]	@ (8008d28 <xTaskRemoveFromEventList+0xbc>)
 8008cf0:	f7fe fa79 	bl	80071e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d2c <xTaskRemoveFromEventList+0xc0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d905      	bls.n	8008d0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d02:	2301      	movs	r3, #1
 8008d04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d06:	4b0a      	ldr	r3, [pc, #40]	@ (8008d30 <xTaskRemoveFromEventList+0xc4>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	e001      	b.n	8008d12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d12:	697b      	ldr	r3, [r7, #20]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	200010b8 	.word	0x200010b8
 8008d20:	20001098 	.word	0x20001098
 8008d24:	20000bc0 	.word	0x20000bc0
 8008d28:	20001050 	.word	0x20001050
 8008d2c:	20000bbc 	.word	0x20000bbc
 8008d30:	200010a4 	.word	0x200010a4

08008d34 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008de8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	613b      	str	r3, [r7, #16]
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	e7fd      	b.n	8008d5a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10b      	bne.n	8008d8c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	60fb      	str	r3, [r7, #12]
}
 8008d86:	bf00      	nop
 8008d88:	bf00      	nop
 8008d8a:	e7fd      	b.n	8008d88 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7fe fa85 	bl	800729c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fa80 	bl	800729c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da0:	4b12      	ldr	r3, [pc, #72]	@ (8008dec <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d903      	bls.n	8008db0 <vTaskRemoveFromUnorderedEventList+0x7c>
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	4a0f      	ldr	r2, [pc, #60]	@ (8008dec <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8008df0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008dbe:	441a      	add	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fa0d 	bl	80071e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd0:	4b08      	ldr	r3, [pc, #32]	@ (8008df4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d902      	bls.n	8008de0 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008dda:	4b07      	ldr	r3, [pc, #28]	@ (8008df8 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
	}
}
 8008de0:	bf00      	nop
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	200010b8 	.word	0x200010b8
 8008dec:	20001098 	.word	0x20001098
 8008df0:	20000bc0 	.word	0x20000bc0
 8008df4:	20000bbc 	.word	0x20000bbc
 8008df8:	200010a4 	.word	0x200010a4

08008dfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e04:	4b06      	ldr	r3, [pc, #24]	@ (8008e20 <vTaskInternalSetTimeOutState+0x24>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <vTaskInternalSetTimeOutState+0x28>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	605a      	str	r2, [r3, #4]
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	200010a8 	.word	0x200010a8
 8008e24:	20001094 	.word	0x20001094

08008e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10b      	bne.n	8008e50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	613b      	str	r3, [r7, #16]
}
 8008e4a:	bf00      	nop
 8008e4c:	bf00      	nop
 8008e4e:	e7fd      	b.n	8008e4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10b      	bne.n	8008e6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	60fb      	str	r3, [r7, #12]
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008e6e:	f000 ff95 	bl	8009d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee8 <xTaskCheckForTimeOut+0xc0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8a:	d102      	bne.n	8008e92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61fb      	str	r3, [r7, #28]
 8008e90:	e023      	b.n	8008eda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <xTaskCheckForTimeOut+0xc4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d007      	beq.n	8008eae <xTaskCheckForTimeOut+0x86>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d302      	bcc.n	8008eae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	e015      	b.n	8008eda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d20b      	bcs.n	8008ed0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff ff99 	bl	8008dfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61fb      	str	r3, [r7, #28]
 8008ece:	e004      	b.n	8008eda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008eda:	f000 ff8f 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8008ede:	69fb      	ldr	r3, [r7, #28]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3720      	adds	r7, #32
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20001094 	.word	0x20001094
 8008eec:	200010a8 	.word	0x200010a8

08008ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ef4:	4b03      	ldr	r3, [pc, #12]	@ (8008f04 <vTaskMissedYield+0x14>)
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]
}
 8008efa:	bf00      	nop
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	200010a4 	.word	0x200010a4

08008f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f10:	f000 f852 	bl	8008fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f14:	4b06      	ldr	r3, [pc, #24]	@ (8008f30 <prvIdleTask+0x28>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d9f9      	bls.n	8008f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f1c:	4b05      	ldr	r3, [pc, #20]	@ (8008f34 <prvIdleTask+0x2c>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f2c:	e7f0      	b.n	8008f10 <prvIdleTask+0x8>
 8008f2e:	bf00      	nop
 8008f30:	20000bc0 	.word	0x20000bc0
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f3e:	2300      	movs	r3, #0
 8008f40:	607b      	str	r3, [r7, #4]
 8008f42:	e00c      	b.n	8008f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4a12      	ldr	r2, [pc, #72]	@ (8008f98 <prvInitialiseTaskLists+0x60>)
 8008f50:	4413      	add	r3, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe f91c 	bl	8007190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	607b      	str	r3, [r7, #4]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b37      	cmp	r3, #55	@ 0x37
 8008f62:	d9ef      	bls.n	8008f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f64:	480d      	ldr	r0, [pc, #52]	@ (8008f9c <prvInitialiseTaskLists+0x64>)
 8008f66:	f7fe f913 	bl	8007190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f6a:	480d      	ldr	r0, [pc, #52]	@ (8008fa0 <prvInitialiseTaskLists+0x68>)
 8008f6c:	f7fe f910 	bl	8007190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f70:	480c      	ldr	r0, [pc, #48]	@ (8008fa4 <prvInitialiseTaskLists+0x6c>)
 8008f72:	f7fe f90d 	bl	8007190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f76:	480c      	ldr	r0, [pc, #48]	@ (8008fa8 <prvInitialiseTaskLists+0x70>)
 8008f78:	f7fe f90a 	bl	8007190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f7c:	480b      	ldr	r0, [pc, #44]	@ (8008fac <prvInitialiseTaskLists+0x74>)
 8008f7e:	f7fe f907 	bl	8007190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f82:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb0 <prvInitialiseTaskLists+0x78>)
 8008f84:	4a05      	ldr	r2, [pc, #20]	@ (8008f9c <prvInitialiseTaskLists+0x64>)
 8008f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f88:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb4 <prvInitialiseTaskLists+0x7c>)
 8008f8a:	4a05      	ldr	r2, [pc, #20]	@ (8008fa0 <prvInitialiseTaskLists+0x68>)
 8008f8c:	601a      	str	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20000bc0 	.word	0x20000bc0
 8008f9c:	20001020 	.word	0x20001020
 8008fa0:	20001034 	.word	0x20001034
 8008fa4:	20001050 	.word	0x20001050
 8008fa8:	20001064 	.word	0x20001064
 8008fac:	2000107c 	.word	0x2000107c
 8008fb0:	20001048 	.word	0x20001048
 8008fb4:	2000104c 	.word	0x2000104c

08008fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fbe:	e019      	b.n	8008ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fc0:	f000 feec 	bl	8009d9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc4:	4b10      	ldr	r3, [pc, #64]	@ (8009008 <prvCheckTasksWaitingTermination+0x50>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fe f963 	bl	800729c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <prvCheckTasksWaitingTermination+0x54>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800900c <prvCheckTasksWaitingTermination+0x54>)
 8008fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8009010 <prvCheckTasksWaitingTermination+0x58>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8009010 <prvCheckTasksWaitingTermination+0x58>)
 8008fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fea:	f000 ff07 	bl	8009dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f810 	bl	8009014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ff4:	4b06      	ldr	r3, [pc, #24]	@ (8009010 <prvCheckTasksWaitingTermination+0x58>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e1      	bne.n	8008fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20001064 	.word	0x20001064
 800900c:	20001090 	.word	0x20001090
 8009010:	20001078 	.word	0x20001078

08009014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3354      	adds	r3, #84	@ 0x54
 8009020:	4618      	mov	r0, r3
 8009022:	f001 ffd9 	bl	800afd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800902c:	2b00      	cmp	r3, #0
 800902e:	d108      	bne.n	8009042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009034:	4618      	mov	r0, r3
 8009036:	f001 f881 	bl	800a13c <vPortFree>
				vPortFree( pxTCB );
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 f87e 	bl	800a13c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009040:	e019      	b.n	8009076 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009048:	2b01      	cmp	r3, #1
 800904a:	d103      	bne.n	8009054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f875 	bl	800a13c <vPortFree>
	}
 8009052:	e010      	b.n	8009076 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800905a:	2b02      	cmp	r3, #2
 800905c:	d00b      	beq.n	8009076 <prvDeleteTCB+0x62>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	60fb      	str	r3, [r7, #12]
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	e7fd      	b.n	8009072 <prvDeleteTCB+0x5e>
	}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009086:	4b0c      	ldr	r3, [pc, #48]	@ (80090b8 <prvResetNextTaskUnblockTime+0x38>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009090:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <prvResetNextTaskUnblockTime+0x3c>)
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009098:	e008      	b.n	80090ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909a:	4b07      	ldr	r3, [pc, #28]	@ (80090b8 <prvResetNextTaskUnblockTime+0x38>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	4a04      	ldr	r2, [pc, #16]	@ (80090bc <prvResetNextTaskUnblockTime+0x3c>)
 80090aa:	6013      	str	r3, [r2, #0]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20001048 	.word	0x20001048
 80090bc:	200010b0 	.word	0x200010b0

080090c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80090c6:	4b04      	ldr	r3, [pc, #16]	@ (80090d8 <xTaskGetCurrentTaskHandle+0x18>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 80090cc:	687b      	ldr	r3, [r7, #4]
	}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc80      	pop	{r7}
 80090d6:	4770      	bx	lr
 80090d8:	20000bbc 	.word	0x20000bbc

080090dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <xTaskGetSchedulerState+0x34>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090ea:	2301      	movs	r3, #1
 80090ec:	607b      	str	r3, [r7, #4]
 80090ee:	e008      	b.n	8009102 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090f0:	4b08      	ldr	r3, [pc, #32]	@ (8009114 <xTaskGetSchedulerState+0x38>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d102      	bne.n	80090fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090f8:	2302      	movs	r3, #2
 80090fa:	607b      	str	r3, [r7, #4]
 80090fc:	e001      	b.n	8009102 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090fe:	2300      	movs	r3, #0
 8009100:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009102:	687b      	ldr	r3, [r7, #4]
	}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	2000109c 	.word	0x2000109c
 8009114:	200010b8 	.word	0x200010b8

08009118 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009124:	2300      	movs	r3, #0
 8009126:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d051      	beq.n	80091d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009132:	4b2a      	ldr	r3, [pc, #168]	@ (80091dc <xTaskPriorityInherit+0xc4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009138:	429a      	cmp	r2, r3
 800913a:	d241      	bcs.n	80091c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	db06      	blt.n	8009152 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009144:	4b25      	ldr	r3, [pc, #148]	@ (80091dc <xTaskPriorityInherit+0xc4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	6959      	ldr	r1, [r3, #20]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4a1f      	ldr	r2, [pc, #124]	@ (80091e0 <xTaskPriorityInherit+0xc8>)
 8009164:	4413      	add	r3, r2
 8009166:	4299      	cmp	r1, r3
 8009168:	d122      	bne.n	80091b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	3304      	adds	r3, #4
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe f894 	bl	800729c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009174:	4b19      	ldr	r3, [pc, #100]	@ (80091dc <xTaskPriorityInherit+0xc4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009182:	4b18      	ldr	r3, [pc, #96]	@ (80091e4 <xTaskPriorityInherit+0xcc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d903      	bls.n	8009192 <xTaskPriorityInherit+0x7a>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918e:	4a15      	ldr	r2, [pc, #84]	@ (80091e4 <xTaskPriorityInherit+0xcc>)
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4a10      	ldr	r2, [pc, #64]	@ (80091e0 <xTaskPriorityInherit+0xc8>)
 80091a0:	441a      	add	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4619      	mov	r1, r3
 80091a8:	4610      	mov	r0, r2
 80091aa:	f7fe f81c 	bl	80071e6 <vListInsertEnd>
 80091ae:	e004      	b.n	80091ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <xTaskPriorityInherit+0xc4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091ba:	2301      	movs	r3, #1
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	e008      	b.n	80091d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091c4:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <xTaskPriorityInherit+0xc4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d201      	bcs.n	80091d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80091ce:	2301      	movs	r3, #1
 80091d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091d2:	68fb      	ldr	r3, [r7, #12]
	}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	20000bbc 	.word	0x20000bbc
 80091e0:	20000bc0 	.word	0x20000bc0
 80091e4:	20001098 	.word	0x20001098

080091e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d058      	beq.n	80092b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091fe:	4b2f      	ldr	r3, [pc, #188]	@ (80092bc <xTaskPriorityDisinherit+0xd4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	429a      	cmp	r2, r3
 8009206:	d00b      	beq.n	8009220 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	60fb      	str	r3, [r7, #12]
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	e7fd      	b.n	800921c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10b      	bne.n	8009240 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	60bb      	str	r3, [r7, #8]
}
 800923a:	bf00      	nop
 800923c:	bf00      	nop
 800923e:	e7fd      	b.n	800923c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009244:	1e5a      	subs	r2, r3, #1
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009252:	429a      	cmp	r2, r3
 8009254:	d02c      	beq.n	80092b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800925a:	2b00      	cmp	r3, #0
 800925c:	d128      	bne.n	80092b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	3304      	adds	r3, #4
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe f81a 	bl	800729c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009280:	4b0f      	ldr	r3, [pc, #60]	@ (80092c0 <xTaskPriorityDisinherit+0xd8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d903      	bls.n	8009290 <xTaskPriorityDisinherit+0xa8>
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928c:	4a0c      	ldr	r2, [pc, #48]	@ (80092c0 <xTaskPriorityDisinherit+0xd8>)
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4a09      	ldr	r2, [pc, #36]	@ (80092c4 <xTaskPriorityDisinherit+0xdc>)
 800929e:	441a      	add	r2, r3
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7fd ff9d 	bl	80071e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092b0:	697b      	ldr	r3, [r7, #20]
	}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000bbc 	.word	0x20000bbc
 80092c0:	20001098 	.word	0x20001098
 80092c4:	20000bc0 	.word	0x20000bc0

080092c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80092d6:	2301      	movs	r3, #1
 80092d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d06c      	beq.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10b      	bne.n	8009300 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	60fb      	str	r3, [r7, #12]
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d902      	bls.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	61fb      	str	r3, [r7, #28]
 800930e:	e002      	b.n	8009316 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009314:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	429a      	cmp	r2, r3
 800931e:	d04c      	beq.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	429a      	cmp	r2, r3
 8009328:	d147      	bne.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800932a:	4b26      	ldr	r3, [pc, #152]	@ (80093c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	429a      	cmp	r2, r3
 8009332:	d10b      	bne.n	800934c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	60bb      	str	r3, [r7, #8]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009350:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	db04      	blt.n	800936a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	6959      	ldr	r1, [r3, #20]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a13      	ldr	r2, [pc, #76]	@ (80093c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800937a:	4413      	add	r3, r2
 800937c:	4299      	cmp	r1, r3
 800937e:	d11c      	bne.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	3304      	adds	r3, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f7fd ff89 	bl	800729c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938e:	4b0f      	ldr	r3, [pc, #60]	@ (80093cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	429a      	cmp	r2, r3
 8009394:	d903      	bls.n	800939e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939a:	4a0c      	ldr	r2, [pc, #48]	@ (80093cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4a07      	ldr	r2, [pc, #28]	@ (80093c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093ac:	441a      	add	r2, r3
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7fd ff16 	bl	80071e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093ba:	bf00      	nop
 80093bc:	3720      	adds	r7, #32
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000bbc 	.word	0x20000bbc
 80093c8:	20000bc0 	.word	0x20000bc0
 80093cc:	20001098 	.word	0x20001098

080093d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80093d6:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <uxTaskResetEventItemValue+0x2c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093de:	4b07      	ldr	r3, [pc, #28]	@ (80093fc <uxTaskResetEventItemValue+0x2c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <uxTaskResetEventItemValue+0x2c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80093ec:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80093ee:	687b      	ldr	r3, [r7, #4]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	20000bbc 	.word	0x20000bbc

08009400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009404:	4b07      	ldr	r3, [pc, #28]	@ (8009424 <pvTaskIncrementMutexHeldCount+0x24>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800940c:	4b05      	ldr	r3, [pc, #20]	@ (8009424 <pvTaskIncrementMutexHeldCount+0x24>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009412:	3201      	adds	r2, #1
 8009414:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009416:	4b03      	ldr	r3, [pc, #12]	@ (8009424 <pvTaskIncrementMutexHeldCount+0x24>)
 8009418:	681b      	ldr	r3, [r3, #0]
	}
 800941a:	4618      	mov	r0, r3
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000bbc 	.word	0x20000bbc

08009428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009432:	4b21      	ldr	r3, [pc, #132]	@ (80094b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009438:	4b20      	ldr	r3, [pc, #128]	@ (80094bc <prvAddCurrentTaskToDelayedList+0x94>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3304      	adds	r3, #4
 800943e:	4618      	mov	r0, r3
 8009440:	f7fd ff2c 	bl	800729c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d10a      	bne.n	8009462 <prvAddCurrentTaskToDelayedList+0x3a>
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d007      	beq.n	8009462 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009452:	4b1a      	ldr	r3, [pc, #104]	@ (80094bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3304      	adds	r3, #4
 8009458:	4619      	mov	r1, r3
 800945a:	4819      	ldr	r0, [pc, #100]	@ (80094c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800945c:	f7fd fec3 	bl	80071e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009460:	e026      	b.n	80094b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4413      	add	r3, r2
 8009468:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800946a:	4b14      	ldr	r3, [pc, #80]	@ (80094bc <prvAddCurrentTaskToDelayedList+0x94>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	429a      	cmp	r2, r3
 8009478:	d209      	bcs.n	800948e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800947a:	4b12      	ldr	r3, [pc, #72]	@ (80094c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	4b0f      	ldr	r3, [pc, #60]	@ (80094bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3304      	adds	r3, #4
 8009484:	4619      	mov	r1, r3
 8009486:	4610      	mov	r0, r2
 8009488:	f7fd fed0 	bl	800722c <vListInsert>
}
 800948c:	e010      	b.n	80094b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948e:	4b0e      	ldr	r3, [pc, #56]	@ (80094c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3304      	adds	r3, #4
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7fd fec6 	bl	800722c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094a0:	4b0a      	ldr	r3, [pc, #40]	@ (80094cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d202      	bcs.n	80094b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094aa:	4a08      	ldr	r2, [pc, #32]	@ (80094cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	6013      	str	r3, [r2, #0]
}
 80094b0:	bf00      	nop
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20001094 	.word	0x20001094
 80094bc:	20000bbc 	.word	0x20000bbc
 80094c0:	2000107c 	.word	0x2000107c
 80094c4:	2000104c 	.word	0x2000104c
 80094c8:	20001048 	.word	0x20001048
 80094cc:	200010b0 	.word	0x200010b0

080094d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08a      	sub	sp, #40	@ 0x28
 80094d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094da:	f000 fb11 	bl	8009b00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094de:	4b1d      	ldr	r3, [pc, #116]	@ (8009554 <xTimerCreateTimerTask+0x84>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d021      	beq.n	800952a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094ee:	1d3a      	adds	r2, r7, #4
 80094f0:	f107 0108 	add.w	r1, r7, #8
 80094f4:	f107 030c 	add.w	r3, r7, #12
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fd fbbd 	bl	8006c78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	9202      	str	r2, [sp, #8]
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	2302      	movs	r3, #2
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	460a      	mov	r2, r1
 8009510:	4911      	ldr	r1, [pc, #68]	@ (8009558 <xTimerCreateTimerTask+0x88>)
 8009512:	4812      	ldr	r0, [pc, #72]	@ (800955c <xTimerCreateTimerTask+0x8c>)
 8009514:	f7fe fe82 	bl	800821c <xTaskCreateStatic>
 8009518:	4603      	mov	r3, r0
 800951a:	4a11      	ldr	r2, [pc, #68]	@ (8009560 <xTimerCreateTimerTask+0x90>)
 800951c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800951e:	4b10      	ldr	r3, [pc, #64]	@ (8009560 <xTimerCreateTimerTask+0x90>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009526:	2301      	movs	r3, #1
 8009528:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10b      	bne.n	8009548 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	613b      	str	r3, [r7, #16]
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	e7fd      	b.n	8009544 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009548:	697b      	ldr	r3, [r7, #20]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200010ec 	.word	0x200010ec
 8009558:	0800dcd0 	.word	0x0800dcd0
 800955c:	0800969d 	.word	0x0800969d
 8009560:	200010f0 	.word	0x200010f0

08009564 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08a      	sub	sp, #40	@ 0x28
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
 8009570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009572:	2300      	movs	r3, #0
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <xTimerGenericCommand+0x30>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	623b      	str	r3, [r7, #32]
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009594:	4b19      	ldr	r3, [pc, #100]	@ (80095fc <xTimerGenericCommand+0x98>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d02a      	beq.n	80095f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	dc18      	bgt.n	80095e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095ae:	f7ff fd95 	bl	80090dc <xTaskGetSchedulerState>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d109      	bne.n	80095cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095b8:	4b10      	ldr	r3, [pc, #64]	@ (80095fc <xTimerGenericCommand+0x98>)
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	f107 0110 	add.w	r1, r7, #16
 80095c0:	2300      	movs	r3, #0
 80095c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c4:	f7fe f892 	bl	80076ec <xQueueGenericSend>
 80095c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80095ca:	e012      	b.n	80095f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095cc:	4b0b      	ldr	r3, [pc, #44]	@ (80095fc <xTimerGenericCommand+0x98>)
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	f107 0110 	add.w	r1, r7, #16
 80095d4:	2300      	movs	r3, #0
 80095d6:	2200      	movs	r2, #0
 80095d8:	f7fe f888 	bl	80076ec <xQueueGenericSend>
 80095dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80095de:	e008      	b.n	80095f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095e0:	4b06      	ldr	r3, [pc, #24]	@ (80095fc <xTimerGenericCommand+0x98>)
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	f107 0110 	add.w	r1, r7, #16
 80095e8:	2300      	movs	r3, #0
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	f7fe f980 	bl	80078f0 <xQueueGenericSendFromISR>
 80095f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3728      	adds	r7, #40	@ 0x28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	200010ec 	.word	0x200010ec

08009600 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af02      	add	r7, sp, #8
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800960a:	4b23      	ldr	r3, [pc, #140]	@ (8009698 <prvProcessExpiredTimer+0x98>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	3304      	adds	r3, #4
 8009618:	4618      	mov	r0, r3
 800961a:	f7fd fe3f 	bl	800729c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	d023      	beq.n	8009674 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	699a      	ldr	r2, [r3, #24]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	18d1      	adds	r1, r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	6978      	ldr	r0, [r7, #20]
 800963a:	f000 f8d3 	bl	80097e4 <prvInsertTimerInActiveList>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d020      	beq.n	8009686 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009644:	2300      	movs	r3, #0
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	2100      	movs	r1, #0
 800964e:	6978      	ldr	r0, [r7, #20]
 8009650:	f7ff ff88 	bl	8009564 <xTimerGenericCommand>
 8009654:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d114      	bne.n	8009686 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	60fb      	str	r3, [r7, #12]
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800967a:	f023 0301 	bic.w	r3, r3, #1
 800967e:	b2da      	uxtb	r2, r3
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	6978      	ldr	r0, [r7, #20]
 800968c:	4798      	blx	r3
}
 800968e:	bf00      	nop
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200010e4 	.word	0x200010e4

0800969c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096a4:	f107 0308 	add.w	r3, r7, #8
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 f859 	bl	8009760 <prvGetNextExpireTime>
 80096ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4619      	mov	r1, r3
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 f805 	bl	80096c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096ba:	f000 f8d5 	bl	8009868 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096be:	bf00      	nop
 80096c0:	e7f0      	b.n	80096a4 <prvTimerTask+0x8>
	...

080096c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096ce:	f7ff f853 	bl	8008778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d2:	f107 0308 	add.w	r3, r7, #8
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f864 	bl	80097a4 <prvSampleTimeNow>
 80096dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d130      	bne.n	8009746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10a      	bne.n	8009700 <prvProcessTimerOrBlockTask+0x3c>
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d806      	bhi.n	8009700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096f2:	f7ff f84f 	bl	8008794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff ff81 	bl	8009600 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096fe:	e024      	b.n	800974a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009706:	4b13      	ldr	r3, [pc, #76]	@ (8009754 <prvProcessTimerOrBlockTask+0x90>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <prvProcessTimerOrBlockTask+0x50>
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <prvProcessTimerOrBlockTask+0x52>
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009718:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <prvProcessTimerOrBlockTask+0x94>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	f7fe fd45 	bl	80081b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800972a:	f7ff f833 	bl	8008794 <xTaskResumeAll>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009734:	4b09      	ldr	r3, [pc, #36]	@ (800975c <prvProcessTimerOrBlockTask+0x98>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
}
 8009744:	e001      	b.n	800974a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009746:	f7ff f825 	bl	8008794 <xTaskResumeAll>
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	200010e8 	.word	0x200010e8
 8009758:	200010ec 	.word	0x200010ec
 800975c:	e000ed04 	.word	0xe000ed04

08009760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009768:	4b0d      	ldr	r3, [pc, #52]	@ (80097a0 <prvGetNextExpireTime+0x40>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <prvGetNextExpireTime+0x16>
 8009772:	2201      	movs	r2, #1
 8009774:	e000      	b.n	8009778 <prvGetNextExpireTime+0x18>
 8009776:	2200      	movs	r2, #0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009784:	4b06      	ldr	r3, [pc, #24]	@ (80097a0 <prvGetNextExpireTime+0x40>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	e001      	b.n	8009794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009794:	68fb      	ldr	r3, [r7, #12]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	bc80      	pop	{r7}
 800979e:	4770      	bx	lr
 80097a0:	200010e4 	.word	0x200010e4

080097a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097ac:	f7ff f890 	bl	80088d0 <xTaskGetTickCount>
 80097b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097b2:	4b0b      	ldr	r3, [pc, #44]	@ (80097e0 <prvSampleTimeNow+0x3c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d205      	bcs.n	80097c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097bc:	f000 f93a 	bl	8009a34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	e002      	b.n	80097ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097ce:	4a04      	ldr	r2, [pc, #16]	@ (80097e0 <prvSampleTimeNow+0x3c>)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097d4:	68fb      	ldr	r3, [r7, #12]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200010f4 	.word	0x200010f4

080097e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097f2:	2300      	movs	r3, #0
 80097f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	429a      	cmp	r2, r3
 8009808:	d812      	bhi.n	8009830 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	1ad2      	subs	r2, r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	429a      	cmp	r2, r3
 8009816:	d302      	bcc.n	800981e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009818:	2301      	movs	r3, #1
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e01b      	b.n	8009856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800981e:	4b10      	ldr	r3, [pc, #64]	@ (8009860 <prvInsertTimerInActiveList+0x7c>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3304      	adds	r3, #4
 8009826:	4619      	mov	r1, r3
 8009828:	4610      	mov	r0, r2
 800982a:	f7fd fcff 	bl	800722c <vListInsert>
 800982e:	e012      	b.n	8009856 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d206      	bcs.n	8009846 <prvInsertTimerInActiveList+0x62>
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d302      	bcc.n	8009846 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009840:	2301      	movs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e007      	b.n	8009856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009846:	4b07      	ldr	r3, [pc, #28]	@ (8009864 <prvInsertTimerInActiveList+0x80>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3304      	adds	r3, #4
 800984e:	4619      	mov	r1, r3
 8009850:	4610      	mov	r0, r2
 8009852:	f7fd fceb 	bl	800722c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009856:	697b      	ldr	r3, [r7, #20]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	200010e8 	.word	0x200010e8
 8009864:	200010e4 	.word	0x200010e4

08009868 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08e      	sub	sp, #56	@ 0x38
 800986c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800986e:	e0ce      	b.n	8009a0e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	da19      	bge.n	80098aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009876:	1d3b      	adds	r3, r7, #4
 8009878:	3304      	adds	r3, #4
 800987a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800987c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10b      	bne.n	800989a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	61fb      	str	r3, [r7, #28]
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop
 8009898:	e7fd      	b.n	8009896 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800989a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098a0:	6850      	ldr	r0, [r2, #4]
 80098a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098a4:	6892      	ldr	r2, [r2, #8]
 80098a6:	4611      	mov	r1, r2
 80098a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f2c0 80ae 	blt.w	8009a0e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c0:	3304      	adds	r3, #4
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fd fcea 	bl	800729c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098c8:	463b      	mov	r3, r7
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff ff6a 	bl	80097a4 <prvSampleTimeNow>
 80098d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b09      	cmp	r3, #9
 80098d6:	f200 8097 	bhi.w	8009a08 <prvProcessReceivedCommands+0x1a0>
 80098da:	a201      	add	r2, pc, #4	@ (adr r2, 80098e0 <prvProcessReceivedCommands+0x78>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009909 	.word	0x08009909
 80098e4:	08009909 	.word	0x08009909
 80098e8:	08009909 	.word	0x08009909
 80098ec:	0800997f 	.word	0x0800997f
 80098f0:	08009993 	.word	0x08009993
 80098f4:	080099df 	.word	0x080099df
 80098f8:	08009909 	.word	0x08009909
 80098fc:	08009909 	.word	0x08009909
 8009900:	0800997f 	.word	0x0800997f
 8009904:	08009993 	.word	0x08009993
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	b2da      	uxtb	r2, r3
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	18d1      	adds	r1, r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009928:	f7ff ff5c 	bl	80097e4 <prvInsertTimerInActiveList>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d06c      	beq.n	8009a0c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009938:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d061      	beq.n	8009a0c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	441a      	add	r2, r3
 8009950:	2300      	movs	r3, #0
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	2300      	movs	r3, #0
 8009956:	2100      	movs	r1, #0
 8009958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800995a:	f7ff fe03 	bl	8009564 <xTimerGenericCommand>
 800995e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d152      	bne.n	8009a0c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	61bb      	str	r3, [r7, #24]
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	e7fd      	b.n	800997a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009984:	f023 0301 	bic.w	r3, r3, #1
 8009988:	b2da      	uxtb	r2, r3
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009990:	e03d      	b.n	8009a0e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009998:	f043 0301 	orr.w	r3, r3, #1
 800999c:	b2da      	uxtb	r2, r3
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	617b      	str	r3, [r7, #20]
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	e7fd      	b.n	80099c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	18d1      	adds	r1, r2, r3
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099d8:	f7ff ff04 	bl	80097e4 <prvInsertTimerInActiveList>
					break;
 80099dc:	e017      	b.n	8009a0e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d103      	bne.n	80099f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80099ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099ee:	f000 fba5 	bl	800a13c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099f2:	e00c      	b.n	8009a0e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099fa:	f023 0301 	bic.w	r3, r3, #1
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a06:	e002      	b.n	8009a0e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a08:	bf00      	nop
 8009a0a:	e000      	b.n	8009a0e <prvProcessReceivedCommands+0x1a6>
					break;
 8009a0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a0e:	4b08      	ldr	r3, [pc, #32]	@ (8009a30 <prvProcessReceivedCommands+0x1c8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	1d39      	adds	r1, r7, #4
 8009a14:	2200      	movs	r2, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe f808 	bl	8007a2c <xQueueReceive>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f47f af26 	bne.w	8009870 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	3730      	adds	r7, #48	@ 0x30
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	200010ec 	.word	0x200010ec

08009a34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a3a:	e049      	b.n	8009ad0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8009af8 <prvSwitchTimerLists+0xc4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a46:	4b2c      	ldr	r3, [pc, #176]	@ (8009af8 <prvSwitchTimerLists+0xc4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fd fc21 	bl	800729c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d02f      	beq.n	8009ad0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4413      	add	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d90e      	bls.n	8009aa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009af8 <prvSwitchTimerLists+0xc4>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3304      	adds	r3, #4
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f7fd fbc7 	bl	800722c <vListInsert>
 8009a9e:	e017      	b.n	8009ad0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7ff fd5a 	bl	8009564 <xTimerGenericCommand>
 8009ab0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	603b      	str	r3, [r7, #0]
}
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	e7fd      	b.n	8009acc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ad0:	4b09      	ldr	r3, [pc, #36]	@ (8009af8 <prvSwitchTimerLists+0xc4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1b0      	bne.n	8009a3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ada:	4b07      	ldr	r3, [pc, #28]	@ (8009af8 <prvSwitchTimerLists+0xc4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ae0:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <prvSwitchTimerLists+0xc8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a04      	ldr	r2, [pc, #16]	@ (8009af8 <prvSwitchTimerLists+0xc4>)
 8009ae6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ae8:	4a04      	ldr	r2, [pc, #16]	@ (8009afc <prvSwitchTimerLists+0xc8>)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	6013      	str	r3, [r2, #0]
}
 8009aee:	bf00      	nop
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200010e4 	.word	0x200010e4
 8009afc:	200010e8 	.word	0x200010e8

08009b00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b06:	f000 f949 	bl	8009d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b0a:	4b15      	ldr	r3, [pc, #84]	@ (8009b60 <prvCheckForValidListAndQueue+0x60>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d120      	bne.n	8009b54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b12:	4814      	ldr	r0, [pc, #80]	@ (8009b64 <prvCheckForValidListAndQueue+0x64>)
 8009b14:	f7fd fb3c 	bl	8007190 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b18:	4813      	ldr	r0, [pc, #76]	@ (8009b68 <prvCheckForValidListAndQueue+0x68>)
 8009b1a:	f7fd fb39 	bl	8007190 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b1e:	4b13      	ldr	r3, [pc, #76]	@ (8009b6c <prvCheckForValidListAndQueue+0x6c>)
 8009b20:	4a10      	ldr	r2, [pc, #64]	@ (8009b64 <prvCheckForValidListAndQueue+0x64>)
 8009b22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b24:	4b12      	ldr	r3, [pc, #72]	@ (8009b70 <prvCheckForValidListAndQueue+0x70>)
 8009b26:	4a10      	ldr	r2, [pc, #64]	@ (8009b68 <prvCheckForValidListAndQueue+0x68>)
 8009b28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	4b11      	ldr	r3, [pc, #68]	@ (8009b74 <prvCheckForValidListAndQueue+0x74>)
 8009b30:	4a11      	ldr	r2, [pc, #68]	@ (8009b78 <prvCheckForValidListAndQueue+0x78>)
 8009b32:	2110      	movs	r1, #16
 8009b34:	200a      	movs	r0, #10
 8009b36:	f7fd fc45 	bl	80073c4 <xQueueGenericCreateStatic>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4a08      	ldr	r2, [pc, #32]	@ (8009b60 <prvCheckForValidListAndQueue+0x60>)
 8009b3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b40:	4b07      	ldr	r3, [pc, #28]	@ (8009b60 <prvCheckForValidListAndQueue+0x60>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b48:	4b05      	ldr	r3, [pc, #20]	@ (8009b60 <prvCheckForValidListAndQueue+0x60>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	490b      	ldr	r1, [pc, #44]	@ (8009b7c <prvCheckForValidListAndQueue+0x7c>)
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fb08 	bl	8008164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b54:	f000 f952 	bl	8009dfc <vPortExitCritical>
}
 8009b58:	bf00      	nop
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	200010ec 	.word	0x200010ec
 8009b64:	200010bc 	.word	0x200010bc
 8009b68:	200010d0 	.word	0x200010d0
 8009b6c:	200010e4 	.word	0x200010e4
 8009b70:	200010e8 	.word	0x200010e8
 8009b74:	20001198 	.word	0x20001198
 8009b78:	200010f8 	.word	0x200010f8
 8009b7c:	0800dcd8 	.word	0x0800dcd8

08009b80 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08a      	sub	sp, #40	@ 0x28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009b8e:	f06f 0301 	mvn.w	r3, #1
 8009b92:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ba0:	4b06      	ldr	r3, [pc, #24]	@ (8009bbc <xTimerPendFunctionCallFromISR+0x3c>)
 8009ba2:	6818      	ldr	r0, [r3, #0]
 8009ba4:	f107 0114 	add.w	r1, r7, #20
 8009ba8:	2300      	movs	r3, #0
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	f7fd fea0 	bl	80078f0 <xQueueGenericSendFromISR>
 8009bb0:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3728      	adds	r7, #40	@ 0x28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	200010ec 	.word	0x200010ec

08009bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3b04      	subs	r3, #4
 8009bd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3b04      	subs	r3, #4
 8009bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f023 0201 	bic.w	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3b04      	subs	r3, #4
 8009bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bf0:	4a08      	ldr	r2, [pc, #32]	@ (8009c14 <pxPortInitialiseStack+0x54>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3b14      	subs	r3, #20
 8009bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b20      	subs	r3, #32
 8009c06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc80      	pop	{r7}
 8009c12:	4770      	bx	lr
 8009c14:	08009c19 	.word	0x08009c19

08009c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c22:	4b12      	ldr	r3, [pc, #72]	@ (8009c6c <prvTaskExitError+0x54>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	d00b      	beq.n	8009c44 <prvTaskExitError+0x2c>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	60fb      	str	r3, [r7, #12]
}
 8009c3e:	bf00      	nop
 8009c40:	bf00      	nop
 8009c42:	e7fd      	b.n	8009c40 <prvTaskExitError+0x28>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	60bb      	str	r3, [r7, #8]
}
 8009c56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c58:	bf00      	nop
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0fc      	beq.n	8009c5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr
 8009c6c:	20000020 	.word	0x20000020

08009c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c70:	4b07      	ldr	r3, [pc, #28]	@ (8009c90 <pxCurrentTCBConst2>)
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	6808      	ldr	r0, [r1, #0]
 8009c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c7a:	f380 8809 	msr	PSP, r0
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f380 8811 	msr	BASEPRI, r0
 8009c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009c8e:	4770      	bx	lr

08009c90 <pxCurrentTCBConst2>:
 8009c90:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop

08009c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009c98:	4806      	ldr	r0, [pc, #24]	@ (8009cb4 <prvPortStartFirstTask+0x1c>)
 8009c9a:	6800      	ldr	r0, [r0, #0]
 8009c9c:	6800      	ldr	r0, [r0, #0]
 8009c9e:	f380 8808 	msr	MSP, r0
 8009ca2:	b662      	cpsie	i
 8009ca4:	b661      	cpsie	f
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	df00      	svc	0
 8009cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed08 	.word	0xe000ed08

08009cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cbe:	4b32      	ldr	r3, [pc, #200]	@ (8009d88 <xPortStartScheduler+0xd0>)
 8009cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	22ff      	movs	r2, #255	@ 0xff
 8009cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8009d8c <xPortStartScheduler+0xd4>)
 8009ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009ce8:	2207      	movs	r2, #7
 8009cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cec:	e009      	b.n	8009d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009cee:	4b28      	ldr	r3, [pc, #160]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	4a26      	ldr	r2, [pc, #152]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d0a:	2b80      	cmp	r3, #128	@ 0x80
 8009d0c:	d0ef      	beq.n	8009cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d0e:	4b20      	ldr	r3, [pc, #128]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f1c3 0307 	rsb	r3, r3, #7
 8009d16:	2b04      	cmp	r3, #4
 8009d18:	d00b      	beq.n	8009d32 <xPortStartScheduler+0x7a>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	60bb      	str	r3, [r7, #8]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d32:	4b17      	ldr	r3, [pc, #92]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	021b      	lsls	r3, r3, #8
 8009d38:	4a15      	ldr	r2, [pc, #84]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009d3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d3c:	4b14      	ldr	r3, [pc, #80]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d44:	4a12      	ldr	r2, [pc, #72]	@ (8009d90 <xPortStartScheduler+0xd8>)
 8009d46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d50:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <xPortStartScheduler+0xdc>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a0f      	ldr	r2, [pc, #60]	@ (8009d94 <xPortStartScheduler+0xdc>)
 8009d56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <xPortStartScheduler+0xdc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a0c      	ldr	r2, [pc, #48]	@ (8009d94 <xPortStartScheduler+0xdc>)
 8009d62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d68:	f000 f8b8 	bl	8009edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d98 <xPortStartScheduler+0xe0>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d72:	f7ff ff91 	bl	8009c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d76:	f7fe fe85 	bl	8008a84 <vTaskSwitchContext>
	prvTaskExitError();
 8009d7a:	f7ff ff4d 	bl	8009c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	e000e400 	.word	0xe000e400
 8009d8c:	200011e8 	.word	0x200011e8
 8009d90:	200011ec 	.word	0x200011ec
 8009d94:	e000ed20 	.word	0xe000ed20
 8009d98:	20000020 	.word	0x20000020

08009d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	607b      	str	r3, [r7, #4]
}
 8009db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009db6:	4b0f      	ldr	r3, [pc, #60]	@ (8009df4 <vPortEnterCritical+0x58>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8009df4 <vPortEnterCritical+0x58>)
 8009dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8009df4 <vPortEnterCritical+0x58>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d110      	bne.n	8009dea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8009df8 <vPortEnterCritical+0x5c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00b      	beq.n	8009dea <vPortEnterCritical+0x4e>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	603b      	str	r3, [r7, #0]
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop
 8009de8:	e7fd      	b.n	8009de6 <vPortEnterCritical+0x4a>
	}
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bc80      	pop	{r7}
 8009df2:	4770      	bx	lr
 8009df4:	20000020 	.word	0x20000020
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e02:	4b12      	ldr	r3, [pc, #72]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <vPortExitCritical+0x26>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	607b      	str	r3, [r7, #4]
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	e7fd      	b.n	8009e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e22:	4b0a      	ldr	r3, [pc, #40]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	4a08      	ldr	r2, [pc, #32]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e2c:	4b07      	ldr	r3, [pc, #28]	@ (8009e4c <vPortExitCritical+0x50>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d105      	bne.n	8009e40 <vPortExitCritical+0x44>
 8009e34:	2300      	movs	r3, #0
 8009e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	f383 8811 	msr	BASEPRI, r3
}
 8009e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	20000020 	.word	0x20000020

08009e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e50:	f3ef 8009 	mrs	r0, PSP
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <pxCurrentTCBConst>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e60:	6010      	str	r0, [r2, #0]
 8009e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009e66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e6a:	f380 8811 	msr	BASEPRI, r0
 8009e6e:	f7fe fe09 	bl	8008a84 <vTaskSwitchContext>
 8009e72:	f04f 0000 	mov.w	r0, #0
 8009e76:	f380 8811 	msr	BASEPRI, r0
 8009e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e7e:	6819      	ldr	r1, [r3, #0]
 8009e80:	6808      	ldr	r0, [r1, #0]
 8009e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e86:	f380 8809 	msr	PSP, r0
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	4770      	bx	lr

08009e90 <pxCurrentTCBConst>:
 8009e90:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7fe fd2d 	bl	8008910 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	@ (8009ed8 <xPortSysTickHandler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8009f0c <vPortSetupTimerInterrupt+0x30>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eec:	4b09      	ldr	r3, [pc, #36]	@ (8009f14 <vPortSetupTimerInterrupt+0x38>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a09      	ldr	r2, [pc, #36]	@ (8009f18 <vPortSetupTimerInterrupt+0x3c>)
 8009ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	4a08      	ldr	r2, [pc, #32]	@ (8009f1c <vPortSetupTimerInterrupt+0x40>)
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009efe:	4b03      	ldr	r3, [pc, #12]	@ (8009f0c <vPortSetupTimerInterrupt+0x30>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bc80      	pop	{r7}
 8009f0a:	4770      	bx	lr
 8009f0c:	e000e010 	.word	0xe000e010
 8009f10:	e000e018 	.word	0xe000e018
 8009f14:	20000014 	.word	0x20000014
 8009f18:	10624dd3 	.word	0x10624dd3
 8009f1c:	e000e014 	.word	0xe000e014

08009f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f26:	f3ef 8305 	mrs	r3, IPSR
 8009f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b0f      	cmp	r3, #15
 8009f30:	d915      	bls.n	8009f5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f32:	4a17      	ldr	r2, [pc, #92]	@ (8009f90 <vPortValidateInterruptPriority+0x70>)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f3c:	4b15      	ldr	r3, [pc, #84]	@ (8009f94 <vPortValidateInterruptPriority+0x74>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	7afa      	ldrb	r2, [r7, #11]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d20b      	bcs.n	8009f5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	607b      	str	r3, [r7, #4]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f98 <vPortValidateInterruptPriority+0x78>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f66:	4b0d      	ldr	r3, [pc, #52]	@ (8009f9c <vPortValidateInterruptPriority+0x7c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d90b      	bls.n	8009f86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	603b      	str	r3, [r7, #0]
}
 8009f80:	bf00      	nop
 8009f82:	bf00      	nop
 8009f84:	e7fd      	b.n	8009f82 <vPortValidateInterruptPriority+0x62>
	}
 8009f86:	bf00      	nop
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr
 8009f90:	e000e3f0 	.word	0xe000e3f0
 8009f94:	200011e8 	.word	0x200011e8
 8009f98:	e000ed0c 	.word	0xe000ed0c
 8009f9c:	200011ec 	.word	0x200011ec

08009fa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08a      	sub	sp, #40	@ 0x28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fac:	f7fe fbe4 	bl	8008778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fb0:	4b5c      	ldr	r3, [pc, #368]	@ (800a124 <pvPortMalloc+0x184>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fb8:	f000 f924 	bl	800a204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fbc:	4b5a      	ldr	r3, [pc, #360]	@ (800a128 <pvPortMalloc+0x188>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f040 8095 	bne.w	800a0f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01e      	beq.n	800a00e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f003 0307 	and.w	r3, r3, #7
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d015      	beq.n	800a00e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f023 0307 	bic.w	r3, r3, #7
 8009fe8:	3308      	adds	r3, #8
 8009fea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f003 0307 	and.w	r3, r3, #7
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <pvPortMalloc+0x6e>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	617b      	str	r3, [r7, #20]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d06f      	beq.n	800a0f4 <pvPortMalloc+0x154>
 800a014:	4b45      	ldr	r3, [pc, #276]	@ (800a12c <pvPortMalloc+0x18c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d86a      	bhi.n	800a0f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a01e:	4b44      	ldr	r3, [pc, #272]	@ (800a130 <pvPortMalloc+0x190>)
 800a020:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a022:	4b43      	ldr	r3, [pc, #268]	@ (800a130 <pvPortMalloc+0x190>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a028:	e004      	b.n	800a034 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d903      	bls.n	800a046 <pvPortMalloc+0xa6>
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1f1      	bne.n	800a02a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a046:	4b37      	ldr	r3, [pc, #220]	@ (800a124 <pvPortMalloc+0x184>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d051      	beq.n	800a0f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2208      	movs	r2, #8
 800a056:	4413      	add	r3, r2
 800a058:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	1ad2      	subs	r2, r2, r3
 800a06a:	2308      	movs	r3, #8
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	429a      	cmp	r2, r3
 800a070:	d920      	bls.n	800a0b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4413      	add	r3, r2
 800a078:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	f003 0307 	and.w	r3, r3, #7
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <pvPortMalloc+0xfc>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	613b      	str	r3, [r7, #16]
}
 800a096:	bf00      	nop
 800a098:	bf00      	nop
 800a09a:	e7fd      	b.n	800a098 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	1ad2      	subs	r2, r2, r3
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0ae:	69b8      	ldr	r0, [r7, #24]
 800a0b0:	f000 f90a 	bl	800a2c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a12c <pvPortMalloc+0x18c>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	4a1b      	ldr	r2, [pc, #108]	@ (800a12c <pvPortMalloc+0x18c>)
 800a0c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0c2:	4b1a      	ldr	r3, [pc, #104]	@ (800a12c <pvPortMalloc+0x18c>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	4b1b      	ldr	r3, [pc, #108]	@ (800a134 <pvPortMalloc+0x194>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d203      	bcs.n	800a0d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0ce:	4b17      	ldr	r3, [pc, #92]	@ (800a12c <pvPortMalloc+0x18c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a18      	ldr	r2, [pc, #96]	@ (800a134 <pvPortMalloc+0x194>)
 800a0d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	4b13      	ldr	r3, [pc, #76]	@ (800a128 <pvPortMalloc+0x188>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0ea:	4b13      	ldr	r3, [pc, #76]	@ (800a138 <pvPortMalloc+0x198>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	4a11      	ldr	r2, [pc, #68]	@ (800a138 <pvPortMalloc+0x198>)
 800a0f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0f4:	f7fe fb4e 	bl	8008794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00b      	beq.n	800a11a <pvPortMalloc+0x17a>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	60fb      	str	r3, [r7, #12]
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	e7fd      	b.n	800a116 <pvPortMalloc+0x176>
	return pvReturn;
 800a11a:	69fb      	ldr	r3, [r7, #28]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3728      	adds	r7, #40	@ 0x28
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	200031f8 	.word	0x200031f8
 800a128:	2000320c 	.word	0x2000320c
 800a12c:	200031fc 	.word	0x200031fc
 800a130:	200031f0 	.word	0x200031f0
 800a134:	20003200 	.word	0x20003200
 800a138:	20003204 	.word	0x20003204

0800a13c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d04f      	beq.n	800a1ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a14e:	2308      	movs	r3, #8
 800a150:	425b      	negs	r3, r3
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	4413      	add	r3, r2
 800a156:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	4b25      	ldr	r3, [pc, #148]	@ (800a1f8 <vPortFree+0xbc>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4013      	ands	r3, r2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <vPortFree+0x46>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	60fb      	str	r3, [r7, #12]
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	e7fd      	b.n	800a17e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00b      	beq.n	800a1a2 <vPortFree+0x66>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	60bb      	str	r3, [r7, #8]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	4b14      	ldr	r3, [pc, #80]	@ (800a1f8 <vPortFree+0xbc>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01e      	beq.n	800a1ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d11a      	bne.n	800a1ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f8 <vPortFree+0xbc>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	43db      	mvns	r3, r3
 800a1c2:	401a      	ands	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1c8:	f7fe fad6 	bl	8008778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a1fc <vPortFree+0xc0>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4a09      	ldr	r2, [pc, #36]	@ (800a1fc <vPortFree+0xc0>)
 800a1d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f000 f874 	bl	800a2c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <vPortFree+0xc4>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	4a06      	ldr	r2, [pc, #24]	@ (800a200 <vPortFree+0xc4>)
 800a1e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1ea:	f7fe fad3 	bl	8008794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1ee:	bf00      	nop
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	2000320c 	.word	0x2000320c
 800a1fc:	200031fc 	.word	0x200031fc
 800a200:	20003208 	.word	0x20003208

0800a204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a20a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a20e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a210:	4b27      	ldr	r3, [pc, #156]	@ (800a2b0 <prvHeapInit+0xac>)
 800a212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00c      	beq.n	800a238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3307      	adds	r3, #7
 800a222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b0 <prvHeapInit+0xac>)
 800a234:	4413      	add	r3, r2
 800a236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a23c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b4 <prvHeapInit+0xb0>)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a242:	4b1c      	ldr	r3, [pc, #112]	@ (800a2b4 <prvHeapInit+0xb0>)
 800a244:	2200      	movs	r2, #0
 800a246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a250:	2208      	movs	r2, #8
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0307 	bic.w	r3, r3, #7
 800a25e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4a15      	ldr	r2, [pc, #84]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a266:	4b14      	ldr	r3, [pc, #80]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a26e:	4b12      	ldr	r3, [pc, #72]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a284:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b8 <prvHeapInit+0xb4>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	4a0a      	ldr	r2, [pc, #40]	@ (800a2bc <prvHeapInit+0xb8>)
 800a292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4a09      	ldr	r2, [pc, #36]	@ (800a2c0 <prvHeapInit+0xbc>)
 800a29a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a29c:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <prvHeapInit+0xc0>)
 800a29e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2a2:	601a      	str	r2, [r3, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bc80      	pop	{r7}
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	200011f0 	.word	0x200011f0
 800a2b4:	200031f0 	.word	0x200031f0
 800a2b8:	200031f8 	.word	0x200031f8
 800a2bc:	20003200 	.word	0x20003200
 800a2c0:	200031fc 	.word	0x200031fc
 800a2c4:	2000320c 	.word	0x2000320c

0800a2c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2d0:	4b27      	ldr	r3, [pc, #156]	@ (800a370 <prvInsertBlockIntoFreeList+0xa8>)
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e002      	b.n	800a2dc <prvInsertBlockIntoFreeList+0x14>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d8f7      	bhi.n	800a2d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d108      	bne.n	800a30a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	441a      	add	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	441a      	add	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d118      	bne.n	800a350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b14      	ldr	r3, [pc, #80]	@ (800a374 <prvInsertBlockIntoFreeList+0xac>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d00d      	beq.n	800a346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	441a      	add	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	e008      	b.n	800a358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a346:	4b0b      	ldr	r3, [pc, #44]	@ (800a374 <prvInsertBlockIntoFreeList+0xac>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	e003      	b.n	800a358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d002      	beq.n	800a366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bc80      	pop	{r7}
 800a36e:	4770      	bx	lr
 800a370:	200031f0 	.word	0x200031f0
 800a374:	200031f8 	.word	0x200031f8

0800a378 <__cvt>:
 800a378:	2b00      	cmp	r3, #0
 800a37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37e:	461d      	mov	r5, r3
 800a380:	bfbb      	ittet	lt
 800a382:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a386:	461d      	movlt	r5, r3
 800a388:	2300      	movge	r3, #0
 800a38a:	232d      	movlt	r3, #45	@ 0x2d
 800a38c:	b088      	sub	sp, #32
 800a38e:	4614      	mov	r4, r2
 800a390:	bfb8      	it	lt
 800a392:	4614      	movlt	r4, r2
 800a394:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a396:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a398:	7013      	strb	r3, [r2, #0]
 800a39a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a39c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a3a0:	f023 0820 	bic.w	r8, r3, #32
 800a3a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3a8:	d005      	beq.n	800a3b6 <__cvt+0x3e>
 800a3aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a3ae:	d100      	bne.n	800a3b2 <__cvt+0x3a>
 800a3b0:	3601      	adds	r6, #1
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	e000      	b.n	800a3b8 <__cvt+0x40>
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	aa07      	add	r2, sp, #28
 800a3ba:	9204      	str	r2, [sp, #16]
 800a3bc:	aa06      	add	r2, sp, #24
 800a3be:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a3c2:	e9cd 3600 	strd	r3, r6, [sp]
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	462b      	mov	r3, r5
 800a3ca:	f000 ff6d 	bl	800b2a8 <_dtoa_r>
 800a3ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	d119      	bne.n	800a40a <__cvt+0x92>
 800a3d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3d8:	07db      	lsls	r3, r3, #31
 800a3da:	d50e      	bpl.n	800a3fa <__cvt+0x82>
 800a3dc:	eb00 0906 	add.w	r9, r0, r6
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 fae8 	bl	80009bc <__aeabi_dcmpeq>
 800a3ec:	b108      	cbz	r0, 800a3f2 <__cvt+0x7a>
 800a3ee:	f8cd 901c 	str.w	r9, [sp, #28]
 800a3f2:	2230      	movs	r2, #48	@ 0x30
 800a3f4:	9b07      	ldr	r3, [sp, #28]
 800a3f6:	454b      	cmp	r3, r9
 800a3f8:	d31e      	bcc.n	800a438 <__cvt+0xc0>
 800a3fa:	4638      	mov	r0, r7
 800a3fc:	9b07      	ldr	r3, [sp, #28]
 800a3fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a400:	1bdb      	subs	r3, r3, r7
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	b008      	add	sp, #32
 800a406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a40e:	eb00 0906 	add.w	r9, r0, r6
 800a412:	d1e5      	bne.n	800a3e0 <__cvt+0x68>
 800a414:	7803      	ldrb	r3, [r0, #0]
 800a416:	2b30      	cmp	r3, #48	@ 0x30
 800a418:	d10a      	bne.n	800a430 <__cvt+0xb8>
 800a41a:	2200      	movs	r2, #0
 800a41c:	2300      	movs	r3, #0
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	f7f6 facb 	bl	80009bc <__aeabi_dcmpeq>
 800a426:	b918      	cbnz	r0, 800a430 <__cvt+0xb8>
 800a428:	f1c6 0601 	rsb	r6, r6, #1
 800a42c:	f8ca 6000 	str.w	r6, [sl]
 800a430:	f8da 3000 	ldr.w	r3, [sl]
 800a434:	4499      	add	r9, r3
 800a436:	e7d3      	b.n	800a3e0 <__cvt+0x68>
 800a438:	1c59      	adds	r1, r3, #1
 800a43a:	9107      	str	r1, [sp, #28]
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	e7d9      	b.n	800a3f4 <__cvt+0x7c>

0800a440 <__exponent>:
 800a440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a442:	2900      	cmp	r1, #0
 800a444:	bfb6      	itet	lt
 800a446:	232d      	movlt	r3, #45	@ 0x2d
 800a448:	232b      	movge	r3, #43	@ 0x2b
 800a44a:	4249      	neglt	r1, r1
 800a44c:	2909      	cmp	r1, #9
 800a44e:	7002      	strb	r2, [r0, #0]
 800a450:	7043      	strb	r3, [r0, #1]
 800a452:	dd29      	ble.n	800a4a8 <__exponent+0x68>
 800a454:	f10d 0307 	add.w	r3, sp, #7
 800a458:	461d      	mov	r5, r3
 800a45a:	270a      	movs	r7, #10
 800a45c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a460:	461a      	mov	r2, r3
 800a462:	fb07 1416 	mls	r4, r7, r6, r1
 800a466:	3430      	adds	r4, #48	@ 0x30
 800a468:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a46c:	460c      	mov	r4, r1
 800a46e:	2c63      	cmp	r4, #99	@ 0x63
 800a470:	4631      	mov	r1, r6
 800a472:	f103 33ff 	add.w	r3, r3, #4294967295
 800a476:	dcf1      	bgt.n	800a45c <__exponent+0x1c>
 800a478:	3130      	adds	r1, #48	@ 0x30
 800a47a:	1e94      	subs	r4, r2, #2
 800a47c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a480:	4623      	mov	r3, r4
 800a482:	1c41      	adds	r1, r0, #1
 800a484:	42ab      	cmp	r3, r5
 800a486:	d30a      	bcc.n	800a49e <__exponent+0x5e>
 800a488:	f10d 0309 	add.w	r3, sp, #9
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	42ac      	cmp	r4, r5
 800a490:	bf88      	it	hi
 800a492:	2300      	movhi	r3, #0
 800a494:	3302      	adds	r3, #2
 800a496:	4403      	add	r3, r0
 800a498:	1a18      	subs	r0, r3, r0
 800a49a:	b003      	add	sp, #12
 800a49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a49e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a4a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a4a6:	e7ed      	b.n	800a484 <__exponent+0x44>
 800a4a8:	2330      	movs	r3, #48	@ 0x30
 800a4aa:	3130      	adds	r1, #48	@ 0x30
 800a4ac:	7083      	strb	r3, [r0, #2]
 800a4ae:	70c1      	strb	r1, [r0, #3]
 800a4b0:	1d03      	adds	r3, r0, #4
 800a4b2:	e7f1      	b.n	800a498 <__exponent+0x58>

0800a4b4 <_printf_float>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	b091      	sub	sp, #68	@ 0x44
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	461f      	mov	r7, r3
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	f000 fd73 	bl	800afb0 <_localeconv_r>
 800a4ca:	6803      	ldr	r3, [r0, #0]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	9308      	str	r3, [sp, #32]
 800a4d0:	f7f5 fe48 	bl	8000164 <strlen>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4dc:	9009      	str	r0, [sp, #36]	@ 0x24
 800a4de:	3307      	adds	r3, #7
 800a4e0:	f023 0307 	bic.w	r3, r3, #7
 800a4e4:	f103 0208 	add.w	r2, r3, #8
 800a4e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a4ec:	f8d4 b000 	ldr.w	fp, [r4]
 800a4f0:	f8c8 2000 	str.w	r2, [r8]
 800a4f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a4fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4fe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a502:	f04f 32ff 	mov.w	r2, #4294967295
 800a506:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a50a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a50e:	4b9c      	ldr	r3, [pc, #624]	@ (800a780 <_printf_float+0x2cc>)
 800a510:	f7f6 fa86 	bl	8000a20 <__aeabi_dcmpun>
 800a514:	bb70      	cbnz	r0, 800a574 <_printf_float+0xc0>
 800a516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a51a:	f04f 32ff 	mov.w	r2, #4294967295
 800a51e:	4b98      	ldr	r3, [pc, #608]	@ (800a780 <_printf_float+0x2cc>)
 800a520:	f7f6 fa60 	bl	80009e4 <__aeabi_dcmple>
 800a524:	bb30      	cbnz	r0, 800a574 <_printf_float+0xc0>
 800a526:	2200      	movs	r2, #0
 800a528:	2300      	movs	r3, #0
 800a52a:	4640      	mov	r0, r8
 800a52c:	4649      	mov	r1, r9
 800a52e:	f7f6 fa4f 	bl	80009d0 <__aeabi_dcmplt>
 800a532:	b110      	cbz	r0, 800a53a <_printf_float+0x86>
 800a534:	232d      	movs	r3, #45	@ 0x2d
 800a536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a53a:	4a92      	ldr	r2, [pc, #584]	@ (800a784 <_printf_float+0x2d0>)
 800a53c:	4b92      	ldr	r3, [pc, #584]	@ (800a788 <_printf_float+0x2d4>)
 800a53e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a542:	bf8c      	ite	hi
 800a544:	4690      	movhi	r8, r2
 800a546:	4698      	movls	r8, r3
 800a548:	2303      	movs	r3, #3
 800a54a:	f04f 0900 	mov.w	r9, #0
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	f02b 0304 	bic.w	r3, fp, #4
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	4633      	mov	r3, r6
 800a558:	4621      	mov	r1, r4
 800a55a:	4628      	mov	r0, r5
 800a55c:	9700      	str	r7, [sp, #0]
 800a55e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a560:	f000 f9d4 	bl	800a90c <_printf_common>
 800a564:	3001      	adds	r0, #1
 800a566:	f040 8090 	bne.w	800a68a <_printf_float+0x1d6>
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	b011      	add	sp, #68	@ 0x44
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a574:	4642      	mov	r2, r8
 800a576:	464b      	mov	r3, r9
 800a578:	4640      	mov	r0, r8
 800a57a:	4649      	mov	r1, r9
 800a57c:	f7f6 fa50 	bl	8000a20 <__aeabi_dcmpun>
 800a580:	b148      	cbz	r0, 800a596 <_printf_float+0xe2>
 800a582:	464b      	mov	r3, r9
 800a584:	2b00      	cmp	r3, #0
 800a586:	bfb8      	it	lt
 800a588:	232d      	movlt	r3, #45	@ 0x2d
 800a58a:	4a80      	ldr	r2, [pc, #512]	@ (800a78c <_printf_float+0x2d8>)
 800a58c:	bfb8      	it	lt
 800a58e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a592:	4b7f      	ldr	r3, [pc, #508]	@ (800a790 <_printf_float+0x2dc>)
 800a594:	e7d3      	b.n	800a53e <_printf_float+0x8a>
 800a596:	6863      	ldr	r3, [r4, #4]
 800a598:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	d13f      	bne.n	800a620 <_printf_float+0x16c>
 800a5a0:	2306      	movs	r3, #6
 800a5a2:	6063      	str	r3, [r4, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	9206      	str	r2, [sp, #24]
 800a5ae:	aa0e      	add	r2, sp, #56	@ 0x38
 800a5b0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a5b4:	aa0d      	add	r2, sp, #52	@ 0x34
 800a5b6:	9203      	str	r2, [sp, #12]
 800a5b8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a5bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a5c0:	6863      	ldr	r3, [r4, #4]
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	910a      	str	r1, [sp, #40]	@ 0x28
 800a5cc:	f7ff fed4 	bl	800a378 <__cvt>
 800a5d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	2947      	cmp	r1, #71	@ 0x47
 800a5d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a5d8:	d128      	bne.n	800a62c <_printf_float+0x178>
 800a5da:	1cc8      	adds	r0, r1, #3
 800a5dc:	db02      	blt.n	800a5e4 <_printf_float+0x130>
 800a5de:	6863      	ldr	r3, [r4, #4]
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	dd40      	ble.n	800a666 <_printf_float+0x1b2>
 800a5e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	3901      	subs	r1, #1
 800a5f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a5f4:	910d      	str	r1, [sp, #52]	@ 0x34
 800a5f6:	f7ff ff23 	bl	800a440 <__exponent>
 800a5fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5fc:	4681      	mov	r9, r0
 800a5fe:	1813      	adds	r3, r2, r0
 800a600:	2a01      	cmp	r2, #1
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	dc02      	bgt.n	800a60c <_printf_float+0x158>
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	07d2      	lsls	r2, r2, #31
 800a60a:	d501      	bpl.n	800a610 <_printf_float+0x15c>
 800a60c:	3301      	adds	r3, #1
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a614:	2b00      	cmp	r3, #0
 800a616:	d09e      	beq.n	800a556 <_printf_float+0xa2>
 800a618:	232d      	movs	r3, #45	@ 0x2d
 800a61a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a61e:	e79a      	b.n	800a556 <_printf_float+0xa2>
 800a620:	2947      	cmp	r1, #71	@ 0x47
 800a622:	d1bf      	bne.n	800a5a4 <_printf_float+0xf0>
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1bd      	bne.n	800a5a4 <_printf_float+0xf0>
 800a628:	2301      	movs	r3, #1
 800a62a:	e7ba      	b.n	800a5a2 <_printf_float+0xee>
 800a62c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a630:	d9dc      	bls.n	800a5ec <_printf_float+0x138>
 800a632:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a636:	d118      	bne.n	800a66a <_printf_float+0x1b6>
 800a638:	2900      	cmp	r1, #0
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	dd0b      	ble.n	800a656 <_printf_float+0x1a2>
 800a63e:	6121      	str	r1, [r4, #16]
 800a640:	b913      	cbnz	r3, 800a648 <_printf_float+0x194>
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	07d0      	lsls	r0, r2, #31
 800a646:	d502      	bpl.n	800a64e <_printf_float+0x19a>
 800a648:	3301      	adds	r3, #1
 800a64a:	440b      	add	r3, r1
 800a64c:	6123      	str	r3, [r4, #16]
 800a64e:	f04f 0900 	mov.w	r9, #0
 800a652:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a654:	e7dc      	b.n	800a610 <_printf_float+0x15c>
 800a656:	b913      	cbnz	r3, 800a65e <_printf_float+0x1aa>
 800a658:	6822      	ldr	r2, [r4, #0]
 800a65a:	07d2      	lsls	r2, r2, #31
 800a65c:	d501      	bpl.n	800a662 <_printf_float+0x1ae>
 800a65e:	3302      	adds	r3, #2
 800a660:	e7f4      	b.n	800a64c <_printf_float+0x198>
 800a662:	2301      	movs	r3, #1
 800a664:	e7f2      	b.n	800a64c <_printf_float+0x198>
 800a666:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a66a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a66c:	4299      	cmp	r1, r3
 800a66e:	db05      	blt.n	800a67c <_printf_float+0x1c8>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	6121      	str	r1, [r4, #16]
 800a674:	07d8      	lsls	r0, r3, #31
 800a676:	d5ea      	bpl.n	800a64e <_printf_float+0x19a>
 800a678:	1c4b      	adds	r3, r1, #1
 800a67a:	e7e7      	b.n	800a64c <_printf_float+0x198>
 800a67c:	2900      	cmp	r1, #0
 800a67e:	bfcc      	ite	gt
 800a680:	2201      	movgt	r2, #1
 800a682:	f1c1 0202 	rsble	r2, r1, #2
 800a686:	4413      	add	r3, r2
 800a688:	e7e0      	b.n	800a64c <_printf_float+0x198>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	055a      	lsls	r2, r3, #21
 800a68e:	d407      	bmi.n	800a6a0 <_printf_float+0x1ec>
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	4642      	mov	r2, r8
 800a694:	4631      	mov	r1, r6
 800a696:	4628      	mov	r0, r5
 800a698:	47b8      	blx	r7
 800a69a:	3001      	adds	r0, #1
 800a69c:	d12b      	bne.n	800a6f6 <_printf_float+0x242>
 800a69e:	e764      	b.n	800a56a <_printf_float+0xb6>
 800a6a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6a4:	f240 80dc 	bls.w	800a860 <_printf_float+0x3ac>
 800a6a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f7f6 f984 	bl	80009bc <__aeabi_dcmpeq>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d033      	beq.n	800a720 <_printf_float+0x26c>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	4a35      	ldr	r2, [pc, #212]	@ (800a794 <_printf_float+0x2e0>)
 800a6c0:	47b8      	blx	r7
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	f43f af51 	beq.w	800a56a <_printf_float+0xb6>
 800a6c8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a6cc:	4543      	cmp	r3, r8
 800a6ce:	db02      	blt.n	800a6d6 <_printf_float+0x222>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	07d8      	lsls	r0, r3, #31
 800a6d4:	d50f      	bpl.n	800a6f6 <_printf_float+0x242>
 800a6d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f af42 	beq.w	800a56a <_printf_float+0xb6>
 800a6e6:	f04f 0900 	mov.w	r9, #0
 800a6ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6ee:	f104 0a1a 	add.w	sl, r4, #26
 800a6f2:	45c8      	cmp	r8, r9
 800a6f4:	dc09      	bgt.n	800a70a <_printf_float+0x256>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	079b      	lsls	r3, r3, #30
 800a6fa:	f100 8102 	bmi.w	800a902 <_printf_float+0x44e>
 800a6fe:	68e0      	ldr	r0, [r4, #12]
 800a700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a702:	4298      	cmp	r0, r3
 800a704:	bfb8      	it	lt
 800a706:	4618      	movlt	r0, r3
 800a708:	e731      	b.n	800a56e <_printf_float+0xba>
 800a70a:	2301      	movs	r3, #1
 800a70c:	4652      	mov	r2, sl
 800a70e:	4631      	mov	r1, r6
 800a710:	4628      	mov	r0, r5
 800a712:	47b8      	blx	r7
 800a714:	3001      	adds	r0, #1
 800a716:	f43f af28 	beq.w	800a56a <_printf_float+0xb6>
 800a71a:	f109 0901 	add.w	r9, r9, #1
 800a71e:	e7e8      	b.n	800a6f2 <_printf_float+0x23e>
 800a720:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a722:	2b00      	cmp	r3, #0
 800a724:	dc38      	bgt.n	800a798 <_printf_float+0x2e4>
 800a726:	2301      	movs	r3, #1
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	4a19      	ldr	r2, [pc, #100]	@ (800a794 <_printf_float+0x2e0>)
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f af1a 	beq.w	800a56a <_printf_float+0xb6>
 800a736:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a73a:	ea59 0303 	orrs.w	r3, r9, r3
 800a73e:	d102      	bne.n	800a746 <_printf_float+0x292>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	07d9      	lsls	r1, r3, #31
 800a744:	d5d7      	bpl.n	800a6f6 <_printf_float+0x242>
 800a746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	f43f af0a 	beq.w	800a56a <_printf_float+0xb6>
 800a756:	f04f 0a00 	mov.w	sl, #0
 800a75a:	f104 0b1a 	add.w	fp, r4, #26
 800a75e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a760:	425b      	negs	r3, r3
 800a762:	4553      	cmp	r3, sl
 800a764:	dc01      	bgt.n	800a76a <_printf_float+0x2b6>
 800a766:	464b      	mov	r3, r9
 800a768:	e793      	b.n	800a692 <_printf_float+0x1de>
 800a76a:	2301      	movs	r3, #1
 800a76c:	465a      	mov	r2, fp
 800a76e:	4631      	mov	r1, r6
 800a770:	4628      	mov	r0, r5
 800a772:	47b8      	blx	r7
 800a774:	3001      	adds	r0, #1
 800a776:	f43f aef8 	beq.w	800a56a <_printf_float+0xb6>
 800a77a:	f10a 0a01 	add.w	sl, sl, #1
 800a77e:	e7ee      	b.n	800a75e <_printf_float+0x2aa>
 800a780:	7fefffff 	.word	0x7fefffff
 800a784:	0800de7a 	.word	0x0800de7a
 800a788:	0800de76 	.word	0x0800de76
 800a78c:	0800de82 	.word	0x0800de82
 800a790:	0800de7e 	.word	0x0800de7e
 800a794:	0800dfb5 	.word	0x0800dfb5
 800a798:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a79a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a79e:	4553      	cmp	r3, sl
 800a7a0:	bfa8      	it	ge
 800a7a2:	4653      	movge	r3, sl
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	4699      	mov	r9, r3
 800a7a8:	dc36      	bgt.n	800a818 <_printf_float+0x364>
 800a7aa:	f04f 0b00 	mov.w	fp, #0
 800a7ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7b2:	f104 021a 	add.w	r2, r4, #26
 800a7b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a7b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7ba:	eba3 0309 	sub.w	r3, r3, r9
 800a7be:	455b      	cmp	r3, fp
 800a7c0:	dc31      	bgt.n	800a826 <_printf_float+0x372>
 800a7c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c4:	459a      	cmp	sl, r3
 800a7c6:	dc3a      	bgt.n	800a83e <_printf_float+0x38a>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	07da      	lsls	r2, r3, #31
 800a7cc:	d437      	bmi.n	800a83e <_printf_float+0x38a>
 800a7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7d0:	ebaa 0903 	sub.w	r9, sl, r3
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d6:	ebaa 0303 	sub.w	r3, sl, r3
 800a7da:	4599      	cmp	r9, r3
 800a7dc:	bfa8      	it	ge
 800a7de:	4699      	movge	r9, r3
 800a7e0:	f1b9 0f00 	cmp.w	r9, #0
 800a7e4:	dc33      	bgt.n	800a84e <_printf_float+0x39a>
 800a7e6:	f04f 0800 	mov.w	r8, #0
 800a7ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7ee:	f104 0b1a 	add.w	fp, r4, #26
 800a7f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a7f8:	eba3 0309 	sub.w	r3, r3, r9
 800a7fc:	4543      	cmp	r3, r8
 800a7fe:	f77f af7a 	ble.w	800a6f6 <_printf_float+0x242>
 800a802:	2301      	movs	r3, #1
 800a804:	465a      	mov	r2, fp
 800a806:	4631      	mov	r1, r6
 800a808:	4628      	mov	r0, r5
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	f43f aeac 	beq.w	800a56a <_printf_float+0xb6>
 800a812:	f108 0801 	add.w	r8, r8, #1
 800a816:	e7ec      	b.n	800a7f2 <_printf_float+0x33e>
 800a818:	4642      	mov	r2, r8
 800a81a:	4631      	mov	r1, r6
 800a81c:	4628      	mov	r0, r5
 800a81e:	47b8      	blx	r7
 800a820:	3001      	adds	r0, #1
 800a822:	d1c2      	bne.n	800a7aa <_printf_float+0x2f6>
 800a824:	e6a1      	b.n	800a56a <_printf_float+0xb6>
 800a826:	2301      	movs	r3, #1
 800a828:	4631      	mov	r1, r6
 800a82a:	4628      	mov	r0, r5
 800a82c:	920a      	str	r2, [sp, #40]	@ 0x28
 800a82e:	47b8      	blx	r7
 800a830:	3001      	adds	r0, #1
 800a832:	f43f ae9a 	beq.w	800a56a <_printf_float+0xb6>
 800a836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a838:	f10b 0b01 	add.w	fp, fp, #1
 800a83c:	e7bb      	b.n	800a7b6 <_printf_float+0x302>
 800a83e:	4631      	mov	r1, r6
 800a840:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a844:	4628      	mov	r0, r5
 800a846:	47b8      	blx	r7
 800a848:	3001      	adds	r0, #1
 800a84a:	d1c0      	bne.n	800a7ce <_printf_float+0x31a>
 800a84c:	e68d      	b.n	800a56a <_printf_float+0xb6>
 800a84e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a850:	464b      	mov	r3, r9
 800a852:	4631      	mov	r1, r6
 800a854:	4628      	mov	r0, r5
 800a856:	4442      	add	r2, r8
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	d1c3      	bne.n	800a7e6 <_printf_float+0x332>
 800a85e:	e684      	b.n	800a56a <_printf_float+0xb6>
 800a860:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a864:	f1ba 0f01 	cmp.w	sl, #1
 800a868:	dc01      	bgt.n	800a86e <_printf_float+0x3ba>
 800a86a:	07db      	lsls	r3, r3, #31
 800a86c:	d536      	bpl.n	800a8dc <_printf_float+0x428>
 800a86e:	2301      	movs	r3, #1
 800a870:	4642      	mov	r2, r8
 800a872:	4631      	mov	r1, r6
 800a874:	4628      	mov	r0, r5
 800a876:	47b8      	blx	r7
 800a878:	3001      	adds	r0, #1
 800a87a:	f43f ae76 	beq.w	800a56a <_printf_float+0xb6>
 800a87e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a882:	4631      	mov	r1, r6
 800a884:	4628      	mov	r0, r5
 800a886:	47b8      	blx	r7
 800a888:	3001      	adds	r0, #1
 800a88a:	f43f ae6e 	beq.w	800a56a <_printf_float+0xb6>
 800a88e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a892:	2200      	movs	r2, #0
 800a894:	2300      	movs	r3, #0
 800a896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a89a:	f7f6 f88f 	bl	80009bc <__aeabi_dcmpeq>
 800a89e:	b9c0      	cbnz	r0, 800a8d2 <_printf_float+0x41e>
 800a8a0:	4653      	mov	r3, sl
 800a8a2:	f108 0201 	add.w	r2, r8, #1
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b8      	blx	r7
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d10c      	bne.n	800a8ca <_printf_float+0x416>
 800a8b0:	e65b      	b.n	800a56a <_printf_float+0xb6>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	465a      	mov	r2, fp
 800a8b6:	4631      	mov	r1, r6
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	47b8      	blx	r7
 800a8bc:	3001      	adds	r0, #1
 800a8be:	f43f ae54 	beq.w	800a56a <_printf_float+0xb6>
 800a8c2:	f108 0801 	add.w	r8, r8, #1
 800a8c6:	45d0      	cmp	r8, sl
 800a8c8:	dbf3      	blt.n	800a8b2 <_printf_float+0x3fe>
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a8d0:	e6e0      	b.n	800a694 <_printf_float+0x1e0>
 800a8d2:	f04f 0800 	mov.w	r8, #0
 800a8d6:	f104 0b1a 	add.w	fp, r4, #26
 800a8da:	e7f4      	b.n	800a8c6 <_printf_float+0x412>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4642      	mov	r2, r8
 800a8e0:	e7e1      	b.n	800a8a6 <_printf_float+0x3f2>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	464a      	mov	r2, r9
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	47b8      	blx	r7
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	f43f ae3c 	beq.w	800a56a <_printf_float+0xb6>
 800a8f2:	f108 0801 	add.w	r8, r8, #1
 800a8f6:	68e3      	ldr	r3, [r4, #12]
 800a8f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a8fa:	1a5b      	subs	r3, r3, r1
 800a8fc:	4543      	cmp	r3, r8
 800a8fe:	dcf0      	bgt.n	800a8e2 <_printf_float+0x42e>
 800a900:	e6fd      	b.n	800a6fe <_printf_float+0x24a>
 800a902:	f04f 0800 	mov.w	r8, #0
 800a906:	f104 0919 	add.w	r9, r4, #25
 800a90a:	e7f4      	b.n	800a8f6 <_printf_float+0x442>

0800a90c <_printf_common>:
 800a90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a910:	4616      	mov	r6, r2
 800a912:	4698      	mov	r8, r3
 800a914:	688a      	ldr	r2, [r1, #8]
 800a916:	690b      	ldr	r3, [r1, #16]
 800a918:	4607      	mov	r7, r0
 800a91a:	4293      	cmp	r3, r2
 800a91c:	bfb8      	it	lt
 800a91e:	4613      	movlt	r3, r2
 800a920:	6033      	str	r3, [r6, #0]
 800a922:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a926:	460c      	mov	r4, r1
 800a928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a92c:	b10a      	cbz	r2, 800a932 <_printf_common+0x26>
 800a92e:	3301      	adds	r3, #1
 800a930:	6033      	str	r3, [r6, #0]
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	0699      	lsls	r1, r3, #26
 800a936:	bf42      	ittt	mi
 800a938:	6833      	ldrmi	r3, [r6, #0]
 800a93a:	3302      	addmi	r3, #2
 800a93c:	6033      	strmi	r3, [r6, #0]
 800a93e:	6825      	ldr	r5, [r4, #0]
 800a940:	f015 0506 	ands.w	r5, r5, #6
 800a944:	d106      	bne.n	800a954 <_printf_common+0x48>
 800a946:	f104 0a19 	add.w	sl, r4, #25
 800a94a:	68e3      	ldr	r3, [r4, #12]
 800a94c:	6832      	ldr	r2, [r6, #0]
 800a94e:	1a9b      	subs	r3, r3, r2
 800a950:	42ab      	cmp	r3, r5
 800a952:	dc2b      	bgt.n	800a9ac <_printf_common+0xa0>
 800a954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a958:	6822      	ldr	r2, [r4, #0]
 800a95a:	3b00      	subs	r3, #0
 800a95c:	bf18      	it	ne
 800a95e:	2301      	movne	r3, #1
 800a960:	0692      	lsls	r2, r2, #26
 800a962:	d430      	bmi.n	800a9c6 <_printf_common+0xba>
 800a964:	4641      	mov	r1, r8
 800a966:	4638      	mov	r0, r7
 800a968:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a96c:	47c8      	blx	r9
 800a96e:	3001      	adds	r0, #1
 800a970:	d023      	beq.n	800a9ba <_printf_common+0xae>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	6922      	ldr	r2, [r4, #16]
 800a976:	f003 0306 	and.w	r3, r3, #6
 800a97a:	2b04      	cmp	r3, #4
 800a97c:	bf14      	ite	ne
 800a97e:	2500      	movne	r5, #0
 800a980:	6833      	ldreq	r3, [r6, #0]
 800a982:	f04f 0600 	mov.w	r6, #0
 800a986:	bf08      	it	eq
 800a988:	68e5      	ldreq	r5, [r4, #12]
 800a98a:	f104 041a 	add.w	r4, r4, #26
 800a98e:	bf08      	it	eq
 800a990:	1aed      	subeq	r5, r5, r3
 800a992:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a996:	bf08      	it	eq
 800a998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a99c:	4293      	cmp	r3, r2
 800a99e:	bfc4      	itt	gt
 800a9a0:	1a9b      	subgt	r3, r3, r2
 800a9a2:	18ed      	addgt	r5, r5, r3
 800a9a4:	42b5      	cmp	r5, r6
 800a9a6:	d11a      	bne.n	800a9de <_printf_common+0xd2>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e008      	b.n	800a9be <_printf_common+0xb2>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	4652      	mov	r2, sl
 800a9b0:	4641      	mov	r1, r8
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	47c8      	blx	r9
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d103      	bne.n	800a9c2 <_printf_common+0xb6>
 800a9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c2:	3501      	adds	r5, #1
 800a9c4:	e7c1      	b.n	800a94a <_printf_common+0x3e>
 800a9c6:	2030      	movs	r0, #48	@ 0x30
 800a9c8:	18e1      	adds	r1, r4, r3
 800a9ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9d4:	4422      	add	r2, r4
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9dc:	e7c2      	b.n	800a964 <_printf_common+0x58>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	4641      	mov	r1, r8
 800a9e4:	4638      	mov	r0, r7
 800a9e6:	47c8      	blx	r9
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d0e6      	beq.n	800a9ba <_printf_common+0xae>
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	e7d9      	b.n	800a9a4 <_printf_common+0x98>

0800a9f0 <_printf_i>:
 800a9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f4:	7e0f      	ldrb	r7, [r1, #24]
 800a9f6:	4691      	mov	r9, r2
 800a9f8:	2f78      	cmp	r7, #120	@ 0x78
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	469a      	mov	sl, r3
 800aa00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa06:	d807      	bhi.n	800aa18 <_printf_i+0x28>
 800aa08:	2f62      	cmp	r7, #98	@ 0x62
 800aa0a:	d80a      	bhi.n	800aa22 <_printf_i+0x32>
 800aa0c:	2f00      	cmp	r7, #0
 800aa0e:	f000 80d1 	beq.w	800abb4 <_printf_i+0x1c4>
 800aa12:	2f58      	cmp	r7, #88	@ 0x58
 800aa14:	f000 80b8 	beq.w	800ab88 <_printf_i+0x198>
 800aa18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa20:	e03a      	b.n	800aa98 <_printf_i+0xa8>
 800aa22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa26:	2b15      	cmp	r3, #21
 800aa28:	d8f6      	bhi.n	800aa18 <_printf_i+0x28>
 800aa2a:	a101      	add	r1, pc, #4	@ (adr r1, 800aa30 <_printf_i+0x40>)
 800aa2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa30:	0800aa89 	.word	0x0800aa89
 800aa34:	0800aa9d 	.word	0x0800aa9d
 800aa38:	0800aa19 	.word	0x0800aa19
 800aa3c:	0800aa19 	.word	0x0800aa19
 800aa40:	0800aa19 	.word	0x0800aa19
 800aa44:	0800aa19 	.word	0x0800aa19
 800aa48:	0800aa9d 	.word	0x0800aa9d
 800aa4c:	0800aa19 	.word	0x0800aa19
 800aa50:	0800aa19 	.word	0x0800aa19
 800aa54:	0800aa19 	.word	0x0800aa19
 800aa58:	0800aa19 	.word	0x0800aa19
 800aa5c:	0800ab9b 	.word	0x0800ab9b
 800aa60:	0800aac7 	.word	0x0800aac7
 800aa64:	0800ab55 	.word	0x0800ab55
 800aa68:	0800aa19 	.word	0x0800aa19
 800aa6c:	0800aa19 	.word	0x0800aa19
 800aa70:	0800abbd 	.word	0x0800abbd
 800aa74:	0800aa19 	.word	0x0800aa19
 800aa78:	0800aac7 	.word	0x0800aac7
 800aa7c:	0800aa19 	.word	0x0800aa19
 800aa80:	0800aa19 	.word	0x0800aa19
 800aa84:	0800ab5d 	.word	0x0800ab5d
 800aa88:	6833      	ldr	r3, [r6, #0]
 800aa8a:	1d1a      	adds	r2, r3, #4
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6032      	str	r2, [r6, #0]
 800aa90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e09c      	b.n	800abd6 <_printf_i+0x1e6>
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	6820      	ldr	r0, [r4, #0]
 800aaa0:	1d19      	adds	r1, r3, #4
 800aaa2:	6031      	str	r1, [r6, #0]
 800aaa4:	0606      	lsls	r6, r0, #24
 800aaa6:	d501      	bpl.n	800aaac <_printf_i+0xbc>
 800aaa8:	681d      	ldr	r5, [r3, #0]
 800aaaa:	e003      	b.n	800aab4 <_printf_i+0xc4>
 800aaac:	0645      	lsls	r5, r0, #25
 800aaae:	d5fb      	bpl.n	800aaa8 <_printf_i+0xb8>
 800aab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aab4:	2d00      	cmp	r5, #0
 800aab6:	da03      	bge.n	800aac0 <_printf_i+0xd0>
 800aab8:	232d      	movs	r3, #45	@ 0x2d
 800aaba:	426d      	negs	r5, r5
 800aabc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aac0:	230a      	movs	r3, #10
 800aac2:	4858      	ldr	r0, [pc, #352]	@ (800ac24 <_printf_i+0x234>)
 800aac4:	e011      	b.n	800aaea <_printf_i+0xfa>
 800aac6:	6821      	ldr	r1, [r4, #0]
 800aac8:	6833      	ldr	r3, [r6, #0]
 800aaca:	0608      	lsls	r0, r1, #24
 800aacc:	f853 5b04 	ldr.w	r5, [r3], #4
 800aad0:	d402      	bmi.n	800aad8 <_printf_i+0xe8>
 800aad2:	0649      	lsls	r1, r1, #25
 800aad4:	bf48      	it	mi
 800aad6:	b2ad      	uxthmi	r5, r5
 800aad8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aada:	6033      	str	r3, [r6, #0]
 800aadc:	bf14      	ite	ne
 800aade:	230a      	movne	r3, #10
 800aae0:	2308      	moveq	r3, #8
 800aae2:	4850      	ldr	r0, [pc, #320]	@ (800ac24 <_printf_i+0x234>)
 800aae4:	2100      	movs	r1, #0
 800aae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aaea:	6866      	ldr	r6, [r4, #4]
 800aaec:	2e00      	cmp	r6, #0
 800aaee:	60a6      	str	r6, [r4, #8]
 800aaf0:	db05      	blt.n	800aafe <_printf_i+0x10e>
 800aaf2:	6821      	ldr	r1, [r4, #0]
 800aaf4:	432e      	orrs	r6, r5
 800aaf6:	f021 0104 	bic.w	r1, r1, #4
 800aafa:	6021      	str	r1, [r4, #0]
 800aafc:	d04b      	beq.n	800ab96 <_printf_i+0x1a6>
 800aafe:	4616      	mov	r6, r2
 800ab00:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab04:	fb03 5711 	mls	r7, r3, r1, r5
 800ab08:	5dc7      	ldrb	r7, [r0, r7]
 800ab0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab0e:	462f      	mov	r7, r5
 800ab10:	42bb      	cmp	r3, r7
 800ab12:	460d      	mov	r5, r1
 800ab14:	d9f4      	bls.n	800ab00 <_printf_i+0x110>
 800ab16:	2b08      	cmp	r3, #8
 800ab18:	d10b      	bne.n	800ab32 <_printf_i+0x142>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	07df      	lsls	r7, r3, #31
 800ab1e:	d508      	bpl.n	800ab32 <_printf_i+0x142>
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	6861      	ldr	r1, [r4, #4]
 800ab24:	4299      	cmp	r1, r3
 800ab26:	bfde      	ittt	le
 800ab28:	2330      	movle	r3, #48	@ 0x30
 800ab2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab32:	1b92      	subs	r2, r2, r6
 800ab34:	6122      	str	r2, [r4, #16]
 800ab36:	464b      	mov	r3, r9
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	f8cd a000 	str.w	sl, [sp]
 800ab40:	aa03      	add	r2, sp, #12
 800ab42:	f7ff fee3 	bl	800a90c <_printf_common>
 800ab46:	3001      	adds	r0, #1
 800ab48:	d14a      	bne.n	800abe0 <_printf_i+0x1f0>
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4e:	b004      	add	sp, #16
 800ab50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	f043 0320 	orr.w	r3, r3, #32
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	2778      	movs	r7, #120	@ 0x78
 800ab5e:	4832      	ldr	r0, [pc, #200]	@ (800ac28 <_printf_i+0x238>)
 800ab60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	6831      	ldr	r1, [r6, #0]
 800ab68:	061f      	lsls	r7, r3, #24
 800ab6a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab6e:	d402      	bmi.n	800ab76 <_printf_i+0x186>
 800ab70:	065f      	lsls	r7, r3, #25
 800ab72:	bf48      	it	mi
 800ab74:	b2ad      	uxthmi	r5, r5
 800ab76:	6031      	str	r1, [r6, #0]
 800ab78:	07d9      	lsls	r1, r3, #31
 800ab7a:	bf44      	itt	mi
 800ab7c:	f043 0320 	orrmi.w	r3, r3, #32
 800ab80:	6023      	strmi	r3, [r4, #0]
 800ab82:	b11d      	cbz	r5, 800ab8c <_printf_i+0x19c>
 800ab84:	2310      	movs	r3, #16
 800ab86:	e7ad      	b.n	800aae4 <_printf_i+0xf4>
 800ab88:	4826      	ldr	r0, [pc, #152]	@ (800ac24 <_printf_i+0x234>)
 800ab8a:	e7e9      	b.n	800ab60 <_printf_i+0x170>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	f023 0320 	bic.w	r3, r3, #32
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	e7f6      	b.n	800ab84 <_printf_i+0x194>
 800ab96:	4616      	mov	r6, r2
 800ab98:	e7bd      	b.n	800ab16 <_printf_i+0x126>
 800ab9a:	6833      	ldr	r3, [r6, #0]
 800ab9c:	6825      	ldr	r5, [r4, #0]
 800ab9e:	1d18      	adds	r0, r3, #4
 800aba0:	6961      	ldr	r1, [r4, #20]
 800aba2:	6030      	str	r0, [r6, #0]
 800aba4:	062e      	lsls	r6, r5, #24
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	d501      	bpl.n	800abae <_printf_i+0x1be>
 800abaa:	6019      	str	r1, [r3, #0]
 800abac:	e002      	b.n	800abb4 <_printf_i+0x1c4>
 800abae:	0668      	lsls	r0, r5, #25
 800abb0:	d5fb      	bpl.n	800abaa <_printf_i+0x1ba>
 800abb2:	8019      	strh	r1, [r3, #0]
 800abb4:	2300      	movs	r3, #0
 800abb6:	4616      	mov	r6, r2
 800abb8:	6123      	str	r3, [r4, #16]
 800abba:	e7bc      	b.n	800ab36 <_printf_i+0x146>
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	2100      	movs	r1, #0
 800abc0:	1d1a      	adds	r2, r3, #4
 800abc2:	6032      	str	r2, [r6, #0]
 800abc4:	681e      	ldr	r6, [r3, #0]
 800abc6:	6862      	ldr	r2, [r4, #4]
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 fac6 	bl	800b15a <memchr>
 800abce:	b108      	cbz	r0, 800abd4 <_printf_i+0x1e4>
 800abd0:	1b80      	subs	r0, r0, r6
 800abd2:	6060      	str	r0, [r4, #4]
 800abd4:	6863      	ldr	r3, [r4, #4]
 800abd6:	6123      	str	r3, [r4, #16]
 800abd8:	2300      	movs	r3, #0
 800abda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abde:	e7aa      	b.n	800ab36 <_printf_i+0x146>
 800abe0:	4632      	mov	r2, r6
 800abe2:	4649      	mov	r1, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	47d0      	blx	sl
 800abea:	3001      	adds	r0, #1
 800abec:	d0ad      	beq.n	800ab4a <_printf_i+0x15a>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	079b      	lsls	r3, r3, #30
 800abf2:	d413      	bmi.n	800ac1c <_printf_i+0x22c>
 800abf4:	68e0      	ldr	r0, [r4, #12]
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	4298      	cmp	r0, r3
 800abfa:	bfb8      	it	lt
 800abfc:	4618      	movlt	r0, r3
 800abfe:	e7a6      	b.n	800ab4e <_printf_i+0x15e>
 800ac00:	2301      	movs	r3, #1
 800ac02:	4632      	mov	r2, r6
 800ac04:	4649      	mov	r1, r9
 800ac06:	4640      	mov	r0, r8
 800ac08:	47d0      	blx	sl
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	d09d      	beq.n	800ab4a <_printf_i+0x15a>
 800ac0e:	3501      	adds	r5, #1
 800ac10:	68e3      	ldr	r3, [r4, #12]
 800ac12:	9903      	ldr	r1, [sp, #12]
 800ac14:	1a5b      	subs	r3, r3, r1
 800ac16:	42ab      	cmp	r3, r5
 800ac18:	dcf2      	bgt.n	800ac00 <_printf_i+0x210>
 800ac1a:	e7eb      	b.n	800abf4 <_printf_i+0x204>
 800ac1c:	2500      	movs	r5, #0
 800ac1e:	f104 0619 	add.w	r6, r4, #25
 800ac22:	e7f5      	b.n	800ac10 <_printf_i+0x220>
 800ac24:	0800de86 	.word	0x0800de86
 800ac28:	0800de97 	.word	0x0800de97

0800ac2c <std>:
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	4604      	mov	r4, r0
 800ac32:	e9c0 3300 	strd	r3, r3, [r0]
 800ac36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac3a:	6083      	str	r3, [r0, #8]
 800ac3c:	8181      	strh	r1, [r0, #12]
 800ac3e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac40:	81c2      	strh	r2, [r0, #14]
 800ac42:	6183      	str	r3, [r0, #24]
 800ac44:	4619      	mov	r1, r3
 800ac46:	2208      	movs	r2, #8
 800ac48:	305c      	adds	r0, #92	@ 0x5c
 800ac4a:	f000 f96a 	bl	800af22 <memset>
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <std+0x58>)
 800ac50:	6224      	str	r4, [r4, #32]
 800ac52:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac54:	4b0c      	ldr	r3, [pc, #48]	@ (800ac88 <std+0x5c>)
 800ac56:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac58:	4b0c      	ldr	r3, [pc, #48]	@ (800ac8c <std+0x60>)
 800ac5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac90 <std+0x64>)
 800ac5e:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac60:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <std+0x68>)
 800ac62:	429c      	cmp	r4, r3
 800ac64:	d006      	beq.n	800ac74 <std+0x48>
 800ac66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac6a:	4294      	cmp	r4, r2
 800ac6c:	d002      	beq.n	800ac74 <std+0x48>
 800ac6e:	33d0      	adds	r3, #208	@ 0xd0
 800ac70:	429c      	cmp	r4, r3
 800ac72:	d105      	bne.n	800ac80 <std+0x54>
 800ac74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac7c:	f000 ba6a 	b.w	800b154 <__retarget_lock_init_recursive>
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	bf00      	nop
 800ac84:	0800ae99 	.word	0x0800ae99
 800ac88:	0800aebf 	.word	0x0800aebf
 800ac8c:	0800aef7 	.word	0x0800aef7
 800ac90:	0800af1b 	.word	0x0800af1b
 800ac94:	20003210 	.word	0x20003210

0800ac98 <stdio_exit_handler>:
 800ac98:	4a02      	ldr	r2, [pc, #8]	@ (800aca4 <stdio_exit_handler+0xc>)
 800ac9a:	4903      	ldr	r1, [pc, #12]	@ (800aca8 <stdio_exit_handler+0x10>)
 800ac9c:	4803      	ldr	r0, [pc, #12]	@ (800acac <stdio_exit_handler+0x14>)
 800ac9e:	f000 b869 	b.w	800ad74 <_fwalk_sglue>
 800aca2:	bf00      	nop
 800aca4:	20000024 	.word	0x20000024
 800aca8:	0800d3a5 	.word	0x0800d3a5
 800acac:	20000034 	.word	0x20000034

0800acb0 <cleanup_stdio>:
 800acb0:	6841      	ldr	r1, [r0, #4]
 800acb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ace4 <cleanup_stdio+0x34>)
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4299      	cmp	r1, r3
 800acb8:	4604      	mov	r4, r0
 800acba:	d001      	beq.n	800acc0 <cleanup_stdio+0x10>
 800acbc:	f002 fb72 	bl	800d3a4 <_fflush_r>
 800acc0:	68a1      	ldr	r1, [r4, #8]
 800acc2:	4b09      	ldr	r3, [pc, #36]	@ (800ace8 <cleanup_stdio+0x38>)
 800acc4:	4299      	cmp	r1, r3
 800acc6:	d002      	beq.n	800acce <cleanup_stdio+0x1e>
 800acc8:	4620      	mov	r0, r4
 800acca:	f002 fb6b 	bl	800d3a4 <_fflush_r>
 800acce:	68e1      	ldr	r1, [r4, #12]
 800acd0:	4b06      	ldr	r3, [pc, #24]	@ (800acec <cleanup_stdio+0x3c>)
 800acd2:	4299      	cmp	r1, r3
 800acd4:	d004      	beq.n	800ace0 <cleanup_stdio+0x30>
 800acd6:	4620      	mov	r0, r4
 800acd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acdc:	f002 bb62 	b.w	800d3a4 <_fflush_r>
 800ace0:	bd10      	pop	{r4, pc}
 800ace2:	bf00      	nop
 800ace4:	20003210 	.word	0x20003210
 800ace8:	20003278 	.word	0x20003278
 800acec:	200032e0 	.word	0x200032e0

0800acf0 <global_stdio_init.part.0>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad20 <global_stdio_init.part.0+0x30>)
 800acf4:	4c0b      	ldr	r4, [pc, #44]	@ (800ad24 <global_stdio_init.part.0+0x34>)
 800acf6:	4a0c      	ldr	r2, [pc, #48]	@ (800ad28 <global_stdio_init.part.0+0x38>)
 800acf8:	4620      	mov	r0, r4
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	2104      	movs	r1, #4
 800acfe:	2200      	movs	r2, #0
 800ad00:	f7ff ff94 	bl	800ac2c <std>
 800ad04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad08:	2201      	movs	r2, #1
 800ad0a:	2109      	movs	r1, #9
 800ad0c:	f7ff ff8e 	bl	800ac2c <std>
 800ad10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad14:	2202      	movs	r2, #2
 800ad16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad1a:	2112      	movs	r1, #18
 800ad1c:	f7ff bf86 	b.w	800ac2c <std>
 800ad20:	20003348 	.word	0x20003348
 800ad24:	20003210 	.word	0x20003210
 800ad28:	0800ac99 	.word	0x0800ac99

0800ad2c <__sfp_lock_acquire>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	@ (800ad34 <__sfp_lock_acquire+0x8>)
 800ad2e:	f000 ba12 	b.w	800b156 <__retarget_lock_acquire_recursive>
 800ad32:	bf00      	nop
 800ad34:	20003351 	.word	0x20003351

0800ad38 <__sfp_lock_release>:
 800ad38:	4801      	ldr	r0, [pc, #4]	@ (800ad40 <__sfp_lock_release+0x8>)
 800ad3a:	f000 ba0d 	b.w	800b158 <__retarget_lock_release_recursive>
 800ad3e:	bf00      	nop
 800ad40:	20003351 	.word	0x20003351

0800ad44 <__sinit>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	4604      	mov	r4, r0
 800ad48:	f7ff fff0 	bl	800ad2c <__sfp_lock_acquire>
 800ad4c:	6a23      	ldr	r3, [r4, #32]
 800ad4e:	b11b      	cbz	r3, 800ad58 <__sinit+0x14>
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	f7ff bff0 	b.w	800ad38 <__sfp_lock_release>
 800ad58:	4b04      	ldr	r3, [pc, #16]	@ (800ad6c <__sinit+0x28>)
 800ad5a:	6223      	str	r3, [r4, #32]
 800ad5c:	4b04      	ldr	r3, [pc, #16]	@ (800ad70 <__sinit+0x2c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1f5      	bne.n	800ad50 <__sinit+0xc>
 800ad64:	f7ff ffc4 	bl	800acf0 <global_stdio_init.part.0>
 800ad68:	e7f2      	b.n	800ad50 <__sinit+0xc>
 800ad6a:	bf00      	nop
 800ad6c:	0800acb1 	.word	0x0800acb1
 800ad70:	20003348 	.word	0x20003348

0800ad74 <_fwalk_sglue>:
 800ad74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad78:	4607      	mov	r7, r0
 800ad7a:	4688      	mov	r8, r1
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	2600      	movs	r6, #0
 800ad80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad84:	f1b9 0901 	subs.w	r9, r9, #1
 800ad88:	d505      	bpl.n	800ad96 <_fwalk_sglue+0x22>
 800ad8a:	6824      	ldr	r4, [r4, #0]
 800ad8c:	2c00      	cmp	r4, #0
 800ad8e:	d1f7      	bne.n	800ad80 <_fwalk_sglue+0xc>
 800ad90:	4630      	mov	r0, r6
 800ad92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d907      	bls.n	800adac <_fwalk_sglue+0x38>
 800ad9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ada0:	3301      	adds	r3, #1
 800ada2:	d003      	beq.n	800adac <_fwalk_sglue+0x38>
 800ada4:	4629      	mov	r1, r5
 800ada6:	4638      	mov	r0, r7
 800ada8:	47c0      	blx	r8
 800adaa:	4306      	orrs	r6, r0
 800adac:	3568      	adds	r5, #104	@ 0x68
 800adae:	e7e9      	b.n	800ad84 <_fwalk_sglue+0x10>

0800adb0 <iprintf>:
 800adb0:	b40f      	push	{r0, r1, r2, r3}
 800adb2:	b507      	push	{r0, r1, r2, lr}
 800adb4:	4906      	ldr	r1, [pc, #24]	@ (800add0 <iprintf+0x20>)
 800adb6:	ab04      	add	r3, sp, #16
 800adb8:	6808      	ldr	r0, [r1, #0]
 800adba:	f853 2b04 	ldr.w	r2, [r3], #4
 800adbe:	6881      	ldr	r1, [r0, #8]
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	f002 f80b 	bl	800cddc <_vfiprintf_r>
 800adc6:	b003      	add	sp, #12
 800adc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adcc:	b004      	add	sp, #16
 800adce:	4770      	bx	lr
 800add0:	20000030 	.word	0x20000030

0800add4 <sniprintf>:
 800add4:	b40c      	push	{r2, r3}
 800add6:	b530      	push	{r4, r5, lr}
 800add8:	4b18      	ldr	r3, [pc, #96]	@ (800ae3c <sniprintf+0x68>)
 800adda:	1e0c      	subs	r4, r1, #0
 800addc:	681d      	ldr	r5, [r3, #0]
 800adde:	b09d      	sub	sp, #116	@ 0x74
 800ade0:	da08      	bge.n	800adf4 <sniprintf+0x20>
 800ade2:	238b      	movs	r3, #139	@ 0x8b
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	b01d      	add	sp, #116	@ 0x74
 800adec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adf0:	b002      	add	sp, #8
 800adf2:	4770      	bx	lr
 800adf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800adf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adfc:	f04f 0300 	mov.w	r3, #0
 800ae00:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ae02:	bf0c      	ite	eq
 800ae04:	4623      	moveq	r3, r4
 800ae06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	9307      	str	r3, [sp, #28]
 800ae0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae12:	9002      	str	r0, [sp, #8]
 800ae14:	9006      	str	r0, [sp, #24]
 800ae16:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	ab21      	add	r3, sp, #132	@ 0x84
 800ae1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ae20:	a902      	add	r1, sp, #8
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	f001 fce8 	bl	800c7f8 <_svfiprintf_r>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	bfbc      	itt	lt
 800ae2c:	238b      	movlt	r3, #139	@ 0x8b
 800ae2e:	602b      	strlt	r3, [r5, #0]
 800ae30:	2c00      	cmp	r4, #0
 800ae32:	d0da      	beq.n	800adea <sniprintf+0x16>
 800ae34:	2200      	movs	r2, #0
 800ae36:	9b02      	ldr	r3, [sp, #8]
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e7d6      	b.n	800adea <sniprintf+0x16>
 800ae3c:	20000030 	.word	0x20000030

0800ae40 <siscanf>:
 800ae40:	b40e      	push	{r1, r2, r3}
 800ae42:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	2500      	movs	r5, #0
 800ae4a:	b09d      	sub	sp, #116	@ 0x74
 800ae4c:	ac21      	add	r4, sp, #132	@ 0x84
 800ae4e:	f854 6b04 	ldr.w	r6, [r4], #4
 800ae52:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ae56:	951b      	str	r5, [sp, #108]	@ 0x6c
 800ae58:	9002      	str	r0, [sp, #8]
 800ae5a:	9006      	str	r0, [sp, #24]
 800ae5c:	f7f5 f982 	bl	8000164 <strlen>
 800ae60:	4b0b      	ldr	r3, [pc, #44]	@ (800ae90 <siscanf+0x50>)
 800ae62:	9003      	str	r0, [sp, #12]
 800ae64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae6a:	9007      	str	r0, [sp, #28]
 800ae6c:	4809      	ldr	r0, [pc, #36]	@ (800ae94 <siscanf+0x54>)
 800ae6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae72:	4632      	mov	r2, r6
 800ae74:	4623      	mov	r3, r4
 800ae76:	a902      	add	r1, sp, #8
 800ae78:	6800      	ldr	r0, [r0, #0]
 800ae7a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ae7c:	9514      	str	r5, [sp, #80]	@ 0x50
 800ae7e:	9401      	str	r4, [sp, #4]
 800ae80:	f001 fe10 	bl	800caa4 <__ssvfiscanf_r>
 800ae84:	b01d      	add	sp, #116	@ 0x74
 800ae86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae8a:	b003      	add	sp, #12
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	0800aebb 	.word	0x0800aebb
 800ae94:	20000030 	.word	0x20000030

0800ae98 <__sread>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea0:	f000 f90a 	bl	800b0b8 <_read_r>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	bfab      	itete	ge
 800aea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aeaa:	89a3      	ldrhlt	r3, [r4, #12]
 800aeac:	181b      	addge	r3, r3, r0
 800aeae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aeb2:	bfac      	ite	ge
 800aeb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aeb6:	81a3      	strhlt	r3, [r4, #12]
 800aeb8:	bd10      	pop	{r4, pc}

0800aeba <__seofread>:
 800aeba:	2000      	movs	r0, #0
 800aebc:	4770      	bx	lr

0800aebe <__swrite>:
 800aebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec2:	461f      	mov	r7, r3
 800aec4:	898b      	ldrh	r3, [r1, #12]
 800aec6:	4605      	mov	r5, r0
 800aec8:	05db      	lsls	r3, r3, #23
 800aeca:	460c      	mov	r4, r1
 800aecc:	4616      	mov	r6, r2
 800aece:	d505      	bpl.n	800aedc <__swrite+0x1e>
 800aed0:	2302      	movs	r3, #2
 800aed2:	2200      	movs	r2, #0
 800aed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed8:	f000 f8dc 	bl	800b094 <_lseek_r>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	4632      	mov	r2, r6
 800aee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	4628      	mov	r0, r5
 800aee8:	463b      	mov	r3, r7
 800aeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aef2:	f000 b8f3 	b.w	800b0dc <_write_r>

0800aef6 <__sseek>:
 800aef6:	b510      	push	{r4, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefe:	f000 f8c9 	bl	800b094 <_lseek_r>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	bf15      	itete	ne
 800af08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af12:	81a3      	strheq	r3, [r4, #12]
 800af14:	bf18      	it	ne
 800af16:	81a3      	strhne	r3, [r4, #12]
 800af18:	bd10      	pop	{r4, pc}

0800af1a <__sclose>:
 800af1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1e:	f000 b84b 	b.w	800afb8 <_close_r>

0800af22 <memset>:
 800af22:	4603      	mov	r3, r0
 800af24:	4402      	add	r2, r0
 800af26:	4293      	cmp	r3, r2
 800af28:	d100      	bne.n	800af2c <memset+0xa>
 800af2a:	4770      	bx	lr
 800af2c:	f803 1b01 	strb.w	r1, [r3], #1
 800af30:	e7f9      	b.n	800af26 <memset+0x4>

0800af32 <strncpy>:
 800af32:	4603      	mov	r3, r0
 800af34:	b510      	push	{r4, lr}
 800af36:	3901      	subs	r1, #1
 800af38:	b132      	cbz	r2, 800af48 <strncpy+0x16>
 800af3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800af3e:	3a01      	subs	r2, #1
 800af40:	f803 4b01 	strb.w	r4, [r3], #1
 800af44:	2c00      	cmp	r4, #0
 800af46:	d1f7      	bne.n	800af38 <strncpy+0x6>
 800af48:	2100      	movs	r1, #0
 800af4a:	441a      	add	r2, r3
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d100      	bne.n	800af52 <strncpy+0x20>
 800af50:	bd10      	pop	{r4, pc}
 800af52:	f803 1b01 	strb.w	r1, [r3], #1
 800af56:	e7f9      	b.n	800af4c <strncpy+0x1a>

0800af58 <__strtok_r>:
 800af58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af5a:	4604      	mov	r4, r0
 800af5c:	b908      	cbnz	r0, 800af62 <__strtok_r+0xa>
 800af5e:	6814      	ldr	r4, [r2, #0]
 800af60:	b144      	cbz	r4, 800af74 <__strtok_r+0x1c>
 800af62:	460f      	mov	r7, r1
 800af64:	4620      	mov	r0, r4
 800af66:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af6e:	b91e      	cbnz	r6, 800af78 <__strtok_r+0x20>
 800af70:	b965      	cbnz	r5, 800af8c <__strtok_r+0x34>
 800af72:	6015      	str	r5, [r2, #0]
 800af74:	2000      	movs	r0, #0
 800af76:	e005      	b.n	800af84 <__strtok_r+0x2c>
 800af78:	42b5      	cmp	r5, r6
 800af7a:	d1f6      	bne.n	800af6a <__strtok_r+0x12>
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1f0      	bne.n	800af62 <__strtok_r+0xa>
 800af80:	6014      	str	r4, [r2, #0]
 800af82:	7003      	strb	r3, [r0, #0]
 800af84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af86:	461c      	mov	r4, r3
 800af88:	e00c      	b.n	800afa4 <__strtok_r+0x4c>
 800af8a:	b91d      	cbnz	r5, 800af94 <__strtok_r+0x3c>
 800af8c:	460e      	mov	r6, r1
 800af8e:	4627      	mov	r7, r4
 800af90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af94:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af98:	42ab      	cmp	r3, r5
 800af9a:	d1f6      	bne.n	800af8a <__strtok_r+0x32>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0f2      	beq.n	800af86 <__strtok_r+0x2e>
 800afa0:	2300      	movs	r3, #0
 800afa2:	703b      	strb	r3, [r7, #0]
 800afa4:	6014      	str	r4, [r2, #0]
 800afa6:	e7ed      	b.n	800af84 <__strtok_r+0x2c>

0800afa8 <strtok_r>:
 800afa8:	2301      	movs	r3, #1
 800afaa:	f7ff bfd5 	b.w	800af58 <__strtok_r>
	...

0800afb0 <_localeconv_r>:
 800afb0:	4800      	ldr	r0, [pc, #0]	@ (800afb4 <_localeconv_r+0x4>)
 800afb2:	4770      	bx	lr
 800afb4:	20000170 	.word	0x20000170

0800afb8 <_close_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	2300      	movs	r3, #0
 800afbc:	4d05      	ldr	r5, [pc, #20]	@ (800afd4 <_close_r+0x1c>)
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f7 fb39 	bl	800263a <_close>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_close_r+0x1a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_close_r+0x1a>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	2000334c 	.word	0x2000334c

0800afd8 <_reclaim_reent>:
 800afd8:	4b2d      	ldr	r3, [pc, #180]	@ (800b090 <_reclaim_reent+0xb8>)
 800afda:	b570      	push	{r4, r5, r6, lr}
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4604      	mov	r4, r0
 800afe0:	4283      	cmp	r3, r0
 800afe2:	d053      	beq.n	800b08c <_reclaim_reent+0xb4>
 800afe4:	69c3      	ldr	r3, [r0, #28]
 800afe6:	b31b      	cbz	r3, 800b030 <_reclaim_reent+0x58>
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	b163      	cbz	r3, 800b006 <_reclaim_reent+0x2e>
 800afec:	2500      	movs	r5, #0
 800afee:	69e3      	ldr	r3, [r4, #28]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	5959      	ldr	r1, [r3, r5]
 800aff4:	b9b1      	cbnz	r1, 800b024 <_reclaim_reent+0x4c>
 800aff6:	3504      	adds	r5, #4
 800aff8:	2d80      	cmp	r5, #128	@ 0x80
 800affa:	d1f8      	bne.n	800afee <_reclaim_reent+0x16>
 800affc:	69e3      	ldr	r3, [r4, #28]
 800affe:	4620      	mov	r0, r4
 800b000:	68d9      	ldr	r1, [r3, #12]
 800b002:	f000 ff25 	bl	800be50 <_free_r>
 800b006:	69e3      	ldr	r3, [r4, #28]
 800b008:	6819      	ldr	r1, [r3, #0]
 800b00a:	b111      	cbz	r1, 800b012 <_reclaim_reent+0x3a>
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 ff1f 	bl	800be50 <_free_r>
 800b012:	69e3      	ldr	r3, [r4, #28]
 800b014:	689d      	ldr	r5, [r3, #8]
 800b016:	b15d      	cbz	r5, 800b030 <_reclaim_reent+0x58>
 800b018:	4629      	mov	r1, r5
 800b01a:	4620      	mov	r0, r4
 800b01c:	682d      	ldr	r5, [r5, #0]
 800b01e:	f000 ff17 	bl	800be50 <_free_r>
 800b022:	e7f8      	b.n	800b016 <_reclaim_reent+0x3e>
 800b024:	680e      	ldr	r6, [r1, #0]
 800b026:	4620      	mov	r0, r4
 800b028:	f000 ff12 	bl	800be50 <_free_r>
 800b02c:	4631      	mov	r1, r6
 800b02e:	e7e1      	b.n	800aff4 <_reclaim_reent+0x1c>
 800b030:	6961      	ldr	r1, [r4, #20]
 800b032:	b111      	cbz	r1, 800b03a <_reclaim_reent+0x62>
 800b034:	4620      	mov	r0, r4
 800b036:	f000 ff0b 	bl	800be50 <_free_r>
 800b03a:	69e1      	ldr	r1, [r4, #28]
 800b03c:	b111      	cbz	r1, 800b044 <_reclaim_reent+0x6c>
 800b03e:	4620      	mov	r0, r4
 800b040:	f000 ff06 	bl	800be50 <_free_r>
 800b044:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b046:	b111      	cbz	r1, 800b04e <_reclaim_reent+0x76>
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 ff01 	bl	800be50 <_free_r>
 800b04e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b050:	b111      	cbz	r1, 800b058 <_reclaim_reent+0x80>
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fefc 	bl	800be50 <_free_r>
 800b058:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b05a:	b111      	cbz	r1, 800b062 <_reclaim_reent+0x8a>
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 fef7 	bl	800be50 <_free_r>
 800b062:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b064:	b111      	cbz	r1, 800b06c <_reclaim_reent+0x94>
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fef2 	bl	800be50 <_free_r>
 800b06c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b06e:	b111      	cbz	r1, 800b076 <_reclaim_reent+0x9e>
 800b070:	4620      	mov	r0, r4
 800b072:	f000 feed 	bl	800be50 <_free_r>
 800b076:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b078:	b111      	cbz	r1, 800b080 <_reclaim_reent+0xa8>
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 fee8 	bl	800be50 <_free_r>
 800b080:	6a23      	ldr	r3, [r4, #32]
 800b082:	b11b      	cbz	r3, 800b08c <_reclaim_reent+0xb4>
 800b084:	4620      	mov	r0, r4
 800b086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b08a:	4718      	bx	r3
 800b08c:	bd70      	pop	{r4, r5, r6, pc}
 800b08e:	bf00      	nop
 800b090:	20000030 	.word	0x20000030

0800b094 <_lseek_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	2200      	movs	r2, #0
 800b09e:	4d05      	ldr	r5, [pc, #20]	@ (800b0b4 <_lseek_r+0x20>)
 800b0a0:	602a      	str	r2, [r5, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	f7f7 faed 	bl	8002682 <_lseek>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_lseek_r+0x1e>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_lseek_r+0x1e>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	2000334c 	.word	0x2000334c

0800b0b8 <_read_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4d05      	ldr	r5, [pc, #20]	@ (800b0d8 <_read_r+0x20>)
 800b0c4:	602a      	str	r2, [r5, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f7f7 fa7e 	bl	80025c8 <_read>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_read_r+0x1e>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_read_r+0x1e>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	2000334c 	.word	0x2000334c

0800b0dc <_write_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	4d05      	ldr	r5, [pc, #20]	@ (800b0fc <_write_r+0x20>)
 800b0e8:	602a      	str	r2, [r5, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f7f7 fa89 	bl	8002602 <_write>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_write_r+0x1e>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_write_r+0x1e>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	2000334c 	.word	0x2000334c

0800b100 <__errno>:
 800b100:	4b01      	ldr	r3, [pc, #4]	@ (800b108 <__errno+0x8>)
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	20000030 	.word	0x20000030

0800b10c <__libc_init_array>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	2600      	movs	r6, #0
 800b110:	4d0c      	ldr	r5, [pc, #48]	@ (800b144 <__libc_init_array+0x38>)
 800b112:	4c0d      	ldr	r4, [pc, #52]	@ (800b148 <__libc_init_array+0x3c>)
 800b114:	1b64      	subs	r4, r4, r5
 800b116:	10a4      	asrs	r4, r4, #2
 800b118:	42a6      	cmp	r6, r4
 800b11a:	d109      	bne.n	800b130 <__libc_init_array+0x24>
 800b11c:	f002 fcf0 	bl	800db00 <_init>
 800b120:	2600      	movs	r6, #0
 800b122:	4d0a      	ldr	r5, [pc, #40]	@ (800b14c <__libc_init_array+0x40>)
 800b124:	4c0a      	ldr	r4, [pc, #40]	@ (800b150 <__libc_init_array+0x44>)
 800b126:	1b64      	subs	r4, r4, r5
 800b128:	10a4      	asrs	r4, r4, #2
 800b12a:	42a6      	cmp	r6, r4
 800b12c:	d105      	bne.n	800b13a <__libc_init_array+0x2e>
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	f855 3b04 	ldr.w	r3, [r5], #4
 800b134:	4798      	blx	r3
 800b136:	3601      	adds	r6, #1
 800b138:	e7ee      	b.n	800b118 <__libc_init_array+0xc>
 800b13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13e:	4798      	blx	r3
 800b140:	3601      	adds	r6, #1
 800b142:	e7f2      	b.n	800b12a <__libc_init_array+0x1e>
 800b144:	0800e20c 	.word	0x0800e20c
 800b148:	0800e20c 	.word	0x0800e20c
 800b14c:	0800e20c 	.word	0x0800e20c
 800b150:	0800e210 	.word	0x0800e210

0800b154 <__retarget_lock_init_recursive>:
 800b154:	4770      	bx	lr

0800b156 <__retarget_lock_acquire_recursive>:
 800b156:	4770      	bx	lr

0800b158 <__retarget_lock_release_recursive>:
 800b158:	4770      	bx	lr

0800b15a <memchr>:
 800b15a:	4603      	mov	r3, r0
 800b15c:	b510      	push	{r4, lr}
 800b15e:	b2c9      	uxtb	r1, r1
 800b160:	4402      	add	r2, r0
 800b162:	4293      	cmp	r3, r2
 800b164:	4618      	mov	r0, r3
 800b166:	d101      	bne.n	800b16c <memchr+0x12>
 800b168:	2000      	movs	r0, #0
 800b16a:	e003      	b.n	800b174 <memchr+0x1a>
 800b16c:	7804      	ldrb	r4, [r0, #0]
 800b16e:	3301      	adds	r3, #1
 800b170:	428c      	cmp	r4, r1
 800b172:	d1f6      	bne.n	800b162 <memchr+0x8>
 800b174:	bd10      	pop	{r4, pc}

0800b176 <memcpy>:
 800b176:	440a      	add	r2, r1
 800b178:	4291      	cmp	r1, r2
 800b17a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b17e:	d100      	bne.n	800b182 <memcpy+0xc>
 800b180:	4770      	bx	lr
 800b182:	b510      	push	{r4, lr}
 800b184:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b188:	4291      	cmp	r1, r2
 800b18a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b18e:	d1f9      	bne.n	800b184 <memcpy+0xe>
 800b190:	bd10      	pop	{r4, pc}

0800b192 <quorem>:
 800b192:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b196:	6903      	ldr	r3, [r0, #16]
 800b198:	690c      	ldr	r4, [r1, #16]
 800b19a:	4607      	mov	r7, r0
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	db7e      	blt.n	800b29e <quorem+0x10c>
 800b1a0:	3c01      	subs	r4, #1
 800b1a2:	00a3      	lsls	r3, r4, #2
 800b1a4:	f100 0514 	add.w	r5, r0, #20
 800b1a8:	f101 0814 	add.w	r8, r1, #20
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1c8:	d32e      	bcc.n	800b228 <quorem+0x96>
 800b1ca:	f04f 0a00 	mov.w	sl, #0
 800b1ce:	46c4      	mov	ip, r8
 800b1d0:	46ae      	mov	lr, r5
 800b1d2:	46d3      	mov	fp, sl
 800b1d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1d8:	b298      	uxth	r0, r3
 800b1da:	fb06 a000 	mla	r0, r6, r0, sl
 800b1de:	0c1b      	lsrs	r3, r3, #16
 800b1e0:	0c02      	lsrs	r2, r0, #16
 800b1e2:	fb06 2303 	mla	r3, r6, r3, r2
 800b1e6:	f8de 2000 	ldr.w	r2, [lr]
 800b1ea:	b280      	uxth	r0, r0
 800b1ec:	b292      	uxth	r2, r2
 800b1ee:	1a12      	subs	r2, r2, r0
 800b1f0:	445a      	add	r2, fp
 800b1f2:	f8de 0000 	ldr.w	r0, [lr]
 800b1f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b200:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b204:	b292      	uxth	r2, r2
 800b206:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b20a:	45e1      	cmp	r9, ip
 800b20c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b210:	f84e 2b04 	str.w	r2, [lr], #4
 800b214:	d2de      	bcs.n	800b1d4 <quorem+0x42>
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	58eb      	ldr	r3, [r5, r3]
 800b21a:	b92b      	cbnz	r3, 800b228 <quorem+0x96>
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	3b04      	subs	r3, #4
 800b220:	429d      	cmp	r5, r3
 800b222:	461a      	mov	r2, r3
 800b224:	d32f      	bcc.n	800b286 <quorem+0xf4>
 800b226:	613c      	str	r4, [r7, #16]
 800b228:	4638      	mov	r0, r7
 800b22a:	f001 f981 	bl	800c530 <__mcmp>
 800b22e:	2800      	cmp	r0, #0
 800b230:	db25      	blt.n	800b27e <quorem+0xec>
 800b232:	4629      	mov	r1, r5
 800b234:	2000      	movs	r0, #0
 800b236:	f858 2b04 	ldr.w	r2, [r8], #4
 800b23a:	f8d1 c000 	ldr.w	ip, [r1]
 800b23e:	fa1f fe82 	uxth.w	lr, r2
 800b242:	fa1f f38c 	uxth.w	r3, ip
 800b246:	eba3 030e 	sub.w	r3, r3, lr
 800b24a:	4403      	add	r3, r0
 800b24c:	0c12      	lsrs	r2, r2, #16
 800b24e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b252:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b256:	b29b      	uxth	r3, r3
 800b258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b25c:	45c1      	cmp	r9, r8
 800b25e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b262:	f841 3b04 	str.w	r3, [r1], #4
 800b266:	d2e6      	bcs.n	800b236 <quorem+0xa4>
 800b268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b26c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b270:	b922      	cbnz	r2, 800b27c <quorem+0xea>
 800b272:	3b04      	subs	r3, #4
 800b274:	429d      	cmp	r5, r3
 800b276:	461a      	mov	r2, r3
 800b278:	d30b      	bcc.n	800b292 <quorem+0x100>
 800b27a:	613c      	str	r4, [r7, #16]
 800b27c:	3601      	adds	r6, #1
 800b27e:	4630      	mov	r0, r6
 800b280:	b003      	add	sp, #12
 800b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b286:	6812      	ldr	r2, [r2, #0]
 800b288:	3b04      	subs	r3, #4
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	d1cb      	bne.n	800b226 <quorem+0x94>
 800b28e:	3c01      	subs	r4, #1
 800b290:	e7c6      	b.n	800b220 <quorem+0x8e>
 800b292:	6812      	ldr	r2, [r2, #0]
 800b294:	3b04      	subs	r3, #4
 800b296:	2a00      	cmp	r2, #0
 800b298:	d1ef      	bne.n	800b27a <quorem+0xe8>
 800b29a:	3c01      	subs	r4, #1
 800b29c:	e7ea      	b.n	800b274 <quorem+0xe2>
 800b29e:	2000      	movs	r0, #0
 800b2a0:	e7ee      	b.n	800b280 <quorem+0xee>
 800b2a2:	0000      	movs	r0, r0
 800b2a4:	0000      	movs	r0, r0
	...

0800b2a8 <_dtoa_r>:
 800b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	461d      	mov	r5, r3
 800b2b0:	69c7      	ldr	r7, [r0, #28]
 800b2b2:	b097      	sub	sp, #92	@ 0x5c
 800b2b4:	4681      	mov	r9, r0
 800b2b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b2ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b2bc:	b97f      	cbnz	r7, 800b2de <_dtoa_r+0x36>
 800b2be:	2010      	movs	r0, #16
 800b2c0:	f000 fe0e 	bl	800bee0 <malloc>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	f8c9 001c 	str.w	r0, [r9, #28]
 800b2ca:	b920      	cbnz	r0, 800b2d6 <_dtoa_r+0x2e>
 800b2cc:	21ef      	movs	r1, #239	@ 0xef
 800b2ce:	4bac      	ldr	r3, [pc, #688]	@ (800b580 <_dtoa_r+0x2d8>)
 800b2d0:	48ac      	ldr	r0, [pc, #688]	@ (800b584 <_dtoa_r+0x2dc>)
 800b2d2:	f002 f9bf 	bl	800d654 <__assert_func>
 800b2d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2da:	6007      	str	r7, [r0, #0]
 800b2dc:	60c7      	str	r7, [r0, #12]
 800b2de:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2e2:	6819      	ldr	r1, [r3, #0]
 800b2e4:	b159      	cbz	r1, 800b2fe <_dtoa_r+0x56>
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4093      	lsls	r3, r2
 800b2ec:	604a      	str	r2, [r1, #4]
 800b2ee:	608b      	str	r3, [r1, #8]
 800b2f0:	4648      	mov	r0, r9
 800b2f2:	f000 feeb 	bl	800c0cc <_Bfree>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	1e2b      	subs	r3, r5, #0
 800b300:	bfaf      	iteee	ge
 800b302:	2300      	movge	r3, #0
 800b304:	2201      	movlt	r2, #1
 800b306:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b30a:	9307      	strlt	r3, [sp, #28]
 800b30c:	bfa8      	it	ge
 800b30e:	6033      	strge	r3, [r6, #0]
 800b310:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b314:	4b9c      	ldr	r3, [pc, #624]	@ (800b588 <_dtoa_r+0x2e0>)
 800b316:	bfb8      	it	lt
 800b318:	6032      	strlt	r2, [r6, #0]
 800b31a:	ea33 0308 	bics.w	r3, r3, r8
 800b31e:	d112      	bne.n	800b346 <_dtoa_r+0x9e>
 800b320:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b324:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b32c:	4323      	orrs	r3, r4
 800b32e:	f000 855e 	beq.w	800bdee <_dtoa_r+0xb46>
 800b332:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b334:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b58c <_dtoa_r+0x2e4>
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 8560 	beq.w	800bdfe <_dtoa_r+0xb56>
 800b33e:	f10a 0303 	add.w	r3, sl, #3
 800b342:	f000 bd5a 	b.w	800bdfa <_dtoa_r+0xb52>
 800b346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b34a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b34e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b352:	2200      	movs	r2, #0
 800b354:	2300      	movs	r3, #0
 800b356:	f7f5 fb31 	bl	80009bc <__aeabi_dcmpeq>
 800b35a:	4607      	mov	r7, r0
 800b35c:	b158      	cbz	r0, 800b376 <_dtoa_r+0xce>
 800b35e:	2301      	movs	r3, #1
 800b360:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b366:	b113      	cbz	r3, 800b36e <_dtoa_r+0xc6>
 800b368:	4b89      	ldr	r3, [pc, #548]	@ (800b590 <_dtoa_r+0x2e8>)
 800b36a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800b594 <_dtoa_r+0x2ec>
 800b372:	f000 bd44 	b.w	800bdfe <_dtoa_r+0xb56>
 800b376:	ab14      	add	r3, sp, #80	@ 0x50
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	ab15      	add	r3, sp, #84	@ 0x54
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	4648      	mov	r0, r9
 800b380:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b384:	f001 f984 	bl	800c690 <__d2b>
 800b388:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b38c:	9003      	str	r0, [sp, #12]
 800b38e:	2e00      	cmp	r6, #0
 800b390:	d078      	beq.n	800b484 <_dtoa_r+0x1dc>
 800b392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b398:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3a8:	9712      	str	r7, [sp, #72]	@ 0x48
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	4b7a      	ldr	r3, [pc, #488]	@ (800b598 <_dtoa_r+0x2f0>)
 800b3b0:	f7f4 fee4 	bl	800017c <__aeabi_dsub>
 800b3b4:	a36c      	add	r3, pc, #432	@ (adr r3, 800b568 <_dtoa_r+0x2c0>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f5 f897 	bl	80004ec <__aeabi_dmul>
 800b3be:	a36c      	add	r3, pc, #432	@ (adr r3, 800b570 <_dtoa_r+0x2c8>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f7f4 fedc 	bl	8000180 <__adddf3>
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	f7f5 f823 	bl	8000418 <__aeabi_i2d>
 800b3d2:	a369      	add	r3, pc, #420	@ (adr r3, 800b578 <_dtoa_r+0x2d0>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f7f5 f888 	bl	80004ec <__aeabi_dmul>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	f7f4 fecc 	bl	8000180 <__adddf3>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	f7f5 fb2e 	bl	8000a4c <__aeabi_d2iz>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4607      	mov	r7, r0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f7f5 fae9 	bl	80009d0 <__aeabi_dcmplt>
 800b3fe:	b140      	cbz	r0, 800b412 <_dtoa_r+0x16a>
 800b400:	4638      	mov	r0, r7
 800b402:	f7f5 f809 	bl	8000418 <__aeabi_i2d>
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	f7f5 fad7 	bl	80009bc <__aeabi_dcmpeq>
 800b40e:	b900      	cbnz	r0, 800b412 <_dtoa_r+0x16a>
 800b410:	3f01      	subs	r7, #1
 800b412:	2f16      	cmp	r7, #22
 800b414:	d854      	bhi.n	800b4c0 <_dtoa_r+0x218>
 800b416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b41a:	4b60      	ldr	r3, [pc, #384]	@ (800b59c <_dtoa_r+0x2f4>)
 800b41c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f5 fad4 	bl	80009d0 <__aeabi_dcmplt>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d04b      	beq.n	800b4c4 <_dtoa_r+0x21c>
 800b42c:	2300      	movs	r3, #0
 800b42e:	3f01      	subs	r7, #1
 800b430:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b432:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b434:	1b9b      	subs	r3, r3, r6
 800b436:	1e5a      	subs	r2, r3, #1
 800b438:	bf49      	itett	mi
 800b43a:	f1c3 0301 	rsbmi	r3, r3, #1
 800b43e:	2300      	movpl	r3, #0
 800b440:	9304      	strmi	r3, [sp, #16]
 800b442:	2300      	movmi	r3, #0
 800b444:	9209      	str	r2, [sp, #36]	@ 0x24
 800b446:	bf54      	ite	pl
 800b448:	9304      	strpl	r3, [sp, #16]
 800b44a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b44c:	2f00      	cmp	r7, #0
 800b44e:	db3b      	blt.n	800b4c8 <_dtoa_r+0x220>
 800b450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b452:	970e      	str	r7, [sp, #56]	@ 0x38
 800b454:	443b      	add	r3, r7
 800b456:	9309      	str	r3, [sp, #36]	@ 0x24
 800b458:	2300      	movs	r3, #0
 800b45a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b45c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b45e:	2b09      	cmp	r3, #9
 800b460:	d865      	bhi.n	800b52e <_dtoa_r+0x286>
 800b462:	2b05      	cmp	r3, #5
 800b464:	bfc4      	itt	gt
 800b466:	3b04      	subgt	r3, #4
 800b468:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b46a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b46c:	bfc8      	it	gt
 800b46e:	2400      	movgt	r4, #0
 800b470:	f1a3 0302 	sub.w	r3, r3, #2
 800b474:	bfd8      	it	le
 800b476:	2401      	movle	r4, #1
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d864      	bhi.n	800b546 <_dtoa_r+0x29e>
 800b47c:	e8df f003 	tbb	[pc, r3]
 800b480:	2c385553 	.word	0x2c385553
 800b484:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b488:	441e      	add	r6, r3
 800b48a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b48e:	2b20      	cmp	r3, #32
 800b490:	bfc1      	itttt	gt
 800b492:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b496:	fa08 f803 	lslgt.w	r8, r8, r3
 800b49a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b49e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4a2:	bfd6      	itet	le
 800b4a4:	f1c3 0320 	rsble	r3, r3, #32
 800b4a8:	ea48 0003 	orrgt.w	r0, r8, r3
 800b4ac:	fa04 f003 	lslle.w	r0, r4, r3
 800b4b0:	f7f4 ffa2 	bl	80003f8 <__aeabi_ui2d>
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4ba:	3e01      	subs	r6, #1
 800b4bc:	9212      	str	r2, [sp, #72]	@ 0x48
 800b4be:	e774      	b.n	800b3aa <_dtoa_r+0x102>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e7b5      	b.n	800b430 <_dtoa_r+0x188>
 800b4c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b4c6:	e7b4      	b.n	800b432 <_dtoa_r+0x18a>
 800b4c8:	9b04      	ldr	r3, [sp, #16]
 800b4ca:	1bdb      	subs	r3, r3, r7
 800b4cc:	9304      	str	r3, [sp, #16]
 800b4ce:	427b      	negs	r3, r7
 800b4d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4d6:	e7c1      	b.n	800b45c <_dtoa_r+0x1b4>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4de:	eb07 0b03 	add.w	fp, r7, r3
 800b4e2:	f10b 0301 	add.w	r3, fp, #1
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	9308      	str	r3, [sp, #32]
 800b4ea:	bfb8      	it	lt
 800b4ec:	2301      	movlt	r3, #1
 800b4ee:	e006      	b.n	800b4fe <_dtoa_r+0x256>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dd28      	ble.n	800b54c <_dtoa_r+0x2a4>
 800b4fa:	469b      	mov	fp, r3
 800b4fc:	9308      	str	r3, [sp, #32]
 800b4fe:	2100      	movs	r1, #0
 800b500:	2204      	movs	r2, #4
 800b502:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b506:	f102 0514 	add.w	r5, r2, #20
 800b50a:	429d      	cmp	r5, r3
 800b50c:	d926      	bls.n	800b55c <_dtoa_r+0x2b4>
 800b50e:	6041      	str	r1, [r0, #4]
 800b510:	4648      	mov	r0, r9
 800b512:	f000 fd9b 	bl	800c04c <_Balloc>
 800b516:	4682      	mov	sl, r0
 800b518:	2800      	cmp	r0, #0
 800b51a:	d143      	bne.n	800b5a4 <_dtoa_r+0x2fc>
 800b51c:	4602      	mov	r2, r0
 800b51e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b522:	4b1f      	ldr	r3, [pc, #124]	@ (800b5a0 <_dtoa_r+0x2f8>)
 800b524:	e6d4      	b.n	800b2d0 <_dtoa_r+0x28>
 800b526:	2300      	movs	r3, #0
 800b528:	e7e3      	b.n	800b4f2 <_dtoa_r+0x24a>
 800b52a:	2300      	movs	r3, #0
 800b52c:	e7d5      	b.n	800b4da <_dtoa_r+0x232>
 800b52e:	2401      	movs	r4, #1
 800b530:	2300      	movs	r3, #0
 800b532:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b534:	9320      	str	r3, [sp, #128]	@ 0x80
 800b536:	f04f 3bff 	mov.w	fp, #4294967295
 800b53a:	2200      	movs	r2, #0
 800b53c:	2312      	movs	r3, #18
 800b53e:	f8cd b020 	str.w	fp, [sp, #32]
 800b542:	9221      	str	r2, [sp, #132]	@ 0x84
 800b544:	e7db      	b.n	800b4fe <_dtoa_r+0x256>
 800b546:	2301      	movs	r3, #1
 800b548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b54a:	e7f4      	b.n	800b536 <_dtoa_r+0x28e>
 800b54c:	f04f 0b01 	mov.w	fp, #1
 800b550:	465b      	mov	r3, fp
 800b552:	f8cd b020 	str.w	fp, [sp, #32]
 800b556:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800b55a:	e7d0      	b.n	800b4fe <_dtoa_r+0x256>
 800b55c:	3101      	adds	r1, #1
 800b55e:	0052      	lsls	r2, r2, #1
 800b560:	e7d1      	b.n	800b506 <_dtoa_r+0x25e>
 800b562:	bf00      	nop
 800b564:	f3af 8000 	nop.w
 800b568:	636f4361 	.word	0x636f4361
 800b56c:	3fd287a7 	.word	0x3fd287a7
 800b570:	8b60c8b3 	.word	0x8b60c8b3
 800b574:	3fc68a28 	.word	0x3fc68a28
 800b578:	509f79fb 	.word	0x509f79fb
 800b57c:	3fd34413 	.word	0x3fd34413
 800b580:	0800deb5 	.word	0x0800deb5
 800b584:	0800decc 	.word	0x0800decc
 800b588:	7ff00000 	.word	0x7ff00000
 800b58c:	0800deb1 	.word	0x0800deb1
 800b590:	0800dfb6 	.word	0x0800dfb6
 800b594:	0800dfb5 	.word	0x0800dfb5
 800b598:	3ff80000 	.word	0x3ff80000
 800b59c:	0800e038 	.word	0x0800e038
 800b5a0:	0800df24 	.word	0x0800df24
 800b5a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b5a8:	6018      	str	r0, [r3, #0]
 800b5aa:	9b08      	ldr	r3, [sp, #32]
 800b5ac:	2b0e      	cmp	r3, #14
 800b5ae:	f200 80a1 	bhi.w	800b6f4 <_dtoa_r+0x44c>
 800b5b2:	2c00      	cmp	r4, #0
 800b5b4:	f000 809e 	beq.w	800b6f4 <_dtoa_r+0x44c>
 800b5b8:	2f00      	cmp	r7, #0
 800b5ba:	dd33      	ble.n	800b624 <_dtoa_r+0x37c>
 800b5bc:	4b9c      	ldr	r3, [pc, #624]	@ (800b830 <_dtoa_r+0x588>)
 800b5be:	f007 020f 	and.w	r2, r7, #15
 800b5c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5c6:	05f8      	lsls	r0, r7, #23
 800b5c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800b5d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b5d4:	d516      	bpl.n	800b604 <_dtoa_r+0x35c>
 800b5d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5da:	4b96      	ldr	r3, [pc, #600]	@ (800b834 <_dtoa_r+0x58c>)
 800b5dc:	2603      	movs	r6, #3
 800b5de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5e2:	f7f5 f8ad 	bl	8000740 <__aeabi_ddiv>
 800b5e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5ea:	f004 040f 	and.w	r4, r4, #15
 800b5ee:	4d91      	ldr	r5, [pc, #580]	@ (800b834 <_dtoa_r+0x58c>)
 800b5f0:	b954      	cbnz	r4, 800b608 <_dtoa_r+0x360>
 800b5f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5fa:	f7f5 f8a1 	bl	8000740 <__aeabi_ddiv>
 800b5fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b602:	e028      	b.n	800b656 <_dtoa_r+0x3ae>
 800b604:	2602      	movs	r6, #2
 800b606:	e7f2      	b.n	800b5ee <_dtoa_r+0x346>
 800b608:	07e1      	lsls	r1, r4, #31
 800b60a:	d508      	bpl.n	800b61e <_dtoa_r+0x376>
 800b60c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b610:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b614:	f7f4 ff6a 	bl	80004ec <__aeabi_dmul>
 800b618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b61c:	3601      	adds	r6, #1
 800b61e:	1064      	asrs	r4, r4, #1
 800b620:	3508      	adds	r5, #8
 800b622:	e7e5      	b.n	800b5f0 <_dtoa_r+0x348>
 800b624:	f000 80af 	beq.w	800b786 <_dtoa_r+0x4de>
 800b628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b62c:	427c      	negs	r4, r7
 800b62e:	4b80      	ldr	r3, [pc, #512]	@ (800b830 <_dtoa_r+0x588>)
 800b630:	f004 020f 	and.w	r2, r4, #15
 800b634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f7f4 ff56 	bl	80004ec <__aeabi_dmul>
 800b640:	2602      	movs	r6, #2
 800b642:	2300      	movs	r3, #0
 800b644:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b648:	4d7a      	ldr	r5, [pc, #488]	@ (800b834 <_dtoa_r+0x58c>)
 800b64a:	1124      	asrs	r4, r4, #4
 800b64c:	2c00      	cmp	r4, #0
 800b64e:	f040 808f 	bne.w	800b770 <_dtoa_r+0x4c8>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1d3      	bne.n	800b5fe <_dtoa_r+0x356>
 800b656:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b65a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 8094 	beq.w	800b78a <_dtoa_r+0x4e2>
 800b662:	2200      	movs	r2, #0
 800b664:	4620      	mov	r0, r4
 800b666:	4629      	mov	r1, r5
 800b668:	4b73      	ldr	r3, [pc, #460]	@ (800b838 <_dtoa_r+0x590>)
 800b66a:	f7f5 f9b1 	bl	80009d0 <__aeabi_dcmplt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	f000 808b 	beq.w	800b78a <_dtoa_r+0x4e2>
 800b674:	9b08      	ldr	r3, [sp, #32]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f000 8087 	beq.w	800b78a <_dtoa_r+0x4e2>
 800b67c:	f1bb 0f00 	cmp.w	fp, #0
 800b680:	dd34      	ble.n	800b6ec <_dtoa_r+0x444>
 800b682:	4620      	mov	r0, r4
 800b684:	2200      	movs	r2, #0
 800b686:	4629      	mov	r1, r5
 800b688:	4b6c      	ldr	r3, [pc, #432]	@ (800b83c <_dtoa_r+0x594>)
 800b68a:	f7f4 ff2f 	bl	80004ec <__aeabi_dmul>
 800b68e:	465c      	mov	r4, fp
 800b690:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b694:	f107 38ff 	add.w	r8, r7, #4294967295
 800b698:	3601      	adds	r6, #1
 800b69a:	4630      	mov	r0, r6
 800b69c:	f7f4 febc 	bl	8000418 <__aeabi_i2d>
 800b6a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6a4:	f7f4 ff22 	bl	80004ec <__aeabi_dmul>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4b65      	ldr	r3, [pc, #404]	@ (800b840 <_dtoa_r+0x598>)
 800b6ac:	f7f4 fd68 	bl	8000180 <__adddf3>
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6b6:	2c00      	cmp	r4, #0
 800b6b8:	d16a      	bne.n	800b790 <_dtoa_r+0x4e8>
 800b6ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4b60      	ldr	r3, [pc, #384]	@ (800b844 <_dtoa_r+0x59c>)
 800b6c2:	f7f4 fd5b 	bl	800017c <__aeabi_dsub>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6ce:	462a      	mov	r2, r5
 800b6d0:	4633      	mov	r3, r6
 800b6d2:	f7f5 f99b 	bl	8000a0c <__aeabi_dcmpgt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f040 8298 	bne.w	800bc0c <_dtoa_r+0x964>
 800b6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b6e6:	f7f5 f973 	bl	80009d0 <__aeabi_dcmplt>
 800b6ea:	bb38      	cbnz	r0, 800b73c <_dtoa_r+0x494>
 800b6ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b6f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b6f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f2c0 8157 	blt.w	800b9aa <_dtoa_r+0x702>
 800b6fc:	2f0e      	cmp	r7, #14
 800b6fe:	f300 8154 	bgt.w	800b9aa <_dtoa_r+0x702>
 800b702:	4b4b      	ldr	r3, [pc, #300]	@ (800b830 <_dtoa_r+0x588>)
 800b704:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b708:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b70c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b710:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b712:	2b00      	cmp	r3, #0
 800b714:	f280 80e5 	bge.w	800b8e2 <_dtoa_r+0x63a>
 800b718:	9b08      	ldr	r3, [sp, #32]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f300 80e1 	bgt.w	800b8e2 <_dtoa_r+0x63a>
 800b720:	d10c      	bne.n	800b73c <_dtoa_r+0x494>
 800b722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b726:	2200      	movs	r2, #0
 800b728:	4b46      	ldr	r3, [pc, #280]	@ (800b844 <_dtoa_r+0x59c>)
 800b72a:	f7f4 fedf 	bl	80004ec <__aeabi_dmul>
 800b72e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b732:	f7f5 f961 	bl	80009f8 <__aeabi_dcmpge>
 800b736:	2800      	cmp	r0, #0
 800b738:	f000 8266 	beq.w	800bc08 <_dtoa_r+0x960>
 800b73c:	2400      	movs	r4, #0
 800b73e:	4625      	mov	r5, r4
 800b740:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b742:	4656      	mov	r6, sl
 800b744:	ea6f 0803 	mvn.w	r8, r3
 800b748:	2700      	movs	r7, #0
 800b74a:	4621      	mov	r1, r4
 800b74c:	4648      	mov	r0, r9
 800b74e:	f000 fcbd 	bl	800c0cc <_Bfree>
 800b752:	2d00      	cmp	r5, #0
 800b754:	f000 80bd 	beq.w	800b8d2 <_dtoa_r+0x62a>
 800b758:	b12f      	cbz	r7, 800b766 <_dtoa_r+0x4be>
 800b75a:	42af      	cmp	r7, r5
 800b75c:	d003      	beq.n	800b766 <_dtoa_r+0x4be>
 800b75e:	4639      	mov	r1, r7
 800b760:	4648      	mov	r0, r9
 800b762:	f000 fcb3 	bl	800c0cc <_Bfree>
 800b766:	4629      	mov	r1, r5
 800b768:	4648      	mov	r0, r9
 800b76a:	f000 fcaf 	bl	800c0cc <_Bfree>
 800b76e:	e0b0      	b.n	800b8d2 <_dtoa_r+0x62a>
 800b770:	07e2      	lsls	r2, r4, #31
 800b772:	d505      	bpl.n	800b780 <_dtoa_r+0x4d8>
 800b774:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b778:	f7f4 feb8 	bl	80004ec <__aeabi_dmul>
 800b77c:	2301      	movs	r3, #1
 800b77e:	3601      	adds	r6, #1
 800b780:	1064      	asrs	r4, r4, #1
 800b782:	3508      	adds	r5, #8
 800b784:	e762      	b.n	800b64c <_dtoa_r+0x3a4>
 800b786:	2602      	movs	r6, #2
 800b788:	e765      	b.n	800b656 <_dtoa_r+0x3ae>
 800b78a:	46b8      	mov	r8, r7
 800b78c:	9c08      	ldr	r4, [sp, #32]
 800b78e:	e784      	b.n	800b69a <_dtoa_r+0x3f2>
 800b790:	4b27      	ldr	r3, [pc, #156]	@ (800b830 <_dtoa_r+0x588>)
 800b792:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b794:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b79c:	4454      	add	r4, sl
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	d054      	beq.n	800b84c <_dtoa_r+0x5a4>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	4928      	ldr	r1, [pc, #160]	@ (800b848 <_dtoa_r+0x5a0>)
 800b7a6:	f7f4 ffcb 	bl	8000740 <__aeabi_ddiv>
 800b7aa:	4633      	mov	r3, r6
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	f7f4 fce5 	bl	800017c <__aeabi_dsub>
 800b7b2:	4656      	mov	r6, sl
 800b7b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7bc:	f7f5 f946 	bl	8000a4c <__aeabi_d2iz>
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	f7f4 fe29 	bl	8000418 <__aeabi_i2d>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ce:	f7f4 fcd5 	bl	800017c <__aeabi_dsub>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	3530      	adds	r5, #48	@ 0x30
 800b7d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7e0:	f806 5b01 	strb.w	r5, [r6], #1
 800b7e4:	f7f5 f8f4 	bl	80009d0 <__aeabi_dcmplt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d172      	bne.n	800b8d2 <_dtoa_r+0x62a>
 800b7ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	4911      	ldr	r1, [pc, #68]	@ (800b838 <_dtoa_r+0x590>)
 800b7f4:	f7f4 fcc2 	bl	800017c <__aeabi_dsub>
 800b7f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7fc:	f7f5 f8e8 	bl	80009d0 <__aeabi_dcmplt>
 800b800:	2800      	cmp	r0, #0
 800b802:	f040 80b4 	bne.w	800b96e <_dtoa_r+0x6c6>
 800b806:	42a6      	cmp	r6, r4
 800b808:	f43f af70 	beq.w	800b6ec <_dtoa_r+0x444>
 800b80c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b810:	2200      	movs	r2, #0
 800b812:	4b0a      	ldr	r3, [pc, #40]	@ (800b83c <_dtoa_r+0x594>)
 800b814:	f7f4 fe6a 	bl	80004ec <__aeabi_dmul>
 800b818:	2200      	movs	r2, #0
 800b81a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b81e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b822:	4b06      	ldr	r3, [pc, #24]	@ (800b83c <_dtoa_r+0x594>)
 800b824:	f7f4 fe62 	bl	80004ec <__aeabi_dmul>
 800b828:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b82c:	e7c4      	b.n	800b7b8 <_dtoa_r+0x510>
 800b82e:	bf00      	nop
 800b830:	0800e038 	.word	0x0800e038
 800b834:	0800e010 	.word	0x0800e010
 800b838:	3ff00000 	.word	0x3ff00000
 800b83c:	40240000 	.word	0x40240000
 800b840:	401c0000 	.word	0x401c0000
 800b844:	40140000 	.word	0x40140000
 800b848:	3fe00000 	.word	0x3fe00000
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	f7f4 fe4c 	bl	80004ec <__aeabi_dmul>
 800b854:	4656      	mov	r6, sl
 800b856:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b85a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b85c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b860:	f7f5 f8f4 	bl	8000a4c <__aeabi_d2iz>
 800b864:	4605      	mov	r5, r0
 800b866:	f7f4 fdd7 	bl	8000418 <__aeabi_i2d>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b872:	f7f4 fc83 	bl	800017c <__aeabi_dsub>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	3530      	adds	r5, #48	@ 0x30
 800b87c:	f806 5b01 	strb.w	r5, [r6], #1
 800b880:	42a6      	cmp	r6, r4
 800b882:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b886:	f04f 0200 	mov.w	r2, #0
 800b88a:	d124      	bne.n	800b8d6 <_dtoa_r+0x62e>
 800b88c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b890:	4bae      	ldr	r3, [pc, #696]	@ (800bb4c <_dtoa_r+0x8a4>)
 800b892:	f7f4 fc75 	bl	8000180 <__adddf3>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b89e:	f7f5 f8b5 	bl	8000a0c <__aeabi_dcmpgt>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d163      	bne.n	800b96e <_dtoa_r+0x6c6>
 800b8a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	49a7      	ldr	r1, [pc, #668]	@ (800bb4c <_dtoa_r+0x8a4>)
 800b8ae:	f7f4 fc65 	bl	800017c <__aeabi_dsub>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8ba:	f7f5 f889 	bl	80009d0 <__aeabi_dcmplt>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	f43f af14 	beq.w	800b6ec <_dtoa_r+0x444>
 800b8c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b8c6:	1e73      	subs	r3, r6, #1
 800b8c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8ce:	2b30      	cmp	r3, #48	@ 0x30
 800b8d0:	d0f8      	beq.n	800b8c4 <_dtoa_r+0x61c>
 800b8d2:	4647      	mov	r7, r8
 800b8d4:	e03b      	b.n	800b94e <_dtoa_r+0x6a6>
 800b8d6:	4b9e      	ldr	r3, [pc, #632]	@ (800bb50 <_dtoa_r+0x8a8>)
 800b8d8:	f7f4 fe08 	bl	80004ec <__aeabi_dmul>
 800b8dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8e0:	e7bc      	b.n	800b85c <_dtoa_r+0x5b4>
 800b8e2:	4656      	mov	r6, sl
 800b8e4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f7f4 ff26 	bl	8000740 <__aeabi_ddiv>
 800b8f4:	f7f5 f8aa 	bl	8000a4c <__aeabi_d2iz>
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	f7f4 fd8d 	bl	8000418 <__aeabi_i2d>
 800b8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b902:	f7f4 fdf3 	bl	80004ec <__aeabi_dmul>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4620      	mov	r0, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	f7f4 fc35 	bl	800017c <__aeabi_dsub>
 800b912:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b916:	9d08      	ldr	r5, [sp, #32]
 800b918:	f806 4b01 	strb.w	r4, [r6], #1
 800b91c:	eba6 040a 	sub.w	r4, r6, sl
 800b920:	42a5      	cmp	r5, r4
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	d133      	bne.n	800b990 <_dtoa_r+0x6e8>
 800b928:	f7f4 fc2a 	bl	8000180 <__adddf3>
 800b92c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b930:	4604      	mov	r4, r0
 800b932:	460d      	mov	r5, r1
 800b934:	f7f5 f86a 	bl	8000a0c <__aeabi_dcmpgt>
 800b938:	b9c0      	cbnz	r0, 800b96c <_dtoa_r+0x6c4>
 800b93a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b93e:	4620      	mov	r0, r4
 800b940:	4629      	mov	r1, r5
 800b942:	f7f5 f83b 	bl	80009bc <__aeabi_dcmpeq>
 800b946:	b110      	cbz	r0, 800b94e <_dtoa_r+0x6a6>
 800b948:	f018 0f01 	tst.w	r8, #1
 800b94c:	d10e      	bne.n	800b96c <_dtoa_r+0x6c4>
 800b94e:	4648      	mov	r0, r9
 800b950:	9903      	ldr	r1, [sp, #12]
 800b952:	f000 fbbb 	bl	800c0cc <_Bfree>
 800b956:	2300      	movs	r3, #0
 800b958:	7033      	strb	r3, [r6, #0]
 800b95a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b95c:	3701      	adds	r7, #1
 800b95e:	601f      	str	r7, [r3, #0]
 800b960:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 824b 	beq.w	800bdfe <_dtoa_r+0xb56>
 800b968:	601e      	str	r6, [r3, #0]
 800b96a:	e248      	b.n	800bdfe <_dtoa_r+0xb56>
 800b96c:	46b8      	mov	r8, r7
 800b96e:	4633      	mov	r3, r6
 800b970:	461e      	mov	r6, r3
 800b972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b976:	2a39      	cmp	r2, #57	@ 0x39
 800b978:	d106      	bne.n	800b988 <_dtoa_r+0x6e0>
 800b97a:	459a      	cmp	sl, r3
 800b97c:	d1f8      	bne.n	800b970 <_dtoa_r+0x6c8>
 800b97e:	2230      	movs	r2, #48	@ 0x30
 800b980:	f108 0801 	add.w	r8, r8, #1
 800b984:	f88a 2000 	strb.w	r2, [sl]
 800b988:	781a      	ldrb	r2, [r3, #0]
 800b98a:	3201      	adds	r2, #1
 800b98c:	701a      	strb	r2, [r3, #0]
 800b98e:	e7a0      	b.n	800b8d2 <_dtoa_r+0x62a>
 800b990:	2200      	movs	r2, #0
 800b992:	4b6f      	ldr	r3, [pc, #444]	@ (800bb50 <_dtoa_r+0x8a8>)
 800b994:	f7f4 fdaa 	bl	80004ec <__aeabi_dmul>
 800b998:	2200      	movs	r2, #0
 800b99a:	2300      	movs	r3, #0
 800b99c:	4604      	mov	r4, r0
 800b99e:	460d      	mov	r5, r1
 800b9a0:	f7f5 f80c 	bl	80009bc <__aeabi_dcmpeq>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d09f      	beq.n	800b8e8 <_dtoa_r+0x640>
 800b9a8:	e7d1      	b.n	800b94e <_dtoa_r+0x6a6>
 800b9aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b9ac:	2a00      	cmp	r2, #0
 800b9ae:	f000 80ea 	beq.w	800bb86 <_dtoa_r+0x8de>
 800b9b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b9b4:	2a01      	cmp	r2, #1
 800b9b6:	f300 80cd 	bgt.w	800bb54 <_dtoa_r+0x8ac>
 800b9ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9bc:	2a00      	cmp	r2, #0
 800b9be:	f000 80c1 	beq.w	800bb44 <_dtoa_r+0x89c>
 800b9c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b9c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9c8:	9e04      	ldr	r6, [sp, #16]
 800b9ca:	9a04      	ldr	r2, [sp, #16]
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	441a      	add	r2, r3
 800b9d0:	9204      	str	r2, [sp, #16]
 800b9d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	441a      	add	r2, r3
 800b9d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9da:	f000 fc2b 	bl	800c234 <__i2b>
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b166      	cbz	r6, 800b9fc <_dtoa_r+0x754>
 800b9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dd09      	ble.n	800b9fc <_dtoa_r+0x754>
 800b9e8:	42b3      	cmp	r3, r6
 800b9ea:	bfa8      	it	ge
 800b9ec:	4633      	movge	r3, r6
 800b9ee:	9a04      	ldr	r2, [sp, #16]
 800b9f0:	1af6      	subs	r6, r6, r3
 800b9f2:	1ad2      	subs	r2, r2, r3
 800b9f4:	9204      	str	r2, [sp, #16]
 800b9f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9fe:	b30b      	cbz	r3, 800ba44 <_dtoa_r+0x79c>
 800ba00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f000 80c6 	beq.w	800bb94 <_dtoa_r+0x8ec>
 800ba08:	2c00      	cmp	r4, #0
 800ba0a:	f000 80c0 	beq.w	800bb8e <_dtoa_r+0x8e6>
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4622      	mov	r2, r4
 800ba12:	4648      	mov	r0, r9
 800ba14:	f000 fcc6 	bl	800c3a4 <__pow5mult>
 800ba18:	9a03      	ldr	r2, [sp, #12]
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	4648      	mov	r0, r9
 800ba20:	f000 fc1e 	bl	800c260 <__multiply>
 800ba24:	9903      	ldr	r1, [sp, #12]
 800ba26:	4680      	mov	r8, r0
 800ba28:	4648      	mov	r0, r9
 800ba2a:	f000 fb4f 	bl	800c0cc <_Bfree>
 800ba2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba30:	1b1b      	subs	r3, r3, r4
 800ba32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba34:	f000 80b1 	beq.w	800bb9a <_dtoa_r+0x8f2>
 800ba38:	4641      	mov	r1, r8
 800ba3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba3c:	4648      	mov	r0, r9
 800ba3e:	f000 fcb1 	bl	800c3a4 <__pow5mult>
 800ba42:	9003      	str	r0, [sp, #12]
 800ba44:	2101      	movs	r1, #1
 800ba46:	4648      	mov	r0, r9
 800ba48:	f000 fbf4 	bl	800c234 <__i2b>
 800ba4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba4e:	4604      	mov	r4, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f000 81d8 	beq.w	800be06 <_dtoa_r+0xb5e>
 800ba56:	461a      	mov	r2, r3
 800ba58:	4601      	mov	r1, r0
 800ba5a:	4648      	mov	r0, r9
 800ba5c:	f000 fca2 	bl	800c3a4 <__pow5mult>
 800ba60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba62:	4604      	mov	r4, r0
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	f300 809f 	bgt.w	800bba8 <_dtoa_r+0x900>
 800ba6a:	9b06      	ldr	r3, [sp, #24]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 8097 	bne.w	800bba0 <_dtoa_r+0x8f8>
 800ba72:	9b07      	ldr	r3, [sp, #28]
 800ba74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f040 8093 	bne.w	800bba4 <_dtoa_r+0x8fc>
 800ba7e:	9b07      	ldr	r3, [sp, #28]
 800ba80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba84:	0d1b      	lsrs	r3, r3, #20
 800ba86:	051b      	lsls	r3, r3, #20
 800ba88:	b133      	cbz	r3, 800ba98 <_dtoa_r+0x7f0>
 800ba8a:	9b04      	ldr	r3, [sp, #16]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba92:	3301      	adds	r3, #1
 800ba94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba96:	2301      	movs	r3, #1
 800ba98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 81b8 	beq.w	800be12 <_dtoa_r+0xb6a>
 800baa2:	6923      	ldr	r3, [r4, #16]
 800baa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baa8:	6918      	ldr	r0, [r3, #16]
 800baaa:	f000 fb77 	bl	800c19c <__hi0bits>
 800baae:	f1c0 0020 	rsb	r0, r0, #32
 800bab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab4:	4418      	add	r0, r3
 800bab6:	f010 001f 	ands.w	r0, r0, #31
 800baba:	f000 8082 	beq.w	800bbc2 <_dtoa_r+0x91a>
 800babe:	f1c0 0320 	rsb	r3, r0, #32
 800bac2:	2b04      	cmp	r3, #4
 800bac4:	dd73      	ble.n	800bbae <_dtoa_r+0x906>
 800bac6:	9b04      	ldr	r3, [sp, #16]
 800bac8:	f1c0 001c 	rsb	r0, r0, #28
 800bacc:	4403      	add	r3, r0
 800bace:	9304      	str	r3, [sp, #16]
 800bad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad2:	4406      	add	r6, r0
 800bad4:	4403      	add	r3, r0
 800bad6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad8:	9b04      	ldr	r3, [sp, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	dd05      	ble.n	800baea <_dtoa_r+0x842>
 800bade:	461a      	mov	r2, r3
 800bae0:	4648      	mov	r0, r9
 800bae2:	9903      	ldr	r1, [sp, #12]
 800bae4:	f000 fcb8 	bl	800c458 <__lshift>
 800bae8:	9003      	str	r0, [sp, #12]
 800baea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baec:	2b00      	cmp	r3, #0
 800baee:	dd05      	ble.n	800bafc <_dtoa_r+0x854>
 800baf0:	4621      	mov	r1, r4
 800baf2:	461a      	mov	r2, r3
 800baf4:	4648      	mov	r0, r9
 800baf6:	f000 fcaf 	bl	800c458 <__lshift>
 800bafa:	4604      	mov	r4, r0
 800bafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d061      	beq.n	800bbc6 <_dtoa_r+0x91e>
 800bb02:	4621      	mov	r1, r4
 800bb04:	9803      	ldr	r0, [sp, #12]
 800bb06:	f000 fd13 	bl	800c530 <__mcmp>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	da5b      	bge.n	800bbc6 <_dtoa_r+0x91e>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	220a      	movs	r2, #10
 800bb12:	4648      	mov	r0, r9
 800bb14:	9903      	ldr	r1, [sp, #12]
 800bb16:	f000 fafb 	bl	800c110 <__multadd>
 800bb1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb1c:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb20:	9003      	str	r0, [sp, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f000 8177 	beq.w	800be16 <_dtoa_r+0xb6e>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	220a      	movs	r2, #10
 800bb2e:	4648      	mov	r0, r9
 800bb30:	f000 faee 	bl	800c110 <__multadd>
 800bb34:	f1bb 0f00 	cmp.w	fp, #0
 800bb38:	4605      	mov	r5, r0
 800bb3a:	dc6f      	bgt.n	800bc1c <_dtoa_r+0x974>
 800bb3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	dc49      	bgt.n	800bbd6 <_dtoa_r+0x92e>
 800bb42:	e06b      	b.n	800bc1c <_dtoa_r+0x974>
 800bb44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb4a:	e73c      	b.n	800b9c6 <_dtoa_r+0x71e>
 800bb4c:	3fe00000 	.word	0x3fe00000
 800bb50:	40240000 	.word	0x40240000
 800bb54:	9b08      	ldr	r3, [sp, #32]
 800bb56:	1e5c      	subs	r4, r3, #1
 800bb58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	db09      	blt.n	800bb72 <_dtoa_r+0x8ca>
 800bb5e:	1b1c      	subs	r4, r3, r4
 800bb60:	9b08      	ldr	r3, [sp, #32]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f6bf af30 	bge.w	800b9c8 <_dtoa_r+0x720>
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	9a08      	ldr	r2, [sp, #32]
 800bb6c:	1a9e      	subs	r6, r3, r2
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e72b      	b.n	800b9ca <_dtoa_r+0x722>
 800bb72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb76:	1ae3      	subs	r3, r4, r3
 800bb78:	441a      	add	r2, r3
 800bb7a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb7c:	9e04      	ldr	r6, [sp, #16]
 800bb7e:	2400      	movs	r4, #0
 800bb80:	9b08      	ldr	r3, [sp, #32]
 800bb82:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb84:	e721      	b.n	800b9ca <_dtoa_r+0x722>
 800bb86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb88:	9e04      	ldr	r6, [sp, #16]
 800bb8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bb8c:	e728      	b.n	800b9e0 <_dtoa_r+0x738>
 800bb8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bb92:	e751      	b.n	800ba38 <_dtoa_r+0x790>
 800bb94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb96:	9903      	ldr	r1, [sp, #12]
 800bb98:	e750      	b.n	800ba3c <_dtoa_r+0x794>
 800bb9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb9e:	e751      	b.n	800ba44 <_dtoa_r+0x79c>
 800bba0:	2300      	movs	r3, #0
 800bba2:	e779      	b.n	800ba98 <_dtoa_r+0x7f0>
 800bba4:	9b06      	ldr	r3, [sp, #24]
 800bba6:	e777      	b.n	800ba98 <_dtoa_r+0x7f0>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbac:	e779      	b.n	800baa2 <_dtoa_r+0x7fa>
 800bbae:	d093      	beq.n	800bad8 <_dtoa_r+0x830>
 800bbb0:	9a04      	ldr	r2, [sp, #16]
 800bbb2:	331c      	adds	r3, #28
 800bbb4:	441a      	add	r2, r3
 800bbb6:	9204      	str	r2, [sp, #16]
 800bbb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbba:	441e      	add	r6, r3
 800bbbc:	441a      	add	r2, r3
 800bbbe:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbc0:	e78a      	b.n	800bad8 <_dtoa_r+0x830>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	e7f4      	b.n	800bbb0 <_dtoa_r+0x908>
 800bbc6:	9b08      	ldr	r3, [sp, #32]
 800bbc8:	46b8      	mov	r8, r7
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	dc20      	bgt.n	800bc10 <_dtoa_r+0x968>
 800bbce:	469b      	mov	fp, r3
 800bbd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	dd1e      	ble.n	800bc14 <_dtoa_r+0x96c>
 800bbd6:	f1bb 0f00 	cmp.w	fp, #0
 800bbda:	f47f adb1 	bne.w	800b740 <_dtoa_r+0x498>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	465b      	mov	r3, fp
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	4648      	mov	r0, r9
 800bbe6:	f000 fa93 	bl	800c110 <__multadd>
 800bbea:	4601      	mov	r1, r0
 800bbec:	4604      	mov	r4, r0
 800bbee:	9803      	ldr	r0, [sp, #12]
 800bbf0:	f000 fc9e 	bl	800c530 <__mcmp>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f77f ada3 	ble.w	800b740 <_dtoa_r+0x498>
 800bbfa:	4656      	mov	r6, sl
 800bbfc:	2331      	movs	r3, #49	@ 0x31
 800bbfe:	f108 0801 	add.w	r8, r8, #1
 800bc02:	f806 3b01 	strb.w	r3, [r6], #1
 800bc06:	e59f      	b.n	800b748 <_dtoa_r+0x4a0>
 800bc08:	46b8      	mov	r8, r7
 800bc0a:	9c08      	ldr	r4, [sp, #32]
 800bc0c:	4625      	mov	r5, r4
 800bc0e:	e7f4      	b.n	800bbfa <_dtoa_r+0x952>
 800bc10:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bc14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f000 8101 	beq.w	800be1e <_dtoa_r+0xb76>
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	dd05      	ble.n	800bc2c <_dtoa_r+0x984>
 800bc20:	4629      	mov	r1, r5
 800bc22:	4632      	mov	r2, r6
 800bc24:	4648      	mov	r0, r9
 800bc26:	f000 fc17 	bl	800c458 <__lshift>
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d05c      	beq.n	800bcec <_dtoa_r+0xa44>
 800bc32:	4648      	mov	r0, r9
 800bc34:	6869      	ldr	r1, [r5, #4]
 800bc36:	f000 fa09 	bl	800c04c <_Balloc>
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	b928      	cbnz	r0, 800bc4a <_dtoa_r+0x9a2>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc44:	4b80      	ldr	r3, [pc, #512]	@ (800be48 <_dtoa_r+0xba0>)
 800bc46:	f7ff bb43 	b.w	800b2d0 <_dtoa_r+0x28>
 800bc4a:	692a      	ldr	r2, [r5, #16]
 800bc4c:	f105 010c 	add.w	r1, r5, #12
 800bc50:	3202      	adds	r2, #2
 800bc52:	0092      	lsls	r2, r2, #2
 800bc54:	300c      	adds	r0, #12
 800bc56:	f7ff fa8e 	bl	800b176 <memcpy>
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	4648      	mov	r0, r9
 800bc60:	f000 fbfa 	bl	800c458 <__lshift>
 800bc64:	462f      	mov	r7, r5
 800bc66:	4605      	mov	r5, r0
 800bc68:	f10a 0301 	add.w	r3, sl, #1
 800bc6c:	9304      	str	r3, [sp, #16]
 800bc6e:	eb0a 030b 	add.w	r3, sl, fp
 800bc72:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc74:	9b06      	ldr	r3, [sp, #24]
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	4621      	mov	r1, r4
 800bc80:	9803      	ldr	r0, [sp, #12]
 800bc82:	f103 3bff 	add.w	fp, r3, #4294967295
 800bc86:	f7ff fa84 	bl	800b192 <quorem>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	3330      	adds	r3, #48	@ 0x30
 800bc90:	9006      	str	r0, [sp, #24]
 800bc92:	9803      	ldr	r0, [sp, #12]
 800bc94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc96:	f000 fc4b 	bl	800c530 <__mcmp>
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	9008      	str	r0, [sp, #32]
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4648      	mov	r0, r9
 800bca2:	f000 fc61 	bl	800c568 <__mdiff>
 800bca6:	68c2      	ldr	r2, [r0, #12]
 800bca8:	4606      	mov	r6, r0
 800bcaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcac:	bb02      	cbnz	r2, 800bcf0 <_dtoa_r+0xa48>
 800bcae:	4601      	mov	r1, r0
 800bcb0:	9803      	ldr	r0, [sp, #12]
 800bcb2:	f000 fc3d 	bl	800c530 <__mcmp>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4648      	mov	r0, r9
 800bcbe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800bcc2:	f000 fa03 	bl	800c0cc <_Bfree>
 800bcc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bcc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bcca:	9e04      	ldr	r6, [sp, #16]
 800bccc:	ea42 0103 	orr.w	r1, r2, r3
 800bcd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd2:	4319      	orrs	r1, r3
 800bcd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcd6:	d10d      	bne.n	800bcf4 <_dtoa_r+0xa4c>
 800bcd8:	2b39      	cmp	r3, #57	@ 0x39
 800bcda:	d027      	beq.n	800bd2c <_dtoa_r+0xa84>
 800bcdc:	9a08      	ldr	r2, [sp, #32]
 800bcde:	2a00      	cmp	r2, #0
 800bce0:	dd01      	ble.n	800bce6 <_dtoa_r+0xa3e>
 800bce2:	9b06      	ldr	r3, [sp, #24]
 800bce4:	3331      	adds	r3, #49	@ 0x31
 800bce6:	f88b 3000 	strb.w	r3, [fp]
 800bcea:	e52e      	b.n	800b74a <_dtoa_r+0x4a2>
 800bcec:	4628      	mov	r0, r5
 800bcee:	e7b9      	b.n	800bc64 <_dtoa_r+0x9bc>
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	e7e2      	b.n	800bcba <_dtoa_r+0xa12>
 800bcf4:	9908      	ldr	r1, [sp, #32]
 800bcf6:	2900      	cmp	r1, #0
 800bcf8:	db04      	blt.n	800bd04 <_dtoa_r+0xa5c>
 800bcfa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800bcfc:	4301      	orrs	r1, r0
 800bcfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd00:	4301      	orrs	r1, r0
 800bd02:	d120      	bne.n	800bd46 <_dtoa_r+0xa9e>
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	ddee      	ble.n	800bce6 <_dtoa_r+0xa3e>
 800bd08:	2201      	movs	r2, #1
 800bd0a:	9903      	ldr	r1, [sp, #12]
 800bd0c:	4648      	mov	r0, r9
 800bd0e:	9304      	str	r3, [sp, #16]
 800bd10:	f000 fba2 	bl	800c458 <__lshift>
 800bd14:	4621      	mov	r1, r4
 800bd16:	9003      	str	r0, [sp, #12]
 800bd18:	f000 fc0a 	bl	800c530 <__mcmp>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	dc02      	bgt.n	800bd28 <_dtoa_r+0xa80>
 800bd22:	d1e0      	bne.n	800bce6 <_dtoa_r+0xa3e>
 800bd24:	07da      	lsls	r2, r3, #31
 800bd26:	d5de      	bpl.n	800bce6 <_dtoa_r+0xa3e>
 800bd28:	2b39      	cmp	r3, #57	@ 0x39
 800bd2a:	d1da      	bne.n	800bce2 <_dtoa_r+0xa3a>
 800bd2c:	2339      	movs	r3, #57	@ 0x39
 800bd2e:	f88b 3000 	strb.w	r3, [fp]
 800bd32:	4633      	mov	r3, r6
 800bd34:	461e      	mov	r6, r3
 800bd36:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	2a39      	cmp	r2, #57	@ 0x39
 800bd3e:	d04e      	beq.n	800bdde <_dtoa_r+0xb36>
 800bd40:	3201      	adds	r2, #1
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	e501      	b.n	800b74a <_dtoa_r+0x4a2>
 800bd46:	2a00      	cmp	r2, #0
 800bd48:	dd03      	ble.n	800bd52 <_dtoa_r+0xaaa>
 800bd4a:	2b39      	cmp	r3, #57	@ 0x39
 800bd4c:	d0ee      	beq.n	800bd2c <_dtoa_r+0xa84>
 800bd4e:	3301      	adds	r3, #1
 800bd50:	e7c9      	b.n	800bce6 <_dtoa_r+0xa3e>
 800bd52:	9a04      	ldr	r2, [sp, #16]
 800bd54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd5a:	428a      	cmp	r2, r1
 800bd5c:	d028      	beq.n	800bdb0 <_dtoa_r+0xb08>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	220a      	movs	r2, #10
 800bd62:	9903      	ldr	r1, [sp, #12]
 800bd64:	4648      	mov	r0, r9
 800bd66:	f000 f9d3 	bl	800c110 <__multadd>
 800bd6a:	42af      	cmp	r7, r5
 800bd6c:	9003      	str	r0, [sp, #12]
 800bd6e:	f04f 0300 	mov.w	r3, #0
 800bd72:	f04f 020a 	mov.w	r2, #10
 800bd76:	4639      	mov	r1, r7
 800bd78:	4648      	mov	r0, r9
 800bd7a:	d107      	bne.n	800bd8c <_dtoa_r+0xae4>
 800bd7c:	f000 f9c8 	bl	800c110 <__multadd>
 800bd80:	4607      	mov	r7, r0
 800bd82:	4605      	mov	r5, r0
 800bd84:	9b04      	ldr	r3, [sp, #16]
 800bd86:	3301      	adds	r3, #1
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	e777      	b.n	800bc7c <_dtoa_r+0x9d4>
 800bd8c:	f000 f9c0 	bl	800c110 <__multadd>
 800bd90:	4629      	mov	r1, r5
 800bd92:	4607      	mov	r7, r0
 800bd94:	2300      	movs	r3, #0
 800bd96:	220a      	movs	r2, #10
 800bd98:	4648      	mov	r0, r9
 800bd9a:	f000 f9b9 	bl	800c110 <__multadd>
 800bd9e:	4605      	mov	r5, r0
 800bda0:	e7f0      	b.n	800bd84 <_dtoa_r+0xadc>
 800bda2:	f1bb 0f00 	cmp.w	fp, #0
 800bda6:	bfcc      	ite	gt
 800bda8:	465e      	movgt	r6, fp
 800bdaa:	2601      	movle	r6, #1
 800bdac:	2700      	movs	r7, #0
 800bdae:	4456      	add	r6, sl
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	9903      	ldr	r1, [sp, #12]
 800bdb4:	4648      	mov	r0, r9
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	f000 fb4e 	bl	800c458 <__lshift>
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	9003      	str	r0, [sp, #12]
 800bdc0:	f000 fbb6 	bl	800c530 <__mcmp>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	dcb4      	bgt.n	800bd32 <_dtoa_r+0xa8a>
 800bdc8:	d102      	bne.n	800bdd0 <_dtoa_r+0xb28>
 800bdca:	9b04      	ldr	r3, [sp, #16]
 800bdcc:	07db      	lsls	r3, r3, #31
 800bdce:	d4b0      	bmi.n	800bd32 <_dtoa_r+0xa8a>
 800bdd0:	4633      	mov	r3, r6
 800bdd2:	461e      	mov	r6, r3
 800bdd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdd8:	2a30      	cmp	r2, #48	@ 0x30
 800bdda:	d0fa      	beq.n	800bdd2 <_dtoa_r+0xb2a>
 800bddc:	e4b5      	b.n	800b74a <_dtoa_r+0x4a2>
 800bdde:	459a      	cmp	sl, r3
 800bde0:	d1a8      	bne.n	800bd34 <_dtoa_r+0xa8c>
 800bde2:	2331      	movs	r3, #49	@ 0x31
 800bde4:	f108 0801 	add.w	r8, r8, #1
 800bde8:	f88a 3000 	strb.w	r3, [sl]
 800bdec:	e4ad      	b.n	800b74a <_dtoa_r+0x4a2>
 800bdee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bdf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800be4c <_dtoa_r+0xba4>
 800bdf4:	b11b      	cbz	r3, 800bdfe <_dtoa_r+0xb56>
 800bdf6:	f10a 0308 	add.w	r3, sl, #8
 800bdfa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	4650      	mov	r0, sl
 800be00:	b017      	add	sp, #92	@ 0x5c
 800be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be08:	2b01      	cmp	r3, #1
 800be0a:	f77f ae2e 	ble.w	800ba6a <_dtoa_r+0x7c2>
 800be0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be10:	930a      	str	r3, [sp, #40]	@ 0x28
 800be12:	2001      	movs	r0, #1
 800be14:	e64d      	b.n	800bab2 <_dtoa_r+0x80a>
 800be16:	f1bb 0f00 	cmp.w	fp, #0
 800be1a:	f77f aed9 	ble.w	800bbd0 <_dtoa_r+0x928>
 800be1e:	4656      	mov	r6, sl
 800be20:	4621      	mov	r1, r4
 800be22:	9803      	ldr	r0, [sp, #12]
 800be24:	f7ff f9b5 	bl	800b192 <quorem>
 800be28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800be2c:	f806 3b01 	strb.w	r3, [r6], #1
 800be30:	eba6 020a 	sub.w	r2, r6, sl
 800be34:	4593      	cmp	fp, r2
 800be36:	ddb4      	ble.n	800bda2 <_dtoa_r+0xafa>
 800be38:	2300      	movs	r3, #0
 800be3a:	220a      	movs	r2, #10
 800be3c:	4648      	mov	r0, r9
 800be3e:	9903      	ldr	r1, [sp, #12]
 800be40:	f000 f966 	bl	800c110 <__multadd>
 800be44:	9003      	str	r0, [sp, #12]
 800be46:	e7eb      	b.n	800be20 <_dtoa_r+0xb78>
 800be48:	0800df24 	.word	0x0800df24
 800be4c:	0800dea8 	.word	0x0800dea8

0800be50 <_free_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4605      	mov	r5, r0
 800be54:	2900      	cmp	r1, #0
 800be56:	d040      	beq.n	800beda <_free_r+0x8a>
 800be58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be5c:	1f0c      	subs	r4, r1, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bfb8      	it	lt
 800be62:	18e4      	addlt	r4, r4, r3
 800be64:	f000 f8e6 	bl	800c034 <__malloc_lock>
 800be68:	4a1c      	ldr	r2, [pc, #112]	@ (800bedc <_free_r+0x8c>)
 800be6a:	6813      	ldr	r3, [r2, #0]
 800be6c:	b933      	cbnz	r3, 800be7c <_free_r+0x2c>
 800be6e:	6063      	str	r3, [r4, #4]
 800be70:	6014      	str	r4, [r2, #0]
 800be72:	4628      	mov	r0, r5
 800be74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be78:	f000 b8e2 	b.w	800c040 <__malloc_unlock>
 800be7c:	42a3      	cmp	r3, r4
 800be7e:	d908      	bls.n	800be92 <_free_r+0x42>
 800be80:	6820      	ldr	r0, [r4, #0]
 800be82:	1821      	adds	r1, r4, r0
 800be84:	428b      	cmp	r3, r1
 800be86:	bf01      	itttt	eq
 800be88:	6819      	ldreq	r1, [r3, #0]
 800be8a:	685b      	ldreq	r3, [r3, #4]
 800be8c:	1809      	addeq	r1, r1, r0
 800be8e:	6021      	streq	r1, [r4, #0]
 800be90:	e7ed      	b.n	800be6e <_free_r+0x1e>
 800be92:	461a      	mov	r2, r3
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	b10b      	cbz	r3, 800be9c <_free_r+0x4c>
 800be98:	42a3      	cmp	r3, r4
 800be9a:	d9fa      	bls.n	800be92 <_free_r+0x42>
 800be9c:	6811      	ldr	r1, [r2, #0]
 800be9e:	1850      	adds	r0, r2, r1
 800bea0:	42a0      	cmp	r0, r4
 800bea2:	d10b      	bne.n	800bebc <_free_r+0x6c>
 800bea4:	6820      	ldr	r0, [r4, #0]
 800bea6:	4401      	add	r1, r0
 800bea8:	1850      	adds	r0, r2, r1
 800beaa:	4283      	cmp	r3, r0
 800beac:	6011      	str	r1, [r2, #0]
 800beae:	d1e0      	bne.n	800be72 <_free_r+0x22>
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	4408      	add	r0, r1
 800beb6:	6010      	str	r0, [r2, #0]
 800beb8:	6053      	str	r3, [r2, #4]
 800beba:	e7da      	b.n	800be72 <_free_r+0x22>
 800bebc:	d902      	bls.n	800bec4 <_free_r+0x74>
 800bebe:	230c      	movs	r3, #12
 800bec0:	602b      	str	r3, [r5, #0]
 800bec2:	e7d6      	b.n	800be72 <_free_r+0x22>
 800bec4:	6820      	ldr	r0, [r4, #0]
 800bec6:	1821      	adds	r1, r4, r0
 800bec8:	428b      	cmp	r3, r1
 800beca:	bf01      	itttt	eq
 800becc:	6819      	ldreq	r1, [r3, #0]
 800bece:	685b      	ldreq	r3, [r3, #4]
 800bed0:	1809      	addeq	r1, r1, r0
 800bed2:	6021      	streq	r1, [r4, #0]
 800bed4:	6063      	str	r3, [r4, #4]
 800bed6:	6054      	str	r4, [r2, #4]
 800bed8:	e7cb      	b.n	800be72 <_free_r+0x22>
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	20003358 	.word	0x20003358

0800bee0 <malloc>:
 800bee0:	4b02      	ldr	r3, [pc, #8]	@ (800beec <malloc+0xc>)
 800bee2:	4601      	mov	r1, r0
 800bee4:	6818      	ldr	r0, [r3, #0]
 800bee6:	f000 b825 	b.w	800bf34 <_malloc_r>
 800beea:	bf00      	nop
 800beec:	20000030 	.word	0x20000030

0800bef0 <sbrk_aligned>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	4e0f      	ldr	r6, [pc, #60]	@ (800bf30 <sbrk_aligned+0x40>)
 800bef4:	460c      	mov	r4, r1
 800bef6:	6831      	ldr	r1, [r6, #0]
 800bef8:	4605      	mov	r5, r0
 800befa:	b911      	cbnz	r1, 800bf02 <sbrk_aligned+0x12>
 800befc:	f001 fb9a 	bl	800d634 <_sbrk_r>
 800bf00:	6030      	str	r0, [r6, #0]
 800bf02:	4621      	mov	r1, r4
 800bf04:	4628      	mov	r0, r5
 800bf06:	f001 fb95 	bl	800d634 <_sbrk_r>
 800bf0a:	1c43      	adds	r3, r0, #1
 800bf0c:	d103      	bne.n	800bf16 <sbrk_aligned+0x26>
 800bf0e:	f04f 34ff 	mov.w	r4, #4294967295
 800bf12:	4620      	mov	r0, r4
 800bf14:	bd70      	pop	{r4, r5, r6, pc}
 800bf16:	1cc4      	adds	r4, r0, #3
 800bf18:	f024 0403 	bic.w	r4, r4, #3
 800bf1c:	42a0      	cmp	r0, r4
 800bf1e:	d0f8      	beq.n	800bf12 <sbrk_aligned+0x22>
 800bf20:	1a21      	subs	r1, r4, r0
 800bf22:	4628      	mov	r0, r5
 800bf24:	f001 fb86 	bl	800d634 <_sbrk_r>
 800bf28:	3001      	adds	r0, #1
 800bf2a:	d1f2      	bne.n	800bf12 <sbrk_aligned+0x22>
 800bf2c:	e7ef      	b.n	800bf0e <sbrk_aligned+0x1e>
 800bf2e:	bf00      	nop
 800bf30:	20003354 	.word	0x20003354

0800bf34 <_malloc_r>:
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf38:	1ccd      	adds	r5, r1, #3
 800bf3a:	f025 0503 	bic.w	r5, r5, #3
 800bf3e:	3508      	adds	r5, #8
 800bf40:	2d0c      	cmp	r5, #12
 800bf42:	bf38      	it	cc
 800bf44:	250c      	movcc	r5, #12
 800bf46:	2d00      	cmp	r5, #0
 800bf48:	4606      	mov	r6, r0
 800bf4a:	db01      	blt.n	800bf50 <_malloc_r+0x1c>
 800bf4c:	42a9      	cmp	r1, r5
 800bf4e:	d904      	bls.n	800bf5a <_malloc_r+0x26>
 800bf50:	230c      	movs	r3, #12
 800bf52:	6033      	str	r3, [r6, #0]
 800bf54:	2000      	movs	r0, #0
 800bf56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c030 <_malloc_r+0xfc>
 800bf5e:	f000 f869 	bl	800c034 <__malloc_lock>
 800bf62:	f8d8 3000 	ldr.w	r3, [r8]
 800bf66:	461c      	mov	r4, r3
 800bf68:	bb44      	cbnz	r4, 800bfbc <_malloc_r+0x88>
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f7ff ffbf 	bl	800bef0 <sbrk_aligned>
 800bf72:	1c43      	adds	r3, r0, #1
 800bf74:	4604      	mov	r4, r0
 800bf76:	d158      	bne.n	800c02a <_malloc_r+0xf6>
 800bf78:	f8d8 4000 	ldr.w	r4, [r8]
 800bf7c:	4627      	mov	r7, r4
 800bf7e:	2f00      	cmp	r7, #0
 800bf80:	d143      	bne.n	800c00a <_malloc_r+0xd6>
 800bf82:	2c00      	cmp	r4, #0
 800bf84:	d04b      	beq.n	800c01e <_malloc_r+0xea>
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	4639      	mov	r1, r7
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	eb04 0903 	add.w	r9, r4, r3
 800bf90:	f001 fb50 	bl	800d634 <_sbrk_r>
 800bf94:	4581      	cmp	r9, r0
 800bf96:	d142      	bne.n	800c01e <_malloc_r+0xea>
 800bf98:	6821      	ldr	r1, [r4, #0]
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	1a6d      	subs	r5, r5, r1
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	f7ff ffa6 	bl	800bef0 <sbrk_aligned>
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d03a      	beq.n	800c01e <_malloc_r+0xea>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	442b      	add	r3, r5
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	f8d8 3000 	ldr.w	r3, [r8]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	bb62      	cbnz	r2, 800c010 <_malloc_r+0xdc>
 800bfb6:	f8c8 7000 	str.w	r7, [r8]
 800bfba:	e00f      	b.n	800bfdc <_malloc_r+0xa8>
 800bfbc:	6822      	ldr	r2, [r4, #0]
 800bfbe:	1b52      	subs	r2, r2, r5
 800bfc0:	d420      	bmi.n	800c004 <_malloc_r+0xd0>
 800bfc2:	2a0b      	cmp	r2, #11
 800bfc4:	d917      	bls.n	800bff6 <_malloc_r+0xc2>
 800bfc6:	1961      	adds	r1, r4, r5
 800bfc8:	42a3      	cmp	r3, r4
 800bfca:	6025      	str	r5, [r4, #0]
 800bfcc:	bf18      	it	ne
 800bfce:	6059      	strne	r1, [r3, #4]
 800bfd0:	6863      	ldr	r3, [r4, #4]
 800bfd2:	bf08      	it	eq
 800bfd4:	f8c8 1000 	streq.w	r1, [r8]
 800bfd8:	5162      	str	r2, [r4, r5]
 800bfda:	604b      	str	r3, [r1, #4]
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f000 f82f 	bl	800c040 <__malloc_unlock>
 800bfe2:	f104 000b 	add.w	r0, r4, #11
 800bfe6:	1d23      	adds	r3, r4, #4
 800bfe8:	f020 0007 	bic.w	r0, r0, #7
 800bfec:	1ac2      	subs	r2, r0, r3
 800bfee:	bf1c      	itt	ne
 800bff0:	1a1b      	subne	r3, r3, r0
 800bff2:	50a3      	strne	r3, [r4, r2]
 800bff4:	e7af      	b.n	800bf56 <_malloc_r+0x22>
 800bff6:	6862      	ldr	r2, [r4, #4]
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	bf0c      	ite	eq
 800bffc:	f8c8 2000 	streq.w	r2, [r8]
 800c000:	605a      	strne	r2, [r3, #4]
 800c002:	e7eb      	b.n	800bfdc <_malloc_r+0xa8>
 800c004:	4623      	mov	r3, r4
 800c006:	6864      	ldr	r4, [r4, #4]
 800c008:	e7ae      	b.n	800bf68 <_malloc_r+0x34>
 800c00a:	463c      	mov	r4, r7
 800c00c:	687f      	ldr	r7, [r7, #4]
 800c00e:	e7b6      	b.n	800bf7e <_malloc_r+0x4a>
 800c010:	461a      	mov	r2, r3
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	42a3      	cmp	r3, r4
 800c016:	d1fb      	bne.n	800c010 <_malloc_r+0xdc>
 800c018:	2300      	movs	r3, #0
 800c01a:	6053      	str	r3, [r2, #4]
 800c01c:	e7de      	b.n	800bfdc <_malloc_r+0xa8>
 800c01e:	230c      	movs	r3, #12
 800c020:	4630      	mov	r0, r6
 800c022:	6033      	str	r3, [r6, #0]
 800c024:	f000 f80c 	bl	800c040 <__malloc_unlock>
 800c028:	e794      	b.n	800bf54 <_malloc_r+0x20>
 800c02a:	6005      	str	r5, [r0, #0]
 800c02c:	e7d6      	b.n	800bfdc <_malloc_r+0xa8>
 800c02e:	bf00      	nop
 800c030:	20003358 	.word	0x20003358

0800c034 <__malloc_lock>:
 800c034:	4801      	ldr	r0, [pc, #4]	@ (800c03c <__malloc_lock+0x8>)
 800c036:	f7ff b88e 	b.w	800b156 <__retarget_lock_acquire_recursive>
 800c03a:	bf00      	nop
 800c03c:	20003350 	.word	0x20003350

0800c040 <__malloc_unlock>:
 800c040:	4801      	ldr	r0, [pc, #4]	@ (800c048 <__malloc_unlock+0x8>)
 800c042:	f7ff b889 	b.w	800b158 <__retarget_lock_release_recursive>
 800c046:	bf00      	nop
 800c048:	20003350 	.word	0x20003350

0800c04c <_Balloc>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	69c6      	ldr	r6, [r0, #28]
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	b976      	cbnz	r6, 800c074 <_Balloc+0x28>
 800c056:	2010      	movs	r0, #16
 800c058:	f7ff ff42 	bl	800bee0 <malloc>
 800c05c:	4602      	mov	r2, r0
 800c05e:	61e0      	str	r0, [r4, #28]
 800c060:	b920      	cbnz	r0, 800c06c <_Balloc+0x20>
 800c062:	216b      	movs	r1, #107	@ 0x6b
 800c064:	4b17      	ldr	r3, [pc, #92]	@ (800c0c4 <_Balloc+0x78>)
 800c066:	4818      	ldr	r0, [pc, #96]	@ (800c0c8 <_Balloc+0x7c>)
 800c068:	f001 faf4 	bl	800d654 <__assert_func>
 800c06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c070:	6006      	str	r6, [r0, #0]
 800c072:	60c6      	str	r6, [r0, #12]
 800c074:	69e6      	ldr	r6, [r4, #28]
 800c076:	68f3      	ldr	r3, [r6, #12]
 800c078:	b183      	cbz	r3, 800c09c <_Balloc+0x50>
 800c07a:	69e3      	ldr	r3, [r4, #28]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c082:	b9b8      	cbnz	r0, 800c0b4 <_Balloc+0x68>
 800c084:	2101      	movs	r1, #1
 800c086:	fa01 f605 	lsl.w	r6, r1, r5
 800c08a:	1d72      	adds	r2, r6, #5
 800c08c:	4620      	mov	r0, r4
 800c08e:	0092      	lsls	r2, r2, #2
 800c090:	f001 fafe 	bl	800d690 <_calloc_r>
 800c094:	b160      	cbz	r0, 800c0b0 <_Balloc+0x64>
 800c096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c09a:	e00e      	b.n	800c0ba <_Balloc+0x6e>
 800c09c:	2221      	movs	r2, #33	@ 0x21
 800c09e:	2104      	movs	r1, #4
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f001 faf5 	bl	800d690 <_calloc_r>
 800c0a6:	69e3      	ldr	r3, [r4, #28]
 800c0a8:	60f0      	str	r0, [r6, #12]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e4      	bne.n	800c07a <_Balloc+0x2e>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	bd70      	pop	{r4, r5, r6, pc}
 800c0b4:	6802      	ldr	r2, [r0, #0]
 800c0b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0c0:	e7f7      	b.n	800c0b2 <_Balloc+0x66>
 800c0c2:	bf00      	nop
 800c0c4:	0800deb5 	.word	0x0800deb5
 800c0c8:	0800df35 	.word	0x0800df35

0800c0cc <_Bfree>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	69c6      	ldr	r6, [r0, #28]
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	b976      	cbnz	r6, 800c0f4 <_Bfree+0x28>
 800c0d6:	2010      	movs	r0, #16
 800c0d8:	f7ff ff02 	bl	800bee0 <malloc>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	61e8      	str	r0, [r5, #28]
 800c0e0:	b920      	cbnz	r0, 800c0ec <_Bfree+0x20>
 800c0e2:	218f      	movs	r1, #143	@ 0x8f
 800c0e4:	4b08      	ldr	r3, [pc, #32]	@ (800c108 <_Bfree+0x3c>)
 800c0e6:	4809      	ldr	r0, [pc, #36]	@ (800c10c <_Bfree+0x40>)
 800c0e8:	f001 fab4 	bl	800d654 <__assert_func>
 800c0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0f0:	6006      	str	r6, [r0, #0]
 800c0f2:	60c6      	str	r6, [r0, #12]
 800c0f4:	b13c      	cbz	r4, 800c106 <_Bfree+0x3a>
 800c0f6:	69eb      	ldr	r3, [r5, #28]
 800c0f8:	6862      	ldr	r2, [r4, #4]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c100:	6021      	str	r1, [r4, #0]
 800c102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	0800deb5 	.word	0x0800deb5
 800c10c:	0800df35 	.word	0x0800df35

0800c110 <__multadd>:
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	4607      	mov	r7, r0
 800c116:	460c      	mov	r4, r1
 800c118:	461e      	mov	r6, r3
 800c11a:	2000      	movs	r0, #0
 800c11c:	690d      	ldr	r5, [r1, #16]
 800c11e:	f101 0c14 	add.w	ip, r1, #20
 800c122:	f8dc 3000 	ldr.w	r3, [ip]
 800c126:	3001      	adds	r0, #1
 800c128:	b299      	uxth	r1, r3
 800c12a:	fb02 6101 	mla	r1, r2, r1, r6
 800c12e:	0c1e      	lsrs	r6, r3, #16
 800c130:	0c0b      	lsrs	r3, r1, #16
 800c132:	fb02 3306 	mla	r3, r2, r6, r3
 800c136:	b289      	uxth	r1, r1
 800c138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c13c:	4285      	cmp	r5, r0
 800c13e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c142:	f84c 1b04 	str.w	r1, [ip], #4
 800c146:	dcec      	bgt.n	800c122 <__multadd+0x12>
 800c148:	b30e      	cbz	r6, 800c18e <__multadd+0x7e>
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	42ab      	cmp	r3, r5
 800c14e:	dc19      	bgt.n	800c184 <__multadd+0x74>
 800c150:	6861      	ldr	r1, [r4, #4]
 800c152:	4638      	mov	r0, r7
 800c154:	3101      	adds	r1, #1
 800c156:	f7ff ff79 	bl	800c04c <_Balloc>
 800c15a:	4680      	mov	r8, r0
 800c15c:	b928      	cbnz	r0, 800c16a <__multadd+0x5a>
 800c15e:	4602      	mov	r2, r0
 800c160:	21ba      	movs	r1, #186	@ 0xba
 800c162:	4b0c      	ldr	r3, [pc, #48]	@ (800c194 <__multadd+0x84>)
 800c164:	480c      	ldr	r0, [pc, #48]	@ (800c198 <__multadd+0x88>)
 800c166:	f001 fa75 	bl	800d654 <__assert_func>
 800c16a:	6922      	ldr	r2, [r4, #16]
 800c16c:	f104 010c 	add.w	r1, r4, #12
 800c170:	3202      	adds	r2, #2
 800c172:	0092      	lsls	r2, r2, #2
 800c174:	300c      	adds	r0, #12
 800c176:	f7fe fffe 	bl	800b176 <memcpy>
 800c17a:	4621      	mov	r1, r4
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7ff ffa5 	bl	800c0cc <_Bfree>
 800c182:	4644      	mov	r4, r8
 800c184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c188:	3501      	adds	r5, #1
 800c18a:	615e      	str	r6, [r3, #20]
 800c18c:	6125      	str	r5, [r4, #16]
 800c18e:	4620      	mov	r0, r4
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	0800df24 	.word	0x0800df24
 800c198:	0800df35 	.word	0x0800df35

0800c19c <__hi0bits>:
 800c19c:	4603      	mov	r3, r0
 800c19e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c1a2:	bf3a      	itte	cc
 800c1a4:	0403      	lslcc	r3, r0, #16
 800c1a6:	2010      	movcc	r0, #16
 800c1a8:	2000      	movcs	r0, #0
 800c1aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1ae:	bf3c      	itt	cc
 800c1b0:	021b      	lslcc	r3, r3, #8
 800c1b2:	3008      	addcc	r0, #8
 800c1b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1b8:	bf3c      	itt	cc
 800c1ba:	011b      	lslcc	r3, r3, #4
 800c1bc:	3004      	addcc	r0, #4
 800c1be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1c2:	bf3c      	itt	cc
 800c1c4:	009b      	lslcc	r3, r3, #2
 800c1c6:	3002      	addcc	r0, #2
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	db05      	blt.n	800c1d8 <__hi0bits+0x3c>
 800c1cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1d0:	f100 0001 	add.w	r0, r0, #1
 800c1d4:	bf08      	it	eq
 800c1d6:	2020      	moveq	r0, #32
 800c1d8:	4770      	bx	lr

0800c1da <__lo0bits>:
 800c1da:	6803      	ldr	r3, [r0, #0]
 800c1dc:	4602      	mov	r2, r0
 800c1de:	f013 0007 	ands.w	r0, r3, #7
 800c1e2:	d00b      	beq.n	800c1fc <__lo0bits+0x22>
 800c1e4:	07d9      	lsls	r1, r3, #31
 800c1e6:	d421      	bmi.n	800c22c <__lo0bits+0x52>
 800c1e8:	0798      	lsls	r0, r3, #30
 800c1ea:	bf49      	itett	mi
 800c1ec:	085b      	lsrmi	r3, r3, #1
 800c1ee:	089b      	lsrpl	r3, r3, #2
 800c1f0:	2001      	movmi	r0, #1
 800c1f2:	6013      	strmi	r3, [r2, #0]
 800c1f4:	bf5c      	itt	pl
 800c1f6:	2002      	movpl	r0, #2
 800c1f8:	6013      	strpl	r3, [r2, #0]
 800c1fa:	4770      	bx	lr
 800c1fc:	b299      	uxth	r1, r3
 800c1fe:	b909      	cbnz	r1, 800c204 <__lo0bits+0x2a>
 800c200:	2010      	movs	r0, #16
 800c202:	0c1b      	lsrs	r3, r3, #16
 800c204:	b2d9      	uxtb	r1, r3
 800c206:	b909      	cbnz	r1, 800c20c <__lo0bits+0x32>
 800c208:	3008      	adds	r0, #8
 800c20a:	0a1b      	lsrs	r3, r3, #8
 800c20c:	0719      	lsls	r1, r3, #28
 800c20e:	bf04      	itt	eq
 800c210:	091b      	lsreq	r3, r3, #4
 800c212:	3004      	addeq	r0, #4
 800c214:	0799      	lsls	r1, r3, #30
 800c216:	bf04      	itt	eq
 800c218:	089b      	lsreq	r3, r3, #2
 800c21a:	3002      	addeq	r0, #2
 800c21c:	07d9      	lsls	r1, r3, #31
 800c21e:	d403      	bmi.n	800c228 <__lo0bits+0x4e>
 800c220:	085b      	lsrs	r3, r3, #1
 800c222:	f100 0001 	add.w	r0, r0, #1
 800c226:	d003      	beq.n	800c230 <__lo0bits+0x56>
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	4770      	bx	lr
 800c22c:	2000      	movs	r0, #0
 800c22e:	4770      	bx	lr
 800c230:	2020      	movs	r0, #32
 800c232:	4770      	bx	lr

0800c234 <__i2b>:
 800c234:	b510      	push	{r4, lr}
 800c236:	460c      	mov	r4, r1
 800c238:	2101      	movs	r1, #1
 800c23a:	f7ff ff07 	bl	800c04c <_Balloc>
 800c23e:	4602      	mov	r2, r0
 800c240:	b928      	cbnz	r0, 800c24e <__i2b+0x1a>
 800c242:	f240 1145 	movw	r1, #325	@ 0x145
 800c246:	4b04      	ldr	r3, [pc, #16]	@ (800c258 <__i2b+0x24>)
 800c248:	4804      	ldr	r0, [pc, #16]	@ (800c25c <__i2b+0x28>)
 800c24a:	f001 fa03 	bl	800d654 <__assert_func>
 800c24e:	2301      	movs	r3, #1
 800c250:	6144      	str	r4, [r0, #20]
 800c252:	6103      	str	r3, [r0, #16]
 800c254:	bd10      	pop	{r4, pc}
 800c256:	bf00      	nop
 800c258:	0800df24 	.word	0x0800df24
 800c25c:	0800df35 	.word	0x0800df35

0800c260 <__multiply>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	4617      	mov	r7, r2
 800c266:	690a      	ldr	r2, [r1, #16]
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	4689      	mov	r9, r1
 800c26c:	429a      	cmp	r2, r3
 800c26e:	bfa2      	ittt	ge
 800c270:	463b      	movge	r3, r7
 800c272:	460f      	movge	r7, r1
 800c274:	4699      	movge	r9, r3
 800c276:	693d      	ldr	r5, [r7, #16]
 800c278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	6879      	ldr	r1, [r7, #4]
 800c280:	eb05 060a 	add.w	r6, r5, sl
 800c284:	42b3      	cmp	r3, r6
 800c286:	b085      	sub	sp, #20
 800c288:	bfb8      	it	lt
 800c28a:	3101      	addlt	r1, #1
 800c28c:	f7ff fede 	bl	800c04c <_Balloc>
 800c290:	b930      	cbnz	r0, 800c2a0 <__multiply+0x40>
 800c292:	4602      	mov	r2, r0
 800c294:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c298:	4b40      	ldr	r3, [pc, #256]	@ (800c39c <__multiply+0x13c>)
 800c29a:	4841      	ldr	r0, [pc, #260]	@ (800c3a0 <__multiply+0x140>)
 800c29c:	f001 f9da 	bl	800d654 <__assert_func>
 800c2a0:	f100 0414 	add.w	r4, r0, #20
 800c2a4:	4623      	mov	r3, r4
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c2ac:	4573      	cmp	r3, lr
 800c2ae:	d320      	bcc.n	800c2f2 <__multiply+0x92>
 800c2b0:	f107 0814 	add.w	r8, r7, #20
 800c2b4:	f109 0114 	add.w	r1, r9, #20
 800c2b8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c2bc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c2c0:	9302      	str	r3, [sp, #8]
 800c2c2:	1beb      	subs	r3, r5, r7
 800c2c4:	3b15      	subs	r3, #21
 800c2c6:	f023 0303 	bic.w	r3, r3, #3
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	3715      	adds	r7, #21
 800c2ce:	42bd      	cmp	r5, r7
 800c2d0:	bf38      	it	cc
 800c2d2:	2304      	movcc	r3, #4
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	9103      	str	r1, [sp, #12]
 800c2da:	428b      	cmp	r3, r1
 800c2dc:	d80c      	bhi.n	800c2f8 <__multiply+0x98>
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	dd03      	ble.n	800c2ea <__multiply+0x8a>
 800c2e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d055      	beq.n	800c396 <__multiply+0x136>
 800c2ea:	6106      	str	r6, [r0, #16]
 800c2ec:	b005      	add	sp, #20
 800c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f2:	f843 2b04 	str.w	r2, [r3], #4
 800c2f6:	e7d9      	b.n	800c2ac <__multiply+0x4c>
 800c2f8:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2fc:	f1ba 0f00 	cmp.w	sl, #0
 800c300:	d01f      	beq.n	800c342 <__multiply+0xe2>
 800c302:	46c4      	mov	ip, r8
 800c304:	46a1      	mov	r9, r4
 800c306:	2700      	movs	r7, #0
 800c308:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c30c:	f8d9 3000 	ldr.w	r3, [r9]
 800c310:	fa1f fb82 	uxth.w	fp, r2
 800c314:	b29b      	uxth	r3, r3
 800c316:	fb0a 330b 	mla	r3, sl, fp, r3
 800c31a:	443b      	add	r3, r7
 800c31c:	f8d9 7000 	ldr.w	r7, [r9]
 800c320:	0c12      	lsrs	r2, r2, #16
 800c322:	0c3f      	lsrs	r7, r7, #16
 800c324:	fb0a 7202 	mla	r2, sl, r2, r7
 800c328:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c332:	4565      	cmp	r5, ip
 800c334:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c338:	f849 3b04 	str.w	r3, [r9], #4
 800c33c:	d8e4      	bhi.n	800c308 <__multiply+0xa8>
 800c33e:	9b01      	ldr	r3, [sp, #4]
 800c340:	50e7      	str	r7, [r4, r3]
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	3104      	adds	r1, #4
 800c346:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c34a:	f1b9 0f00 	cmp.w	r9, #0
 800c34e:	d020      	beq.n	800c392 <__multiply+0x132>
 800c350:	4647      	mov	r7, r8
 800c352:	46a4      	mov	ip, r4
 800c354:	f04f 0a00 	mov.w	sl, #0
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	f8b7 b000 	ldrh.w	fp, [r7]
 800c35e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c362:	b29b      	uxth	r3, r3
 800c364:	fb09 220b 	mla	r2, r9, fp, r2
 800c368:	4452      	add	r2, sl
 800c36a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c36e:	f84c 3b04 	str.w	r3, [ip], #4
 800c372:	f857 3b04 	ldr.w	r3, [r7], #4
 800c376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c37a:	f8bc 3000 	ldrh.w	r3, [ip]
 800c37e:	42bd      	cmp	r5, r7
 800c380:	fb09 330a 	mla	r3, r9, sl, r3
 800c384:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c38c:	d8e5      	bhi.n	800c35a <__multiply+0xfa>
 800c38e:	9a01      	ldr	r2, [sp, #4]
 800c390:	50a3      	str	r3, [r4, r2]
 800c392:	3404      	adds	r4, #4
 800c394:	e79f      	b.n	800c2d6 <__multiply+0x76>
 800c396:	3e01      	subs	r6, #1
 800c398:	e7a1      	b.n	800c2de <__multiply+0x7e>
 800c39a:	bf00      	nop
 800c39c:	0800df24 	.word	0x0800df24
 800c3a0:	0800df35 	.word	0x0800df35

0800c3a4 <__pow5mult>:
 800c3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a8:	4615      	mov	r5, r2
 800c3aa:	f012 0203 	ands.w	r2, r2, #3
 800c3ae:	4607      	mov	r7, r0
 800c3b0:	460e      	mov	r6, r1
 800c3b2:	d007      	beq.n	800c3c4 <__pow5mult+0x20>
 800c3b4:	4c25      	ldr	r4, [pc, #148]	@ (800c44c <__pow5mult+0xa8>)
 800c3b6:	3a01      	subs	r2, #1
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3be:	f7ff fea7 	bl	800c110 <__multadd>
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	10ad      	asrs	r5, r5, #2
 800c3c6:	d03d      	beq.n	800c444 <__pow5mult+0xa0>
 800c3c8:	69fc      	ldr	r4, [r7, #28]
 800c3ca:	b97c      	cbnz	r4, 800c3ec <__pow5mult+0x48>
 800c3cc:	2010      	movs	r0, #16
 800c3ce:	f7ff fd87 	bl	800bee0 <malloc>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	61f8      	str	r0, [r7, #28]
 800c3d6:	b928      	cbnz	r0, 800c3e4 <__pow5mult+0x40>
 800c3d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3dc:	4b1c      	ldr	r3, [pc, #112]	@ (800c450 <__pow5mult+0xac>)
 800c3de:	481d      	ldr	r0, [pc, #116]	@ (800c454 <__pow5mult+0xb0>)
 800c3e0:	f001 f938 	bl	800d654 <__assert_func>
 800c3e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3e8:	6004      	str	r4, [r0, #0]
 800c3ea:	60c4      	str	r4, [r0, #12]
 800c3ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3f4:	b94c      	cbnz	r4, 800c40a <__pow5mult+0x66>
 800c3f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	f7ff ff1a 	bl	800c234 <__i2b>
 800c400:	2300      	movs	r3, #0
 800c402:	4604      	mov	r4, r0
 800c404:	f8c8 0008 	str.w	r0, [r8, #8]
 800c408:	6003      	str	r3, [r0, #0]
 800c40a:	f04f 0900 	mov.w	r9, #0
 800c40e:	07eb      	lsls	r3, r5, #31
 800c410:	d50a      	bpl.n	800c428 <__pow5mult+0x84>
 800c412:	4631      	mov	r1, r6
 800c414:	4622      	mov	r2, r4
 800c416:	4638      	mov	r0, r7
 800c418:	f7ff ff22 	bl	800c260 <__multiply>
 800c41c:	4680      	mov	r8, r0
 800c41e:	4631      	mov	r1, r6
 800c420:	4638      	mov	r0, r7
 800c422:	f7ff fe53 	bl	800c0cc <_Bfree>
 800c426:	4646      	mov	r6, r8
 800c428:	106d      	asrs	r5, r5, #1
 800c42a:	d00b      	beq.n	800c444 <__pow5mult+0xa0>
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	b938      	cbnz	r0, 800c440 <__pow5mult+0x9c>
 800c430:	4622      	mov	r2, r4
 800c432:	4621      	mov	r1, r4
 800c434:	4638      	mov	r0, r7
 800c436:	f7ff ff13 	bl	800c260 <__multiply>
 800c43a:	6020      	str	r0, [r4, #0]
 800c43c:	f8c0 9000 	str.w	r9, [r0]
 800c440:	4604      	mov	r4, r0
 800c442:	e7e4      	b.n	800c40e <__pow5mult+0x6a>
 800c444:	4630      	mov	r0, r6
 800c446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44a:	bf00      	nop
 800c44c:	0800e000 	.word	0x0800e000
 800c450:	0800deb5 	.word	0x0800deb5
 800c454:	0800df35 	.word	0x0800df35

0800c458 <__lshift>:
 800c458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c45c:	460c      	mov	r4, r1
 800c45e:	4607      	mov	r7, r0
 800c460:	4691      	mov	r9, r2
 800c462:	6923      	ldr	r3, [r4, #16]
 800c464:	6849      	ldr	r1, [r1, #4]
 800c466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c470:	f108 0601 	add.w	r6, r8, #1
 800c474:	42b3      	cmp	r3, r6
 800c476:	db0b      	blt.n	800c490 <__lshift+0x38>
 800c478:	4638      	mov	r0, r7
 800c47a:	f7ff fde7 	bl	800c04c <_Balloc>
 800c47e:	4605      	mov	r5, r0
 800c480:	b948      	cbnz	r0, 800c496 <__lshift+0x3e>
 800c482:	4602      	mov	r2, r0
 800c484:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c488:	4b27      	ldr	r3, [pc, #156]	@ (800c528 <__lshift+0xd0>)
 800c48a:	4828      	ldr	r0, [pc, #160]	@ (800c52c <__lshift+0xd4>)
 800c48c:	f001 f8e2 	bl	800d654 <__assert_func>
 800c490:	3101      	adds	r1, #1
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	e7ee      	b.n	800c474 <__lshift+0x1c>
 800c496:	2300      	movs	r3, #0
 800c498:	f100 0114 	add.w	r1, r0, #20
 800c49c:	f100 0210 	add.w	r2, r0, #16
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	4553      	cmp	r3, sl
 800c4a4:	db33      	blt.n	800c50e <__lshift+0xb6>
 800c4a6:	6920      	ldr	r0, [r4, #16]
 800c4a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4ac:	f104 0314 	add.w	r3, r4, #20
 800c4b0:	f019 091f 	ands.w	r9, r9, #31
 800c4b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4bc:	d02b      	beq.n	800c516 <__lshift+0xbe>
 800c4be:	468a      	mov	sl, r1
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c4c6:	6818      	ldr	r0, [r3, #0]
 800c4c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c4cc:	4310      	orrs	r0, r2
 800c4ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d6:	459c      	cmp	ip, r3
 800c4d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4dc:	d8f3      	bhi.n	800c4c6 <__lshift+0x6e>
 800c4de:	ebac 0304 	sub.w	r3, ip, r4
 800c4e2:	3b15      	subs	r3, #21
 800c4e4:	f023 0303 	bic.w	r3, r3, #3
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	f104 0015 	add.w	r0, r4, #21
 800c4ee:	4560      	cmp	r0, ip
 800c4f0:	bf88      	it	hi
 800c4f2:	2304      	movhi	r3, #4
 800c4f4:	50ca      	str	r2, [r1, r3]
 800c4f6:	b10a      	cbz	r2, 800c4fc <__lshift+0xa4>
 800c4f8:	f108 0602 	add.w	r6, r8, #2
 800c4fc:	3e01      	subs	r6, #1
 800c4fe:	4638      	mov	r0, r7
 800c500:	4621      	mov	r1, r4
 800c502:	612e      	str	r6, [r5, #16]
 800c504:	f7ff fde2 	bl	800c0cc <_Bfree>
 800c508:	4628      	mov	r0, r5
 800c50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c512:	3301      	adds	r3, #1
 800c514:	e7c5      	b.n	800c4a2 <__lshift+0x4a>
 800c516:	3904      	subs	r1, #4
 800c518:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51c:	459c      	cmp	ip, r3
 800c51e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c522:	d8f9      	bhi.n	800c518 <__lshift+0xc0>
 800c524:	e7ea      	b.n	800c4fc <__lshift+0xa4>
 800c526:	bf00      	nop
 800c528:	0800df24 	.word	0x0800df24
 800c52c:	0800df35 	.word	0x0800df35

0800c530 <__mcmp>:
 800c530:	4603      	mov	r3, r0
 800c532:	690a      	ldr	r2, [r1, #16]
 800c534:	6900      	ldr	r0, [r0, #16]
 800c536:	b530      	push	{r4, r5, lr}
 800c538:	1a80      	subs	r0, r0, r2
 800c53a:	d10e      	bne.n	800c55a <__mcmp+0x2a>
 800c53c:	3314      	adds	r3, #20
 800c53e:	3114      	adds	r1, #20
 800c540:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c544:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c548:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c54c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c550:	4295      	cmp	r5, r2
 800c552:	d003      	beq.n	800c55c <__mcmp+0x2c>
 800c554:	d205      	bcs.n	800c562 <__mcmp+0x32>
 800c556:	f04f 30ff 	mov.w	r0, #4294967295
 800c55a:	bd30      	pop	{r4, r5, pc}
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	d3f3      	bcc.n	800c548 <__mcmp+0x18>
 800c560:	e7fb      	b.n	800c55a <__mcmp+0x2a>
 800c562:	2001      	movs	r0, #1
 800c564:	e7f9      	b.n	800c55a <__mcmp+0x2a>
	...

0800c568 <__mdiff>:
 800c568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	4689      	mov	r9, r1
 800c56e:	4606      	mov	r6, r0
 800c570:	4611      	mov	r1, r2
 800c572:	4648      	mov	r0, r9
 800c574:	4614      	mov	r4, r2
 800c576:	f7ff ffdb 	bl	800c530 <__mcmp>
 800c57a:	1e05      	subs	r5, r0, #0
 800c57c:	d112      	bne.n	800c5a4 <__mdiff+0x3c>
 800c57e:	4629      	mov	r1, r5
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff fd63 	bl	800c04c <_Balloc>
 800c586:	4602      	mov	r2, r0
 800c588:	b928      	cbnz	r0, 800c596 <__mdiff+0x2e>
 800c58a:	f240 2137 	movw	r1, #567	@ 0x237
 800c58e:	4b3e      	ldr	r3, [pc, #248]	@ (800c688 <__mdiff+0x120>)
 800c590:	483e      	ldr	r0, [pc, #248]	@ (800c68c <__mdiff+0x124>)
 800c592:	f001 f85f 	bl	800d654 <__assert_func>
 800c596:	2301      	movs	r3, #1
 800c598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c59c:	4610      	mov	r0, r2
 800c59e:	b003      	add	sp, #12
 800c5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a4:	bfbc      	itt	lt
 800c5a6:	464b      	movlt	r3, r9
 800c5a8:	46a1      	movlt	r9, r4
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5b0:	bfba      	itte	lt
 800c5b2:	461c      	movlt	r4, r3
 800c5b4:	2501      	movlt	r5, #1
 800c5b6:	2500      	movge	r5, #0
 800c5b8:	f7ff fd48 	bl	800c04c <_Balloc>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	b918      	cbnz	r0, 800c5c8 <__mdiff+0x60>
 800c5c0:	f240 2145 	movw	r1, #581	@ 0x245
 800c5c4:	4b30      	ldr	r3, [pc, #192]	@ (800c688 <__mdiff+0x120>)
 800c5c6:	e7e3      	b.n	800c590 <__mdiff+0x28>
 800c5c8:	f100 0b14 	add.w	fp, r0, #20
 800c5cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5d0:	f109 0310 	add.w	r3, r9, #16
 800c5d4:	60c5      	str	r5, [r0, #12]
 800c5d6:	f04f 0c00 	mov.w	ip, #0
 800c5da:	f109 0514 	add.w	r5, r9, #20
 800c5de:	46d9      	mov	r9, fp
 800c5e0:	6926      	ldr	r6, [r4, #16]
 800c5e2:	f104 0e14 	add.w	lr, r4, #20
 800c5e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5ee:	9301      	str	r3, [sp, #4]
 800c5f0:	9b01      	ldr	r3, [sp, #4]
 800c5f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5fa:	b281      	uxth	r1, r0
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	fa1f f38a 	uxth.w	r3, sl
 800c602:	1a5b      	subs	r3, r3, r1
 800c604:	0c00      	lsrs	r0, r0, #16
 800c606:	4463      	add	r3, ip
 800c608:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c60c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c610:	b29b      	uxth	r3, r3
 800c612:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c616:	4576      	cmp	r6, lr
 800c618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c61c:	f849 3b04 	str.w	r3, [r9], #4
 800c620:	d8e6      	bhi.n	800c5f0 <__mdiff+0x88>
 800c622:	1b33      	subs	r3, r6, r4
 800c624:	3b15      	subs	r3, #21
 800c626:	f023 0303 	bic.w	r3, r3, #3
 800c62a:	3415      	adds	r4, #21
 800c62c:	3304      	adds	r3, #4
 800c62e:	42a6      	cmp	r6, r4
 800c630:	bf38      	it	cc
 800c632:	2304      	movcc	r3, #4
 800c634:	441d      	add	r5, r3
 800c636:	445b      	add	r3, fp
 800c638:	461e      	mov	r6, r3
 800c63a:	462c      	mov	r4, r5
 800c63c:	4544      	cmp	r4, r8
 800c63e:	d30e      	bcc.n	800c65e <__mdiff+0xf6>
 800c640:	f108 0103 	add.w	r1, r8, #3
 800c644:	1b49      	subs	r1, r1, r5
 800c646:	f021 0103 	bic.w	r1, r1, #3
 800c64a:	3d03      	subs	r5, #3
 800c64c:	45a8      	cmp	r8, r5
 800c64e:	bf38      	it	cc
 800c650:	2100      	movcc	r1, #0
 800c652:	440b      	add	r3, r1
 800c654:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c658:	b199      	cbz	r1, 800c682 <__mdiff+0x11a>
 800c65a:	6117      	str	r7, [r2, #16]
 800c65c:	e79e      	b.n	800c59c <__mdiff+0x34>
 800c65e:	46e6      	mov	lr, ip
 800c660:	f854 1b04 	ldr.w	r1, [r4], #4
 800c664:	fa1f fc81 	uxth.w	ip, r1
 800c668:	44f4      	add	ip, lr
 800c66a:	0c08      	lsrs	r0, r1, #16
 800c66c:	4471      	add	r1, lr
 800c66e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c672:	b289      	uxth	r1, r1
 800c674:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c67c:	f846 1b04 	str.w	r1, [r6], #4
 800c680:	e7dc      	b.n	800c63c <__mdiff+0xd4>
 800c682:	3f01      	subs	r7, #1
 800c684:	e7e6      	b.n	800c654 <__mdiff+0xec>
 800c686:	bf00      	nop
 800c688:	0800df24 	.word	0x0800df24
 800c68c:	0800df35 	.word	0x0800df35

0800c690 <__d2b>:
 800c690:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c694:	2101      	movs	r1, #1
 800c696:	4690      	mov	r8, r2
 800c698:	4699      	mov	r9, r3
 800c69a:	9e08      	ldr	r6, [sp, #32]
 800c69c:	f7ff fcd6 	bl	800c04c <_Balloc>
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	b930      	cbnz	r0, 800c6b2 <__d2b+0x22>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6aa:	4b23      	ldr	r3, [pc, #140]	@ (800c738 <__d2b+0xa8>)
 800c6ac:	4823      	ldr	r0, [pc, #140]	@ (800c73c <__d2b+0xac>)
 800c6ae:	f000 ffd1 	bl	800d654 <__assert_func>
 800c6b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6ba:	b10d      	cbz	r5, 800c6c0 <__d2b+0x30>
 800c6bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6c0:	9301      	str	r3, [sp, #4]
 800c6c2:	f1b8 0300 	subs.w	r3, r8, #0
 800c6c6:	d024      	beq.n	800c712 <__d2b+0x82>
 800c6c8:	4668      	mov	r0, sp
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	f7ff fd85 	bl	800c1da <__lo0bits>
 800c6d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6d4:	b1d8      	cbz	r0, 800c70e <__d2b+0x7e>
 800c6d6:	f1c0 0320 	rsb	r3, r0, #32
 800c6da:	fa02 f303 	lsl.w	r3, r2, r3
 800c6de:	430b      	orrs	r3, r1
 800c6e0:	40c2      	lsrs	r2, r0
 800c6e2:	6163      	str	r3, [r4, #20]
 800c6e4:	9201      	str	r2, [sp, #4]
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bf0c      	ite	eq
 800c6ec:	2201      	moveq	r2, #1
 800c6ee:	2202      	movne	r2, #2
 800c6f0:	61a3      	str	r3, [r4, #24]
 800c6f2:	6122      	str	r2, [r4, #16]
 800c6f4:	b1ad      	cbz	r5, 800c722 <__d2b+0x92>
 800c6f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6fa:	4405      	add	r5, r0
 800c6fc:	6035      	str	r5, [r6, #0]
 800c6fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c704:	6018      	str	r0, [r3, #0]
 800c706:	4620      	mov	r0, r4
 800c708:	b002      	add	sp, #8
 800c70a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c70e:	6161      	str	r1, [r4, #20]
 800c710:	e7e9      	b.n	800c6e6 <__d2b+0x56>
 800c712:	a801      	add	r0, sp, #4
 800c714:	f7ff fd61 	bl	800c1da <__lo0bits>
 800c718:	9b01      	ldr	r3, [sp, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	6163      	str	r3, [r4, #20]
 800c71e:	3020      	adds	r0, #32
 800c720:	e7e7      	b.n	800c6f2 <__d2b+0x62>
 800c722:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c726:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c72a:	6030      	str	r0, [r6, #0]
 800c72c:	6918      	ldr	r0, [r3, #16]
 800c72e:	f7ff fd35 	bl	800c19c <__hi0bits>
 800c732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c736:	e7e4      	b.n	800c702 <__d2b+0x72>
 800c738:	0800df24 	.word	0x0800df24
 800c73c:	0800df35 	.word	0x0800df35

0800c740 <__ssputs_r>:
 800c740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	461f      	mov	r7, r3
 800c746:	688e      	ldr	r6, [r1, #8]
 800c748:	4682      	mov	sl, r0
 800c74a:	42be      	cmp	r6, r7
 800c74c:	460c      	mov	r4, r1
 800c74e:	4690      	mov	r8, r2
 800c750:	680b      	ldr	r3, [r1, #0]
 800c752:	d82d      	bhi.n	800c7b0 <__ssputs_r+0x70>
 800c754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c758:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c75c:	d026      	beq.n	800c7ac <__ssputs_r+0x6c>
 800c75e:	6965      	ldr	r5, [r4, #20]
 800c760:	6909      	ldr	r1, [r1, #16]
 800c762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c766:	eba3 0901 	sub.w	r9, r3, r1
 800c76a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c76e:	1c7b      	adds	r3, r7, #1
 800c770:	444b      	add	r3, r9
 800c772:	106d      	asrs	r5, r5, #1
 800c774:	429d      	cmp	r5, r3
 800c776:	bf38      	it	cc
 800c778:	461d      	movcc	r5, r3
 800c77a:	0553      	lsls	r3, r2, #21
 800c77c:	d527      	bpl.n	800c7ce <__ssputs_r+0x8e>
 800c77e:	4629      	mov	r1, r5
 800c780:	f7ff fbd8 	bl	800bf34 <_malloc_r>
 800c784:	4606      	mov	r6, r0
 800c786:	b360      	cbz	r0, 800c7e2 <__ssputs_r+0xa2>
 800c788:	464a      	mov	r2, r9
 800c78a:	6921      	ldr	r1, [r4, #16]
 800c78c:	f7fe fcf3 	bl	800b176 <memcpy>
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c79a:	81a3      	strh	r3, [r4, #12]
 800c79c:	6126      	str	r6, [r4, #16]
 800c79e:	444e      	add	r6, r9
 800c7a0:	6026      	str	r6, [r4, #0]
 800c7a2:	463e      	mov	r6, r7
 800c7a4:	6165      	str	r5, [r4, #20]
 800c7a6:	eba5 0509 	sub.w	r5, r5, r9
 800c7aa:	60a5      	str	r5, [r4, #8]
 800c7ac:	42be      	cmp	r6, r7
 800c7ae:	d900      	bls.n	800c7b2 <__ssputs_r+0x72>
 800c7b0:	463e      	mov	r6, r7
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	4641      	mov	r1, r8
 800c7b6:	6820      	ldr	r0, [r4, #0]
 800c7b8:	f000 ff22 	bl	800d600 <memmove>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	68a3      	ldr	r3, [r4, #8]
 800c7c0:	1b9b      	subs	r3, r3, r6
 800c7c2:	60a3      	str	r3, [r4, #8]
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	4433      	add	r3, r6
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ce:	462a      	mov	r2, r5
 800c7d0:	f000 ff84 	bl	800d6dc <_realloc_r>
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d1e0      	bne.n	800c79c <__ssputs_r+0x5c>
 800c7da:	4650      	mov	r0, sl
 800c7dc:	6921      	ldr	r1, [r4, #16]
 800c7de:	f7ff fb37 	bl	800be50 <_free_r>
 800c7e2:	230c      	movs	r3, #12
 800c7e4:	f8ca 3000 	str.w	r3, [sl]
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7f2:	81a3      	strh	r3, [r4, #12]
 800c7f4:	e7e9      	b.n	800c7ca <__ssputs_r+0x8a>
	...

0800c7f8 <_svfiprintf_r>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	4698      	mov	r8, r3
 800c7fe:	898b      	ldrh	r3, [r1, #12]
 800c800:	4607      	mov	r7, r0
 800c802:	061b      	lsls	r3, r3, #24
 800c804:	460d      	mov	r5, r1
 800c806:	4614      	mov	r4, r2
 800c808:	b09d      	sub	sp, #116	@ 0x74
 800c80a:	d510      	bpl.n	800c82e <_svfiprintf_r+0x36>
 800c80c:	690b      	ldr	r3, [r1, #16]
 800c80e:	b973      	cbnz	r3, 800c82e <_svfiprintf_r+0x36>
 800c810:	2140      	movs	r1, #64	@ 0x40
 800c812:	f7ff fb8f 	bl	800bf34 <_malloc_r>
 800c816:	6028      	str	r0, [r5, #0]
 800c818:	6128      	str	r0, [r5, #16]
 800c81a:	b930      	cbnz	r0, 800c82a <_svfiprintf_r+0x32>
 800c81c:	230c      	movs	r3, #12
 800c81e:	603b      	str	r3, [r7, #0]
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	b01d      	add	sp, #116	@ 0x74
 800c826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82a:	2340      	movs	r3, #64	@ 0x40
 800c82c:	616b      	str	r3, [r5, #20]
 800c82e:	2300      	movs	r3, #0
 800c830:	9309      	str	r3, [sp, #36]	@ 0x24
 800c832:	2320      	movs	r3, #32
 800c834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c838:	2330      	movs	r3, #48	@ 0x30
 800c83a:	f04f 0901 	mov.w	r9, #1
 800c83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c842:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c9dc <_svfiprintf_r+0x1e4>
 800c846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c84a:	4623      	mov	r3, r4
 800c84c:	469a      	mov	sl, r3
 800c84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c852:	b10a      	cbz	r2, 800c858 <_svfiprintf_r+0x60>
 800c854:	2a25      	cmp	r2, #37	@ 0x25
 800c856:	d1f9      	bne.n	800c84c <_svfiprintf_r+0x54>
 800c858:	ebba 0b04 	subs.w	fp, sl, r4
 800c85c:	d00b      	beq.n	800c876 <_svfiprintf_r+0x7e>
 800c85e:	465b      	mov	r3, fp
 800c860:	4622      	mov	r2, r4
 800c862:	4629      	mov	r1, r5
 800c864:	4638      	mov	r0, r7
 800c866:	f7ff ff6b 	bl	800c740 <__ssputs_r>
 800c86a:	3001      	adds	r0, #1
 800c86c:	f000 80a7 	beq.w	800c9be <_svfiprintf_r+0x1c6>
 800c870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c872:	445a      	add	r2, fp
 800c874:	9209      	str	r2, [sp, #36]	@ 0x24
 800c876:	f89a 3000 	ldrb.w	r3, [sl]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 809f 	beq.w	800c9be <_svfiprintf_r+0x1c6>
 800c880:	2300      	movs	r3, #0
 800c882:	f04f 32ff 	mov.w	r2, #4294967295
 800c886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c88a:	f10a 0a01 	add.w	sl, sl, #1
 800c88e:	9304      	str	r3, [sp, #16]
 800c890:	9307      	str	r3, [sp, #28]
 800c892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c896:	931a      	str	r3, [sp, #104]	@ 0x68
 800c898:	4654      	mov	r4, sl
 800c89a:	2205      	movs	r2, #5
 800c89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a0:	484e      	ldr	r0, [pc, #312]	@ (800c9dc <_svfiprintf_r+0x1e4>)
 800c8a2:	f7fe fc5a 	bl	800b15a <memchr>
 800c8a6:	9a04      	ldr	r2, [sp, #16]
 800c8a8:	b9d8      	cbnz	r0, 800c8e2 <_svfiprintf_r+0xea>
 800c8aa:	06d0      	lsls	r0, r2, #27
 800c8ac:	bf44      	itt	mi
 800c8ae:	2320      	movmi	r3, #32
 800c8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8b4:	0711      	lsls	r1, r2, #28
 800c8b6:	bf44      	itt	mi
 800c8b8:	232b      	movmi	r3, #43	@ 0x2b
 800c8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8be:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8c4:	d015      	beq.n	800c8f2 <_svfiprintf_r+0xfa>
 800c8c6:	4654      	mov	r4, sl
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f04f 0c0a 	mov.w	ip, #10
 800c8ce:	9a07      	ldr	r2, [sp, #28]
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d6:	3b30      	subs	r3, #48	@ 0x30
 800c8d8:	2b09      	cmp	r3, #9
 800c8da:	d94b      	bls.n	800c974 <_svfiprintf_r+0x17c>
 800c8dc:	b1b0      	cbz	r0, 800c90c <_svfiprintf_r+0x114>
 800c8de:	9207      	str	r2, [sp, #28]
 800c8e0:	e014      	b.n	800c90c <_svfiprintf_r+0x114>
 800c8e2:	eba0 0308 	sub.w	r3, r0, r8
 800c8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	46a2      	mov	sl, r4
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	e7d2      	b.n	800c898 <_svfiprintf_r+0xa0>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	1d19      	adds	r1, r3, #4
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	9103      	str	r1, [sp, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfbb      	ittet	lt
 800c8fe:	425b      	neglt	r3, r3
 800c900:	f042 0202 	orrlt.w	r2, r2, #2
 800c904:	9307      	strge	r3, [sp, #28]
 800c906:	9307      	strlt	r3, [sp, #28]
 800c908:	bfb8      	it	lt
 800c90a:	9204      	strlt	r2, [sp, #16]
 800c90c:	7823      	ldrb	r3, [r4, #0]
 800c90e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c910:	d10a      	bne.n	800c928 <_svfiprintf_r+0x130>
 800c912:	7863      	ldrb	r3, [r4, #1]
 800c914:	2b2a      	cmp	r3, #42	@ 0x2a
 800c916:	d132      	bne.n	800c97e <_svfiprintf_r+0x186>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	3402      	adds	r4, #2
 800c91c:	1d1a      	adds	r2, r3, #4
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	9203      	str	r2, [sp, #12]
 800c922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c926:	9305      	str	r3, [sp, #20]
 800c928:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c9e0 <_svfiprintf_r+0x1e8>
 800c92c:	2203      	movs	r2, #3
 800c92e:	4650      	mov	r0, sl
 800c930:	7821      	ldrb	r1, [r4, #0]
 800c932:	f7fe fc12 	bl	800b15a <memchr>
 800c936:	b138      	cbz	r0, 800c948 <_svfiprintf_r+0x150>
 800c938:	2240      	movs	r2, #64	@ 0x40
 800c93a:	9b04      	ldr	r3, [sp, #16]
 800c93c:	eba0 000a 	sub.w	r0, r0, sl
 800c940:	4082      	lsls	r2, r0
 800c942:	4313      	orrs	r3, r2
 800c944:	3401      	adds	r4, #1
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94c:	2206      	movs	r2, #6
 800c94e:	4825      	ldr	r0, [pc, #148]	@ (800c9e4 <_svfiprintf_r+0x1ec>)
 800c950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c954:	f7fe fc01 	bl	800b15a <memchr>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d036      	beq.n	800c9ca <_svfiprintf_r+0x1d2>
 800c95c:	4b22      	ldr	r3, [pc, #136]	@ (800c9e8 <_svfiprintf_r+0x1f0>)
 800c95e:	bb1b      	cbnz	r3, 800c9a8 <_svfiprintf_r+0x1b0>
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	3307      	adds	r3, #7
 800c964:	f023 0307 	bic.w	r3, r3, #7
 800c968:	3308      	adds	r3, #8
 800c96a:	9303      	str	r3, [sp, #12]
 800c96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c96e:	4433      	add	r3, r6
 800c970:	9309      	str	r3, [sp, #36]	@ 0x24
 800c972:	e76a      	b.n	800c84a <_svfiprintf_r+0x52>
 800c974:	460c      	mov	r4, r1
 800c976:	2001      	movs	r0, #1
 800c978:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97c:	e7a8      	b.n	800c8d0 <_svfiprintf_r+0xd8>
 800c97e:	2300      	movs	r3, #0
 800c980:	f04f 0c0a 	mov.w	ip, #10
 800c984:	4619      	mov	r1, r3
 800c986:	3401      	adds	r4, #1
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	4620      	mov	r0, r4
 800c98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c990:	3a30      	subs	r2, #48	@ 0x30
 800c992:	2a09      	cmp	r2, #9
 800c994:	d903      	bls.n	800c99e <_svfiprintf_r+0x1a6>
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0c6      	beq.n	800c928 <_svfiprintf_r+0x130>
 800c99a:	9105      	str	r1, [sp, #20]
 800c99c:	e7c4      	b.n	800c928 <_svfiprintf_r+0x130>
 800c99e:	4604      	mov	r4, r0
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a6:	e7f0      	b.n	800c98a <_svfiprintf_r+0x192>
 800c9a8:	ab03      	add	r3, sp, #12
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	462a      	mov	r2, r5
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c9ec <_svfiprintf_r+0x1f4>)
 800c9b2:	a904      	add	r1, sp, #16
 800c9b4:	f7fd fd7e 	bl	800a4b4 <_printf_float>
 800c9b8:	1c42      	adds	r2, r0, #1
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	d1d6      	bne.n	800c96c <_svfiprintf_r+0x174>
 800c9be:	89ab      	ldrh	r3, [r5, #12]
 800c9c0:	065b      	lsls	r3, r3, #25
 800c9c2:	f53f af2d 	bmi.w	800c820 <_svfiprintf_r+0x28>
 800c9c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9c8:	e72c      	b.n	800c824 <_svfiprintf_r+0x2c>
 800c9ca:	ab03      	add	r3, sp, #12
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	462a      	mov	r2, r5
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	4b06      	ldr	r3, [pc, #24]	@ (800c9ec <_svfiprintf_r+0x1f4>)
 800c9d4:	a904      	add	r1, sp, #16
 800c9d6:	f7fe f80b 	bl	800a9f0 <_printf_i>
 800c9da:	e7ed      	b.n	800c9b8 <_svfiprintf_r+0x1c0>
 800c9dc:	0800df8e 	.word	0x0800df8e
 800c9e0:	0800df94 	.word	0x0800df94
 800c9e4:	0800df98 	.word	0x0800df98
 800c9e8:	0800a4b5 	.word	0x0800a4b5
 800c9ec:	0800c741 	.word	0x0800c741

0800c9f0 <_sungetc_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	1c4b      	adds	r3, r1, #1
 800c9f4:	4614      	mov	r4, r2
 800c9f6:	d103      	bne.n	800ca00 <_sungetc_r+0x10>
 800c9f8:	f04f 35ff 	mov.w	r5, #4294967295
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	8993      	ldrh	r3, [r2, #12]
 800ca02:	b2cd      	uxtb	r5, r1
 800ca04:	f023 0320 	bic.w	r3, r3, #32
 800ca08:	8193      	strh	r3, [r2, #12]
 800ca0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca0c:	6852      	ldr	r2, [r2, #4]
 800ca0e:	b18b      	cbz	r3, 800ca34 <_sungetc_r+0x44>
 800ca10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ca12:	4293      	cmp	r3, r2
 800ca14:	dd08      	ble.n	800ca28 <_sungetc_r+0x38>
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	1e5a      	subs	r2, r3, #1
 800ca1a:	6022      	str	r2, [r4, #0]
 800ca1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ca20:	6863      	ldr	r3, [r4, #4]
 800ca22:	3301      	adds	r3, #1
 800ca24:	6063      	str	r3, [r4, #4]
 800ca26:	e7e9      	b.n	800c9fc <_sungetc_r+0xc>
 800ca28:	4621      	mov	r1, r4
 800ca2a:	f000 fd1c 	bl	800d466 <__submore>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d0f1      	beq.n	800ca16 <_sungetc_r+0x26>
 800ca32:	e7e1      	b.n	800c9f8 <_sungetc_r+0x8>
 800ca34:	6921      	ldr	r1, [r4, #16]
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	b151      	cbz	r1, 800ca50 <_sungetc_r+0x60>
 800ca3a:	4299      	cmp	r1, r3
 800ca3c:	d208      	bcs.n	800ca50 <_sungetc_r+0x60>
 800ca3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ca42:	42a9      	cmp	r1, r5
 800ca44:	d104      	bne.n	800ca50 <_sungetc_r+0x60>
 800ca46:	3b01      	subs	r3, #1
 800ca48:	3201      	adds	r2, #1
 800ca4a:	6023      	str	r3, [r4, #0]
 800ca4c:	6062      	str	r2, [r4, #4]
 800ca4e:	e7d5      	b.n	800c9fc <_sungetc_r+0xc>
 800ca50:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800ca54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca58:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca5a:	2303      	movs	r3, #3
 800ca5c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ca5e:	4623      	mov	r3, r4
 800ca60:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	2301      	movs	r3, #1
 800ca68:	e7dc      	b.n	800ca24 <_sungetc_r+0x34>

0800ca6a <__ssrefill_r>:
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ca70:	b169      	cbz	r1, 800ca8e <__ssrefill_r+0x24>
 800ca72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca76:	4299      	cmp	r1, r3
 800ca78:	d001      	beq.n	800ca7e <__ssrefill_r+0x14>
 800ca7a:	f7ff f9e9 	bl	800be50 <_free_r>
 800ca7e:	2000      	movs	r0, #0
 800ca80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca82:	6360      	str	r0, [r4, #52]	@ 0x34
 800ca84:	6063      	str	r3, [r4, #4]
 800ca86:	b113      	cbz	r3, 800ca8e <__ssrefill_r+0x24>
 800ca88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	f04f 30ff 	mov.w	r0, #4294967295
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	2300      	movs	r3, #0
 800ca98:	6063      	str	r3, [r4, #4]
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f043 0320 	orr.w	r3, r3, #32
 800caa0:	81a3      	strh	r3, [r4, #12]
 800caa2:	e7f3      	b.n	800ca8c <__ssrefill_r+0x22>

0800caa4 <__ssvfiscanf_r>:
 800caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa8:	460c      	mov	r4, r1
 800caaa:	2100      	movs	r1, #0
 800caac:	4606      	mov	r6, r0
 800caae:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800cab2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800cab6:	49ab      	ldr	r1, [pc, #684]	@ (800cd64 <__ssvfiscanf_r+0x2c0>)
 800cab8:	f10d 0804 	add.w	r8, sp, #4
 800cabc:	91a0      	str	r1, [sp, #640]	@ 0x280
 800cabe:	49aa      	ldr	r1, [pc, #680]	@ (800cd68 <__ssvfiscanf_r+0x2c4>)
 800cac0:	4faa      	ldr	r7, [pc, #680]	@ (800cd6c <__ssvfiscanf_r+0x2c8>)
 800cac2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800cac6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	f892 9000 	ldrb.w	r9, [r2]
 800cace:	f1b9 0f00 	cmp.w	r9, #0
 800cad2:	f000 8159 	beq.w	800cd88 <__ssvfiscanf_r+0x2e4>
 800cad6:	f817 3009 	ldrb.w	r3, [r7, r9]
 800cada:	1c55      	adds	r5, r2, #1
 800cadc:	f013 0308 	ands.w	r3, r3, #8
 800cae0:	d019      	beq.n	800cb16 <__ssvfiscanf_r+0x72>
 800cae2:	6863      	ldr	r3, [r4, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	dd0f      	ble.n	800cb08 <__ssvfiscanf_r+0x64>
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	781a      	ldrb	r2, [r3, #0]
 800caec:	5cba      	ldrb	r2, [r7, r2]
 800caee:	0712      	lsls	r2, r2, #28
 800caf0:	d401      	bmi.n	800caf6 <__ssvfiscanf_r+0x52>
 800caf2:	462a      	mov	r2, r5
 800caf4:	e7e9      	b.n	800caca <__ssvfiscanf_r+0x26>
 800caf6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800caf8:	3301      	adds	r3, #1
 800cafa:	3201      	adds	r2, #1
 800cafc:	9245      	str	r2, [sp, #276]	@ 0x114
 800cafe:	6862      	ldr	r2, [r4, #4]
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	3a01      	subs	r2, #1
 800cb04:	6062      	str	r2, [r4, #4]
 800cb06:	e7ec      	b.n	800cae2 <__ssvfiscanf_r+0x3e>
 800cb08:	4621      	mov	r1, r4
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cb0e:	4798      	blx	r3
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d0e9      	beq.n	800cae8 <__ssvfiscanf_r+0x44>
 800cb14:	e7ed      	b.n	800caf2 <__ssvfiscanf_r+0x4e>
 800cb16:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800cb1a:	f040 8086 	bne.w	800cc2a <__ssvfiscanf_r+0x186>
 800cb1e:	9341      	str	r3, [sp, #260]	@ 0x104
 800cb20:	9343      	str	r3, [sp, #268]	@ 0x10c
 800cb22:	7853      	ldrb	r3, [r2, #1]
 800cb24:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb26:	bf04      	itt	eq
 800cb28:	2310      	moveq	r3, #16
 800cb2a:	1c95      	addeq	r5, r2, #2
 800cb2c:	f04f 020a 	mov.w	r2, #10
 800cb30:	bf08      	it	eq
 800cb32:	9341      	streq	r3, [sp, #260]	@ 0x104
 800cb34:	46aa      	mov	sl, r5
 800cb36:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cb3a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800cb3e:	2b09      	cmp	r3, #9
 800cb40:	d91e      	bls.n	800cb80 <__ssvfiscanf_r+0xdc>
 800cb42:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800cd70 <__ssvfiscanf_r+0x2cc>
 800cb46:	2203      	movs	r2, #3
 800cb48:	4658      	mov	r0, fp
 800cb4a:	f7fe fb06 	bl	800b15a <memchr>
 800cb4e:	b138      	cbz	r0, 800cb60 <__ssvfiscanf_r+0xbc>
 800cb50:	2301      	movs	r3, #1
 800cb52:	4655      	mov	r5, sl
 800cb54:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cb56:	eba0 000b 	sub.w	r0, r0, fp
 800cb5a:	4083      	lsls	r3, r0
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	9341      	str	r3, [sp, #260]	@ 0x104
 800cb60:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb64:	2b78      	cmp	r3, #120	@ 0x78
 800cb66:	d806      	bhi.n	800cb76 <__ssvfiscanf_r+0xd2>
 800cb68:	2b57      	cmp	r3, #87	@ 0x57
 800cb6a:	d810      	bhi.n	800cb8e <__ssvfiscanf_r+0xea>
 800cb6c:	2b25      	cmp	r3, #37	@ 0x25
 800cb6e:	d05c      	beq.n	800cc2a <__ssvfiscanf_r+0x186>
 800cb70:	d856      	bhi.n	800cc20 <__ssvfiscanf_r+0x17c>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d074      	beq.n	800cc60 <__ssvfiscanf_r+0x1bc>
 800cb76:	2303      	movs	r3, #3
 800cb78:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cb7a:	230a      	movs	r3, #10
 800cb7c:	9342      	str	r3, [sp, #264]	@ 0x108
 800cb7e:	e087      	b.n	800cc90 <__ssvfiscanf_r+0x1ec>
 800cb80:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800cb82:	4655      	mov	r5, sl
 800cb84:	fb02 1103 	mla	r1, r2, r3, r1
 800cb88:	3930      	subs	r1, #48	@ 0x30
 800cb8a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800cb8c:	e7d2      	b.n	800cb34 <__ssvfiscanf_r+0x90>
 800cb8e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800cb92:	2a20      	cmp	r2, #32
 800cb94:	d8ef      	bhi.n	800cb76 <__ssvfiscanf_r+0xd2>
 800cb96:	a101      	add	r1, pc, #4	@ (adr r1, 800cb9c <__ssvfiscanf_r+0xf8>)
 800cb98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb9c:	0800cc6f 	.word	0x0800cc6f
 800cba0:	0800cb77 	.word	0x0800cb77
 800cba4:	0800cb77 	.word	0x0800cb77
 800cba8:	0800ccc9 	.word	0x0800ccc9
 800cbac:	0800cb77 	.word	0x0800cb77
 800cbb0:	0800cb77 	.word	0x0800cb77
 800cbb4:	0800cb77 	.word	0x0800cb77
 800cbb8:	0800cb77 	.word	0x0800cb77
 800cbbc:	0800cb77 	.word	0x0800cb77
 800cbc0:	0800cb77 	.word	0x0800cb77
 800cbc4:	0800cb77 	.word	0x0800cb77
 800cbc8:	0800ccdf 	.word	0x0800ccdf
 800cbcc:	0800ccc5 	.word	0x0800ccc5
 800cbd0:	0800cc27 	.word	0x0800cc27
 800cbd4:	0800cc27 	.word	0x0800cc27
 800cbd8:	0800cc27 	.word	0x0800cc27
 800cbdc:	0800cb77 	.word	0x0800cb77
 800cbe0:	0800cc81 	.word	0x0800cc81
 800cbe4:	0800cb77 	.word	0x0800cb77
 800cbe8:	0800cb77 	.word	0x0800cb77
 800cbec:	0800cb77 	.word	0x0800cb77
 800cbf0:	0800cb77 	.word	0x0800cb77
 800cbf4:	0800ccef 	.word	0x0800ccef
 800cbf8:	0800cc89 	.word	0x0800cc89
 800cbfc:	0800cc67 	.word	0x0800cc67
 800cc00:	0800cb77 	.word	0x0800cb77
 800cc04:	0800cb77 	.word	0x0800cb77
 800cc08:	0800cceb 	.word	0x0800cceb
 800cc0c:	0800cb77 	.word	0x0800cb77
 800cc10:	0800ccc5 	.word	0x0800ccc5
 800cc14:	0800cb77 	.word	0x0800cb77
 800cc18:	0800cb77 	.word	0x0800cb77
 800cc1c:	0800cc6f 	.word	0x0800cc6f
 800cc20:	3b45      	subs	r3, #69	@ 0x45
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d8a7      	bhi.n	800cb76 <__ssvfiscanf_r+0xd2>
 800cc26:	2305      	movs	r3, #5
 800cc28:	e031      	b.n	800cc8e <__ssvfiscanf_r+0x1ea>
 800cc2a:	6863      	ldr	r3, [r4, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dd0d      	ble.n	800cc4c <__ssvfiscanf_r+0x1a8>
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	781a      	ldrb	r2, [r3, #0]
 800cc34:	454a      	cmp	r2, r9
 800cc36:	f040 80a7 	bne.w	800cd88 <__ssvfiscanf_r+0x2e4>
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	6862      	ldr	r2, [r4, #4]
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800cc42:	3a01      	subs	r2, #1
 800cc44:	3301      	adds	r3, #1
 800cc46:	6062      	str	r2, [r4, #4]
 800cc48:	9345      	str	r3, [sp, #276]	@ 0x114
 800cc4a:	e752      	b.n	800caf2 <__ssvfiscanf_r+0x4e>
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4630      	mov	r0, r6
 800cc50:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cc52:	4798      	blx	r3
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d0eb      	beq.n	800cc30 <__ssvfiscanf_r+0x18c>
 800cc58:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	f040 808c 	bne.w	800cd78 <__ssvfiscanf_r+0x2d4>
 800cc60:	f04f 30ff 	mov.w	r0, #4294967295
 800cc64:	e08c      	b.n	800cd80 <__ssvfiscanf_r+0x2dc>
 800cc66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cc68:	f042 0220 	orr.w	r2, r2, #32
 800cc6c:	9241      	str	r2, [sp, #260]	@ 0x104
 800cc6e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cc70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc74:	9241      	str	r2, [sp, #260]	@ 0x104
 800cc76:	2210      	movs	r2, #16
 800cc78:	2b6e      	cmp	r3, #110	@ 0x6e
 800cc7a:	9242      	str	r2, [sp, #264]	@ 0x108
 800cc7c:	d902      	bls.n	800cc84 <__ssvfiscanf_r+0x1e0>
 800cc7e:	e005      	b.n	800cc8c <__ssvfiscanf_r+0x1e8>
 800cc80:	2300      	movs	r3, #0
 800cc82:	9342      	str	r3, [sp, #264]	@ 0x108
 800cc84:	2303      	movs	r3, #3
 800cc86:	e002      	b.n	800cc8e <__ssvfiscanf_r+0x1ea>
 800cc88:	2308      	movs	r3, #8
 800cc8a:	9342      	str	r3, [sp, #264]	@ 0x108
 800cc8c:	2304      	movs	r3, #4
 800cc8e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cc90:	6863      	ldr	r3, [r4, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	dd39      	ble.n	800cd0a <__ssvfiscanf_r+0x266>
 800cc96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cc98:	0659      	lsls	r1, r3, #25
 800cc9a:	d404      	bmi.n	800cca6 <__ssvfiscanf_r+0x202>
 800cc9c:	6823      	ldr	r3, [r4, #0]
 800cc9e:	781a      	ldrb	r2, [r3, #0]
 800cca0:	5cba      	ldrb	r2, [r7, r2]
 800cca2:	0712      	lsls	r2, r2, #28
 800cca4:	d438      	bmi.n	800cd18 <__ssvfiscanf_r+0x274>
 800cca6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	dc47      	bgt.n	800cd3c <__ssvfiscanf_r+0x298>
 800ccac:	466b      	mov	r3, sp
 800ccae:	4622      	mov	r2, r4
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	a941      	add	r1, sp, #260	@ 0x104
 800ccb4:	f000 f9aa 	bl	800d00c <_scanf_chars>
 800ccb8:	2801      	cmp	r0, #1
 800ccba:	d065      	beq.n	800cd88 <__ssvfiscanf_r+0x2e4>
 800ccbc:	2802      	cmp	r0, #2
 800ccbe:	f47f af18 	bne.w	800caf2 <__ssvfiscanf_r+0x4e>
 800ccc2:	e7c9      	b.n	800cc58 <__ssvfiscanf_r+0x1b4>
 800ccc4:	220a      	movs	r2, #10
 800ccc6:	e7d7      	b.n	800cc78 <__ssvfiscanf_r+0x1d4>
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4640      	mov	r0, r8
 800cccc:	f000 fb92 	bl	800d3f4 <__sccl>
 800ccd0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccd8:	9341      	str	r3, [sp, #260]	@ 0x104
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e7d7      	b.n	800cc8e <__ssvfiscanf_r+0x1ea>
 800ccde:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cce4:	9341      	str	r3, [sp, #260]	@ 0x104
 800cce6:	2300      	movs	r3, #0
 800cce8:	e7d1      	b.n	800cc8e <__ssvfiscanf_r+0x1ea>
 800ccea:	2302      	movs	r3, #2
 800ccec:	e7cf      	b.n	800cc8e <__ssvfiscanf_r+0x1ea>
 800ccee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ccf0:	06c3      	lsls	r3, r0, #27
 800ccf2:	f53f aefe 	bmi.w	800caf2 <__ssvfiscanf_r+0x4e>
 800ccf6:	9b00      	ldr	r3, [sp, #0]
 800ccf8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ccfa:	1d19      	adds	r1, r3, #4
 800ccfc:	9100      	str	r1, [sp, #0]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	07c0      	lsls	r0, r0, #31
 800cd02:	bf4c      	ite	mi
 800cd04:	801a      	strhmi	r2, [r3, #0]
 800cd06:	601a      	strpl	r2, [r3, #0]
 800cd08:	e6f3      	b.n	800caf2 <__ssvfiscanf_r+0x4e>
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cd10:	4798      	blx	r3
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d0bf      	beq.n	800cc96 <__ssvfiscanf_r+0x1f2>
 800cd16:	e79f      	b.n	800cc58 <__ssvfiscanf_r+0x1b4>
 800cd18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800cd1a:	3201      	adds	r2, #1
 800cd1c:	9245      	str	r2, [sp, #276]	@ 0x114
 800cd1e:	6862      	ldr	r2, [r4, #4]
 800cd20:	3a01      	subs	r2, #1
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	6062      	str	r2, [r4, #4]
 800cd26:	dd02      	ble.n	800cd2e <__ssvfiscanf_r+0x28a>
 800cd28:	3301      	adds	r3, #1
 800cd2a:	6023      	str	r3, [r4, #0]
 800cd2c:	e7b6      	b.n	800cc9c <__ssvfiscanf_r+0x1f8>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4630      	mov	r0, r6
 800cd32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cd34:	4798      	blx	r3
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d0b0      	beq.n	800cc9c <__ssvfiscanf_r+0x1f8>
 800cd3a:	e78d      	b.n	800cc58 <__ssvfiscanf_r+0x1b4>
 800cd3c:	2b04      	cmp	r3, #4
 800cd3e:	dc06      	bgt.n	800cd4e <__ssvfiscanf_r+0x2aa>
 800cd40:	466b      	mov	r3, sp
 800cd42:	4622      	mov	r2, r4
 800cd44:	4630      	mov	r0, r6
 800cd46:	a941      	add	r1, sp, #260	@ 0x104
 800cd48:	f000 f9ba 	bl	800d0c0 <_scanf_i>
 800cd4c:	e7b4      	b.n	800ccb8 <__ssvfiscanf_r+0x214>
 800cd4e:	4b09      	ldr	r3, [pc, #36]	@ (800cd74 <__ssvfiscanf_r+0x2d0>)
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f43f aece 	beq.w	800caf2 <__ssvfiscanf_r+0x4e>
 800cd56:	466b      	mov	r3, sp
 800cd58:	4622      	mov	r2, r4
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	a941      	add	r1, sp, #260	@ 0x104
 800cd5e:	f3af 8000 	nop.w
 800cd62:	e7a9      	b.n	800ccb8 <__ssvfiscanf_r+0x214>
 800cd64:	0800c9f1 	.word	0x0800c9f1
 800cd68:	0800ca6b 	.word	0x0800ca6b
 800cd6c:	0800e101 	.word	0x0800e101
 800cd70:	0800df94 	.word	0x0800df94
 800cd74:	00000000 	.word	0x00000000
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	065b      	lsls	r3, r3, #25
 800cd7c:	f53f af70 	bmi.w	800cc60 <__ssvfiscanf_r+0x1bc>
 800cd80:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800cd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd88:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cd8a:	e7f9      	b.n	800cd80 <__ssvfiscanf_r+0x2dc>

0800cd8c <__sfputc_r>:
 800cd8c:	6893      	ldr	r3, [r2, #8]
 800cd8e:	b410      	push	{r4}
 800cd90:	3b01      	subs	r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	6093      	str	r3, [r2, #8]
 800cd96:	da07      	bge.n	800cda8 <__sfputc_r+0x1c>
 800cd98:	6994      	ldr	r4, [r2, #24]
 800cd9a:	42a3      	cmp	r3, r4
 800cd9c:	db01      	blt.n	800cda2 <__sfputc_r+0x16>
 800cd9e:	290a      	cmp	r1, #10
 800cda0:	d102      	bne.n	800cda8 <__sfputc_r+0x1c>
 800cda2:	bc10      	pop	{r4}
 800cda4:	f000 bb97 	b.w	800d4d6 <__swbuf_r>
 800cda8:	6813      	ldr	r3, [r2, #0]
 800cdaa:	1c58      	adds	r0, r3, #1
 800cdac:	6010      	str	r0, [r2, #0]
 800cdae:	7019      	strb	r1, [r3, #0]
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	bc10      	pop	{r4}
 800cdb4:	4770      	bx	lr

0800cdb6 <__sfputs_r>:
 800cdb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb8:	4606      	mov	r6, r0
 800cdba:	460f      	mov	r7, r1
 800cdbc:	4614      	mov	r4, r2
 800cdbe:	18d5      	adds	r5, r2, r3
 800cdc0:	42ac      	cmp	r4, r5
 800cdc2:	d101      	bne.n	800cdc8 <__sfputs_r+0x12>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e007      	b.n	800cdd8 <__sfputs_r+0x22>
 800cdc8:	463a      	mov	r2, r7
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd0:	f7ff ffdc 	bl	800cd8c <__sfputc_r>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d1f3      	bne.n	800cdc0 <__sfputs_r+0xa>
 800cdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cddc <_vfiprintf_r>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	460d      	mov	r5, r1
 800cde2:	4614      	mov	r4, r2
 800cde4:	4698      	mov	r8, r3
 800cde6:	4606      	mov	r6, r0
 800cde8:	b09d      	sub	sp, #116	@ 0x74
 800cdea:	b118      	cbz	r0, 800cdf4 <_vfiprintf_r+0x18>
 800cdec:	6a03      	ldr	r3, [r0, #32]
 800cdee:	b90b      	cbnz	r3, 800cdf4 <_vfiprintf_r+0x18>
 800cdf0:	f7fd ffa8 	bl	800ad44 <__sinit>
 800cdf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdf6:	07d9      	lsls	r1, r3, #31
 800cdf8:	d405      	bmi.n	800ce06 <_vfiprintf_r+0x2a>
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	059a      	lsls	r2, r3, #22
 800cdfe:	d402      	bmi.n	800ce06 <_vfiprintf_r+0x2a>
 800ce00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce02:	f7fe f9a8 	bl	800b156 <__retarget_lock_acquire_recursive>
 800ce06:	89ab      	ldrh	r3, [r5, #12]
 800ce08:	071b      	lsls	r3, r3, #28
 800ce0a:	d501      	bpl.n	800ce10 <_vfiprintf_r+0x34>
 800ce0c:	692b      	ldr	r3, [r5, #16]
 800ce0e:	b99b      	cbnz	r3, 800ce38 <_vfiprintf_r+0x5c>
 800ce10:	4629      	mov	r1, r5
 800ce12:	4630      	mov	r0, r6
 800ce14:	f000 fb9e 	bl	800d554 <__swsetup_r>
 800ce18:	b170      	cbz	r0, 800ce38 <_vfiprintf_r+0x5c>
 800ce1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce1c:	07dc      	lsls	r4, r3, #31
 800ce1e:	d504      	bpl.n	800ce2a <_vfiprintf_r+0x4e>
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
 800ce24:	b01d      	add	sp, #116	@ 0x74
 800ce26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2a:	89ab      	ldrh	r3, [r5, #12]
 800ce2c:	0598      	lsls	r0, r3, #22
 800ce2e:	d4f7      	bmi.n	800ce20 <_vfiprintf_r+0x44>
 800ce30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce32:	f7fe f991 	bl	800b158 <__retarget_lock_release_recursive>
 800ce36:	e7f3      	b.n	800ce20 <_vfiprintf_r+0x44>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce3c:	2320      	movs	r3, #32
 800ce3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce42:	2330      	movs	r3, #48	@ 0x30
 800ce44:	f04f 0901 	mov.w	r9, #1
 800ce48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cff8 <_vfiprintf_r+0x21c>
 800ce50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce54:	4623      	mov	r3, r4
 800ce56:	469a      	mov	sl, r3
 800ce58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce5c:	b10a      	cbz	r2, 800ce62 <_vfiprintf_r+0x86>
 800ce5e:	2a25      	cmp	r2, #37	@ 0x25
 800ce60:	d1f9      	bne.n	800ce56 <_vfiprintf_r+0x7a>
 800ce62:	ebba 0b04 	subs.w	fp, sl, r4
 800ce66:	d00b      	beq.n	800ce80 <_vfiprintf_r+0xa4>
 800ce68:	465b      	mov	r3, fp
 800ce6a:	4622      	mov	r2, r4
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ffa1 	bl	800cdb6 <__sfputs_r>
 800ce74:	3001      	adds	r0, #1
 800ce76:	f000 80a7 	beq.w	800cfc8 <_vfiprintf_r+0x1ec>
 800ce7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce7c:	445a      	add	r2, fp
 800ce7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce80:	f89a 3000 	ldrb.w	r3, [sl]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 809f 	beq.w	800cfc8 <_vfiprintf_r+0x1ec>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce94:	f10a 0a01 	add.w	sl, sl, #1
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	9307      	str	r3, [sp, #28]
 800ce9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cea0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cea2:	4654      	mov	r4, sl
 800cea4:	2205      	movs	r2, #5
 800cea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceaa:	4853      	ldr	r0, [pc, #332]	@ (800cff8 <_vfiprintf_r+0x21c>)
 800ceac:	f7fe f955 	bl	800b15a <memchr>
 800ceb0:	9a04      	ldr	r2, [sp, #16]
 800ceb2:	b9d8      	cbnz	r0, 800ceec <_vfiprintf_r+0x110>
 800ceb4:	06d1      	lsls	r1, r2, #27
 800ceb6:	bf44      	itt	mi
 800ceb8:	2320      	movmi	r3, #32
 800ceba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cebe:	0713      	lsls	r3, r2, #28
 800cec0:	bf44      	itt	mi
 800cec2:	232b      	movmi	r3, #43	@ 0x2b
 800cec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cec8:	f89a 3000 	ldrb.w	r3, [sl]
 800cecc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cece:	d015      	beq.n	800cefc <_vfiprintf_r+0x120>
 800ced0:	4654      	mov	r4, sl
 800ced2:	2000      	movs	r0, #0
 800ced4:	f04f 0c0a 	mov.w	ip, #10
 800ced8:	9a07      	ldr	r2, [sp, #28]
 800ceda:	4621      	mov	r1, r4
 800cedc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cee0:	3b30      	subs	r3, #48	@ 0x30
 800cee2:	2b09      	cmp	r3, #9
 800cee4:	d94b      	bls.n	800cf7e <_vfiprintf_r+0x1a2>
 800cee6:	b1b0      	cbz	r0, 800cf16 <_vfiprintf_r+0x13a>
 800cee8:	9207      	str	r2, [sp, #28]
 800ceea:	e014      	b.n	800cf16 <_vfiprintf_r+0x13a>
 800ceec:	eba0 0308 	sub.w	r3, r0, r8
 800cef0:	fa09 f303 	lsl.w	r3, r9, r3
 800cef4:	4313      	orrs	r3, r2
 800cef6:	46a2      	mov	sl, r4
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	e7d2      	b.n	800cea2 <_vfiprintf_r+0xc6>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	1d19      	adds	r1, r3, #4
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	9103      	str	r1, [sp, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfbb      	ittet	lt
 800cf08:	425b      	neglt	r3, r3
 800cf0a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf0e:	9307      	strge	r3, [sp, #28]
 800cf10:	9307      	strlt	r3, [sp, #28]
 800cf12:	bfb8      	it	lt
 800cf14:	9204      	strlt	r2, [sp, #16]
 800cf16:	7823      	ldrb	r3, [r4, #0]
 800cf18:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf1a:	d10a      	bne.n	800cf32 <_vfiprintf_r+0x156>
 800cf1c:	7863      	ldrb	r3, [r4, #1]
 800cf1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf20:	d132      	bne.n	800cf88 <_vfiprintf_r+0x1ac>
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	3402      	adds	r4, #2
 800cf26:	1d1a      	adds	r2, r3, #4
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	9203      	str	r2, [sp, #12]
 800cf2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cffc <_vfiprintf_r+0x220>
 800cf36:	2203      	movs	r2, #3
 800cf38:	4650      	mov	r0, sl
 800cf3a:	7821      	ldrb	r1, [r4, #0]
 800cf3c:	f7fe f90d 	bl	800b15a <memchr>
 800cf40:	b138      	cbz	r0, 800cf52 <_vfiprintf_r+0x176>
 800cf42:	2240      	movs	r2, #64	@ 0x40
 800cf44:	9b04      	ldr	r3, [sp, #16]
 800cf46:	eba0 000a 	sub.w	r0, r0, sl
 800cf4a:	4082      	lsls	r2, r0
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	3401      	adds	r4, #1
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf56:	2206      	movs	r2, #6
 800cf58:	4829      	ldr	r0, [pc, #164]	@ (800d000 <_vfiprintf_r+0x224>)
 800cf5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf5e:	f7fe f8fc 	bl	800b15a <memchr>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d03f      	beq.n	800cfe6 <_vfiprintf_r+0x20a>
 800cf66:	4b27      	ldr	r3, [pc, #156]	@ (800d004 <_vfiprintf_r+0x228>)
 800cf68:	bb1b      	cbnz	r3, 800cfb2 <_vfiprintf_r+0x1d6>
 800cf6a:	9b03      	ldr	r3, [sp, #12]
 800cf6c:	3307      	adds	r3, #7
 800cf6e:	f023 0307 	bic.w	r3, r3, #7
 800cf72:	3308      	adds	r3, #8
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf78:	443b      	add	r3, r7
 800cf7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf7c:	e76a      	b.n	800ce54 <_vfiprintf_r+0x78>
 800cf7e:	460c      	mov	r4, r1
 800cf80:	2001      	movs	r0, #1
 800cf82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf86:	e7a8      	b.n	800ceda <_vfiprintf_r+0xfe>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f04f 0c0a 	mov.w	ip, #10
 800cf8e:	4619      	mov	r1, r3
 800cf90:	3401      	adds	r4, #1
 800cf92:	9305      	str	r3, [sp, #20]
 800cf94:	4620      	mov	r0, r4
 800cf96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf9a:	3a30      	subs	r2, #48	@ 0x30
 800cf9c:	2a09      	cmp	r2, #9
 800cf9e:	d903      	bls.n	800cfa8 <_vfiprintf_r+0x1cc>
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0c6      	beq.n	800cf32 <_vfiprintf_r+0x156>
 800cfa4:	9105      	str	r1, [sp, #20]
 800cfa6:	e7c4      	b.n	800cf32 <_vfiprintf_r+0x156>
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	2301      	movs	r3, #1
 800cfac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfb0:	e7f0      	b.n	800cf94 <_vfiprintf_r+0x1b8>
 800cfb2:	ab03      	add	r3, sp, #12
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	4630      	mov	r0, r6
 800cfba:	4b13      	ldr	r3, [pc, #76]	@ (800d008 <_vfiprintf_r+0x22c>)
 800cfbc:	a904      	add	r1, sp, #16
 800cfbe:	f7fd fa79 	bl	800a4b4 <_printf_float>
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	1c78      	adds	r0, r7, #1
 800cfc6:	d1d6      	bne.n	800cf76 <_vfiprintf_r+0x19a>
 800cfc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfca:	07d9      	lsls	r1, r3, #31
 800cfcc:	d405      	bmi.n	800cfda <_vfiprintf_r+0x1fe>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	059a      	lsls	r2, r3, #22
 800cfd2:	d402      	bmi.n	800cfda <_vfiprintf_r+0x1fe>
 800cfd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfd6:	f7fe f8bf 	bl	800b158 <__retarget_lock_release_recursive>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	065b      	lsls	r3, r3, #25
 800cfde:	f53f af1f 	bmi.w	800ce20 <_vfiprintf_r+0x44>
 800cfe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfe4:	e71e      	b.n	800ce24 <_vfiprintf_r+0x48>
 800cfe6:	ab03      	add	r3, sp, #12
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4630      	mov	r0, r6
 800cfee:	4b06      	ldr	r3, [pc, #24]	@ (800d008 <_vfiprintf_r+0x22c>)
 800cff0:	a904      	add	r1, sp, #16
 800cff2:	f7fd fcfd 	bl	800a9f0 <_printf_i>
 800cff6:	e7e4      	b.n	800cfc2 <_vfiprintf_r+0x1e6>
 800cff8:	0800df8e 	.word	0x0800df8e
 800cffc:	0800df94 	.word	0x0800df94
 800d000:	0800df98 	.word	0x0800df98
 800d004:	0800a4b5 	.word	0x0800a4b5
 800d008:	0800cdb7 	.word	0x0800cdb7

0800d00c <_scanf_chars>:
 800d00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d010:	4615      	mov	r5, r2
 800d012:	688a      	ldr	r2, [r1, #8]
 800d014:	4680      	mov	r8, r0
 800d016:	460c      	mov	r4, r1
 800d018:	b932      	cbnz	r2, 800d028 <_scanf_chars+0x1c>
 800d01a:	698a      	ldr	r2, [r1, #24]
 800d01c:	2a00      	cmp	r2, #0
 800d01e:	bf14      	ite	ne
 800d020:	f04f 32ff 	movne.w	r2, #4294967295
 800d024:	2201      	moveq	r2, #1
 800d026:	608a      	str	r2, [r1, #8]
 800d028:	2700      	movs	r7, #0
 800d02a:	6822      	ldr	r2, [r4, #0]
 800d02c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800d0bc <_scanf_chars+0xb0>
 800d030:	06d1      	lsls	r1, r2, #27
 800d032:	bf5f      	itttt	pl
 800d034:	681a      	ldrpl	r2, [r3, #0]
 800d036:	1d11      	addpl	r1, r2, #4
 800d038:	6019      	strpl	r1, [r3, #0]
 800d03a:	6816      	ldrpl	r6, [r2, #0]
 800d03c:	69a0      	ldr	r0, [r4, #24]
 800d03e:	b188      	cbz	r0, 800d064 <_scanf_chars+0x58>
 800d040:	2801      	cmp	r0, #1
 800d042:	d107      	bne.n	800d054 <_scanf_chars+0x48>
 800d044:	682b      	ldr	r3, [r5, #0]
 800d046:	781a      	ldrb	r2, [r3, #0]
 800d048:	6963      	ldr	r3, [r4, #20]
 800d04a:	5c9b      	ldrb	r3, [r3, r2]
 800d04c:	b953      	cbnz	r3, 800d064 <_scanf_chars+0x58>
 800d04e:	2f00      	cmp	r7, #0
 800d050:	d031      	beq.n	800d0b6 <_scanf_chars+0xaa>
 800d052:	e022      	b.n	800d09a <_scanf_chars+0x8e>
 800d054:	2802      	cmp	r0, #2
 800d056:	d120      	bne.n	800d09a <_scanf_chars+0x8e>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d060:	071b      	lsls	r3, r3, #28
 800d062:	d41a      	bmi.n	800d09a <_scanf_chars+0x8e>
 800d064:	6823      	ldr	r3, [r4, #0]
 800d066:	3701      	adds	r7, #1
 800d068:	06da      	lsls	r2, r3, #27
 800d06a:	bf5e      	ittt	pl
 800d06c:	682b      	ldrpl	r3, [r5, #0]
 800d06e:	781b      	ldrbpl	r3, [r3, #0]
 800d070:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d074:	682a      	ldr	r2, [r5, #0]
 800d076:	686b      	ldr	r3, [r5, #4]
 800d078:	3201      	adds	r2, #1
 800d07a:	602a      	str	r2, [r5, #0]
 800d07c:	68a2      	ldr	r2, [r4, #8]
 800d07e:	3b01      	subs	r3, #1
 800d080:	3a01      	subs	r2, #1
 800d082:	606b      	str	r3, [r5, #4]
 800d084:	60a2      	str	r2, [r4, #8]
 800d086:	b142      	cbz	r2, 800d09a <_scanf_chars+0x8e>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	dcd7      	bgt.n	800d03c <_scanf_chars+0x30>
 800d08c:	4629      	mov	r1, r5
 800d08e:	4640      	mov	r0, r8
 800d090:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d094:	4798      	blx	r3
 800d096:	2800      	cmp	r0, #0
 800d098:	d0d0      	beq.n	800d03c <_scanf_chars+0x30>
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	f013 0310 	ands.w	r3, r3, #16
 800d0a0:	d105      	bne.n	800d0ae <_scanf_chars+0xa2>
 800d0a2:	68e2      	ldr	r2, [r4, #12]
 800d0a4:	3201      	adds	r2, #1
 800d0a6:	60e2      	str	r2, [r4, #12]
 800d0a8:	69a2      	ldr	r2, [r4, #24]
 800d0aa:	b102      	cbz	r2, 800d0ae <_scanf_chars+0xa2>
 800d0ac:	7033      	strb	r3, [r6, #0]
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	6923      	ldr	r3, [r4, #16]
 800d0b2:	443b      	add	r3, r7
 800d0b4:	6123      	str	r3, [r4, #16]
 800d0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ba:	bf00      	nop
 800d0bc:	0800e101 	.word	0x0800e101

0800d0c0 <_scanf_i>:
 800d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	4698      	mov	r8, r3
 800d0c8:	4b72      	ldr	r3, [pc, #456]	@ (800d294 <_scanf_i+0x1d4>)
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	4682      	mov	sl, r0
 800d0ce:	4616      	mov	r6, r2
 800d0d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0d4:	ab03      	add	r3, sp, #12
 800d0d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d0da:	4b6f      	ldr	r3, [pc, #444]	@ (800d298 <_scanf_i+0x1d8>)
 800d0dc:	69a1      	ldr	r1, [r4, #24]
 800d0de:	4a6f      	ldr	r2, [pc, #444]	@ (800d29c <_scanf_i+0x1dc>)
 800d0e0:	4627      	mov	r7, r4
 800d0e2:	2903      	cmp	r1, #3
 800d0e4:	bf08      	it	eq
 800d0e6:	461a      	moveq	r2, r3
 800d0e8:	68a3      	ldr	r3, [r4, #8]
 800d0ea:	9201      	str	r2, [sp, #4]
 800d0ec:	1e5a      	subs	r2, r3, #1
 800d0ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d0f2:	bf81      	itttt	hi
 800d0f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d0f8:	eb03 0905 	addhi.w	r9, r3, r5
 800d0fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d100:	60a3      	strhi	r3, [r4, #8]
 800d102:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d106:	bf98      	it	ls
 800d108:	f04f 0900 	movls.w	r9, #0
 800d10c:	463d      	mov	r5, r7
 800d10e:	f04f 0b00 	mov.w	fp, #0
 800d112:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	6831      	ldr	r1, [r6, #0]
 800d11a:	ab03      	add	r3, sp, #12
 800d11c:	2202      	movs	r2, #2
 800d11e:	7809      	ldrb	r1, [r1, #0]
 800d120:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d124:	f7fe f819 	bl	800b15a <memchr>
 800d128:	b328      	cbz	r0, 800d176 <_scanf_i+0xb6>
 800d12a:	f1bb 0f01 	cmp.w	fp, #1
 800d12e:	d159      	bne.n	800d1e4 <_scanf_i+0x124>
 800d130:	6862      	ldr	r2, [r4, #4]
 800d132:	b92a      	cbnz	r2, 800d140 <_scanf_i+0x80>
 800d134:	2108      	movs	r1, #8
 800d136:	6822      	ldr	r2, [r4, #0]
 800d138:	6061      	str	r1, [r4, #4]
 800d13a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d13e:	6022      	str	r2, [r4, #0]
 800d140:	6822      	ldr	r2, [r4, #0]
 800d142:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d146:	6022      	str	r2, [r4, #0]
 800d148:	68a2      	ldr	r2, [r4, #8]
 800d14a:	1e51      	subs	r1, r2, #1
 800d14c:	60a1      	str	r1, [r4, #8]
 800d14e:	b192      	cbz	r2, 800d176 <_scanf_i+0xb6>
 800d150:	6832      	ldr	r2, [r6, #0]
 800d152:	1c51      	adds	r1, r2, #1
 800d154:	6031      	str	r1, [r6, #0]
 800d156:	7812      	ldrb	r2, [r2, #0]
 800d158:	f805 2b01 	strb.w	r2, [r5], #1
 800d15c:	6872      	ldr	r2, [r6, #4]
 800d15e:	3a01      	subs	r2, #1
 800d160:	2a00      	cmp	r2, #0
 800d162:	6072      	str	r2, [r6, #4]
 800d164:	dc07      	bgt.n	800d176 <_scanf_i+0xb6>
 800d166:	4631      	mov	r1, r6
 800d168:	4650      	mov	r0, sl
 800d16a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d16e:	4790      	blx	r2
 800d170:	2800      	cmp	r0, #0
 800d172:	f040 8085 	bne.w	800d280 <_scanf_i+0x1c0>
 800d176:	f10b 0b01 	add.w	fp, fp, #1
 800d17a:	f1bb 0f03 	cmp.w	fp, #3
 800d17e:	d1cb      	bne.n	800d118 <_scanf_i+0x58>
 800d180:	6863      	ldr	r3, [r4, #4]
 800d182:	b90b      	cbnz	r3, 800d188 <_scanf_i+0xc8>
 800d184:	230a      	movs	r3, #10
 800d186:	6063      	str	r3, [r4, #4]
 800d188:	6863      	ldr	r3, [r4, #4]
 800d18a:	4945      	ldr	r1, [pc, #276]	@ (800d2a0 <_scanf_i+0x1e0>)
 800d18c:	6960      	ldr	r0, [r4, #20]
 800d18e:	1ac9      	subs	r1, r1, r3
 800d190:	f000 f930 	bl	800d3f4 <__sccl>
 800d194:	f04f 0b00 	mov.w	fp, #0
 800d198:	68a3      	ldr	r3, [r4, #8]
 800d19a:	6822      	ldr	r2, [r4, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d03d      	beq.n	800d21c <_scanf_i+0x15c>
 800d1a0:	6831      	ldr	r1, [r6, #0]
 800d1a2:	6960      	ldr	r0, [r4, #20]
 800d1a4:	f891 c000 	ldrb.w	ip, [r1]
 800d1a8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d035      	beq.n	800d21c <_scanf_i+0x15c>
 800d1b0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d1b4:	d124      	bne.n	800d200 <_scanf_i+0x140>
 800d1b6:	0510      	lsls	r0, r2, #20
 800d1b8:	d522      	bpl.n	800d200 <_scanf_i+0x140>
 800d1ba:	f10b 0b01 	add.w	fp, fp, #1
 800d1be:	f1b9 0f00 	cmp.w	r9, #0
 800d1c2:	d003      	beq.n	800d1cc <_scanf_i+0x10c>
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	f109 39ff 	add.w	r9, r9, #4294967295
 800d1ca:	60a3      	str	r3, [r4, #8]
 800d1cc:	6873      	ldr	r3, [r6, #4]
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	6073      	str	r3, [r6, #4]
 800d1d4:	dd1b      	ble.n	800d20e <_scanf_i+0x14e>
 800d1d6:	6833      	ldr	r3, [r6, #0]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	6033      	str	r3, [r6, #0]
 800d1dc:	68a3      	ldr	r3, [r4, #8]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	60a3      	str	r3, [r4, #8]
 800d1e2:	e7d9      	b.n	800d198 <_scanf_i+0xd8>
 800d1e4:	f1bb 0f02 	cmp.w	fp, #2
 800d1e8:	d1ae      	bne.n	800d148 <_scanf_i+0x88>
 800d1ea:	6822      	ldr	r2, [r4, #0]
 800d1ec:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d1f0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d1f4:	d1c4      	bne.n	800d180 <_scanf_i+0xc0>
 800d1f6:	2110      	movs	r1, #16
 800d1f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d1fc:	6061      	str	r1, [r4, #4]
 800d1fe:	e7a2      	b.n	800d146 <_scanf_i+0x86>
 800d200:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d204:	6022      	str	r2, [r4, #0]
 800d206:	780b      	ldrb	r3, [r1, #0]
 800d208:	f805 3b01 	strb.w	r3, [r5], #1
 800d20c:	e7de      	b.n	800d1cc <_scanf_i+0x10c>
 800d20e:	4631      	mov	r1, r6
 800d210:	4650      	mov	r0, sl
 800d212:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d216:	4798      	blx	r3
 800d218:	2800      	cmp	r0, #0
 800d21a:	d0df      	beq.n	800d1dc <_scanf_i+0x11c>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	05d9      	lsls	r1, r3, #23
 800d220:	d50d      	bpl.n	800d23e <_scanf_i+0x17e>
 800d222:	42bd      	cmp	r5, r7
 800d224:	d909      	bls.n	800d23a <_scanf_i+0x17a>
 800d226:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d22a:	4632      	mov	r2, r6
 800d22c:	4650      	mov	r0, sl
 800d22e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d232:	f105 39ff 	add.w	r9, r5, #4294967295
 800d236:	4798      	blx	r3
 800d238:	464d      	mov	r5, r9
 800d23a:	42bd      	cmp	r5, r7
 800d23c:	d028      	beq.n	800d290 <_scanf_i+0x1d0>
 800d23e:	6822      	ldr	r2, [r4, #0]
 800d240:	f012 0210 	ands.w	r2, r2, #16
 800d244:	d113      	bne.n	800d26e <_scanf_i+0x1ae>
 800d246:	702a      	strb	r2, [r5, #0]
 800d248:	4639      	mov	r1, r7
 800d24a:	6863      	ldr	r3, [r4, #4]
 800d24c:	4650      	mov	r0, sl
 800d24e:	9e01      	ldr	r6, [sp, #4]
 800d250:	47b0      	blx	r6
 800d252:	f8d8 3000 	ldr.w	r3, [r8]
 800d256:	6821      	ldr	r1, [r4, #0]
 800d258:	1d1a      	adds	r2, r3, #4
 800d25a:	f8c8 2000 	str.w	r2, [r8]
 800d25e:	f011 0f20 	tst.w	r1, #32
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	d00f      	beq.n	800d286 <_scanf_i+0x1c6>
 800d266:	6018      	str	r0, [r3, #0]
 800d268:	68e3      	ldr	r3, [r4, #12]
 800d26a:	3301      	adds	r3, #1
 800d26c:	60e3      	str	r3, [r4, #12]
 800d26e:	2000      	movs	r0, #0
 800d270:	6923      	ldr	r3, [r4, #16]
 800d272:	1bed      	subs	r5, r5, r7
 800d274:	445d      	add	r5, fp
 800d276:	442b      	add	r3, r5
 800d278:	6123      	str	r3, [r4, #16]
 800d27a:	b007      	add	sp, #28
 800d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d280:	f04f 0b00 	mov.w	fp, #0
 800d284:	e7ca      	b.n	800d21c <_scanf_i+0x15c>
 800d286:	07ca      	lsls	r2, r1, #31
 800d288:	bf4c      	ite	mi
 800d28a:	8018      	strhmi	r0, [r3, #0]
 800d28c:	6018      	strpl	r0, [r3, #0]
 800d28e:	e7eb      	b.n	800d268 <_scanf_i+0x1a8>
 800d290:	2001      	movs	r0, #1
 800d292:	e7f2      	b.n	800d27a <_scanf_i+0x1ba>
 800d294:	0800dce0 	.word	0x0800dce0
 800d298:	0800d82d 	.word	0x0800d82d
 800d29c:	0800d90d 	.word	0x0800d90d
 800d2a0:	0800dfaf 	.word	0x0800dfaf

0800d2a4 <__sflush_r>:
 800d2a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	0716      	lsls	r6, r2, #28
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	d454      	bmi.n	800d35c <__sflush_r+0xb8>
 800d2b2:	684b      	ldr	r3, [r1, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	dc02      	bgt.n	800d2be <__sflush_r+0x1a>
 800d2b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	dd48      	ble.n	800d350 <__sflush_r+0xac>
 800d2be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2c0:	2e00      	cmp	r6, #0
 800d2c2:	d045      	beq.n	800d350 <__sflush_r+0xac>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d2ca:	682f      	ldr	r7, [r5, #0]
 800d2cc:	6a21      	ldr	r1, [r4, #32]
 800d2ce:	602b      	str	r3, [r5, #0]
 800d2d0:	d030      	beq.n	800d334 <__sflush_r+0x90>
 800d2d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	0759      	lsls	r1, r3, #29
 800d2d8:	d505      	bpl.n	800d2e6 <__sflush_r+0x42>
 800d2da:	6863      	ldr	r3, [r4, #4]
 800d2dc:	1ad2      	subs	r2, r2, r3
 800d2de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2e0:	b10b      	cbz	r3, 800d2e6 <__sflush_r+0x42>
 800d2e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2e4:	1ad2      	subs	r2, r2, r3
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2ec:	6a21      	ldr	r1, [r4, #32]
 800d2ee:	47b0      	blx	r6
 800d2f0:	1c43      	adds	r3, r0, #1
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	d106      	bne.n	800d304 <__sflush_r+0x60>
 800d2f6:	6829      	ldr	r1, [r5, #0]
 800d2f8:	291d      	cmp	r1, #29
 800d2fa:	d82b      	bhi.n	800d354 <__sflush_r+0xb0>
 800d2fc:	4a28      	ldr	r2, [pc, #160]	@ (800d3a0 <__sflush_r+0xfc>)
 800d2fe:	40ca      	lsrs	r2, r1
 800d300:	07d6      	lsls	r6, r2, #31
 800d302:	d527      	bpl.n	800d354 <__sflush_r+0xb0>
 800d304:	2200      	movs	r2, #0
 800d306:	6062      	str	r2, [r4, #4]
 800d308:	6922      	ldr	r2, [r4, #16]
 800d30a:	04d9      	lsls	r1, r3, #19
 800d30c:	6022      	str	r2, [r4, #0]
 800d30e:	d504      	bpl.n	800d31a <__sflush_r+0x76>
 800d310:	1c42      	adds	r2, r0, #1
 800d312:	d101      	bne.n	800d318 <__sflush_r+0x74>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	b903      	cbnz	r3, 800d31a <__sflush_r+0x76>
 800d318:	6560      	str	r0, [r4, #84]	@ 0x54
 800d31a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d31c:	602f      	str	r7, [r5, #0]
 800d31e:	b1b9      	cbz	r1, 800d350 <__sflush_r+0xac>
 800d320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d324:	4299      	cmp	r1, r3
 800d326:	d002      	beq.n	800d32e <__sflush_r+0x8a>
 800d328:	4628      	mov	r0, r5
 800d32a:	f7fe fd91 	bl	800be50 <_free_r>
 800d32e:	2300      	movs	r3, #0
 800d330:	6363      	str	r3, [r4, #52]	@ 0x34
 800d332:	e00d      	b.n	800d350 <__sflush_r+0xac>
 800d334:	2301      	movs	r3, #1
 800d336:	4628      	mov	r0, r5
 800d338:	47b0      	blx	r6
 800d33a:	4602      	mov	r2, r0
 800d33c:	1c50      	adds	r0, r2, #1
 800d33e:	d1c9      	bne.n	800d2d4 <__sflush_r+0x30>
 800d340:	682b      	ldr	r3, [r5, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d0c6      	beq.n	800d2d4 <__sflush_r+0x30>
 800d346:	2b1d      	cmp	r3, #29
 800d348:	d001      	beq.n	800d34e <__sflush_r+0xaa>
 800d34a:	2b16      	cmp	r3, #22
 800d34c:	d11d      	bne.n	800d38a <__sflush_r+0xe6>
 800d34e:	602f      	str	r7, [r5, #0]
 800d350:	2000      	movs	r0, #0
 800d352:	e021      	b.n	800d398 <__sflush_r+0xf4>
 800d354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d358:	b21b      	sxth	r3, r3
 800d35a:	e01a      	b.n	800d392 <__sflush_r+0xee>
 800d35c:	690f      	ldr	r7, [r1, #16]
 800d35e:	2f00      	cmp	r7, #0
 800d360:	d0f6      	beq.n	800d350 <__sflush_r+0xac>
 800d362:	0793      	lsls	r3, r2, #30
 800d364:	bf18      	it	ne
 800d366:	2300      	movne	r3, #0
 800d368:	680e      	ldr	r6, [r1, #0]
 800d36a:	bf08      	it	eq
 800d36c:	694b      	ldreq	r3, [r1, #20]
 800d36e:	1bf6      	subs	r6, r6, r7
 800d370:	600f      	str	r7, [r1, #0]
 800d372:	608b      	str	r3, [r1, #8]
 800d374:	2e00      	cmp	r6, #0
 800d376:	ddeb      	ble.n	800d350 <__sflush_r+0xac>
 800d378:	4633      	mov	r3, r6
 800d37a:	463a      	mov	r2, r7
 800d37c:	4628      	mov	r0, r5
 800d37e:	6a21      	ldr	r1, [r4, #32]
 800d380:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d384:	47e0      	blx	ip
 800d386:	2800      	cmp	r0, #0
 800d388:	dc07      	bgt.n	800d39a <__sflush_r+0xf6>
 800d38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d392:	f04f 30ff 	mov.w	r0, #4294967295
 800d396:	81a3      	strh	r3, [r4, #12]
 800d398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d39a:	4407      	add	r7, r0
 800d39c:	1a36      	subs	r6, r6, r0
 800d39e:	e7e9      	b.n	800d374 <__sflush_r+0xd0>
 800d3a0:	20400001 	.word	0x20400001

0800d3a4 <_fflush_r>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	690b      	ldr	r3, [r1, #16]
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	b913      	cbnz	r3, 800d3b4 <_fflush_r+0x10>
 800d3ae:	2500      	movs	r5, #0
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	bd38      	pop	{r3, r4, r5, pc}
 800d3b4:	b118      	cbz	r0, 800d3be <_fflush_r+0x1a>
 800d3b6:	6a03      	ldr	r3, [r0, #32]
 800d3b8:	b90b      	cbnz	r3, 800d3be <_fflush_r+0x1a>
 800d3ba:	f7fd fcc3 	bl	800ad44 <__sinit>
 800d3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d0f3      	beq.n	800d3ae <_fflush_r+0xa>
 800d3c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d3c8:	07d0      	lsls	r0, r2, #31
 800d3ca:	d404      	bmi.n	800d3d6 <_fflush_r+0x32>
 800d3cc:	0599      	lsls	r1, r3, #22
 800d3ce:	d402      	bmi.n	800d3d6 <_fflush_r+0x32>
 800d3d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3d2:	f7fd fec0 	bl	800b156 <__retarget_lock_acquire_recursive>
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	4621      	mov	r1, r4
 800d3da:	f7ff ff63 	bl	800d2a4 <__sflush_r>
 800d3de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	07da      	lsls	r2, r3, #31
 800d3e4:	d4e4      	bmi.n	800d3b0 <_fflush_r+0xc>
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	059b      	lsls	r3, r3, #22
 800d3ea:	d4e1      	bmi.n	800d3b0 <_fflush_r+0xc>
 800d3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3ee:	f7fd feb3 	bl	800b158 <__retarget_lock_release_recursive>
 800d3f2:	e7dd      	b.n	800d3b0 <_fflush_r+0xc>

0800d3f4 <__sccl>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	780b      	ldrb	r3, [r1, #0]
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	2b5e      	cmp	r3, #94	@ 0x5e
 800d3fc:	bf0b      	itete	eq
 800d3fe:	784b      	ldrbeq	r3, [r1, #1]
 800d400:	1c4a      	addne	r2, r1, #1
 800d402:	1c8a      	addeq	r2, r1, #2
 800d404:	2100      	movne	r1, #0
 800d406:	bf08      	it	eq
 800d408:	2101      	moveq	r1, #1
 800d40a:	3801      	subs	r0, #1
 800d40c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d410:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d414:	42a8      	cmp	r0, r5
 800d416:	d1fb      	bne.n	800d410 <__sccl+0x1c>
 800d418:	b90b      	cbnz	r3, 800d41e <__sccl+0x2a>
 800d41a:	1e50      	subs	r0, r2, #1
 800d41c:	bd70      	pop	{r4, r5, r6, pc}
 800d41e:	f081 0101 	eor.w	r1, r1, #1
 800d422:	4610      	mov	r0, r2
 800d424:	54e1      	strb	r1, [r4, r3]
 800d426:	4602      	mov	r2, r0
 800d428:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d42c:	2d2d      	cmp	r5, #45	@ 0x2d
 800d42e:	d005      	beq.n	800d43c <__sccl+0x48>
 800d430:	2d5d      	cmp	r5, #93	@ 0x5d
 800d432:	d016      	beq.n	800d462 <__sccl+0x6e>
 800d434:	2d00      	cmp	r5, #0
 800d436:	d0f1      	beq.n	800d41c <__sccl+0x28>
 800d438:	462b      	mov	r3, r5
 800d43a:	e7f2      	b.n	800d422 <__sccl+0x2e>
 800d43c:	7846      	ldrb	r6, [r0, #1]
 800d43e:	2e5d      	cmp	r6, #93	@ 0x5d
 800d440:	d0fa      	beq.n	800d438 <__sccl+0x44>
 800d442:	42b3      	cmp	r3, r6
 800d444:	dcf8      	bgt.n	800d438 <__sccl+0x44>
 800d446:	461a      	mov	r2, r3
 800d448:	3002      	adds	r0, #2
 800d44a:	3201      	adds	r2, #1
 800d44c:	4296      	cmp	r6, r2
 800d44e:	54a1      	strb	r1, [r4, r2]
 800d450:	dcfb      	bgt.n	800d44a <__sccl+0x56>
 800d452:	1af2      	subs	r2, r6, r3
 800d454:	3a01      	subs	r2, #1
 800d456:	42b3      	cmp	r3, r6
 800d458:	bfa8      	it	ge
 800d45a:	2200      	movge	r2, #0
 800d45c:	1c5d      	adds	r5, r3, #1
 800d45e:	18ab      	adds	r3, r5, r2
 800d460:	e7e1      	b.n	800d426 <__sccl+0x32>
 800d462:	4610      	mov	r0, r2
 800d464:	e7da      	b.n	800d41c <__sccl+0x28>

0800d466 <__submore>:
 800d466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d46a:	460c      	mov	r4, r1
 800d46c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d46e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d472:	4299      	cmp	r1, r3
 800d474:	d11b      	bne.n	800d4ae <__submore+0x48>
 800d476:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d47a:	f7fe fd5b 	bl	800bf34 <_malloc_r>
 800d47e:	b918      	cbnz	r0, 800d488 <__submore+0x22>
 800d480:	f04f 30ff 	mov.w	r0, #4294967295
 800d484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d48c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d48e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d492:	6360      	str	r0, [r4, #52]	@ 0x34
 800d494:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d498:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d49c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d4a0:	7043      	strb	r3, [r0, #1]
 800d4a2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d4a6:	7003      	strb	r3, [r0, #0]
 800d4a8:	6020      	str	r0, [r4, #0]
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	e7ea      	b.n	800d484 <__submore+0x1e>
 800d4ae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d4b0:	0077      	lsls	r7, r6, #1
 800d4b2:	463a      	mov	r2, r7
 800d4b4:	f000 f912 	bl	800d6dc <_realloc_r>
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	d0e0      	beq.n	800d480 <__submore+0x1a>
 800d4be:	eb00 0806 	add.w	r8, r0, r6
 800d4c2:	4601      	mov	r1, r0
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	f7fd fe55 	bl	800b176 <memcpy>
 800d4cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d4d0:	f8c4 8000 	str.w	r8, [r4]
 800d4d4:	e7e9      	b.n	800d4aa <__submore+0x44>

0800d4d6 <__swbuf_r>:
 800d4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d8:	460e      	mov	r6, r1
 800d4da:	4614      	mov	r4, r2
 800d4dc:	4605      	mov	r5, r0
 800d4de:	b118      	cbz	r0, 800d4e8 <__swbuf_r+0x12>
 800d4e0:	6a03      	ldr	r3, [r0, #32]
 800d4e2:	b90b      	cbnz	r3, 800d4e8 <__swbuf_r+0x12>
 800d4e4:	f7fd fc2e 	bl	800ad44 <__sinit>
 800d4e8:	69a3      	ldr	r3, [r4, #24]
 800d4ea:	60a3      	str	r3, [r4, #8]
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	071a      	lsls	r2, r3, #28
 800d4f0:	d501      	bpl.n	800d4f6 <__swbuf_r+0x20>
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	b943      	cbnz	r3, 800d508 <__swbuf_r+0x32>
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f000 f82b 	bl	800d554 <__swsetup_r>
 800d4fe:	b118      	cbz	r0, 800d508 <__swbuf_r+0x32>
 800d500:	f04f 37ff 	mov.w	r7, #4294967295
 800d504:	4638      	mov	r0, r7
 800d506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	6922      	ldr	r2, [r4, #16]
 800d50c:	b2f6      	uxtb	r6, r6
 800d50e:	1a98      	subs	r0, r3, r2
 800d510:	6963      	ldr	r3, [r4, #20]
 800d512:	4637      	mov	r7, r6
 800d514:	4283      	cmp	r3, r0
 800d516:	dc05      	bgt.n	800d524 <__swbuf_r+0x4e>
 800d518:	4621      	mov	r1, r4
 800d51a:	4628      	mov	r0, r5
 800d51c:	f7ff ff42 	bl	800d3a4 <_fflush_r>
 800d520:	2800      	cmp	r0, #0
 800d522:	d1ed      	bne.n	800d500 <__swbuf_r+0x2a>
 800d524:	68a3      	ldr	r3, [r4, #8]
 800d526:	3b01      	subs	r3, #1
 800d528:	60a3      	str	r3, [r4, #8]
 800d52a:	6823      	ldr	r3, [r4, #0]
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	6022      	str	r2, [r4, #0]
 800d530:	701e      	strb	r6, [r3, #0]
 800d532:	6962      	ldr	r2, [r4, #20]
 800d534:	1c43      	adds	r3, r0, #1
 800d536:	429a      	cmp	r2, r3
 800d538:	d004      	beq.n	800d544 <__swbuf_r+0x6e>
 800d53a:	89a3      	ldrh	r3, [r4, #12]
 800d53c:	07db      	lsls	r3, r3, #31
 800d53e:	d5e1      	bpl.n	800d504 <__swbuf_r+0x2e>
 800d540:	2e0a      	cmp	r6, #10
 800d542:	d1df      	bne.n	800d504 <__swbuf_r+0x2e>
 800d544:	4621      	mov	r1, r4
 800d546:	4628      	mov	r0, r5
 800d548:	f7ff ff2c 	bl	800d3a4 <_fflush_r>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d0d9      	beq.n	800d504 <__swbuf_r+0x2e>
 800d550:	e7d6      	b.n	800d500 <__swbuf_r+0x2a>
	...

0800d554 <__swsetup_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4b29      	ldr	r3, [pc, #164]	@ (800d5fc <__swsetup_r+0xa8>)
 800d558:	4605      	mov	r5, r0
 800d55a:	6818      	ldr	r0, [r3, #0]
 800d55c:	460c      	mov	r4, r1
 800d55e:	b118      	cbz	r0, 800d568 <__swsetup_r+0x14>
 800d560:	6a03      	ldr	r3, [r0, #32]
 800d562:	b90b      	cbnz	r3, 800d568 <__swsetup_r+0x14>
 800d564:	f7fd fbee 	bl	800ad44 <__sinit>
 800d568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d56c:	0719      	lsls	r1, r3, #28
 800d56e:	d422      	bmi.n	800d5b6 <__swsetup_r+0x62>
 800d570:	06da      	lsls	r2, r3, #27
 800d572:	d407      	bmi.n	800d584 <__swsetup_r+0x30>
 800d574:	2209      	movs	r2, #9
 800d576:	602a      	str	r2, [r5, #0]
 800d578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d57c:	f04f 30ff 	mov.w	r0, #4294967295
 800d580:	81a3      	strh	r3, [r4, #12]
 800d582:	e033      	b.n	800d5ec <__swsetup_r+0x98>
 800d584:	0758      	lsls	r0, r3, #29
 800d586:	d512      	bpl.n	800d5ae <__swsetup_r+0x5a>
 800d588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d58a:	b141      	cbz	r1, 800d59e <__swsetup_r+0x4a>
 800d58c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d590:	4299      	cmp	r1, r3
 800d592:	d002      	beq.n	800d59a <__swsetup_r+0x46>
 800d594:	4628      	mov	r0, r5
 800d596:	f7fe fc5b 	bl	800be50 <_free_r>
 800d59a:	2300      	movs	r3, #0
 800d59c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	6063      	str	r3, [r4, #4]
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f043 0308 	orr.w	r3, r3, #8
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	6923      	ldr	r3, [r4, #16]
 800d5b8:	b94b      	cbnz	r3, 800d5ce <__swsetup_r+0x7a>
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5c4:	d003      	beq.n	800d5ce <__swsetup_r+0x7a>
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	f000 f9e6 	bl	800d99a <__smakebuf_r>
 800d5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5d2:	f013 0201 	ands.w	r2, r3, #1
 800d5d6:	d00a      	beq.n	800d5ee <__swsetup_r+0x9a>
 800d5d8:	2200      	movs	r2, #0
 800d5da:	60a2      	str	r2, [r4, #8]
 800d5dc:	6962      	ldr	r2, [r4, #20]
 800d5de:	4252      	negs	r2, r2
 800d5e0:	61a2      	str	r2, [r4, #24]
 800d5e2:	6922      	ldr	r2, [r4, #16]
 800d5e4:	b942      	cbnz	r2, 800d5f8 <__swsetup_r+0xa4>
 800d5e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5ea:	d1c5      	bne.n	800d578 <__swsetup_r+0x24>
 800d5ec:	bd38      	pop	{r3, r4, r5, pc}
 800d5ee:	0799      	lsls	r1, r3, #30
 800d5f0:	bf58      	it	pl
 800d5f2:	6962      	ldrpl	r2, [r4, #20]
 800d5f4:	60a2      	str	r2, [r4, #8]
 800d5f6:	e7f4      	b.n	800d5e2 <__swsetup_r+0x8e>
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	e7f7      	b.n	800d5ec <__swsetup_r+0x98>
 800d5fc:	20000030 	.word	0x20000030

0800d600 <memmove>:
 800d600:	4288      	cmp	r0, r1
 800d602:	b510      	push	{r4, lr}
 800d604:	eb01 0402 	add.w	r4, r1, r2
 800d608:	d902      	bls.n	800d610 <memmove+0x10>
 800d60a:	4284      	cmp	r4, r0
 800d60c:	4623      	mov	r3, r4
 800d60e:	d807      	bhi.n	800d620 <memmove+0x20>
 800d610:	1e43      	subs	r3, r0, #1
 800d612:	42a1      	cmp	r1, r4
 800d614:	d008      	beq.n	800d628 <memmove+0x28>
 800d616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d61a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d61e:	e7f8      	b.n	800d612 <memmove+0x12>
 800d620:	4601      	mov	r1, r0
 800d622:	4402      	add	r2, r0
 800d624:	428a      	cmp	r2, r1
 800d626:	d100      	bne.n	800d62a <memmove+0x2a>
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d62e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d632:	e7f7      	b.n	800d624 <memmove+0x24>

0800d634 <_sbrk_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	2300      	movs	r3, #0
 800d638:	4d05      	ldr	r5, [pc, #20]	@ (800d650 <_sbrk_r+0x1c>)
 800d63a:	4604      	mov	r4, r0
 800d63c:	4608      	mov	r0, r1
 800d63e:	602b      	str	r3, [r5, #0]
 800d640:	f7f5 f82c 	bl	800269c <_sbrk>
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	d102      	bne.n	800d64e <_sbrk_r+0x1a>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	b103      	cbz	r3, 800d64e <_sbrk_r+0x1a>
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	bd38      	pop	{r3, r4, r5, pc}
 800d650:	2000334c 	.word	0x2000334c

0800d654 <__assert_func>:
 800d654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d656:	4614      	mov	r4, r2
 800d658:	461a      	mov	r2, r3
 800d65a:	4b09      	ldr	r3, [pc, #36]	@ (800d680 <__assert_func+0x2c>)
 800d65c:	4605      	mov	r5, r0
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68d8      	ldr	r0, [r3, #12]
 800d662:	b14c      	cbz	r4, 800d678 <__assert_func+0x24>
 800d664:	4b07      	ldr	r3, [pc, #28]	@ (800d684 <__assert_func+0x30>)
 800d666:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d66a:	9100      	str	r1, [sp, #0]
 800d66c:	462b      	mov	r3, r5
 800d66e:	4906      	ldr	r1, [pc, #24]	@ (800d688 <__assert_func+0x34>)
 800d670:	f000 f95c 	bl	800d92c <fiprintf>
 800d674:	f000 f9f0 	bl	800da58 <abort>
 800d678:	4b04      	ldr	r3, [pc, #16]	@ (800d68c <__assert_func+0x38>)
 800d67a:	461c      	mov	r4, r3
 800d67c:	e7f3      	b.n	800d666 <__assert_func+0x12>
 800d67e:	bf00      	nop
 800d680:	20000030 	.word	0x20000030
 800d684:	0800dfc4 	.word	0x0800dfc4
 800d688:	0800dfd1 	.word	0x0800dfd1
 800d68c:	0800dfff 	.word	0x0800dfff

0800d690 <_calloc_r>:
 800d690:	b570      	push	{r4, r5, r6, lr}
 800d692:	fba1 5402 	umull	r5, r4, r1, r2
 800d696:	b934      	cbnz	r4, 800d6a6 <_calloc_r+0x16>
 800d698:	4629      	mov	r1, r5
 800d69a:	f7fe fc4b 	bl	800bf34 <_malloc_r>
 800d69e:	4606      	mov	r6, r0
 800d6a0:	b928      	cbnz	r0, 800d6ae <_calloc_r+0x1e>
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	bd70      	pop	{r4, r5, r6, pc}
 800d6a6:	220c      	movs	r2, #12
 800d6a8:	2600      	movs	r6, #0
 800d6aa:	6002      	str	r2, [r0, #0]
 800d6ac:	e7f9      	b.n	800d6a2 <_calloc_r+0x12>
 800d6ae:	462a      	mov	r2, r5
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	f7fd fc36 	bl	800af22 <memset>
 800d6b6:	e7f4      	b.n	800d6a2 <_calloc_r+0x12>

0800d6b8 <__ascii_mbtowc>:
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	b901      	cbnz	r1, 800d6be <__ascii_mbtowc+0x6>
 800d6bc:	a901      	add	r1, sp, #4
 800d6be:	b142      	cbz	r2, 800d6d2 <__ascii_mbtowc+0x1a>
 800d6c0:	b14b      	cbz	r3, 800d6d6 <__ascii_mbtowc+0x1e>
 800d6c2:	7813      	ldrb	r3, [r2, #0]
 800d6c4:	600b      	str	r3, [r1, #0]
 800d6c6:	7812      	ldrb	r2, [r2, #0]
 800d6c8:	1e10      	subs	r0, r2, #0
 800d6ca:	bf18      	it	ne
 800d6cc:	2001      	movne	r0, #1
 800d6ce:	b002      	add	sp, #8
 800d6d0:	4770      	bx	lr
 800d6d2:	4610      	mov	r0, r2
 800d6d4:	e7fb      	b.n	800d6ce <__ascii_mbtowc+0x16>
 800d6d6:	f06f 0001 	mvn.w	r0, #1
 800d6da:	e7f8      	b.n	800d6ce <__ascii_mbtowc+0x16>

0800d6dc <_realloc_r>:
 800d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e0:	4607      	mov	r7, r0
 800d6e2:	4614      	mov	r4, r2
 800d6e4:	460d      	mov	r5, r1
 800d6e6:	b921      	cbnz	r1, 800d6f2 <_realloc_r+0x16>
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ee:	f7fe bc21 	b.w	800bf34 <_malloc_r>
 800d6f2:	b92a      	cbnz	r2, 800d700 <_realloc_r+0x24>
 800d6f4:	f7fe fbac 	bl	800be50 <_free_r>
 800d6f8:	4625      	mov	r5, r4
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d700:	f000 f9b1 	bl	800da66 <_malloc_usable_size_r>
 800d704:	4284      	cmp	r4, r0
 800d706:	4606      	mov	r6, r0
 800d708:	d802      	bhi.n	800d710 <_realloc_r+0x34>
 800d70a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d70e:	d8f4      	bhi.n	800d6fa <_realloc_r+0x1e>
 800d710:	4621      	mov	r1, r4
 800d712:	4638      	mov	r0, r7
 800d714:	f7fe fc0e 	bl	800bf34 <_malloc_r>
 800d718:	4680      	mov	r8, r0
 800d71a:	b908      	cbnz	r0, 800d720 <_realloc_r+0x44>
 800d71c:	4645      	mov	r5, r8
 800d71e:	e7ec      	b.n	800d6fa <_realloc_r+0x1e>
 800d720:	42b4      	cmp	r4, r6
 800d722:	4622      	mov	r2, r4
 800d724:	4629      	mov	r1, r5
 800d726:	bf28      	it	cs
 800d728:	4632      	movcs	r2, r6
 800d72a:	f7fd fd24 	bl	800b176 <memcpy>
 800d72e:	4629      	mov	r1, r5
 800d730:	4638      	mov	r0, r7
 800d732:	f7fe fb8d 	bl	800be50 <_free_r>
 800d736:	e7f1      	b.n	800d71c <_realloc_r+0x40>

0800d738 <_strtol_l.isra.0>:
 800d738:	2b24      	cmp	r3, #36	@ 0x24
 800d73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d73e:	4686      	mov	lr, r0
 800d740:	4690      	mov	r8, r2
 800d742:	d801      	bhi.n	800d748 <_strtol_l.isra.0+0x10>
 800d744:	2b01      	cmp	r3, #1
 800d746:	d106      	bne.n	800d756 <_strtol_l.isra.0+0x1e>
 800d748:	f7fd fcda 	bl	800b100 <__errno>
 800d74c:	2316      	movs	r3, #22
 800d74e:	6003      	str	r3, [r0, #0]
 800d750:	2000      	movs	r0, #0
 800d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d756:	460d      	mov	r5, r1
 800d758:	4833      	ldr	r0, [pc, #204]	@ (800d828 <_strtol_l.isra.0+0xf0>)
 800d75a:	462a      	mov	r2, r5
 800d75c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d760:	5d06      	ldrb	r6, [r0, r4]
 800d762:	f016 0608 	ands.w	r6, r6, #8
 800d766:	d1f8      	bne.n	800d75a <_strtol_l.isra.0+0x22>
 800d768:	2c2d      	cmp	r4, #45	@ 0x2d
 800d76a:	d110      	bne.n	800d78e <_strtol_l.isra.0+0x56>
 800d76c:	2601      	movs	r6, #1
 800d76e:	782c      	ldrb	r4, [r5, #0]
 800d770:	1c95      	adds	r5, r2, #2
 800d772:	f033 0210 	bics.w	r2, r3, #16
 800d776:	d115      	bne.n	800d7a4 <_strtol_l.isra.0+0x6c>
 800d778:	2c30      	cmp	r4, #48	@ 0x30
 800d77a:	d10d      	bne.n	800d798 <_strtol_l.isra.0+0x60>
 800d77c:	782a      	ldrb	r2, [r5, #0]
 800d77e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d782:	2a58      	cmp	r2, #88	@ 0x58
 800d784:	d108      	bne.n	800d798 <_strtol_l.isra.0+0x60>
 800d786:	786c      	ldrb	r4, [r5, #1]
 800d788:	3502      	adds	r5, #2
 800d78a:	2310      	movs	r3, #16
 800d78c:	e00a      	b.n	800d7a4 <_strtol_l.isra.0+0x6c>
 800d78e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d790:	bf04      	itt	eq
 800d792:	782c      	ldrbeq	r4, [r5, #0]
 800d794:	1c95      	addeq	r5, r2, #2
 800d796:	e7ec      	b.n	800d772 <_strtol_l.isra.0+0x3a>
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1f6      	bne.n	800d78a <_strtol_l.isra.0+0x52>
 800d79c:	2c30      	cmp	r4, #48	@ 0x30
 800d79e:	bf14      	ite	ne
 800d7a0:	230a      	movne	r3, #10
 800d7a2:	2308      	moveq	r3, #8
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d7aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d7ae:	fbbc f9f3 	udiv	r9, ip, r3
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	fb03 ca19 	mls	sl, r3, r9, ip
 800d7b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d7bc:	2f09      	cmp	r7, #9
 800d7be:	d80f      	bhi.n	800d7e0 <_strtol_l.isra.0+0xa8>
 800d7c0:	463c      	mov	r4, r7
 800d7c2:	42a3      	cmp	r3, r4
 800d7c4:	dd1b      	ble.n	800d7fe <_strtol_l.isra.0+0xc6>
 800d7c6:	1c57      	adds	r7, r2, #1
 800d7c8:	d007      	beq.n	800d7da <_strtol_l.isra.0+0xa2>
 800d7ca:	4581      	cmp	r9, r0
 800d7cc:	d314      	bcc.n	800d7f8 <_strtol_l.isra.0+0xc0>
 800d7ce:	d101      	bne.n	800d7d4 <_strtol_l.isra.0+0x9c>
 800d7d0:	45a2      	cmp	sl, r4
 800d7d2:	db11      	blt.n	800d7f8 <_strtol_l.isra.0+0xc0>
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	fb00 4003 	mla	r0, r0, r3, r4
 800d7da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7de:	e7eb      	b.n	800d7b8 <_strtol_l.isra.0+0x80>
 800d7e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d7e4:	2f19      	cmp	r7, #25
 800d7e6:	d801      	bhi.n	800d7ec <_strtol_l.isra.0+0xb4>
 800d7e8:	3c37      	subs	r4, #55	@ 0x37
 800d7ea:	e7ea      	b.n	800d7c2 <_strtol_l.isra.0+0x8a>
 800d7ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d7f0:	2f19      	cmp	r7, #25
 800d7f2:	d804      	bhi.n	800d7fe <_strtol_l.isra.0+0xc6>
 800d7f4:	3c57      	subs	r4, #87	@ 0x57
 800d7f6:	e7e4      	b.n	800d7c2 <_strtol_l.isra.0+0x8a>
 800d7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7fc:	e7ed      	b.n	800d7da <_strtol_l.isra.0+0xa2>
 800d7fe:	1c53      	adds	r3, r2, #1
 800d800:	d108      	bne.n	800d814 <_strtol_l.isra.0+0xdc>
 800d802:	2322      	movs	r3, #34	@ 0x22
 800d804:	4660      	mov	r0, ip
 800d806:	f8ce 3000 	str.w	r3, [lr]
 800d80a:	f1b8 0f00 	cmp.w	r8, #0
 800d80e:	d0a0      	beq.n	800d752 <_strtol_l.isra.0+0x1a>
 800d810:	1e69      	subs	r1, r5, #1
 800d812:	e006      	b.n	800d822 <_strtol_l.isra.0+0xea>
 800d814:	b106      	cbz	r6, 800d818 <_strtol_l.isra.0+0xe0>
 800d816:	4240      	negs	r0, r0
 800d818:	f1b8 0f00 	cmp.w	r8, #0
 800d81c:	d099      	beq.n	800d752 <_strtol_l.isra.0+0x1a>
 800d81e:	2a00      	cmp	r2, #0
 800d820:	d1f6      	bne.n	800d810 <_strtol_l.isra.0+0xd8>
 800d822:	f8c8 1000 	str.w	r1, [r8]
 800d826:	e794      	b.n	800d752 <_strtol_l.isra.0+0x1a>
 800d828:	0800e101 	.word	0x0800e101

0800d82c <_strtol_r>:
 800d82c:	f7ff bf84 	b.w	800d738 <_strtol_l.isra.0>

0800d830 <_strtoul_l.isra.0>:
 800d830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d834:	4686      	mov	lr, r0
 800d836:	460d      	mov	r5, r1
 800d838:	4e33      	ldr	r6, [pc, #204]	@ (800d908 <_strtoul_l.isra.0+0xd8>)
 800d83a:	4628      	mov	r0, r5
 800d83c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d840:	5d37      	ldrb	r7, [r6, r4]
 800d842:	f017 0708 	ands.w	r7, r7, #8
 800d846:	d1f8      	bne.n	800d83a <_strtoul_l.isra.0+0xa>
 800d848:	2c2d      	cmp	r4, #45	@ 0x2d
 800d84a:	d110      	bne.n	800d86e <_strtoul_l.isra.0+0x3e>
 800d84c:	2701      	movs	r7, #1
 800d84e:	782c      	ldrb	r4, [r5, #0]
 800d850:	1c85      	adds	r5, r0, #2
 800d852:	f033 0010 	bics.w	r0, r3, #16
 800d856:	d115      	bne.n	800d884 <_strtoul_l.isra.0+0x54>
 800d858:	2c30      	cmp	r4, #48	@ 0x30
 800d85a:	d10d      	bne.n	800d878 <_strtoul_l.isra.0+0x48>
 800d85c:	7828      	ldrb	r0, [r5, #0]
 800d85e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d862:	2858      	cmp	r0, #88	@ 0x58
 800d864:	d108      	bne.n	800d878 <_strtoul_l.isra.0+0x48>
 800d866:	786c      	ldrb	r4, [r5, #1]
 800d868:	3502      	adds	r5, #2
 800d86a:	2310      	movs	r3, #16
 800d86c:	e00a      	b.n	800d884 <_strtoul_l.isra.0+0x54>
 800d86e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d870:	bf04      	itt	eq
 800d872:	782c      	ldrbeq	r4, [r5, #0]
 800d874:	1c85      	addeq	r5, r0, #2
 800d876:	e7ec      	b.n	800d852 <_strtoul_l.isra.0+0x22>
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1f6      	bne.n	800d86a <_strtoul_l.isra.0+0x3a>
 800d87c:	2c30      	cmp	r4, #48	@ 0x30
 800d87e:	bf14      	ite	ne
 800d880:	230a      	movne	r3, #10
 800d882:	2308      	moveq	r3, #8
 800d884:	f04f 38ff 	mov.w	r8, #4294967295
 800d888:	fbb8 f8f3 	udiv	r8, r8, r3
 800d88c:	2600      	movs	r6, #0
 800d88e:	fb03 f908 	mul.w	r9, r3, r8
 800d892:	4630      	mov	r0, r6
 800d894:	ea6f 0909 	mvn.w	r9, r9
 800d898:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d89c:	f1bc 0f09 	cmp.w	ip, #9
 800d8a0:	d810      	bhi.n	800d8c4 <_strtoul_l.isra.0+0x94>
 800d8a2:	4664      	mov	r4, ip
 800d8a4:	42a3      	cmp	r3, r4
 800d8a6:	dd1e      	ble.n	800d8e6 <_strtoul_l.isra.0+0xb6>
 800d8a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d8ac:	d007      	beq.n	800d8be <_strtoul_l.isra.0+0x8e>
 800d8ae:	4580      	cmp	r8, r0
 800d8b0:	d316      	bcc.n	800d8e0 <_strtoul_l.isra.0+0xb0>
 800d8b2:	d101      	bne.n	800d8b8 <_strtoul_l.isra.0+0x88>
 800d8b4:	45a1      	cmp	r9, r4
 800d8b6:	db13      	blt.n	800d8e0 <_strtoul_l.isra.0+0xb0>
 800d8b8:	2601      	movs	r6, #1
 800d8ba:	fb00 4003 	mla	r0, r0, r3, r4
 800d8be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8c2:	e7e9      	b.n	800d898 <_strtoul_l.isra.0+0x68>
 800d8c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d8c8:	f1bc 0f19 	cmp.w	ip, #25
 800d8cc:	d801      	bhi.n	800d8d2 <_strtoul_l.isra.0+0xa2>
 800d8ce:	3c37      	subs	r4, #55	@ 0x37
 800d8d0:	e7e8      	b.n	800d8a4 <_strtoul_l.isra.0+0x74>
 800d8d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d8d6:	f1bc 0f19 	cmp.w	ip, #25
 800d8da:	d804      	bhi.n	800d8e6 <_strtoul_l.isra.0+0xb6>
 800d8dc:	3c57      	subs	r4, #87	@ 0x57
 800d8de:	e7e1      	b.n	800d8a4 <_strtoul_l.isra.0+0x74>
 800d8e0:	f04f 36ff 	mov.w	r6, #4294967295
 800d8e4:	e7eb      	b.n	800d8be <_strtoul_l.isra.0+0x8e>
 800d8e6:	1c73      	adds	r3, r6, #1
 800d8e8:	d106      	bne.n	800d8f8 <_strtoul_l.isra.0+0xc8>
 800d8ea:	2322      	movs	r3, #34	@ 0x22
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f8ce 3000 	str.w	r3, [lr]
 800d8f2:	b932      	cbnz	r2, 800d902 <_strtoul_l.isra.0+0xd2>
 800d8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8f8:	b107      	cbz	r7, 800d8fc <_strtoul_l.isra.0+0xcc>
 800d8fa:	4240      	negs	r0, r0
 800d8fc:	2a00      	cmp	r2, #0
 800d8fe:	d0f9      	beq.n	800d8f4 <_strtoul_l.isra.0+0xc4>
 800d900:	b106      	cbz	r6, 800d904 <_strtoul_l.isra.0+0xd4>
 800d902:	1e69      	subs	r1, r5, #1
 800d904:	6011      	str	r1, [r2, #0]
 800d906:	e7f5      	b.n	800d8f4 <_strtoul_l.isra.0+0xc4>
 800d908:	0800e101 	.word	0x0800e101

0800d90c <_strtoul_r>:
 800d90c:	f7ff bf90 	b.w	800d830 <_strtoul_l.isra.0>

0800d910 <__ascii_wctomb>:
 800d910:	4603      	mov	r3, r0
 800d912:	4608      	mov	r0, r1
 800d914:	b141      	cbz	r1, 800d928 <__ascii_wctomb+0x18>
 800d916:	2aff      	cmp	r2, #255	@ 0xff
 800d918:	d904      	bls.n	800d924 <__ascii_wctomb+0x14>
 800d91a:	228a      	movs	r2, #138	@ 0x8a
 800d91c:	f04f 30ff 	mov.w	r0, #4294967295
 800d920:	601a      	str	r2, [r3, #0]
 800d922:	4770      	bx	lr
 800d924:	2001      	movs	r0, #1
 800d926:	700a      	strb	r2, [r1, #0]
 800d928:	4770      	bx	lr
	...

0800d92c <fiprintf>:
 800d92c:	b40e      	push	{r1, r2, r3}
 800d92e:	b503      	push	{r0, r1, lr}
 800d930:	4601      	mov	r1, r0
 800d932:	ab03      	add	r3, sp, #12
 800d934:	4805      	ldr	r0, [pc, #20]	@ (800d94c <fiprintf+0x20>)
 800d936:	f853 2b04 	ldr.w	r2, [r3], #4
 800d93a:	6800      	ldr	r0, [r0, #0]
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	f7ff fa4d 	bl	800cddc <_vfiprintf_r>
 800d942:	b002      	add	sp, #8
 800d944:	f85d eb04 	ldr.w	lr, [sp], #4
 800d948:	b003      	add	sp, #12
 800d94a:	4770      	bx	lr
 800d94c:	20000030 	.word	0x20000030

0800d950 <__swhatbuf_r>:
 800d950:	b570      	push	{r4, r5, r6, lr}
 800d952:	460c      	mov	r4, r1
 800d954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d958:	4615      	mov	r5, r2
 800d95a:	2900      	cmp	r1, #0
 800d95c:	461e      	mov	r6, r3
 800d95e:	b096      	sub	sp, #88	@ 0x58
 800d960:	da0c      	bge.n	800d97c <__swhatbuf_r+0x2c>
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	2100      	movs	r1, #0
 800d966:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d96a:	bf14      	ite	ne
 800d96c:	2340      	movne	r3, #64	@ 0x40
 800d96e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d972:	2000      	movs	r0, #0
 800d974:	6031      	str	r1, [r6, #0]
 800d976:	602b      	str	r3, [r5, #0]
 800d978:	b016      	add	sp, #88	@ 0x58
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
 800d97c:	466a      	mov	r2, sp
 800d97e:	f000 f849 	bl	800da14 <_fstat_r>
 800d982:	2800      	cmp	r0, #0
 800d984:	dbed      	blt.n	800d962 <__swhatbuf_r+0x12>
 800d986:	9901      	ldr	r1, [sp, #4]
 800d988:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d98c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d990:	4259      	negs	r1, r3
 800d992:	4159      	adcs	r1, r3
 800d994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d998:	e7eb      	b.n	800d972 <__swhatbuf_r+0x22>

0800d99a <__smakebuf_r>:
 800d99a:	898b      	ldrh	r3, [r1, #12]
 800d99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d99e:	079d      	lsls	r5, r3, #30
 800d9a0:	4606      	mov	r6, r0
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	d507      	bpl.n	800d9b6 <__smakebuf_r+0x1c>
 800d9a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	6123      	str	r3, [r4, #16]
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	6163      	str	r3, [r4, #20]
 800d9b2:	b003      	add	sp, #12
 800d9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9b6:	466a      	mov	r2, sp
 800d9b8:	ab01      	add	r3, sp, #4
 800d9ba:	f7ff ffc9 	bl	800d950 <__swhatbuf_r>
 800d9be:	9f00      	ldr	r7, [sp, #0]
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f7fe fab5 	bl	800bf34 <_malloc_r>
 800d9ca:	b948      	cbnz	r0, 800d9e0 <__smakebuf_r+0x46>
 800d9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d0:	059a      	lsls	r2, r3, #22
 800d9d2:	d4ee      	bmi.n	800d9b2 <__smakebuf_r+0x18>
 800d9d4:	f023 0303 	bic.w	r3, r3, #3
 800d9d8:	f043 0302 	orr.w	r3, r3, #2
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	e7e2      	b.n	800d9a6 <__smakebuf_r+0xc>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ea:	81a3      	strh	r3, [r4, #12]
 800d9ec:	9b01      	ldr	r3, [sp, #4]
 800d9ee:	6020      	str	r0, [r4, #0]
 800d9f0:	b15b      	cbz	r3, 800da0a <__smakebuf_r+0x70>
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9f8:	f000 f81e 	bl	800da38 <_isatty_r>
 800d9fc:	b128      	cbz	r0, 800da0a <__smakebuf_r+0x70>
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	f023 0303 	bic.w	r3, r3, #3
 800da04:	f043 0301 	orr.w	r3, r3, #1
 800da08:	81a3      	strh	r3, [r4, #12]
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	431d      	orrs	r5, r3
 800da0e:	81a5      	strh	r5, [r4, #12]
 800da10:	e7cf      	b.n	800d9b2 <__smakebuf_r+0x18>
	...

0800da14 <_fstat_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	2300      	movs	r3, #0
 800da18:	4d06      	ldr	r5, [pc, #24]	@ (800da34 <_fstat_r+0x20>)
 800da1a:	4604      	mov	r4, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	4611      	mov	r1, r2
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	f7f4 fe15 	bl	8002650 <_fstat>
 800da26:	1c43      	adds	r3, r0, #1
 800da28:	d102      	bne.n	800da30 <_fstat_r+0x1c>
 800da2a:	682b      	ldr	r3, [r5, #0]
 800da2c:	b103      	cbz	r3, 800da30 <_fstat_r+0x1c>
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	bd38      	pop	{r3, r4, r5, pc}
 800da32:	bf00      	nop
 800da34:	2000334c 	.word	0x2000334c

0800da38 <_isatty_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	2300      	movs	r3, #0
 800da3c:	4d05      	ldr	r5, [pc, #20]	@ (800da54 <_isatty_r+0x1c>)
 800da3e:	4604      	mov	r4, r0
 800da40:	4608      	mov	r0, r1
 800da42:	602b      	str	r3, [r5, #0]
 800da44:	f7f4 fe13 	bl	800266e <_isatty>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d102      	bne.n	800da52 <_isatty_r+0x1a>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	b103      	cbz	r3, 800da52 <_isatty_r+0x1a>
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	2000334c 	.word	0x2000334c

0800da58 <abort>:
 800da58:	2006      	movs	r0, #6
 800da5a:	b508      	push	{r3, lr}
 800da5c:	f000 f834 	bl	800dac8 <raise>
 800da60:	2001      	movs	r0, #1
 800da62:	f7f4 fda6 	bl	80025b2 <_exit>

0800da66 <_malloc_usable_size_r>:
 800da66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6a:	1f18      	subs	r0, r3, #4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	bfbc      	itt	lt
 800da70:	580b      	ldrlt	r3, [r1, r0]
 800da72:	18c0      	addlt	r0, r0, r3
 800da74:	4770      	bx	lr

0800da76 <_raise_r>:
 800da76:	291f      	cmp	r1, #31
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4605      	mov	r5, r0
 800da7c:	460c      	mov	r4, r1
 800da7e:	d904      	bls.n	800da8a <_raise_r+0x14>
 800da80:	2316      	movs	r3, #22
 800da82:	6003      	str	r3, [r0, #0]
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da8c:	b112      	cbz	r2, 800da94 <_raise_r+0x1e>
 800da8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da92:	b94b      	cbnz	r3, 800daa8 <_raise_r+0x32>
 800da94:	4628      	mov	r0, r5
 800da96:	f000 f831 	bl	800dafc <_getpid_r>
 800da9a:	4622      	mov	r2, r4
 800da9c:	4601      	mov	r1, r0
 800da9e:	4628      	mov	r0, r5
 800daa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa4:	f000 b818 	b.w	800dad8 <_kill_r>
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d00a      	beq.n	800dac2 <_raise_r+0x4c>
 800daac:	1c59      	adds	r1, r3, #1
 800daae:	d103      	bne.n	800dab8 <_raise_r+0x42>
 800dab0:	2316      	movs	r3, #22
 800dab2:	6003      	str	r3, [r0, #0]
 800dab4:	2001      	movs	r0, #1
 800dab6:	e7e7      	b.n	800da88 <_raise_r+0x12>
 800dab8:	2100      	movs	r1, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dac0:	4798      	blx	r3
 800dac2:	2000      	movs	r0, #0
 800dac4:	e7e0      	b.n	800da88 <_raise_r+0x12>
	...

0800dac8 <raise>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	@ (800dad4 <raise+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff bfd2 	b.w	800da76 <_raise_r>
 800dad2:	bf00      	nop
 800dad4:	20000030 	.word	0x20000030

0800dad8 <_kill_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	2300      	movs	r3, #0
 800dadc:	4d06      	ldr	r5, [pc, #24]	@ (800daf8 <_kill_r+0x20>)
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	4611      	mov	r1, r2
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f7f4 fd54 	bl	8002592 <_kill>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d102      	bne.n	800daf4 <_kill_r+0x1c>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b103      	cbz	r3, 800daf4 <_kill_r+0x1c>
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	2000334c 	.word	0x2000334c

0800dafc <_getpid_r>:
 800dafc:	f7f4 bd42 	b.w	8002584 <_getpid>

0800db00 <_init>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	bf00      	nop
 800db04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db06:	bc08      	pop	{r3}
 800db08:	469e      	mov	lr, r3
 800db0a:	4770      	bx	lr

0800db0c <_fini>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr
