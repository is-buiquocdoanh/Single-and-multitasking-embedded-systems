
Co-operative Scheduling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d11c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800d230  0800d230  0000e230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8b8  0800d8b8  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d8b8  0800d8b8  0000e8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8c0  0800d8c0  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8c0  0800d8c0  0000e8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8c4  0800d8c4  0000e8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d8c8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000207c  200001d8  0800daa0  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002254  0800daa0  0000f254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b77  00000000  00000000  0000f201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391e  00000000  00000000  00028d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0002c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d8  00000000  00000000  0002dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6b9  00000000  00000000  0002f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b056  00000000  00000000  00049839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000991e3  00000000  00000000  0006488f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fda72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007be8  00000000  00000000  000fdab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001056a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d214 	.word	0x0800d214

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800d214 	.word	0x0800d214

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_d2lz>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	460d      	mov	r5, r1
 8000f42:	f7ff fdef 	bl	8000b24 <__aeabi_dcmplt>
 8000f46:	b928      	cbnz	r0, 8000f54 <__aeabi_d2lz+0x1c>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f50:	f000 b80a 	b.w	8000f68 <__aeabi_d2ulz>
 8000f54:	4620      	mov	r0, r4
 8000f56:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f5a:	f000 f805 	bl	8000f68 <__aeabi_d2ulz>
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop

08000f68 <__aeabi_d2ulz>:
 8000f68:	b5d0      	push	{r4, r6, r7, lr}
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <__aeabi_d2ulz+0x34>)
 8000f6e:	4606      	mov	r6, r0
 8000f70:	460f      	mov	r7, r1
 8000f72:	f7ff fb65 	bl	8000640 <__aeabi_dmul>
 8000f76:	f7ff fe3b 	bl	8000bf0 <__aeabi_d2uiz>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	f7ff fae6 	bl	800054c <__aeabi_ui2d>
 8000f80:	2200      	movs	r2, #0
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <__aeabi_d2ulz+0x38>)
 8000f84:	f7ff fb5c 	bl	8000640 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f7ff f99e 	bl	80002d0 <__aeabi_dsub>
 8000f94:	f7ff fe2c 	bl	8000bf0 <__aeabi_d2uiz>
 8000f98:	4621      	mov	r1, r4
 8000f9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f9c:	3df00000 	.word	0x3df00000
 8000fa0:	41f00000 	.word	0x41f00000

08000fa4 <AHT10_Init>:
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart1;


void AHT10_Init(AHT10_HandleTypeDef *dev) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
    uint8_t cmd[3] = {0xE1, 0x08, 0x00};
 8000fac:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <AHT10_Init+0x44>)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	8019      	strh	r1, [r3, #0]
 8000fb8:	3302      	adds	r3, #2
 8000fba:	0c12      	lsrs	r2, r2, #16
 8000fbc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f107 020c 	add.w	r2, r7, #12
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f001 fe90 	bl	8002cf8 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);
 8000fd8:	2014      	movs	r0, #20
 8000fda:	f001 f9c9 	bl	8002370 <HAL_Delay>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	0800d230 	.word	0x0800d230

08000fec <AHT10_ReadRaw>:

uint8_t AHT10_ReadRaw(AHT10_HandleTypeDef *dev, uint32_t *humidity_raw, uint32_t *temperature_raw) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t cmd[3] = {0xAC, 0x33, 0x00}; // chuẩn AHT10 command
 8000ff8:	4a25      	ldr	r2, [pc, #148]	@ (8001090 <AHT10_ReadRaw+0xa4>)
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	4611      	mov	r1, r2
 8001002:	8019      	strh	r1, [r3, #0]
 8001004:	3302      	adds	r3, #2
 8001006:	0c12      	lsrs	r2, r2, #16
 8001008:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	4619      	mov	r1, r3
 8001014:	f107 0214 	add.w	r2, r7, #20
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2303      	movs	r3, #3
 8001020:	f001 fe6a 	bl	8002cf8 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001024:	2050      	movs	r0, #80	@ 0x50
 8001026:	f001 f9a3 	bl	8002370 <HAL_Delay>

	if (HAL_I2C_Master_Receive(dev->hi2c, dev->address, data, 6, HAL_MAX_DELAY) != HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	f107 0218 	add.w	r2, r7, #24
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2306      	movs	r3, #6
 8001040:	f001 ff58 	bl	8002ef4 <HAL_I2C_Master_Receive>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <AHT10_ReadRaw+0x62>
	    return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e01c      	b.n	8001088 <AHT10_ReadRaw+0x9c>
//	char buf[64];
//	sprintf(buf, "Raw bytes: %02X %02X %02X %02X %02X %02X\r\n",
//	        data[0], data[1], data[2], data[3], data[4], data[5]);
//	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);

	if (data[0] & 0x80)
 800104e:	7e3b      	ldrb	r3, [r7, #24]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	da01      	bge.n	800105a <AHT10_ReadRaw+0x6e>
	    return 0;  // still busy, không đọc được
 8001056:	2300      	movs	r3, #0
 8001058:	e016      	b.n	8001088 <AHT10_ReadRaw+0x9c>

	*humidity_raw = ((uint32_t)(data[1]) << 12) | ((uint32_t)(data[2]) << 4) | (data[3] >> 4);
 800105a:	7e7b      	ldrb	r3, [r7, #25]
 800105c:	031a      	lsls	r2, r3, #12
 800105e:	7ebb      	ldrb	r3, [r7, #26]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4313      	orrs	r3, r2
 8001064:	7efa      	ldrb	r2, [r7, #27]
 8001066:	0912      	lsrs	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	431a      	orrs	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	601a      	str	r2, [r3, #0]
	*temperature_raw = (((uint32_t)(data[3] & 0x0F)) << 16) | ((uint32_t)(data[4]) << 8) | (data[5]);
 8001070:	7efb      	ldrb	r3, [r7, #27]
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001078:	7f3b      	ldrb	r3, [r7, #28]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	4313      	orrs	r3, r2
 800107e:	7f7a      	ldrb	r2, [r7, #29]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
	return 1;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0800d234 	.word	0x0800d234

08001094 <AHT10_ReadTemperature>:


float AHT10_ReadTemperature(uint32_t temp_raw) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    return ((float)temp_raw / 1048576.0) * 200.0 - 50.0;
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fecd 	bl	8000e3c <__aeabi_ui2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa73 	bl	8000590 <__aeabi_f2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <AHT10_ReadTemperature+0x5c>)
 80010b0:	f7ff fbf0 	bl	8000894 <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <AHT10_ReadTemperature+0x60>)
 80010c2:	f7ff fabd 	bl	8000640 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <AHT10_ReadTemperature+0x64>)
 80010d4:	f7ff f8fc 	bl	80002d0 <__aeabi_dsub>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fda6 	bl	8000c30 <__aeabi_d2f>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	41300000 	.word	0x41300000
 80010f4:	40690000 	.word	0x40690000
 80010f8:	40490000 	.word	0x40490000

080010fc <AHT10_ReadHumidity>:

float AHT10_ReadHumidity(uint32_t hum_raw) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    return ((float)hum_raw / 1048576.0) * 100.0;
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff fe99 	bl	8000e3c <__aeabi_ui2f>
 800110a:	4603      	mov	r3, r0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa3f 	bl	8000590 <__aeabi_f2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <AHT10_ReadHumidity+0x48>)
 8001118:	f7ff fbbc 	bl	8000894 <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <AHT10_ReadHumidity+0x4c>)
 800112a:	f7ff fa89 	bl	8000640 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd7b 	bl	8000c30 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	41300000 	.word	0x41300000
 8001148:	40590000 	.word	0x40590000

0800114c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f043 030c 	orr.w	r3, r3, #12
 800116c:	b2db      	uxtb	r3, r3
 800116e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	b2db      	uxtb	r3, r3
 8001178:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	f043 030c 	orr.w	r3, r3, #12
 8001180:	b2db      	uxtb	r3, r3
 8001182:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	b2db      	uxtb	r3, r3
 800118c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	4619      	mov	r1, r3
 8001198:	f107 0208 	add.w	r2, r7, #8
 800119c:	2364      	movs	r3, #100	@ 0x64
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2304      	movs	r3, #4
 80011a2:	f001 fda9 	bl	8002cf8 <HAL_I2C_Master_Transmit>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	f023 030f 	bic.w	r3, r3, #15
 80011c0:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f043 030d 	orr.w	r3, r3, #13
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f043 0309 	orr.w	r3, r3, #9
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	f043 030d 	orr.w	r3, r3, #13
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	f043 0309 	orr.w	r3, r3, #9
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	791b      	ldrb	r3, [r3, #4]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	2364      	movs	r3, #100	@ 0x64
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2304      	movs	r3, #4
 8001204:	f001 fd78 	bl	8002cf8 <HAL_I2C_Master_Transmit>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff96 	bl	800114c <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e006      	b.n	8001234 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001226:	2120      	movs	r1, #32
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffc0 	bl	80011ae <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b4f      	cmp	r3, #79	@ 0x4f
 8001238:	ddf5      	ble.n	8001226 <lcd_clear+0x16>
    }
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d824      	bhi.n	80012a0 <lcd_gotoxy+0x5c>
 8001256:	a201      	add	r2, pc, #4	@ (adr r2, 800125c <lcd_gotoxy+0x18>)
 8001258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125c:	0800126d 	.word	0x0800126d
 8001260:	08001277 	.word	0x08001277
 8001264:	08001281 	.word	0x08001281
 8001268:	0800128b 	.word	0x0800128b
    {
        case 0: address = 0x80 + col; break;  // First row
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3b80      	subs	r3, #128	@ 0x80
 8001272:	75fb      	strb	r3, [r7, #23]
 8001274:	e00e      	b.n	8001294 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3b40      	subs	r3, #64	@ 0x40
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e009      	b.n	8001294 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	3b6c      	subs	r3, #108	@ 0x6c
 8001286:	75fb      	strb	r3, [r7, #23]
 8001288:	e004      	b.n	8001294 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3b2c      	subs	r3, #44	@ 0x2c
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	4619      	mov	r1, r3
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f7ff ff57 	bl	800114c <lcd_send_cmd>
 800129e:	e000      	b.n	80012a2 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 80012a0:	bf00      	nop
}
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80012b0:	2032      	movs	r0, #50	@ 0x32
 80012b2:	f001 f85d 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80012b6:	2130      	movs	r1, #48	@ 0x30
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff47 	bl	800114c <lcd_send_cmd>
    HAL_Delay(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f001 f856 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80012c4:	2130      	movs	r1, #48	@ 0x30
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff40 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 f84f 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80012d2:	2130      	movs	r1, #48	@ 0x30
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff39 	bl	800114c <lcd_send_cmd>
    HAL_Delay(10);
 80012da:	200a      	movs	r0, #10
 80012dc:	f001 f848 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80012e0:	2120      	movs	r1, #32
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff32 	bl	800114c <lcd_send_cmd>
    HAL_Delay(10);
 80012e8:	200a      	movs	r0, #10
 80012ea:	f001 f841 	bl	8002370 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80012ee:	2128      	movs	r1, #40	@ 0x28
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff2b 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f001 f83a 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80012fc:	2108      	movs	r1, #8
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff24 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f001 f833 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800130a:	2101      	movs	r1, #1
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff1d 	bl	800114c <lcd_send_cmd>
    HAL_Delay(2);
 8001312:	2002      	movs	r0, #2
 8001314:	f001 f82c 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001318:	2106      	movs	r1, #6
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff16 	bl	800114c <lcd_send_cmd>
    HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f001 f825 	bl	8002370 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001326:	210c      	movs	r1, #12
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff0f 	bl	800114c <lcd_send_cmd>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8001340:	e007      	b.n	8001352 <lcd_puts+0x1c>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	603a      	str	r2, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff2e 	bl	80011ae <lcd_send_data>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f3      	bne.n	8001342 <lcd_puts+0xc>
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001368:	f000 ffa0 	bl	80022ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136c:	f000 f890 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001370:	f000 f9b2 	bl	80016d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001374:	f000 f8d2 	bl	800151c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001378:	f000 f8fe 	bl	8001578 <MX_I2C2_Init>
  MX_TIM2_Init();
 800137c:	f000 f92a 	bl	80015d4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001380:	f000 f980 	bl	8001684 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	 //Khởi tạo uart nhận 1 byte
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001384:	2201      	movs	r2, #1
 8001386:	492a      	ldr	r1, [pc, #168]	@ (8001430 <main+0xcc>)
 8001388:	482a      	ldr	r0, [pc, #168]	@ (8001434 <main+0xd0>)
 800138a:	f003 fcbc 	bl	8004d06 <HAL_UART_Receive_IT>

	//Khởi tạo timmer2 CH3
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800138e:	2108      	movs	r1, #8
 8001390:	4829      	ldr	r0, [pc, #164]	@ (8001438 <main+0xd4>)
 8001392:	f003 f801 	bl	8004398 <HAL_TIM_PWM_Start>

	//Init LCD
	lcd.hi2c = &hi2c1;
 8001396:	4b29      	ldr	r3, [pc, #164]	@ (800143c <main+0xd8>)
 8001398:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <main+0xdc>)
 800139a:	601a      	str	r2, [r3, #0]
	lcd.address = 0x4E;
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <main+0xd8>)
 800139e:	224e      	movs	r2, #78	@ 0x4e
 80013a0:	711a      	strb	r2, [r3, #4]
	lcd_init(&lcd);
 80013a2:	4826      	ldr	r0, [pc, #152]	@ (800143c <main+0xd8>)
 80013a4:	f7ff ff80 	bl	80012a8 <lcd_init>
	lcd_clear(&lcd);
 80013a8:	4824      	ldr	r0, [pc, #144]	@ (800143c <main+0xd8>)
 80013aa:	f7ff ff31 	bl	8001210 <lcd_clear>

	//Init AHT10
	aht10.hi2c = &hi2c2;
 80013ae:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <main+0xe0>)
 80013b0:	4a25      	ldr	r2, [pc, #148]	@ (8001448 <main+0xe4>)
 80013b2:	601a      	str	r2, [r3, #0]
	aht10.address = 0x38 << 1; //AHT10 default address << 1 = 0x38 << 1 = 0x70
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <main+0xe0>)
 80013b6:	2270      	movs	r2, #112	@ 0x70
 80013b8:	711a      	strb	r2, [r3, #4]
	AHT10_Init(&aht10);
 80013ba:	4822      	ldr	r0, [pc, #136]	@ (8001444 <main+0xe0>)
 80013bc:	f7ff fdf2 	bl	8000fa4 <AHT10_Init>
	HAL_Delay(50);
 80013c0:	2032      	movs	r0, #50	@ 0x32
 80013c2:	f000 ffd5 	bl	8002370 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013c6:	f004 fa61 	bl	800588c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 80013ca:	4820      	ldr	r0, [pc, #128]	@ (800144c <main+0xe8>)
 80013cc:	f004 fb7a 	bl	8005ac4 <osMutexNew>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001450 <main+0xec>)
 80013d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_sensor */
  task_sensorHandle = osThreadNew(StartSensorTask, NULL, &task_sensor_attributes);
 80013d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001454 <main+0xf0>)
 80013d8:	2100      	movs	r1, #0
 80013da:	481f      	ldr	r0, [pc, #124]	@ (8001458 <main+0xf4>)
 80013dc:	f004 fab3 	bl	8005946 <osThreadNew>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <main+0xf8>)
 80013e4:	6013      	str	r3, [r2, #0]

  /* creation of task_lcd */
  task_lcdHandle = osThreadNew(StartLCDTask, NULL, &task_lcd_attributes);
 80013e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <main+0xfc>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	481e      	ldr	r0, [pc, #120]	@ (8001464 <main+0x100>)
 80013ec:	f004 faab 	bl	8005946 <osThreadNew>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <main+0x104>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* creation of task_uart */
  task_uartHandle = osThreadNew(StartUARTTxTask, NULL, &task_uart_attributes);
 80013f6:	4a1d      	ldr	r2, [pc, #116]	@ (800146c <main+0x108>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	481d      	ldr	r0, [pc, #116]	@ (8001470 <main+0x10c>)
 80013fc:	f004 faa3 	bl	8005946 <osThreadNew>
 8001400:	4603      	mov	r3, r0
 8001402:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <main+0x110>)
 8001404:	6013      	str	r3, [r2, #0]

  /* creation of RXTask */
  RXTaskHandle = osThreadNew(StartUARTRxTask, NULL, &RXTask_attributes);
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <main+0x114>)
 8001408:	2100      	movs	r1, #0
 800140a:	481c      	ldr	r0, [pc, #112]	@ (800147c <main+0x118>)
 800140c:	f004 fa9b 	bl	8005946 <osThreadNew>
 8001410:	4603      	mov	r3, r0
 8001412:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <main+0x11c>)
 8001414:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8001416:	4a1b      	ldr	r2, [pc, #108]	@ (8001484 <main+0x120>)
 8001418:	2100      	movs	r1, #0
 800141a:	481b      	ldr	r0, [pc, #108]	@ (8001488 <main+0x124>)
 800141c:	f004 fa93 	bl	8005946 <osThreadNew>
 8001420:	4603      	mov	r3, r0
 8001422:	4a1a      	ldr	r2, [pc, #104]	@ (800148c <main+0x128>)
 8001424:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001426:	f004 fa53 	bl	80058d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800142a:	bf00      	nop
 800142c:	e7fd      	b.n	800142a <main+0xc6>
 800142e:	bf00      	nop
 8001430:	20000364 	.word	0x20000364
 8001434:	200002e4 	.word	0x200002e4
 8001438:	2000029c 	.word	0x2000029c
 800143c:	2000034c 	.word	0x2000034c
 8001440:	200001f4 	.word	0x200001f4
 8001444:	20000344 	.word	0x20000344
 8001448:	20000248 	.word	0x20000248
 800144c:	0800d454 	.word	0x0800d454
 8001450:	20000340 	.word	0x20000340
 8001454:	0800d3a0 	.word	0x0800d3a0
 8001458:	080017e9 	.word	0x080017e9
 800145c:	2000032c 	.word	0x2000032c
 8001460:	0800d3c4 	.word	0x0800d3c4
 8001464:	08001869 	.word	0x08001869
 8001468:	20000330 	.word	0x20000330
 800146c:	0800d3e8 	.word	0x0800d3e8
 8001470:	08001a01 	.word	0x08001a01
 8001474:	20000334 	.word	0x20000334
 8001478:	0800d40c 	.word	0x0800d40c
 800147c:	08001aed 	.word	0x08001aed
 8001480:	20000338 	.word	0x20000338
 8001484:	0800d430 	.word	0x0800d430
 8001488:	08001d51 	.word	0x08001d51
 800148c:	2000033c 	.word	0x2000033c

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b090      	sub	sp, #64	@ 0x40
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	2228      	movs	r2, #40	@ 0x28
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 fb4f 	bl	8009b42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fafd 	bl	8003ad8 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014e4:	f000 fc78 	bl	8001dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2102      	movs	r1, #2
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fd6a 	bl	8003fdc <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800150e:	f000 fc63 	bl	8001dd8 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3740      	adds	r7, #64	@ 0x40
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_I2C1_Init+0x50>)
 800155a:	f001 fa89 	bl	8002a70 <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 fc38 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001f4 	.word	0x200001f4
 8001570:	40005400 	.word	0x40005400
 8001574:	000186a0 	.word	0x000186a0

08001578 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <MX_I2C2_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	@ (80015cc <MX_I2C2_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_I2C2_Init+0x50>)
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <MX_I2C2_Init+0x58>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_I2C2_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_I2C2_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_I2C2_Init+0x50>)
 8001596:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <MX_I2C2_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_I2C2_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_I2C2_Init+0x50>)
 80015b6:	f001 fa5b 	bl	8002a70 <HAL_I2C_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015c0:	f000 fc0a 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000248 	.word	0x20000248
 80015cc:	40005800 	.word	0x40005800
 80015d0:	00061a80 	.word	0x00061a80

080015d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <MX_TIM2_Init+0xac>)
 80015f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <MX_TIM2_Init+0xac>)
 8001600:	2247      	movs	r2, #71	@ 0x47
 8001602:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_TIM2_Init+0xac>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_TIM2_Init+0xac>)
 800160c:	2264      	movs	r2, #100	@ 0x64
 800160e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_TIM2_Init+0xac>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_TIM2_Init+0xac>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800161c:	4818      	ldr	r0, [pc, #96]	@ (8001680 <MX_TIM2_Init+0xac>)
 800161e:	f002 fe6b 	bl	80042f8 <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001628:	f000 fbd6 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4619      	mov	r1, r3
 800163a:	4811      	ldr	r0, [pc, #68]	@ (8001680 <MX_TIM2_Init+0xac>)
 800163c:	f003 fa2a 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001646:	f000 fbc7 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164a:	2360      	movs	r3, #96	@ 0x60
 800164c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2208      	movs	r2, #8
 800165e:	4619      	mov	r1, r3
 8001660:	4807      	ldr	r0, [pc, #28]	@ (8001680 <MX_TIM2_Init+0xac>)
 8001662:	f002 ff3b 	bl	80044dc <HAL_TIM_PWM_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800166c:	f000 fbb4 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001670:	4803      	ldr	r0, [pc, #12]	@ (8001680 <MX_TIM2_Init+0xac>)
 8001672:	f000 fc77 	bl	8001f64 <HAL_TIM_MspPostInit>

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	@ 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000029c 	.word	0x2000029c

08001684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MX_USART1_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016bc:	f003 fa48 	bl	8004b50 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 fb87 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002e4 	.word	0x200002e4
 80016d4:	40013800 	.word	0x40013800

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_GPIO_Init+0x8c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <MX_GPIO_Init+0x8c>)
 80016f2:	f043 0320 	orr.w	r3, r3, #32
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_GPIO_Init+0x8c>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_GPIO_Init+0x8c>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a16      	ldr	r2, [pc, #88]	@ (8001764 <MX_GPIO_Init+0x8c>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_GPIO_Init+0x8c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_GPIO_Init+0x8c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <MX_GPIO_Init+0x8c>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_GPIO_Init+0x8c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2103      	movs	r1, #3
 8001738:	480b      	ldr	r0, [pc, #44]	@ (8001768 <MX_GPIO_Init+0x90>)
 800173a:	f001 f981 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800173e:	2303      	movs	r3, #3
 8001740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2302      	movs	r3, #2
 800174c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <MX_GPIO_Init+0x90>)
 8001756:	f000 ffef 	bl	8002738 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40010800 	.word	0x40010800

0800176c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	static uint8_t idx = 0;
	if (huart->Instance == USART1) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <HAL_UART_RxCpltCallback+0x64>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d124      	bne.n	80017c8 <HAL_UART_RxCpltCallback+0x5c>
		if (rx_byte != '\n' && idx < sizeof(command_buffer) - 1) {
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_UART_RxCpltCallback+0x68>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b0a      	cmp	r3, #10
 8001784:	d00f      	beq.n	80017a6 <HAL_UART_RxCpltCallback+0x3a>
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_UART_RxCpltCallback+0x6c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b3e      	cmp	r3, #62	@ 0x3e
 800178c:	d80b      	bhi.n	80017a6 <HAL_UART_RxCpltCallback+0x3a>
			command_buffer[idx++] = rx_byte;
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_UART_RxCpltCallback+0x6c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	b2d1      	uxtb	r1, r2
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_UART_RxCpltCallback+0x6c>)
 8001798:	7011      	strb	r1, [r2, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <HAL_UART_RxCpltCallback+0x68>)
 800179e:	7819      	ldrb	r1, [r3, #0]
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_UART_RxCpltCallback+0x70>)
 80017a2:	5499      	strb	r1, [r3, r2]
 80017a4:	e00b      	b.n	80017be <HAL_UART_RxCpltCallback+0x52>
		} else {
			command_buffer[idx] = '\0'; // kết thúc chuỗi
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_UART_RxCpltCallback+0x6c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_UART_RxCpltCallback+0x70>)
 80017ae:	2100      	movs	r1, #0
 80017b0:	5499      	strb	r1, [r3, r2]
			idx = 0;
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_UART_RxCpltCallback+0x6c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
			command_ready = 1;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_UART_RxCpltCallback+0x74>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
		}

		// Bắt đầu nhận byte tiếp theo
		HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	4904      	ldr	r1, [pc, #16]	@ (80017d4 <HAL_UART_RxCpltCallback+0x68>)
 80017c2:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <HAL_UART_RxCpltCallback+0x78>)
 80017c4:	f003 fa9f 	bl	8004d06 <HAL_UART_Receive_IT>
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013800 	.word	0x40013800
 80017d4:	20000364 	.word	0x20000364
 80017d8:	200003ad 	.word	0x200003ad
 80017dc:	20000368 	.word	0x20000368
 80017e0:	200003a8 	.word	0x200003a8
 80017e4:	200002e4 	.word	0x200002e4

080017e8 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t LastWakeTime = osKernelGetTickCount();
 80017f0:	f004 f894 	bl	800591c <osKernelGetTickCount>
 80017f4:	6178      	str	r0, [r7, #20]
	/* Infinite loop */
	for (;;) {
		if (AHT10_ReadRaw(&aht10, &hum_raw, &temp_raw)) {
 80017f6:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <StartSensorTask+0x68>)
 80017f8:	4916      	ldr	r1, [pc, #88]	@ (8001854 <StartSensorTask+0x6c>)
 80017fa:	4817      	ldr	r0, [pc, #92]	@ (8001858 <StartSensorTask+0x70>)
 80017fc:	f7ff fbf6 	bl	8000fec <AHT10_ReadRaw>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d011      	beq.n	800182a <StartSensorTask+0x42>
			float temp = AHT10_ReadTemperature(temp_raw);
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <StartSensorTask+0x68>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fc42 	bl	8001094 <AHT10_ReadTemperature>
 8001810:	6138      	str	r0, [r7, #16]
			float hum = AHT10_ReadHumidity(hum_raw);
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <StartSensorTask+0x6c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fc70 	bl	80010fc <AHT10_ReadHumidity>
 800181c:	60f8      	str	r0, [r7, #12]

			temperature = temp;
 800181e:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <StartSensorTask+0x74>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	6013      	str	r3, [r2, #0]
			humidity = hum;
 8001824:	4a0e      	ldr	r2, [pc, #56]	@ (8001860 <StartSensorTask+0x78>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6013      	str	r3, [r2, #0]
		}
		osDelayUntil(LastWakeTime + pdMS_TO_TICKS(2000));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001830:	4618      	mov	r0, r3
 8001832:	f004 f91a 	bl	8005a6a <osDelayUntil>
		LastWakeTime = osKernelGetTickCount();
 8001836:	f004 f871 	bl	800591c <osKernelGetTickCount>
 800183a:	6178      	str	r0, [r7, #20]
		taskYIELD();
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <StartSensorTask+0x7c>)
 800183e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	f3bf 8f6f 	isb	sy
		if (AHT10_ReadRaw(&aht10, &hum_raw, &temp_raw)) {
 800184c:	e7d3      	b.n	80017f6 <StartSensorTask+0xe>
 800184e:	bf00      	nop
 8001850:	2000035c 	.word	0x2000035c
 8001854:	20000360 	.word	0x20000360
 8001858:	20000344 	.word	0x20000344
 800185c:	20000354 	.word	0x20000354
 8001860:	20000358 	.word	0x20000358
 8001864:	e000ed04 	.word	0xe000ed04

08001868 <StartLCDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b091      	sub	sp, #68	@ 0x44
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	char lcd_buf[32];
	TickType_t LastWakeTime = osKernelGetTickCount();
 8001870:	f004 f854 	bl	800591c <osKernelGetTickCount>
 8001874:	63f8      	str	r0, [r7, #60]	@ 0x3c
	/* Infinite loop */
	for (;;) {
			int ti = (int)temperature;
 8001876:	4b59      	ldr	r3, [pc, #356]	@ (80019dc <StartLCDTask+0x174>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fb36 	bl	8000eec <__aeabi_f2iz>
 8001880:	4603      	mov	r3, r0
 8001882:	63bb      	str	r3, [r7, #56]	@ 0x38
			int tf = (int)((temperature - ti) * 10);
 8001884:	4b55      	ldr	r3, [pc, #340]	@ (80019dc <StartLCDTask+0x174>)
 8001886:	681c      	ldr	r4, [r3, #0]
 8001888:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800188a:	f7ff fadb 	bl	8000e44 <__aeabi_i2f>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff fa20 	bl	8000cd8 <__aeabi_fsub>
 8001898:	4603      	mov	r3, r0
 800189a:	4951      	ldr	r1, [pc, #324]	@ (80019e0 <StartLCDTask+0x178>)
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fc5f 	bl	8000160 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fb21 	bl	8000eec <__aeabi_f2iz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	637b      	str	r3, [r7, #52]	@ 0x34
			int hi = (int)humidity;
 80018ae:	4b4d      	ldr	r3, [pc, #308]	@ (80019e4 <StartLCDTask+0x17c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb1a 	bl	8000eec <__aeabi_f2iz>
 80018b8:	4603      	mov	r3, r0
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
			int hf = (int)((humidity - hi) * 10);
 80018bc:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <StartLCDTask+0x17c>)
 80018be:	681c      	ldr	r4, [r3, #0]
 80018c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018c2:	f7ff fabf 	bl	8000e44 <__aeabi_i2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff fa04 	bl	8000cd8 <__aeabi_fsub>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4943      	ldr	r1, [pc, #268]	@ (80019e0 <StartLCDTask+0x178>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fc43 	bl	8000160 <__aeabi_fmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb05 	bl	8000eec <__aeabi_f2iz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

			switch (display_mode) {
 80018e6:	4b40      	ldr	r3, [pc, #256]	@ (80019e8 <StartLCDTask+0x180>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d047      	beq.n	8001980 <StartLCDTask+0x118>
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	dc61      	bgt.n	80019b8 <StartLCDTask+0x150>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <StartLCDTask+0x96>
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d025      	beq.n	8001948 <StartLCDTask+0xe0>
 80018fc:	e05c      	b.n	80019b8 <StartLCDTask+0x150>
			case DISPLAY_ALL:
				sprintf(lcd_buf, "Temp: %d.%d C", ti, tf);
 80018fe:	f107 000c 	add.w	r0, r7, #12
 8001902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001906:	4939      	ldr	r1, [pc, #228]	@ (80019ec <StartLCDTask+0x184>)
 8001908:	f008 f8b6 	bl	8009a78 <siprintf>
				lcd_gotoxy(&lcd, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	4837      	ldr	r0, [pc, #220]	@ (80019f0 <StartLCDTask+0x188>)
 8001912:	f7ff fc97 	bl	8001244 <lcd_gotoxy>
				lcd_puts(&lcd, lcd_buf);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4619      	mov	r1, r3
 800191c:	4834      	ldr	r0, [pc, #208]	@ (80019f0 <StartLCDTask+0x188>)
 800191e:	f7ff fd0a 	bl	8001336 <lcd_puts>

				sprintf(lcd_buf, "Hum:  %d.%d %%", hi, hf);
 8001922:	f107 000c 	add.w	r0, r7, #12
 8001926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800192a:	4932      	ldr	r1, [pc, #200]	@ (80019f4 <StartLCDTask+0x18c>)
 800192c:	f008 f8a4 	bl	8009a78 <siprintf>
				lcd_gotoxy(&lcd, 0, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	2100      	movs	r1, #0
 8001934:	482e      	ldr	r0, [pc, #184]	@ (80019f0 <StartLCDTask+0x188>)
 8001936:	f7ff fc85 	bl	8001244 <lcd_gotoxy>
				lcd_puts(&lcd, lcd_buf);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4619      	mov	r1, r3
 8001940:	482b      	ldr	r0, [pc, #172]	@ (80019f0 <StartLCDTask+0x188>)
 8001942:	f7ff fcf8 	bl	8001336 <lcd_puts>
				break;
 8001946:	e037      	b.n	80019b8 <StartLCDTask+0x150>

			case DISPLAY_TEMP:
				sprintf(lcd_buf, "Temp: %d.%d C", ti, tf);
 8001948:	f107 000c 	add.w	r0, r7, #12
 800194c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800194e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001950:	4926      	ldr	r1, [pc, #152]	@ (80019ec <StartLCDTask+0x184>)
 8001952:	f008 f891 	bl	8009a78 <siprintf>
				lcd_gotoxy(&lcd, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	4825      	ldr	r0, [pc, #148]	@ (80019f0 <StartLCDTask+0x188>)
 800195c:	f7ff fc72 	bl	8001244 <lcd_gotoxy>
				lcd_puts(&lcd, lcd_buf);
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4619      	mov	r1, r3
 8001966:	4822      	ldr	r0, [pc, #136]	@ (80019f0 <StartLCDTask+0x188>)
 8001968:	f7ff fce5 	bl	8001336 <lcd_puts>

				lcd_gotoxy(&lcd, 0, 1);
 800196c:	2201      	movs	r2, #1
 800196e:	2100      	movs	r1, #0
 8001970:	481f      	ldr	r0, [pc, #124]	@ (80019f0 <StartLCDTask+0x188>)
 8001972:	f7ff fc67 	bl	8001244 <lcd_gotoxy>
				lcd_puts(&lcd, "                "); // Clear dòng 2
 8001976:	4920      	ldr	r1, [pc, #128]	@ (80019f8 <StartLCDTask+0x190>)
 8001978:	481d      	ldr	r0, [pc, #116]	@ (80019f0 <StartLCDTask+0x188>)
 800197a:	f7ff fcdc 	bl	8001336 <lcd_puts>
				break;
 800197e:	e01b      	b.n	80019b8 <StartLCDTask+0x150>

			case DISPLAY_HUMID:
				sprintf(lcd_buf, "Hum:  %d.%d %%", hi, hf);
 8001980:	f107 000c 	add.w	r0, r7, #12
 8001984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001988:	491a      	ldr	r1, [pc, #104]	@ (80019f4 <StartLCDTask+0x18c>)
 800198a:	f008 f875 	bl	8009a78 <siprintf>
				lcd_gotoxy(&lcd, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	4817      	ldr	r0, [pc, #92]	@ (80019f0 <StartLCDTask+0x188>)
 8001994:	f7ff fc56 	bl	8001244 <lcd_gotoxy>
				lcd_puts(&lcd, lcd_buf);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	4814      	ldr	r0, [pc, #80]	@ (80019f0 <StartLCDTask+0x188>)
 80019a0:	f7ff fcc9 	bl	8001336 <lcd_puts>

				lcd_gotoxy(&lcd, 0, 1);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2100      	movs	r1, #0
 80019a8:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <StartLCDTask+0x188>)
 80019aa:	f7ff fc4b 	bl	8001244 <lcd_gotoxy>
				lcd_puts(&lcd, "                "); // Clear dòng 2
 80019ae:	4912      	ldr	r1, [pc, #72]	@ (80019f8 <StartLCDTask+0x190>)
 80019b0:	480f      	ldr	r0, [pc, #60]	@ (80019f0 <StartLCDTask+0x188>)
 80019b2:	f7ff fcc0 	bl	8001336 <lcd_puts>
				break;
 80019b6:	bf00      	nop
			}

		osDelayUntil(LastWakeTime + pdMS_TO_TICKS(500));
 80019b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ba:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 f853 	bl	8005a6a <osDelayUntil>
		LastWakeTime = osKernelGetTickCount();
 80019c4:	f003 ffaa 	bl	800591c <osKernelGetTickCount>
 80019c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
		taskYIELD();
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <StartLCDTask+0x194>)
 80019cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f3bf 8f4f 	dsb	sy
 80019d6:	f3bf 8f6f 	isb	sy
	for (;;) {
 80019da:	e74c      	b.n	8001876 <StartLCDTask+0xe>
 80019dc:	20000354 	.word	0x20000354
 80019e0:	41200000 	.word	0x41200000
 80019e4:	20000358 	.word	0x20000358
 80019e8:	200003ac 	.word	0x200003ac
 80019ec:	0800d27c 	.word	0x0800d27c
 80019f0:	2000034c 	.word	0x2000034c
 80019f4:	0800d28c 	.word	0x0800d28c
 80019f8:	0800d29c 	.word	0x0800d29c
 80019fc:	e000ed04 	.word	0xe000ed04

08001a00 <StartUARTTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTxTask */
void StartUARTTxTask(void *argument)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b09c      	sub	sp, #112	@ 0x70
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTxTask */
	char uart_buf[64];
	TickType_t LastWakeTime = osKernelGetTickCount();
 8001a08:	f003 ff88 	bl	800591c <osKernelGetTickCount>
 8001a0c:	6678      	str	r0, [r7, #100]	@ 0x64
	/* Infinite loop */
	for (;;) {
		float temp = temperature;
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <StartUARTTxTask+0xd4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	663b      	str	r3, [r7, #96]	@ 0x60
		float hum = humidity;
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <StartUARTTxTask+0xd8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	65fb      	str	r3, [r7, #92]	@ 0x5c

		int temp_int = (int) temp;
 8001a1a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001a1c:	f7ff fa66 	bl	8000eec <__aeabi_f2iz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	65bb      	str	r3, [r7, #88]	@ 0x58
		int temp_frac = (int) ((temp - temp_int) * 10);
 8001a24:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001a26:	f7ff fa0d 	bl	8000e44 <__aeabi_i2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001a30:	f7ff f952 	bl	8000cd8 <__aeabi_fsub>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4929      	ldr	r1, [pc, #164]	@ (8001adc <StartUARTTxTask+0xdc>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fb91 	bl	8000160 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fa53 	bl	8000eec <__aeabi_f2iz>
 8001a46:	4603      	mov	r3, r0
 8001a48:	657b      	str	r3, [r7, #84]	@ 0x54
		int hum_int = (int) hum;
 8001a4a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001a4c:	f7ff fa4e 	bl	8000eec <__aeabi_f2iz>
 8001a50:	4603      	mov	r3, r0
 8001a52:	653b      	str	r3, [r7, #80]	@ 0x50
		int hum_frac = (int) ((hum - hum_int) * 10);
 8001a54:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001a56:	f7ff f9f5 	bl	8000e44 <__aeabi_i2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001a60:	f7ff f93a 	bl	8000cd8 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
 8001a66:	491d      	ldr	r1, [pc, #116]	@ (8001adc <StartUARTTxTask+0xdc>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fb79 	bl	8000160 <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fa3b 	bl	8000eec <__aeabi_f2iz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	64fb      	str	r3, [r7, #76]	@ 0x4c

		sprintf(uart_buf, "temperature: %d.%d C, humidity: %d.%d %%\r\n",
 8001a7a:	f107 000c 	add.w	r0, r7, #12
 8001a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a8a:	4915      	ldr	r1, [pc, #84]	@ (8001ae0 <StartUARTTxTask+0xe0>)
 8001a8c:	f007 fff4 	bl	8009a78 <siprintf>
				temp_int, temp_frac, hum_int, hum_frac);

		HAL_UART_Transmit(&huart1, (uint8_t*) uart_buf, strlen(uart_buf), 100);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fb5b 	bl	8000150 <strlen>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	f107 010c 	add.w	r1, r7, #12
 8001aa2:	2364      	movs	r3, #100	@ 0x64
 8001aa4:	480f      	ldr	r0, [pc, #60]	@ (8001ae4 <StartUARTTxTask+0xe4>)
 8001aa6:	f003 f8a3 	bl	8004bf0 <HAL_UART_Transmit>

		osDelayUntil(LastWakeTime + pdMS_TO_TICKS(5000));
 8001aaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aac:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 ffd9 	bl	8005a6a <osDelayUntil>
		LastWakeTime = osKernelGetTickCount();
 8001ab8:	f003 ff30 	bl	800591c <osKernelGetTickCount>
 8001abc:	6678      	str	r0, [r7, #100]	@ 0x64
		taskYIELD();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <StartUARTTxTask+0xe8>)
 8001ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	f3bf 8f6f 	isb	sy
	for (;;) {
 8001ace:	bf00      	nop
 8001ad0:	e79d      	b.n	8001a0e <StartUARTTxTask+0xe>
 8001ad2:	bf00      	nop
 8001ad4:	20000354 	.word	0x20000354
 8001ad8:	20000358 	.word	0x20000358
 8001adc:	41200000 	.word	0x41200000
 8001ae0:	0800d2b0 	.word	0x0800d2b0
 8001ae4:	200002e4 	.word	0x200002e4
 8001ae8:	e000ed04 	.word	0xe000ed04

08001aec <StartUARTRxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTRxTask */
void StartUARTRxTask(void *argument)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b097      	sub	sp, #92	@ 0x5c
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTRxTask */
//	TickType_t LastWakeTime = osKernelGetTickCount();
	/* Infinite loop */
	for (;;) {
		if (command_ready) {
 8001af4:	4b77      	ldr	r3, [pc, #476]	@ (8001cd4 <StartUARTRxTask+0x1e8>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80e1 	beq.w	8001cc2 <StartUARTRxTask+0x1d6>
			command_ready = 0;
 8001b00:	4b74      	ldr	r3, [pc, #464]	@ (8001cd4 <StartUARTRxTask+0x1e8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]

			osMutexAcquire(uartMutexHandle, osWaitForever);
 8001b06:	4b74      	ldr	r3, [pc, #464]	@ (8001cd8 <StartUARTRxTask+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 f85e 	bl	8005bd0 <osMutexAcquire>

			// Hiển thị lệnh nhận được
			HAL_UART_Transmit(&huart1, (uint8_t*) "Cmd: ", 5, HAL_MAX_DELAY);
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	2205      	movs	r2, #5
 8001b1a:	4970      	ldr	r1, [pc, #448]	@ (8001cdc <StartUARTRxTask+0x1f0>)
 8001b1c:	4870      	ldr	r0, [pc, #448]	@ (8001ce0 <StartUARTRxTask+0x1f4>)
 8001b1e:	f003 f867 	bl	8004bf0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) command_buffer,
					strlen(command_buffer), HAL_MAX_DELAY);
 8001b22:	4870      	ldr	r0, [pc, #448]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001b24:	f7fe fb14 	bl	8000150 <strlen>
 8001b28:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) command_buffer,
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	496c      	ldr	r1, [pc, #432]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001b32:	486b      	ldr	r0, [pc, #428]	@ (8001ce0 <StartUARTRxTask+0x1f4>)
 8001b34:	f003 f85c 	bl	8004bf0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	496a      	ldr	r1, [pc, #424]	@ (8001ce8 <StartUARTRxTask+0x1fc>)
 8001b40:	4867      	ldr	r0, [pc, #412]	@ (8001ce0 <StartUARTRxTask+0x1f4>)
 8001b42:	f003 f855 	bl	8004bf0 <HAL_UART_Transmit>

			// Xử lý lệnh
			if (strncmp(command_buffer, "!motor ", 7) == 0) {
 8001b46:	2207      	movs	r2, #7
 8001b48:	4968      	ldr	r1, [pc, #416]	@ (8001cec <StartUARTRxTask+0x200>)
 8001b4a:	4866      	ldr	r0, [pc, #408]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001b4c:	f008 f801 	bl	8009b52 <strncmp>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d115      	bne.n	8001b82 <StartUARTRxTask+0x96>
				if (strstr(command_buffer, "on"))
 8001b56:	4966      	ldr	r1, [pc, #408]	@ (8001cf0 <StartUARTRxTask+0x204>)
 8001b58:	4862      	ldr	r0, [pc, #392]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001b5a:	f008 f80c 	bl	8009b76 <strstr>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <StartUARTRxTask+0x80>
					motor_power = ON;
 8001b64:	4b63      	ldr	r3, [pc, #396]	@ (8001cf4 <StartUARTRxTask+0x208>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e067      	b.n	8001c3c <StartUARTRxTask+0x150>
				else if (strstr(command_buffer, "off"))
 8001b6c:	4962      	ldr	r1, [pc, #392]	@ (8001cf8 <StartUARTRxTask+0x20c>)
 8001b6e:	485d      	ldr	r0, [pc, #372]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001b70:	f008 f801 	bl	8009b76 <strstr>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d060      	beq.n	8001c3c <StartUARTRxTask+0x150>
					motor_power = OFF;
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf4 <StartUARTRxTask+0x208>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e05c      	b.n	8001c3c <StartUARTRxTask+0x150>

			} else if (strncmp(command_buffer, "!rotate ", 8) == 0) {
 8001b82:	2208      	movs	r2, #8
 8001b84:	495d      	ldr	r1, [pc, #372]	@ (8001cfc <StartUARTRxTask+0x210>)
 8001b86:	4857      	ldr	r0, [pc, #348]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001b88:	f007 ffe3 	bl	8009b52 <strncmp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <StartUARTRxTask+0xd2>
				if (strstr(command_buffer, "ccw"))
 8001b92:	495b      	ldr	r1, [pc, #364]	@ (8001d00 <StartUARTRxTask+0x214>)
 8001b94:	4853      	ldr	r0, [pc, #332]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001b96:	f007 ffee 	bl	8009b76 <strstr>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <StartUARTRxTask+0xbc>
					motor_dir = CCW;
 8001ba0:	4b58      	ldr	r3, [pc, #352]	@ (8001d04 <StartUARTRxTask+0x218>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	e049      	b.n	8001c3c <StartUARTRxTask+0x150>
				else if (strstr(command_buffer, "cw"))
 8001ba8:	4957      	ldr	r1, [pc, #348]	@ (8001d08 <StartUARTRxTask+0x21c>)
 8001baa:	484e      	ldr	r0, [pc, #312]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001bac:	f007 ffe3 	bl	8009b76 <strstr>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d042      	beq.n	8001c3c <StartUARTRxTask+0x150>
					motor_dir = CW;
 8001bb6:	4b53      	ldr	r3, [pc, #332]	@ (8001d04 <StartUARTRxTask+0x218>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e03e      	b.n	8001c3c <StartUARTRxTask+0x150>

			} else if (strncmp(command_buffer, "!speed ", 7) == 0) {
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	4952      	ldr	r1, [pc, #328]	@ (8001d0c <StartUARTRxTask+0x220>)
 8001bc2:	4848      	ldr	r0, [pc, #288]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001bc4:	f007 ffc5 	bl	8009b52 <strncmp>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <StartUARTRxTask+0x100>
				int val = atoi(&command_buffer[7]);
 8001bce:	4850      	ldr	r0, [pc, #320]	@ (8001d10 <StartUARTRxTask+0x224>)
 8001bd0:	f006 ffa2 	bl	8008b18 <atoi>
 8001bd4:	64f8      	str	r0, [r7, #76]	@ 0x4c
				if (val >= 0 && val <= 100)
 8001bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db2f      	blt.n	8001c3c <StartUARTRxTask+0x150>
 8001bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	dc2c      	bgt.n	8001c3c <StartUARTRxTask+0x150>
					motor_speed = val;
 8001be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b4b      	ldr	r3, [pc, #300]	@ (8001d14 <StartUARTRxTask+0x228>)
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e027      	b.n	8001c3c <StartUARTRxTask+0x150>

			} else if (strncmp(command_buffer, "!display ", 9) == 0) {
 8001bec:	2209      	movs	r2, #9
 8001bee:	494a      	ldr	r1, [pc, #296]	@ (8001d18 <StartUARTRxTask+0x22c>)
 8001bf0:	483c      	ldr	r0, [pc, #240]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001bf2:	f007 ffae 	bl	8009b52 <strncmp>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d11f      	bne.n	8001c3c <StartUARTRxTask+0x150>
				if (strstr(command_buffer, "all"))
 8001bfc:	4947      	ldr	r1, [pc, #284]	@ (8001d1c <StartUARTRxTask+0x230>)
 8001bfe:	4839      	ldr	r0, [pc, #228]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001c00:	f007 ffb9 	bl	8009b76 <strstr>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <StartUARTRxTask+0x126>
					display_mode = DISPLAY_ALL;
 8001c0a:	4b45      	ldr	r3, [pc, #276]	@ (8001d20 <StartUARTRxTask+0x234>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	e014      	b.n	8001c3c <StartUARTRxTask+0x150>
				else if (strstr(command_buffer, "temp"))
 8001c12:	4944      	ldr	r1, [pc, #272]	@ (8001d24 <StartUARTRxTask+0x238>)
 8001c14:	4833      	ldr	r0, [pc, #204]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001c16:	f007 ffae 	bl	8009b76 <strstr>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <StartUARTRxTask+0x13c>
					display_mode = DISPLAY_TEMP;
 8001c20:	4b3f      	ldr	r3, [pc, #252]	@ (8001d20 <StartUARTRxTask+0x234>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e009      	b.n	8001c3c <StartUARTRxTask+0x150>
				else if (strstr(command_buffer, "humid"))
 8001c28:	493f      	ldr	r1, [pc, #252]	@ (8001d28 <StartUARTRxTask+0x23c>)
 8001c2a:	482e      	ldr	r0, [pc, #184]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001c2c:	f007 ffa3 	bl	8009b76 <strstr>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <StartUARTRxTask+0x150>
					display_mode = DISPLAY_HUMID;
 8001c36:	4b3a      	ldr	r3, [pc, #232]	@ (8001d20 <StartUARTRxTask+0x234>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
			}

			// Phản hồi trạng thái hiện tại
			char debug_msg[64];
			sprintf(debug_msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
					(motor_power == ON) ? "ON" : "OFF",
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <StartUARTRxTask+0x208>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
			sprintf(debug_msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <StartUARTRxTask+0x15e>
 8001c46:	4a39      	ldr	r2, [pc, #228]	@ (8001d2c <StartUARTRxTask+0x240>)
 8001c48:	e000      	b.n	8001c4c <StartUARTRxTask+0x160>
 8001c4a:	4a39      	ldr	r2, [pc, #228]	@ (8001d30 <StartUARTRxTask+0x244>)
					(motor_dir == CW) ? "CW" : "CCW", motor_speed,
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <StartUARTRxTask+0x218>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
			sprintf(debug_msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <StartUARTRxTask+0x16e>
 8001c56:	4937      	ldr	r1, [pc, #220]	@ (8001d34 <StartUARTRxTask+0x248>)
 8001c58:	e000      	b.n	8001c5c <StartUARTRxTask+0x170>
 8001c5a:	4937      	ldr	r1, [pc, #220]	@ (8001d38 <StartUARTRxTask+0x24c>)
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <StartUARTRxTask+0x228>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461c      	mov	r4, r3
					(display_mode == DISPLAY_ALL) ? "ALL" :
 8001c64:	4b2e      	ldr	r3, [pc, #184]	@ (8001d20 <StartUARTRxTask+0x234>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
			sprintf(debug_msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <StartUARTRxTask+0x194>
					(display_mode == DISPLAY_TEMP) ? "TEMP" : "HUMID");
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d20 <StartUARTRxTask+0x234>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <StartUARTRxTask+0x190>
 8001c78:	4b30      	ldr	r3, [pc, #192]	@ (8001d3c <StartUARTRxTask+0x250>)
 8001c7a:	e002      	b.n	8001c82 <StartUARTRxTask+0x196>
 8001c7c:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <StartUARTRxTask+0x254>)
 8001c7e:	e000      	b.n	8001c82 <StartUARTRxTask+0x196>
			sprintf(debug_msg, "Motor: %s, Dir: %s, Speed: %d, Display: %s\r\n",
 8001c80:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <StartUARTRxTask+0x258>)
 8001c82:	f107 000c 	add.w	r0, r7, #12
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	9400      	str	r4, [sp, #0]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	492e      	ldr	r1, [pc, #184]	@ (8001d48 <StartUARTRxTask+0x25c>)
 8001c8e:	f007 fef3 	bl	8009a78 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) debug_msg, strlen(debug_msg),
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fa5a 	bl	8000150 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f107 010c 	add.w	r1, r7, #12
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	480d      	ldr	r0, [pc, #52]	@ (8001ce0 <StartUARTRxTask+0x1f4>)
 8001caa:	f002 ffa1 	bl	8004bf0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			// Xóa buffer cũ
			memset(command_buffer, 0, sizeof(command_buffer));
 8001cae:	2240      	movs	r2, #64	@ 0x40
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	480c      	ldr	r0, [pc, #48]	@ (8001ce4 <StartUARTRxTask+0x1f8>)
 8001cb4:	f007 ff45 	bl	8009b42 <memset>

			osMutexRelease(uartMutexHandle);
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <StartUARTRxTask+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 ffd2 	bl	8005c66 <osMutexRelease>
		}
//		osDelayUntil(LastWakeTime + pdMS_TO_TICKS(50));
//		LastWakeTime = osKernelGetTickCount();
		taskYIELD();
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <StartUARTRxTask+0x260>)
 8001cc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	f3bf 8f6f 	isb	sy
		if (command_ready) {
 8001cd2:	e70f      	b.n	8001af4 <StartUARTRxTask+0x8>
 8001cd4:	200003a8 	.word	0x200003a8
 8001cd8:	20000340 	.word	0x20000340
 8001cdc:	0800d2dc 	.word	0x0800d2dc
 8001ce0:	200002e4 	.word	0x200002e4
 8001ce4:	20000368 	.word	0x20000368
 8001ce8:	0800d2e4 	.word	0x0800d2e4
 8001cec:	0800d2e8 	.word	0x0800d2e8
 8001cf0:	0800d2f0 	.word	0x0800d2f0
 8001cf4:	200003a9 	.word	0x200003a9
 8001cf8:	0800d2f4 	.word	0x0800d2f4
 8001cfc:	0800d2f8 	.word	0x0800d2f8
 8001d00:	0800d304 	.word	0x0800d304
 8001d04:	200003aa 	.word	0x200003aa
 8001d08:	0800d308 	.word	0x0800d308
 8001d0c:	0800d30c 	.word	0x0800d30c
 8001d10:	2000036f 	.word	0x2000036f
 8001d14:	200003ab 	.word	0x200003ab
 8001d18:	0800d314 	.word	0x0800d314
 8001d1c:	0800d320 	.word	0x0800d320
 8001d20:	200003ac 	.word	0x200003ac
 8001d24:	0800d324 	.word	0x0800d324
 8001d28:	0800d32c 	.word	0x0800d32c
 8001d2c:	0800d334 	.word	0x0800d334
 8001d30:	0800d338 	.word	0x0800d338
 8001d34:	0800d33c 	.word	0x0800d33c
 8001d38:	0800d340 	.word	0x0800d340
 8001d3c:	0800d344 	.word	0x0800d344
 8001d40:	0800d34c 	.word	0x0800d34c
 8001d44:	0800d354 	.word	0x0800d354
 8001d48:	0800d358 	.word	0x0800d358
 8001d4c:	e000ed04 	.word	0xe000ed04

08001d50 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
	/* Infinite loop */
	for (;;) {
		if (motor_power == ON) {
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <StartMotorTask+0x70>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d120      	bne.n	8001da4 <StartMotorTask+0x54>
			// Điều chỉnh chiều quay
			if (motor_dir == CW) {
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <StartMotorTask+0x74>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <StartMotorTask+0x32>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4815      	ldr	r0, [pc, #84]	@ (8001dc8 <StartMotorTask+0x78>)
 8001d72:	f000 fe65 	bl	8002a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // IN2
 8001d76:	2200      	movs	r2, #0
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4813      	ldr	r0, [pc, #76]	@ (8001dc8 <StartMotorTask+0x78>)
 8001d7c:	f000 fe60 	bl	8002a40 <HAL_GPIO_WritePin>
 8001d80:	e009      	b.n	8001d96 <StartMotorTask+0x46>
			} else {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2101      	movs	r1, #1
 8001d86:	4810      	ldr	r0, [pc, #64]	@ (8001dc8 <StartMotorTask+0x78>)
 8001d88:	f000 fe5a 	bl	8002a40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2102      	movs	r1, #2
 8001d90:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <StartMotorTask+0x78>)
 8001d92:	f000 fe55 	bl	8002a40 <HAL_GPIO_WritePin>
			}

			// Điều chỉnh tốc độ
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, motor_speed);
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <StartMotorTask+0x7c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <StartMotorTask+0x80>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001da2:	e003      	b.n	8001dac <StartMotorTask+0x5c>
		} else {
			// Tắt động cơ
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001da4:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <StartMotorTask+0x80>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	63da      	str	r2, [r3, #60]	@ 0x3c
		}

//		osDelay(100);  // Cập nhật mỗi 100ms
		taskYIELD();
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <StartMotorTask+0x84>)
 8001dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	f3bf 8f6f 	isb	sy
		if (motor_power == ON) {
 8001dbc:	e7cc      	b.n	8001d58 <StartMotorTask+0x8>
 8001dbe:	bf00      	nop
 8001dc0:	200003a9 	.word	0x200003a9
 8001dc4:	200003aa 	.word	0x200003aa
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	200003ab 	.word	0x200003ab
 8001dd0:	2000029c 	.word	0x2000029c
 8001dd4:	e000ed04 	.word	0xe000ed04

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ddc:	b672      	cpsid	i
}
 8001dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <Error_Handler+0x8>

08001de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_MspInit+0x68>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_MspInit+0x68>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_MspInit+0x68>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_MspInit+0x68>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <HAL_MspInit+0x68>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_MspInit+0x68>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	210f      	movs	r1, #15
 8001e1e:	f06f 0001 	mvn.w	r0, #1
 8001e22:	f000 fba0 	bl	8002566 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <HAL_MspInit+0x6c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <HAL_MspInit+0x6c>)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000

08001e54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0318 	add.w	r3, r7, #24
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f1c <HAL_I2C_MspInit+0xc8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d124      	bne.n	8001ebe <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a29      	ldr	r2, [pc, #164]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e8c:	23c0      	movs	r3, #192	@ 0xc0
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e90:	2312      	movs	r3, #18
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4821      	ldr	r0, [pc, #132]	@ (8001f24 <HAL_I2C_MspInit+0xd0>)
 8001ea0:	f000 fc4a 	bl	8002738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001eaa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eae:	61d3      	str	r3, [r2, #28]
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ebc:	e029      	b.n	8001f12 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <HAL_I2C_MspInit+0xd4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d124      	bne.n	8001f12 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ee0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0318 	add.w	r3, r7, #24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480b      	ldr	r0, [pc, #44]	@ (8001f24 <HAL_I2C_MspInit+0xd0>)
 8001ef6:	f000 fc1f 	bl	8002738 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001f00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_I2C_MspInit+0xcc>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	40005800 	.word	0x40005800

08001f2c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d10b      	bne.n	8001f56 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_TIM_PWM_MspInit+0x34>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a07      	ldr	r2, [pc, #28]	@ (8001f60 <HAL_TIM_PWM_MspInit+0x34>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_TIM_PWM_MspInit+0x34>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f82:	d117      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_TIM_MspPostInit+0x58>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <HAL_TIM_MspPostInit+0x58>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_TIM_MspPostInit+0x58>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4619      	mov	r1, r3
 8001fae:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <HAL_TIM_MspPostInit+0x5c>)
 8001fb0:	f000 fbc2 	bl	8002738 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010800 	.word	0x40010800

08001fc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <HAL_UART_MspInit+0x9c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d139      	bne.n	8002058 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <HAL_UART_MspInit+0xa0>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <HAL_UART_MspInit+0xa0>)
 8001fea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <HAL_UART_MspInit+0xa0>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_UART_MspInit+0xa0>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a18      	ldr	r2, [pc, #96]	@ (8002064 <HAL_UART_MspInit+0xa0>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_UART_MspInit+0xa0>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	4619      	mov	r1, r3
 8002028:	480f      	ldr	r0, [pc, #60]	@ (8002068 <HAL_UART_MspInit+0xa4>)
 800202a:	f000 fb85 	bl	8002738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800202e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4619      	mov	r1, r3
 8002042:	4809      	ldr	r0, [pc, #36]	@ (8002068 <HAL_UART_MspInit+0xa4>)
 8002044:	f000 fb78 	bl	8002738 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2105      	movs	r1, #5
 800204c:	2025      	movs	r0, #37	@ 0x25
 800204e:	f000 fa8a 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002052:	2025      	movs	r0, #37	@ 0x25
 8002054:	f000 faa3 	bl	800259e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40013800 	.word	0x40013800
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800

0800206c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <NMI_Handler+0x4>

08002074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <MemManage_Handler+0x4>

08002084 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <UsageFault_Handler+0x4>

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a4:	f000 f948 	bl	8002338 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020a8:	f005 fc20 	bl	80078ec <xTaskGetSchedulerState>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020b2:	f006 fac1 	bl	8008638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <USART1_IRQHandler+0x10>)
 80020c2:	f002 fe45 	bl	8004d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200002e4 	.word	0x200002e4

080020d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <_kill>:

int _kill(int pid, int sig)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e8:	f007 fda6 	bl	8009c38 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2216      	movs	r2, #22
 80020f0:	601a      	str	r2, [r3, #0]
  return -1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_exit>:

void _exit (int status)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002106:	f04f 31ff 	mov.w	r1, #4294967295
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffe7 	bl	80020de <_kill>
  while (1) {}    /* Make sure we hang here */
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <_exit+0x12>

08002114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e00a      	b.n	800213c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002126:	f3af 8000 	nop.w
 800212a:	4601      	mov	r1, r0
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	60ba      	str	r2, [r7, #8]
 8002132:	b2ca      	uxtb	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf0      	blt.n	8002126 <_read+0x12>
  }

  return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e009      	b.n	8002174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	60ba      	str	r2, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf1      	blt.n	8002160 <_write+0x12>
  }
  return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_close>:

int _close(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ac:	605a      	str	r2, [r3, #4]
  return 0;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <_isatty>:

int _isatty(int file)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
	...

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	@ (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	@ (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f007 fd0e 	bl	8009c38 <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	@ (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20005000 	.word	0x20005000
 8002248:	00000400 	.word	0x00000400
 800224c:	200003b0 	.word	0x200003b0
 8002250:	20002258 	.word	0x20002258

08002254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002260:	f7ff fff8 	bl	8002254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480b      	ldr	r0, [pc, #44]	@ (8002294 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002266:	490c      	ldr	r1, [pc, #48]	@ (8002298 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002268:	4a0c      	ldr	r2, [pc, #48]	@ (800229c <LoopFillZerobss+0x16>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800227c:	4c09      	ldr	r4, [pc, #36]	@ (80022a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228a:	f007 fcdb 	bl	8009c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228e:	f7ff f869 	bl	8001364 <main>
  bx lr
 8002292:	4770      	bx	lr
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800229c:	0800d8c8 	.word	0x0800d8c8
  ldr r2, =_sbss
 80022a0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022a4:	20002254 	.word	0x20002254

080022a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC1_2_IRQHandler>
	...

080022ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <HAL_Init+0x28>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <HAL_Init+0x28>)
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f947 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	200f      	movs	r0, #15
 80022c4:	f000 f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff fd8c 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f95f 	bl	80025ba <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 f927 	bl	8002566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	@ (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000000 	.word	0x20000000
 8002330:	20000008 	.word	0x20000008
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_IncTick+0x1c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_IncTick+0x20>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a03      	ldr	r2, [pc, #12]	@ (8002358 <HAL_IncTick+0x20>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000008 	.word	0x20000008
 8002358:	200003b4 	.word	0x200003b4

0800235c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b02      	ldr	r3, [pc, #8]	@ (800236c <HAL_GetTick+0x10>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	200003b4 	.word	0x200003b4

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff fff0 	bl	800235c <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffe0 	bl	800235c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4906      	ldr	r1, [pc, #24]	@ (8002450 <__NVIC_EnableIRQ+0x34>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800251c:	d301      	bcc.n	8002522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251e:	2301      	movs	r3, #1
 8002520:	e00f      	b.n	8002542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002522:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <SysTick_Config+0x40>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252a:	210f      	movs	r1, #15
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	f7ff ff90 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <SysTick_Config+0x40>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b04      	ldr	r3, [pc, #16]	@ (800254c <SysTick_Config+0x40>)
 800253c:	2207      	movs	r2, #7
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	e000e010 	.word	0xe000e010

08002550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff2d 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002578:	f7ff ff42 	bl	8002400 <__NVIC_GetPriorityGrouping>
 800257c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff ff90 	bl	80024a8 <NVIC_EncodePriority>
 8002588:	4602      	mov	r2, r0
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff5f 	bl	8002454 <__NVIC_SetPriority>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff35 	bl	800241c <__NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffa2 	bl	800250c <SysTick_Config>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d008      	beq.n	80025fc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2204      	movs	r2, #4
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e020      	b.n	800263e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020e 	bic.w	r2, r2, #14
 800260a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d005      	beq.n	800266c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2204      	movs	r2, #4
 8002664:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e051      	b.n	8002710 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020e 	bic.w	r2, r2, #14
 800267a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a22      	ldr	r2, [pc, #136]	@ (800271c <HAL_DMA_Abort_IT+0xd4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d029      	beq.n	80026ea <HAL_DMA_Abort_IT+0xa2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a21      	ldr	r2, [pc, #132]	@ (8002720 <HAL_DMA_Abort_IT+0xd8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d022      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x9e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002724 <HAL_DMA_Abort_IT+0xdc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01a      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x98>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <HAL_DMA_Abort_IT+0xe0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d012      	beq.n	80026da <HAL_DMA_Abort_IT+0x92>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1c      	ldr	r2, [pc, #112]	@ (800272c <HAL_DMA_Abort_IT+0xe4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00a      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x8c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002730 <HAL_DMA_Abort_IT+0xe8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d102      	bne.n	80026ce <HAL_DMA_Abort_IT+0x86>
 80026c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80026cc:	e00e      	b.n	80026ec <HAL_DMA_Abort_IT+0xa4>
 80026ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026d2:	e00b      	b.n	80026ec <HAL_DMA_Abort_IT+0xa4>
 80026d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026d8:	e008      	b.n	80026ec <HAL_DMA_Abort_IT+0xa4>
 80026da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026de:	e005      	b.n	80026ec <HAL_DMA_Abort_IT+0xa4>
 80026e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e4:	e002      	b.n	80026ec <HAL_DMA_Abort_IT+0xa4>
 80026e6:	2310      	movs	r3, #16
 80026e8:	e000      	b.n	80026ec <HAL_DMA_Abort_IT+0xa4>
 80026ea:	2301      	movs	r3, #1
 80026ec:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <HAL_DMA_Abort_IT+0xec>)
 80026ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
    } 
  }
  return status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40020008 	.word	0x40020008
 8002720:	4002001c 	.word	0x4002001c
 8002724:	40020030 	.word	0x40020030
 8002728:	40020044 	.word	0x40020044
 800272c:	40020058 	.word	0x40020058
 8002730:	4002006c 	.word	0x4002006c
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b08b      	sub	sp, #44	@ 0x2c
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	e169      	b.n	8002a20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800274c:	2201      	movs	r2, #1
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 8158 	bne.w	8002a1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a9a      	ldr	r2, [pc, #616]	@ (80029d8 <HAL_GPIO_Init+0x2a0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d05e      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 8002774:	4a98      	ldr	r2, [pc, #608]	@ (80029d8 <HAL_GPIO_Init+0x2a0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d875      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 800277a:	4a98      	ldr	r2, [pc, #608]	@ (80029dc <HAL_GPIO_Init+0x2a4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d058      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 8002780:	4a96      	ldr	r2, [pc, #600]	@ (80029dc <HAL_GPIO_Init+0x2a4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d86f      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 8002786:	4a96      	ldr	r2, [pc, #600]	@ (80029e0 <HAL_GPIO_Init+0x2a8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d052      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 800278c:	4a94      	ldr	r2, [pc, #592]	@ (80029e0 <HAL_GPIO_Init+0x2a8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d869      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 8002792:	4a94      	ldr	r2, [pc, #592]	@ (80029e4 <HAL_GPIO_Init+0x2ac>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d04c      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 8002798:	4a92      	ldr	r2, [pc, #584]	@ (80029e4 <HAL_GPIO_Init+0x2ac>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d863      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 800279e:	4a92      	ldr	r2, [pc, #584]	@ (80029e8 <HAL_GPIO_Init+0x2b0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d046      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 80027a4:	4a90      	ldr	r2, [pc, #576]	@ (80029e8 <HAL_GPIO_Init+0x2b0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d85d      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 80027aa:	2b12      	cmp	r3, #18
 80027ac:	d82a      	bhi.n	8002804 <HAL_GPIO_Init+0xcc>
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d859      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 80027b2:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <HAL_GPIO_Init+0x80>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	08002833 	.word	0x08002833
 80027bc:	0800280d 	.word	0x0800280d
 80027c0:	0800281f 	.word	0x0800281f
 80027c4:	08002861 	.word	0x08002861
 80027c8:	08002867 	.word	0x08002867
 80027cc:	08002867 	.word	0x08002867
 80027d0:	08002867 	.word	0x08002867
 80027d4:	08002867 	.word	0x08002867
 80027d8:	08002867 	.word	0x08002867
 80027dc:	08002867 	.word	0x08002867
 80027e0:	08002867 	.word	0x08002867
 80027e4:	08002867 	.word	0x08002867
 80027e8:	08002867 	.word	0x08002867
 80027ec:	08002867 	.word	0x08002867
 80027f0:	08002867 	.word	0x08002867
 80027f4:	08002867 	.word	0x08002867
 80027f8:	08002867 	.word	0x08002867
 80027fc:	08002815 	.word	0x08002815
 8002800:	08002829 	.word	0x08002829
 8002804:	4a79      	ldr	r2, [pc, #484]	@ (80029ec <HAL_GPIO_Init+0x2b4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800280a:	e02c      	b.n	8002866 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	623b      	str	r3, [r7, #32]
          break;
 8002812:	e029      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	3304      	adds	r3, #4
 800281a:	623b      	str	r3, [r7, #32]
          break;
 800281c:	e024      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	3308      	adds	r3, #8
 8002824:	623b      	str	r3, [r7, #32]
          break;
 8002826:	e01f      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	330c      	adds	r3, #12
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e01a      	b.n	8002868 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800283a:	2304      	movs	r3, #4
 800283c:	623b      	str	r3, [r7, #32]
          break;
 800283e:	e013      	b.n	8002868 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002848:	2308      	movs	r3, #8
 800284a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	611a      	str	r2, [r3, #16]
          break;
 8002852:	e009      	b.n	8002868 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002854:	2308      	movs	r3, #8
 8002856:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	615a      	str	r2, [r3, #20]
          break;
 800285e:	e003      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
          break;
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x130>
          break;
 8002866:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2bff      	cmp	r3, #255	@ 0xff
 800286c:	d801      	bhi.n	8002872 <HAL_GPIO_Init+0x13a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	e001      	b.n	8002876 <HAL_GPIO_Init+0x13e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2bff      	cmp	r3, #255	@ 0xff
 800287c:	d802      	bhi.n	8002884 <HAL_GPIO_Init+0x14c>
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	e002      	b.n	800288a <HAL_GPIO_Init+0x152>
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	3b08      	subs	r3, #8
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	210f      	movs	r1, #15
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	401a      	ands	r2, r3
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	431a      	orrs	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80b1 	beq.w	8002a1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028b8:	4b4d      	ldr	r3, [pc, #308]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a4c      	ldr	r2, [pc, #304]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b4a      	ldr	r3, [pc, #296]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028d0:	4a48      	ldr	r2, [pc, #288]	@ (80029f4 <HAL_GPIO_Init+0x2bc>)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	220f      	movs	r2, #15
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <HAL_GPIO_Init+0x2c0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_GPIO_Init+0x1ec>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3f      	ldr	r2, [pc, #252]	@ (80029fc <HAL_GPIO_Init+0x2c4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00d      	beq.n	8002920 <HAL_GPIO_Init+0x1e8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3e      	ldr	r2, [pc, #248]	@ (8002a00 <HAL_GPIO_Init+0x2c8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x1e4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a04 <HAL_GPIO_Init+0x2cc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_GPIO_Init+0x1e0>
 8002914:	2303      	movs	r3, #3
 8002916:	e006      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 8002918:	2304      	movs	r3, #4
 800291a:	e004      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 800291c:	2302      	movs	r3, #2
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 8002924:	2300      	movs	r3, #0
 8002926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002928:	f002 0203 	and.w	r2, r2, #3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4093      	lsls	r3, r2
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002936:	492f      	ldr	r1, [pc, #188]	@ (80029f4 <HAL_GPIO_Init+0x2bc>)
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002950:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	492c      	ldr	r1, [pc, #176]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800295e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	43db      	mvns	r3, r3
 8002966:	4928      	ldr	r1, [pc, #160]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002968:	4013      	ands	r3, r2
 800296a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002978:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4922      	ldr	r1, [pc, #136]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	43db      	mvns	r3, r3
 800298e:	491e      	ldr	r1, [pc, #120]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002990:	4013      	ands	r3, r2
 8002992:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4918      	ldr	r1, [pc, #96]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ae:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4914      	ldr	r1, [pc, #80]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d021      	beq.n	8002a0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	490e      	ldr	r1, [pc, #56]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e021      	b.n	8002a1a <HAL_GPIO_Init+0x2e2>
 80029d6:	bf00      	nop
 80029d8:	10320000 	.word	0x10320000
 80029dc:	10310000 	.word	0x10310000
 80029e0:	10220000 	.word	0x10220000
 80029e4:	10210000 	.word	0x10210000
 80029e8:	10120000 	.word	0x10120000
 80029ec:	10110000 	.word	0x10110000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010000 	.word	0x40010000
 80029f8:	40010800 	.word	0x40010800
 80029fc:	40010c00 	.word	0x40010c00
 8002a00:	40011000 	.word	0x40011000
 8002a04:	40011400 	.word	0x40011400
 8002a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_GPIO_Init+0x304>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	4909      	ldr	r1, [pc, #36]	@ (8002a3c <HAL_GPIO_Init+0x304>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f47f ae8e 	bne.w	800274c <HAL_GPIO_Init+0x14>
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	372c      	adds	r7, #44	@ 0x2c
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e12b      	b.n	8002cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff f9dc 	bl	8001e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	@ 0x24
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad4:	f001 fbca 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8002ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a81      	ldr	r2, [pc, #516]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d807      	bhi.n	8002af4 <HAL_I2C_Init+0x84>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a80      	ldr	r2, [pc, #512]	@ (8002ce8 <HAL_I2C_Init+0x278>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e006      	b.n	8002b02 <HAL_I2C_Init+0x92>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a7d      	ldr	r2, [pc, #500]	@ (8002cec <HAL_I2C_Init+0x27c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0e7      	b.n	8002cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a78      	ldr	r2, [pc, #480]	@ (8002cf0 <HAL_I2C_Init+0x280>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9b      	lsrs	r3, r3, #18
 8002b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d802      	bhi.n	8002b44 <HAL_I2C_Init+0xd4>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3301      	adds	r3, #1
 8002b42:	e009      	b.n	8002b58 <HAL_I2C_Init+0xe8>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	4a69      	ldr	r2, [pc, #420]	@ (8002cf4 <HAL_I2C_Init+0x284>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	3301      	adds	r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	495c      	ldr	r1, [pc, #368]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002b74:	428b      	cmp	r3, r1
 8002b76:	d819      	bhi.n	8002bac <HAL_I2C_Init+0x13c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e59      	subs	r1, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_I2C_Init+0x138>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e59      	subs	r1, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba6:	e051      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e04f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d111      	bne.n	8002bd8 <HAL_I2C_Init+0x168>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e012      	b.n	8002bfe <HAL_I2C_Init+0x18e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	0099      	lsls	r1, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x196>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <HAL_I2C_Init+0x1bc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e58      	subs	r0, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	440b      	add	r3, r1
 8002c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e58      	subs	r0, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6809      	ldr	r1, [r1, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6911      	ldr	r1, [r2, #16]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	000186a0 	.word	0x000186a0
 8002ce8:	001e847f 	.word	0x001e847f
 8002cec:	003d08ff 	.word	0x003d08ff
 8002cf0:	431bde83 	.word	0x431bde83
 8002cf4:	10624dd3 	.word	0x10624dd3

08002cf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	461a      	mov	r2, r3
 8002d04:	460b      	mov	r3, r1
 8002d06:	817b      	strh	r3, [r7, #10]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff fb26 	bl	800235c <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 80e0 	bne.w	8002ee0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2319      	movs	r3, #25
 8002d26:	2201      	movs	r2, #1
 8002d28:	4970      	ldr	r1, [pc, #448]	@ (8002eec <HAL_I2C_Master_Transmit+0x1f4>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fc9e 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	e0d3      	b.n	8002ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_I2C_Master_Transmit+0x50>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e0cc      	b.n	8002ee2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d007      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2221      	movs	r2, #33	@ 0x21
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	893a      	ldrh	r2, [r7, #8]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a50      	ldr	r2, [pc, #320]	@ (8002ef0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002db0:	8979      	ldrh	r1, [r7, #10]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fb08 	bl	80033cc <I2C_MasterRequestWrite>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e08d      	b.n	8002ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ddc:	e066      	b.n	8002eac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fd5c 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d107      	bne.n	8002e06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e06b      	b.n	8002ee2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d11b      	bne.n	8002e80 <HAL_I2C_Master_Transmit+0x188>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d017      	beq.n	8002e80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6a39      	ldr	r1, [r7, #32]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fd53 	bl	8003930 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d107      	bne.n	8002ea8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e01a      	b.n	8002ee2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d194      	bne.n	8002dde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	00100002 	.word	0x00100002
 8002ef0:	ffff0000 	.word	0xffff0000

08002ef4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	@ 0x30
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	460b      	mov	r3, r1
 8002f02:	817b      	strh	r3, [r7, #10]
 8002f04:	4613      	mov	r3, r2
 8002f06:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff fa26 	bl	800235c <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	f040 824b 	bne.w	80033b6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2319      	movs	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	497f      	ldr	r1, [pc, #508]	@ (8003128 <HAL_I2C_Master_Receive+0x234>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb9e 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	e23e      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_I2C_Master_Receive+0x54>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e237      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d007      	beq.n	8002f6e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2222      	movs	r2, #34	@ 0x22
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a5f      	ldr	r2, [pc, #380]	@ (800312c <HAL_I2C_Master_Receive+0x238>)
 8002fae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa8a 	bl	80034d0 <I2C_MasterRequestRead>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1f8      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d113      	bne.n	8002ff6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e1cc      	b.n	8003390 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d11e      	bne.n	800303c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800300c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800300e:	b672      	cpsid	i
}
 8003010:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003036:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003038:	b662      	cpsie	i
}
 800303a:	e035      	b.n	80030a8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	2b02      	cmp	r3, #2
 8003042:	d11e      	bne.n	8003082 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003052:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003054:	b672      	cpsid	i
}
 8003056:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800307e:	b662      	cpsie	i
}
 8003080:	e012      	b.n	80030a8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030a8:	e172      	b.n	8003390 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	f200 811f 	bhi.w	80032f2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d123      	bne.n	8003104 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fc7d 	bl	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e173      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003102:	e145      	b.n	8003390 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003108:	2b02      	cmp	r3, #2
 800310a:	d152      	bne.n	80031b2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	4906      	ldr	r1, [pc, #24]	@ (8003130 <HAL_I2C_Master_Receive+0x23c>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 faa8 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e148      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
 8003126:	bf00      	nop
 8003128:	00100002 	.word	0x00100002
 800312c:	ffff0000 	.word	0xffff0000
 8003130:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003134:	b672      	cpsid	i
}
 8003136:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003146:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800317a:	b662      	cpsie	i
}
 800317c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031b0:	e0ee      	b.n	8003390 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b8:	2200      	movs	r2, #0
 80031ba:	4981      	ldr	r1, [pc, #516]	@ (80033c0 <HAL_I2C_Master_Receive+0x4cc>)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fa55 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0f5      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031dc:	b672      	cpsid	i
}
 80031de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003212:	4b6c      	ldr	r3, [pc, #432]	@ (80033c4 <HAL_I2C_Master_Receive+0x4d0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	4a6b      	ldr	r2, [pc, #428]	@ (80033c8 <HAL_I2C_Master_Receive+0x4d4>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	0a1a      	lsrs	r2, r3, #8
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00da      	lsls	r2, r3, #3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	3b01      	subs	r3, #1
 8003230:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d118      	bne.n	800326a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800325a:	b662      	cpsie	i
}
 800325c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0a6      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d1d9      	bne.n	800322c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032ba:	b662      	cpsie	i
}
 80032bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032f0:	e04e      	b.n	8003390 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fb62 	bl	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e058      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b04      	cmp	r3, #4
 8003344:	d124      	bne.n	8003390 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	2b03      	cmp	r3, #3
 800334c:	d107      	bne.n	800335e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	f47f ae88 	bne.w	80030aa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00010004 	.word	0x00010004
 80033c4:	20000000 	.word	0x20000000
 80033c8:	14f8b589 	.word	0x14f8b589

080033cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	460b      	mov	r3, r1
 80033da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d006      	beq.n	80033f6 <I2C_MasterRequestWrite+0x2a>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d003      	beq.n	80033f6 <I2C_MasterRequestWrite+0x2a>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033f4:	d108      	bne.n	8003408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e00b      	b.n	8003420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340c:	2b12      	cmp	r3, #18
 800340e:	d107      	bne.n	8003420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800341e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f91d 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003446:	d103      	bne.n	8003450 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e035      	b.n	80034c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800345c:	d108      	bne.n	8003470 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800346c:	611a      	str	r2, [r3, #16]
 800346e:	e01b      	b.n	80034a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003470:	897b      	ldrh	r3, [r7, #10]
 8003472:	11db      	asrs	r3, r3, #7
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0306 	and.w	r3, r3, #6
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f063 030f 	orn	r3, r3, #15
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	490e      	ldr	r1, [pc, #56]	@ (80034c8 <I2C_MasterRequestWrite+0xfc>)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f966 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e010      	b.n	80034c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4907      	ldr	r1, [pc, #28]	@ (80034cc <I2C_MasterRequestWrite+0x100>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f956 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	00010008 	.word	0x00010008
 80034cc:	00010002 	.word	0x00010002

080034d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d006      	beq.n	800350a <I2C_MasterRequestRead+0x3a>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d003      	beq.n	800350a <I2C_MasterRequestRead+0x3a>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003508:	d108      	bne.n	800351c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e00b      	b.n	8003534 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	2b11      	cmp	r3, #17
 8003522:	d107      	bne.n	8003534 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f893 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355a:	d103      	bne.n	8003564 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e079      	b.n	800365c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003570:	d108      	bne.n	8003584 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	e05f      	b.n	8003644 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	11db      	asrs	r3, r3, #7
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 0306 	and.w	r3, r3, #6
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f063 030f 	orn	r3, r3, #15
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4930      	ldr	r1, [pc, #192]	@ (8003664 <I2C_MasterRequestRead+0x194>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f8dc 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e054      	b.n	800365c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4929      	ldr	r1, [pc, #164]	@ (8003668 <I2C_MasterRequestRead+0x198>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f8cc 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e044      	b.n	800365c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f831 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800361e:	d103      	bne.n	8003628 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003626:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e017      	b.n	800365c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	11db      	asrs	r3, r3, #7
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 0306 	and.w	r3, r3, #6
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f063 030e 	orn	r3, r3, #14
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4907      	ldr	r1, [pc, #28]	@ (8003668 <I2C_MasterRequestRead+0x198>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f888 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	00010008 	.word	0x00010008
 8003668:	00010002 	.word	0x00010002

0800366c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800367c:	e048      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d044      	beq.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fe fe69 	bl	800235c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d139      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10d      	bne.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	e00c      	b.n	80036dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d116      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e023      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10d      	bne.n	8003736 <I2C_WaitOnFlagUntilTimeout+0xca>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	e00c      	b.n	8003750 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	429a      	cmp	r2, r3
 8003754:	d093      	beq.n	800367e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800376e:	e071      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377e:	d123      	bne.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e067      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d041      	beq.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d0:	f7fe fdc4 	bl	800235c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d302      	bcc.n	80037e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d136      	bne.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10c      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e00b      	b.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	43da      	mvns	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e021      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10c      	bne.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	43da      	mvns	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e00b      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f af6d 	bne.w	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ac:	e034      	b.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8e3 	bl	8003a7a <I2C_IsAcknowledgeFailed>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e034      	b.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d028      	beq.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fe fd49 	bl	800235c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11d      	bne.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e6:	2b80      	cmp	r3, #128	@ 0x80
 80038e8:	d016      	beq.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e007      	b.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003922:	2b80      	cmp	r3, #128	@ 0x80
 8003924:	d1c3      	bne.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800393c:	e034      	b.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f89b 	bl	8003a7a <I2C_IsAcknowledgeFailed>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e034      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d028      	beq.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe fd01 	bl	800235c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d016      	beq.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e007      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d1c3      	bne.n	800393e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039cc:	e049      	b.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d119      	bne.n	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0210 	mvn.w	r2, #16
 80039e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e030      	b.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a10:	f7fe fca4 	bl	800235c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11d      	bne.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b40      	cmp	r3, #64	@ 0x40
 8003a32:	d016      	beq.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e007      	b.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d1ae      	bne.n	80039ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a90:	d11b      	bne.n	8003aca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e272      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8087 	beq.w	8003c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af8:	4b92      	ldr	r3, [pc, #584]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b04:	4b8f      	ldr	r3, [pc, #572]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d112      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e>
 8003b10:	4b8c      	ldr	r3, [pc, #560]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1e:	4b89      	ldr	r3, [pc, #548]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d06c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x12c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d168      	bne.n	8003c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e24c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x76>
 8003b40:	4b80      	ldr	r3, [pc, #512]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7f      	ldr	r2, [pc, #508]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e02e      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x98>
 8003b56:	4b7b      	ldr	r3, [pc, #492]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7a      	ldr	r2, [pc, #488]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b78      	ldr	r3, [pc, #480]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a77      	ldr	r2, [pc, #476]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0xbc>
 8003b7a:	4b72      	ldr	r3, [pc, #456]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a71      	ldr	r2, [pc, #452]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b6f      	ldr	r3, [pc, #444]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b94:	4b6b      	ldr	r3, [pc, #428]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6a      	ldr	r2, [pc, #424]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b68      	ldr	r3, [pc, #416]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a67      	ldr	r2, [pc, #412]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fbd2 	bl	800235c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe fbce 	bl	800235c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	@ 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e200      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b5d      	ldr	r3, [pc, #372]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xe4>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fbbe 	bl	800235c <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe fbba 	bl	800235c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e1ec      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b53      	ldr	r3, [pc, #332]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x10c>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d063      	beq.n	8003cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c12:	4b4c      	ldr	r3, [pc, #304]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c1e:	4b49      	ldr	r3, [pc, #292]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x18c>
 8003c2a:	4b46      	ldr	r3, [pc, #280]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b43      	ldr	r3, [pc, #268]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x176>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1c0      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4939      	ldr	r1, [pc, #228]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e03a      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b36      	ldr	r3, [pc, #216]	@ (8003d48 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fe fb73 	bl	800235c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fe fb6f 	bl	800235c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1a1      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b2a      	ldr	r3, [pc, #168]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4927      	ldr	r1, [pc, #156]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cae:	4b26      	ldr	r3, [pc, #152]	@ (8003d48 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fe fb52 	bl	800235c <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fb4e 	bl	800235c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e180      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03a      	beq.n	8003d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d019      	beq.n	8003d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cee:	4b17      	ldr	r3, [pc, #92]	@ (8003d4c <HAL_RCC_OscConfig+0x274>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fb32 	bl	800235c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fe fb2e 	bl	800235c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e160      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f000 face 	bl	80042bc <RCC_Delay>
 8003d20:	e01c      	b.n	8003d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d22:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_RCC_OscConfig+0x274>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fe fb18 	bl	800235c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2e:	e00f      	b.n	8003d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe fb14 	bl	800235c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d908      	bls.n	8003d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e146      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	42420000 	.word	0x42420000
 8003d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b92      	ldr	r3, [pc, #584]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e9      	bne.n	8003d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a6 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b88      	ldr	r3, [pc, #544]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4a87      	ldr	r2, [pc, #540]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d84:	61d3      	str	r3, [r2, #28]
 8003d86:	4b85      	ldr	r3, [pc, #532]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b82      	ldr	r3, [pc, #520]	@ (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fe fad5 	bl	800235c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fe fad1 	bl	800235c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	@ 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e103      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b75      	ldr	r3, [pc, #468]	@ (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_RCC_OscConfig+0x312>
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	e02d      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x334>
 8003df2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a69      	ldr	r2, [pc, #420]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6213      	str	r3, [r2, #32]
 8003dfe:	4b67      	ldr	r3, [pc, #412]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a66      	ldr	r2, [pc, #408]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	6213      	str	r3, [r2, #32]
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x356>
 8003e14:	4b61      	ldr	r3, [pc, #388]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4a60      	ldr	r2, [pc, #384]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6213      	str	r3, [r2, #32]
 8003e20:	4b5e      	ldr	r3, [pc, #376]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4a5d      	ldr	r2, [pc, #372]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6213      	str	r3, [r2, #32]
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4a5a      	ldr	r2, [pc, #360]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6213      	str	r3, [r2, #32]
 8003e3a:	4b58      	ldr	r3, [pc, #352]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4a57      	ldr	r2, [pc, #348]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe fa85 	bl	800235c <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fe fa81 	bl	800235c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0b1      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x37e>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fe fa6f 	bl	800235c <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fe fa6b 	bl	800235c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e09b      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	4b40      	ldr	r3, [pc, #256]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8087 	beq.w	8003fce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec0:	4b36      	ldr	r3, [pc, #216]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d061      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d146      	bne.n	8003f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b33      	ldr	r3, [pc, #204]	@ (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fe fa3f 	bl	800235c <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fe fa3b 	bl	800235c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e06d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	4921      	ldr	r1, [pc, #132]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a19      	ldr	r1, [r3, #32]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	491b      	ldr	r1, [pc, #108]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fe fa0f 	bl	800235c <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fe fa0b 	bl	800235c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e03d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x46a>
 8003f60:	e035      	b.n	8003fce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe f9f8 	bl	800235c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe f9f4 	bl	800235c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e026      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f82:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x498>
 8003f8e:	e01e      	b.n	8003fce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e019      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_RCC_OscConfig+0x500>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000

08003fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0d0      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d910      	bls.n	8004020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b67      	ldr	r3, [pc, #412]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 0207 	bic.w	r2, r3, #7
 8004006:	4965      	ldr	r1, [pc, #404]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b63      	ldr	r3, [pc, #396]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004038:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a58      	ldr	r2, [pc, #352]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004050:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a52      	ldr	r2, [pc, #328]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800405a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b50      	ldr	r3, [pc, #320]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	494d      	ldr	r1, [pc, #308]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d040      	beq.n	80040fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b47      	ldr	r3, [pc, #284]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b41      	ldr	r3, [pc, #260]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e073      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b3d      	ldr	r3, [pc, #244]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06b      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b39      	ldr	r3, [pc, #228]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4936      	ldr	r1, [pc, #216]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040cc:	f7fe f946 	bl	800235c <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fe f942 	bl	800235c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e053      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d210      	bcs.n	800412c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b24      	ldr	r3, [pc, #144]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4922      	ldr	r1, [pc, #136]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b20      	ldr	r3, [pc, #128]	@ (800419c <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e032      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4916      	ldr	r1, [pc, #88]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490e      	ldr	r1, [pc, #56]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416a:	f000 f821 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490a      	ldr	r1, [pc, #40]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004186:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <HAL_RCC_ClockConfig+0x1d0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f8a4 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40022000 	.word	0x40022000
 80041a0:	40021000 	.word	0x40021000
 80041a4:	0800d464 	.word	0x0800d464
 80041a8:	20000000 	.word	0x20000000
 80041ac:	20000004 	.word	0x20000004

080041b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x94>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d002      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x30>
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x36>
 80041de:	e027      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041e0:	4b19      	ldr	r3, [pc, #100]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x98>)
 80041e2:	613b      	str	r3, [r7, #16]
      break;
 80041e4:	e027      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0c9b      	lsrs	r3, r3, #18
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	4a17      	ldr	r2, [pc, #92]	@ (800424c <HAL_RCC_GetSysClockFreq+0x9c>)
 80041f0:	5cd3      	ldrb	r3, [r2, r3]
 80041f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d010      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041fe:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x94>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	0c5b      	lsrs	r3, r3, #17
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	4a11      	ldr	r2, [pc, #68]	@ (8004250 <HAL_RCC_GetSysClockFreq+0xa0>)
 800420a:	5cd3      	ldrb	r3, [r2, r3]
 800420c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a0d      	ldr	r2, [pc, #52]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x98>)
 8004212:	fb03 f202 	mul.w	r2, r3, r2
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e004      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0c      	ldr	r2, [pc, #48]	@ (8004254 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	613b      	str	r3, [r7, #16]
      break;
 800422e:	e002      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x98>)
 8004232:	613b      	str	r3, [r7, #16]
      break;
 8004234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004236:	693b      	ldr	r3, [r7, #16]
}
 8004238:	4618      	mov	r0, r3
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	007a1200 	.word	0x007a1200
 800424c:	0800d47c 	.word	0x0800d47c
 8004250:	0800d48c 	.word	0x0800d48c
 8004254:	003d0900 	.word	0x003d0900

08004258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800425c:	4b02      	ldr	r3, [pc, #8]	@ (8004268 <HAL_RCC_GetHCLKFreq+0x10>)
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	20000000 	.word	0x20000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004270:	f7ff fff2 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	0800d474 	.word	0x0800d474

08004294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004298:	f7ff ffde 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	0adb      	lsrs	r3, r3, #11
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	@ (80042b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800d474 	.word	0x0800d474

080042bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042c4:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <RCC_Delay+0x34>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0a      	ldr	r2, [pc, #40]	@ (80042f4 <RCC_Delay+0x38>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0a5b      	lsrs	r3, r3, #9
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042d8:	bf00      	nop
  }
  while (Delay --);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	60fa      	str	r2, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f9      	bne.n	80042d8 <RCC_Delay+0x1c>
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	20000000 	.word	0x20000000
 80042f4:	10624dd3 	.word	0x10624dd3

080042f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e041      	b.n	800438e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fd fe04 	bl	8001f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 f992 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x24>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e022      	b.n	8004402 <HAL_TIM_PWM_Start+0x6a>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d109      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x3e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	e015      	b.n	8004402 <HAL_TIM_PWM_Start+0x6a>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d109      	bne.n	80043f0 <HAL_TIM_PWM_Start+0x58>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e008      	b.n	8004402 <HAL_TIM_PWM_Start+0x6a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e05e      	b.n	80044c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start+0x82>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004418:	e013      	b.n	8004442 <HAL_TIM_PWM_Start+0xaa>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start+0x92>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004428:	e00b      	b.n	8004442 <HAL_TIM_PWM_Start+0xaa>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start+0xa2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004438:	e003      	b.n	8004442 <HAL_TIM_PWM_Start+0xaa>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fafe 	bl	8004a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1e      	ldr	r2, [pc, #120]	@ (80044d0 <HAL_TIM_PWM_Start+0x138>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d107      	bne.n	800446a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004468:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <HAL_TIM_PWM_Start+0x138>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_TIM_PWM_Start+0xfa>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800447c:	d009      	beq.n	8004492 <HAL_TIM_PWM_Start+0xfa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a14      	ldr	r2, [pc, #80]	@ (80044d4 <HAL_TIM_PWM_Start+0x13c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIM_PWM_Start+0xfa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <HAL_TIM_PWM_Start+0x140>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d111      	bne.n	80044b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d010      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	e007      	b.n	80044c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800

080044dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e0ae      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b0c      	cmp	r3, #12
 8004506:	f200 809f 	bhi.w	8004648 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004545 	.word	0x08004545
 8004514:	08004649 	.word	0x08004649
 8004518:	08004649 	.word	0x08004649
 800451c:	08004649 	.word	0x08004649
 8004520:	08004585 	.word	0x08004585
 8004524:	08004649 	.word	0x08004649
 8004528:	08004649 	.word	0x08004649
 800452c:	08004649 	.word	0x08004649
 8004530:	080045c7 	.word	0x080045c7
 8004534:	08004649 	.word	0x08004649
 8004538:	08004649 	.word	0x08004649
 800453c:	08004649 	.word	0x08004649
 8004540:	08004607 	.word	0x08004607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f8f6 	bl	800473c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0208 	orr.w	r2, r2, #8
 800455e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0204 	bic.w	r2, r2, #4
 800456e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6999      	ldr	r1, [r3, #24]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	619a      	str	r2, [r3, #24]
      break;
 8004582:	e064      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f93c 	bl	8004808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	021a      	lsls	r2, r3, #8
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	619a      	str	r2, [r3, #24]
      break;
 80045c4:	e043      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 f985 	bl	80048dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0208 	orr.w	r2, r2, #8
 80045e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0204 	bic.w	r2, r2, #4
 80045f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69d9      	ldr	r1, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	61da      	str	r2, [r3, #28]
      break;
 8004604:	e023      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f9cf 	bl	80049b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	61da      	str	r2, [r3, #28]
      break;
 8004646:	e002      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
      break;
 800464c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004656:	7dfb      	ldrb	r3, [r7, #23]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a2f      	ldr	r2, [pc, #188]	@ (8004730 <TIM_Base_SetConfig+0xd0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_Base_SetConfig+0x30>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467e:	d007      	beq.n	8004690 <TIM_Base_SetConfig+0x30>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a2c      	ldr	r2, [pc, #176]	@ (8004734 <TIM_Base_SetConfig+0xd4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_Base_SetConfig+0x30>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a2b      	ldr	r2, [pc, #172]	@ (8004738 <TIM_Base_SetConfig+0xd8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a22      	ldr	r2, [pc, #136]	@ (8004730 <TIM_Base_SetConfig+0xd0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_Base_SetConfig+0x62>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d007      	beq.n	80046c2 <TIM_Base_SetConfig+0x62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004734 <TIM_Base_SetConfig+0xd4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_Base_SetConfig+0x62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004738 <TIM_Base_SetConfig+0xd8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004730 <TIM_Base_SetConfig+0xd0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d103      	bne.n	8004708 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]
  }
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800

0800473c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f023 0201 	bic.w	r2, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 0302 	bic.w	r3, r3, #2
 8004784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <TIM_OC1_SetConfig+0xc8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10c      	bne.n	80047b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0308 	bic.w	r3, r3, #8
 800479e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f023 0304 	bic.w	r3, r3, #4
 80047b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a13      	ldr	r2, [pc, #76]	@ (8004804 <TIM_OC1_SetConfig+0xc8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d111      	bne.n	80047de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40012c00 	.word	0x40012c00

08004808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f023 0210 	bic.w	r2, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800483e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0320 	bic.w	r3, r3, #32
 8004852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <TIM_OC2_SetConfig+0xd0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d10d      	bne.n	8004884 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800486e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004882:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a14      	ldr	r2, [pc, #80]	@ (80048d8 <TIM_OC2_SetConfig+0xd0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d113      	bne.n	80048b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	40012c00 	.word	0x40012c00

080048dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1d      	ldr	r2, [pc, #116]	@ (80049ac <TIM_OC3_SetConfig+0xd0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d10d      	bne.n	8004956 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a14      	ldr	r2, [pc, #80]	@ (80049ac <TIM_OC3_SetConfig+0xd0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d113      	bne.n	8004986 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800496c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00

080049b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	031b      	lsls	r3, r3, #12
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8004a48 <TIM_OC4_SetConfig+0x98>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d109      	bne.n	8004a24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	019b      	lsls	r3, r3, #6
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40012c00 	.word	0x40012c00

08004a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2201      	movs	r2, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	401a      	ands	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e046      	b.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a16      	ldr	r2, [pc, #88]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af8:	d009      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a12      	ldr	r2, [pc, #72]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a10      	ldr	r2, [pc, #64]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10c      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800

08004b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e042      	b.n	8004be8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd fa24 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	@ 0x24
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fdb7 	bl	8005708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	@ 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d175      	bne.n	8004cfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Transmit+0x2c>
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e06e      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2221      	movs	r2, #33	@ 0x21
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c2e:	f7fd fb95 	bl	800235c <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Transmit+0x6c>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c64:	e02e      	b.n	8004cc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	@ 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb1c 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e03a      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	e007      	b.n	8004cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1cb      	bne.n	8004c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2140      	movs	r1, #64	@ 0x40
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fae8 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	4613      	mov	r3, r2
 8004d12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d112      	bne.n	8004d46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_UART_Receive_IT+0x26>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e00b      	b.n	8004d48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fb0f 	bl	8005360 <UART_Start_Receive_IT>
 8004d42:	4603      	mov	r3, r0
 8004d44:	e000      	b.n	8004d48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
  }
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b0ba      	sub	sp, #232	@ 0xe8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10f      	bne.n	8004db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_UART_IRQHandler+0x66>
 8004da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fbec 	bl	800558c <UART_Receive_IT>
      return;
 8004db4:	e25b      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80de 	beq.w	8004f7c <HAL_UART_IRQHandler+0x22c>
 8004dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80d1 	beq.w	8004f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_UART_IRQHandler+0xae>
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <HAL_UART_IRQHandler+0xd2>
 8004e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <HAL_UART_IRQHandler+0xf6>
 8004e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d011      	beq.n	8004e76 <HAL_UART_IRQHandler+0x126>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f043 0208 	orr.w	r2, r3, #8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 81f2 	beq.w	8005264 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_UART_IRQHandler+0x14e>
 8004e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fb77 	bl	800558c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <HAL_UART_IRQHandler+0x17a>
 8004ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d04f      	beq.n	8004f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa81 	bl	80053d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d041      	beq.n	8004f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1d9      	bne.n	8004ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d013      	beq.n	8004f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	4a7e      	ldr	r2, [pc, #504]	@ (8005130 <HAL_UART_IRQHandler+0x3e0>)
 8004f38:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fd fb82 	bl	8002648 <HAL_DMA_Abort_IT>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d016      	beq.n	8004f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f54:	4610      	mov	r0, r2
 8004f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	e00e      	b.n	8004f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f993 	bl	8005286 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	e00a      	b.n	8004f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f98f 	bl	8005286 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e006      	b.n	8004f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f98b 	bl	8005286 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f76:	e175      	b.n	8005264 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	bf00      	nop
    return;
 8004f7a:	e173      	b.n	8005264 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f040 814f 	bne.w	8005224 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8148 	beq.w	8005224 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8141 	beq.w	8005224 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80b6 	beq.w	8005134 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8145 	beq.w	8005268 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	f080 813e 	bcs.w	8005268 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	f000 8088 	beq.w	8005110 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005016:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800501a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800501e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800502c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005038:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1d9      	bne.n	8005000 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800505c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3314      	adds	r3, #20
 800506c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005070:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005074:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005078:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e1      	bne.n	800504c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800509a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e3      	bne.n	8005088 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e0:	f023 0310 	bic.w	r3, r3, #16
 80050e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd fa61 	bl	80025d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800511e:	b29b      	uxth	r3, r3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	b29b      	uxth	r3, r3
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8b6 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800512c:	e09c      	b.n	8005268 <HAL_UART_IRQHandler+0x518>
 800512e:	bf00      	nop
 8005130:	08005497 	.word	0x08005497
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800513c:	b29b      	uxth	r3, r3
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 808e 	beq.w	800526c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8089 	beq.w	800526c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800517e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800518c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e3      	bne.n	800515a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	623b      	str	r3, [r7, #32]
   return(result);
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e3      	bne.n	8005192 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051fc:	61fa      	str	r2, [r7, #28]
 80051fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	617b      	str	r3, [r7, #20]
   return(result);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e3      	bne.n	80051d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f83b 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005222:	e023      	b.n	800526c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_UART_IRQHandler+0x4f4>
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f93e 	bl	80054be <UART_Transmit_IT>
    return;
 8005242:	e014      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00e      	beq.n	800526e <HAL_UART_IRQHandler+0x51e>
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f97d 	bl	800555c <UART_EndTransmit_IT>
    return;
 8005262:	e004      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
    return;
 8005264:	bf00      	nop
 8005266:	e002      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
      return;
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_UART_IRQHandler+0x51e>
      return;
 800526c:	bf00      	nop
  }
}
 800526e:	37e8      	adds	r7, #232	@ 0xe8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr

08005286 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052be:	e03b      	b.n	8005338 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d037      	beq.n	8005338 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c8:	f7fd f848 	bl	800235c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e03a      	b.n	8005358 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d023      	beq.n	8005338 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b80      	cmp	r3, #128	@ 0x80
 80052f4:	d020      	beq.n	8005338 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b40      	cmp	r3, #64	@ 0x40
 80052fa:	d01d      	beq.n	8005338 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b08      	cmp	r3, #8
 8005308:	d116      	bne.n	8005338 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f856 	bl	80053d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2208      	movs	r2, #8
 800532a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e00f      	b.n	8005358 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	429a      	cmp	r2, r3
 8005354:	d0b4      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2222      	movs	r2, #34	@ 0x22
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0220 	orr.w	r2, r2, #32
 80053c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b095      	sub	sp, #84	@ 0x54
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	330c      	adds	r3, #12
 80053f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80053fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e5      	bne.n	80053da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	61fb      	str	r3, [r7, #28]
   return(result);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	2b01      	cmp	r3, #1
 8005448:	d119      	bne.n	800547e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	60bb      	str	r3, [r7, #8]
   return(result);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0310 	bic.w	r3, r3, #16
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	330c      	adds	r3, #12
 8005468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800546a:	61ba      	str	r2, [r7, #24]
 800546c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6979      	ldr	r1, [r7, #20]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	613b      	str	r3, [r7, #16]
   return(result);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e5      	bne.n	800544a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800548c:	bf00      	nop
 800548e:	3754      	adds	r7, #84	@ 0x54
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr

08005496 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff fee8 	bl	8005286 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b21      	cmp	r3, #33	@ 0x21
 80054d0:	d13e      	bne.n	8005550 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054da:	d114      	bne.n	8005506 <UART_Transmit_IT+0x48>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d110      	bne.n	8005506 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	1c9a      	adds	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	621a      	str	r2, [r3, #32]
 8005504:	e008      	b.n	8005518 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	1c59      	adds	r1, r3, #1
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6211      	str	r1, [r2, #32]
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10f      	bne.n	800554c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800553a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800554a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e000      	b.n	8005552 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005550:	2302      	movs	r3, #2
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005572:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff fe79 	bl	8005274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08c      	sub	sp, #48	@ 0x30
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b22      	cmp	r3, #34	@ 0x22
 800559e:	f040 80ae 	bne.w	80056fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055aa:	d117      	bne.n	80055dc <UART_Receive_IT+0x50>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d113      	bne.n	80055dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80055da:	e026      	b.n	800562a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d007      	beq.n	8005600 <UART_Receive_IT+0x74>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <UART_Receive_IT+0x82>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	e008      	b.n	8005620 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800561a:	b2da      	uxtb	r2, r3
 800561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29b      	uxth	r3, r3
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4619      	mov	r1, r3
 8005638:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800563a:	2b00      	cmp	r3, #0
 800563c:	d15d      	bne.n	80056fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0220 	bic.w	r2, r2, #32
 800564c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800565c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005680:	2b01      	cmp	r3, #1
 8005682:	d135      	bne.n	80056f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	613b      	str	r3, [r7, #16]
   return(result);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f023 0310 	bic.w	r3, r3, #16
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056aa:	623a      	str	r2, [r7, #32]
 80056ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	69f9      	ldr	r1, [r7, #28]
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e5      	bne.n	800568a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d10a      	bne.n	80056e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fdd5 	bl	8005298 <HAL_UARTEx_RxEventCallback>
 80056ee:	e002      	b.n	80056f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fc f83b 	bl	800176c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e002      	b.n	8005700 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e000      	b.n	8005700 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
  }
}
 8005700:	4618      	mov	r0, r3
 8005702:	3730      	adds	r7, #48	@ 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005742:	f023 030c 	bic.w	r3, r3, #12
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	430b      	orrs	r3, r1
 800574e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2c      	ldr	r2, [pc, #176]	@ (800581c <UART_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d103      	bne.n	8005778 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005770:	f7fe fd90 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	e002      	b.n	800577e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005778:	f7fe fd78 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 800577c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009a      	lsls	r2, r3, #2
 8005788:	441a      	add	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <UART_SetConfig+0x118>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	0119      	lsls	r1, r3, #4
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009a      	lsls	r2, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005820 <UART_SetConfig+0x118>)
 80057b6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	2064      	movs	r0, #100	@ 0x64
 80057be:	fb00 f303 	mul.w	r3, r0, r3
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	3332      	adds	r3, #50	@ 0x32
 80057c8:	4a15      	ldr	r2, [pc, #84]	@ (8005820 <UART_SetConfig+0x118>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057d4:	4419      	add	r1, r3
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	009a      	lsls	r2, r3, #2
 80057e0:	441a      	add	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <UART_SetConfig+0x118>)
 80057ee:	fba3 0302 	umull	r0, r3, r3, r2
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2064      	movs	r0, #100	@ 0x64
 80057f6:	fb00 f303 	mul.w	r3, r0, r3
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	3332      	adds	r3, #50	@ 0x32
 8005800:	4a07      	ldr	r2, [pc, #28]	@ (8005820 <UART_SetConfig+0x118>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	440a      	add	r2, r1
 8005812:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40013800 	.word	0x40013800
 8005820:	51eb851f 	.word	0x51eb851f

08005824 <__NVIC_SetPriority>:
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	6039      	str	r1, [r7, #0]
 800582e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005834:	2b00      	cmp	r3, #0
 8005836:	db0a      	blt.n	800584e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	490c      	ldr	r1, [pc, #48]	@ (8005870 <__NVIC_SetPriority+0x4c>)
 800583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	440b      	add	r3, r1
 8005848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800584c:	e00a      	b.n	8005864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4908      	ldr	r1, [pc, #32]	@ (8005874 <__NVIC_SetPriority+0x50>)
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	3b04      	subs	r3, #4
 800585c:	0112      	lsls	r2, r2, #4
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	440b      	add	r3, r1
 8005862:	761a      	strb	r2, [r3, #24]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	e000e100 	.word	0xe000e100
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800587c:	2100      	movs	r1, #0
 800587e:	f06f 0004 	mvn.w	r0, #4
 8005882:	f7ff ffcf 	bl	8005824 <__NVIC_SetPriority>
#endif
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005892:	f3ef 8305 	mrs	r3, IPSR
 8005896:	603b      	str	r3, [r7, #0]
  return(result);
 8005898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800589e:	f06f 0305 	mvn.w	r3, #5
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	e00c      	b.n	80058c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058a6:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <osKernelInitialize+0x40>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058ae:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <osKernelInitialize+0x40>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	e002      	b.n	80058c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058c0:	687b      	ldr	r3, [r7, #4]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	200003b8 	.word	0x200003b8

080058d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d6:	f3ef 8305 	mrs	r3, IPSR
 80058da:	603b      	str	r3, [r7, #0]
  return(result);
 80058dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80058e2:	f06f 0305 	mvn.w	r3, #5
 80058e6:	607b      	str	r3, [r7, #4]
 80058e8:	e010      	b.n	800590c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <osKernelStart+0x48>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d109      	bne.n	8005906 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058f2:	f7ff ffc1 	bl	8005878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058f6:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <osKernelStart+0x48>)
 80058f8:	2202      	movs	r2, #2
 80058fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058fc:	f001 fbc0 	bl	8007080 <vTaskStartScheduler>
      stat = osOK;
 8005900:	2300      	movs	r3, #0
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	e002      	b.n	800590c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800590c:	687b      	ldr	r3, [r7, #4]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	200003b8 	.word	0x200003b8

0800591c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005922:	f3ef 8305 	mrs	r3, IPSR
 8005926:	603b      	str	r3, [r7, #0]
  return(result);
 8005928:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800592e:	f001 fcbb 	bl	80072a8 <xTaskGetTickCountFromISR>
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	e002      	b.n	800593c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005936:	f001 fca9 	bl	800728c <xTaskGetTickCount>
 800593a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800593c:	687b      	ldr	r3, [r7, #4]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005946:	b580      	push	{r7, lr}
 8005948:	b08e      	sub	sp, #56	@ 0x38
 800594a:	af04      	add	r7, sp, #16
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005956:	f3ef 8305 	mrs	r3, IPSR
 800595a:	617b      	str	r3, [r7, #20]
  return(result);
 800595c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800595e:	2b00      	cmp	r3, #0
 8005960:	d17e      	bne.n	8005a60 <osThreadNew+0x11a>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d07b      	beq.n	8005a60 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800596c:	2318      	movs	r3, #24
 800596e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005974:	f04f 33ff 	mov.w	r3, #4294967295
 8005978:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d045      	beq.n	8005a0c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <osThreadNew+0x48>
        name = attr->name;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <osThreadNew+0x6e>
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b38      	cmp	r3, #56	@ 0x38
 80059a6:	d805      	bhi.n	80059b4 <osThreadNew+0x6e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <osThreadNew+0x72>
        return (NULL);
 80059b4:	2300      	movs	r3, #0
 80059b6:	e054      	b.n	8005a62 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00e      	beq.n	80059ee <osThreadNew+0xa8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b5b      	cmp	r3, #91	@ 0x5b
 80059d6:	d90a      	bls.n	80059ee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <osThreadNew+0xa8>
        mem = 1;
 80059e8:	2301      	movs	r3, #1
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e010      	b.n	8005a10 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10c      	bne.n	8005a10 <osThreadNew+0xca>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <osThreadNew+0xca>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <osThreadNew+0xca>
          mem = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e001      	b.n	8005a10 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d110      	bne.n	8005a38 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a1e:	9202      	str	r2, [sp, #8]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f001 f911 	bl	8006c54 <xTaskCreateStatic>
 8005a32:	4603      	mov	r3, r0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e013      	b.n	8005a60 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d110      	bne.n	8005a60 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	f107 0310 	add.w	r3, r7, #16
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f001 f95f 	bl	8006d14 <xTaskCreate>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d001      	beq.n	8005a60 <osThreadNew+0x11a>
            hTask = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a60:	693b      	ldr	r3, [r7, #16]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3728      	adds	r7, #40	@ 0x28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a72:	f3ef 8305 	mrs	r3, IPSR
 8005a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a78:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8005a7e:	f06f 0305 	mvn.w	r3, #5
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e019      	b.n	8005aba <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8005a8a:	f001 fbff 	bl	800728c <xTaskGetTickCount>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <osDelayUntil+0x4a>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	db06      	blt.n	8005ab4 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	6939      	ldr	r1, [r7, #16]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fa67 	bl	8006f80 <vTaskDelayUntil>
 8005ab2:	e002      	b.n	8005aba <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005ab4:	f06f 0303 	mvn.w	r3, #3
 8005ab8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad0:	f3ef 8305 	mrs	r3, IPSR
 8005ad4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ad6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d174      	bne.n	8005bc6 <osMutexNew+0x102>
    if (attr != NULL) {
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	e001      	b.n	8005aee <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <osMutexNew+0x3a>
      rmtx = 1U;
 8005af8:	2301      	movs	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e001      	b.n	8005b02 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d15c      	bne.n	8005bc6 <osMutexNew+0x102>
      mem = -1;
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b10:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d015      	beq.n	8005b44 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d006      	beq.n	8005b2e <osMutexNew+0x6a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b26:	d902      	bls.n	8005b2e <osMutexNew+0x6a>
          mem = 1;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	e00c      	b.n	8005b48 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d108      	bne.n	8005b48 <osMutexNew+0x84>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <osMutexNew+0x84>
            mem = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e001      	b.n	8005b48 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d112      	bne.n	8005b74 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	2004      	movs	r0, #4
 8005b5c:	f000 fb0a 	bl	8006174 <xQueueCreateMutexStatic>
 8005b60:	61f8      	str	r0, [r7, #28]
 8005b62:	e016      	b.n	8005b92 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	f000 fb02 	bl	8006174 <xQueueCreateMutexStatic>
 8005b70:	61f8      	str	r0, [r7, #28]
 8005b72:	e00e      	b.n	8005b92 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10b      	bne.n	8005b92 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005b80:	2004      	movs	r0, #4
 8005b82:	f000 fadf 	bl	8006144 <xQueueCreateMutex>
 8005b86:	61f8      	str	r0, [r7, #28]
 8005b88:	e003      	b.n	8005b92 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f000 fada 	bl	8006144 <xQueueCreateMutex>
 8005b90:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00c      	beq.n	8005bb2 <osMutexNew+0xee>
        if (attr != NULL) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <osMutexNew+0xe2>
          name = attr->name;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e001      	b.n	8005baa <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	69f8      	ldr	r0, [r7, #28]
 8005bae:	f000 fff5 	bl	8006b9c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <osMutexNew+0x102>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005bc6:	69fb      	ldr	r3, [r7, #28]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bf4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005bfa:	f06f 0305 	mvn.w	r3, #5
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e02c      	b.n	8005c5c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005c08:	f06f 0303 	mvn.w	r3, #3
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e025      	b.n	8005c5c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d011      	beq.n	8005c3a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6938      	ldr	r0, [r7, #16]
 8005c1a:	f000 fafb 	bl	8006214 <xQueueTakeMutexRecursive>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d01b      	beq.n	8005c5c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005c2a:	f06f 0301 	mvn.w	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e014      	b.n	8005c5c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c32:	f06f 0302 	mvn.w	r3, #2
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e010      	b.n	8005c5c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6938      	ldr	r0, [r7, #16]
 8005c3e:	f000 fd81 	bl	8006744 <xQueueSemaphoreTake>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d009      	beq.n	8005c5c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005c4e:	f06f 0301 	mvn.w	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e002      	b.n	8005c5c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c56:	f06f 0302 	mvn.w	r3, #2
 8005c5a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005c5c:	697b      	ldr	r3, [r7, #20]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c82:	f3ef 8305 	mrs	r3, IPSR
 8005c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c88:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005c8e:	f06f 0305 	mvn.w	r3, #5
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e01f      	b.n	8005cd6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005c9c:	f06f 0303 	mvn.w	r3, #3
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e018      	b.n	8005cd6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d009      	beq.n	8005cbe <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005caa:	6938      	ldr	r0, [r7, #16]
 8005cac:	f000 fa7d 	bl	80061aa <xQueueGiveMutexRecursive>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d00f      	beq.n	8005cd6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005cb6:	f06f 0302 	mvn.w	r3, #2
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e00b      	b.n	8005cd6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	6938      	ldr	r0, [r7, #16]
 8005cc6:	f000 fadd 	bl	8006284 <xQueueGenericSend>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d002      	beq.n	8005cd6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005cd0:	f06f 0302 	mvn.w	r3, #2
 8005cd4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005cd6:	697b      	ldr	r3, [r7, #20]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a06      	ldr	r2, [pc, #24]	@ (8005d08 <vApplicationGetIdleTaskMemory+0x28>)
 8005cf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4a05      	ldr	r2, [pc, #20]	@ (8005d0c <vApplicationGetIdleTaskMemory+0x2c>)
 8005cf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2280      	movs	r2, #128	@ 0x80
 8005cfc:	601a      	str	r2, [r3, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr
 8005d08:	200003bc 	.word	0x200003bc
 8005d0c:	20000418 	.word	0x20000418

08005d10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4a07      	ldr	r2, [pc, #28]	@ (8005d3c <vApplicationGetTimerTaskMemory+0x2c>)
 8005d20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4a06      	ldr	r2, [pc, #24]	@ (8005d40 <vApplicationGetTimerTaskMemory+0x30>)
 8005d26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d2e:	601a      	str	r2, [r3, #0]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000618 	.word	0x20000618
 8005d40:	20000674 	.word	0x20000674

08005d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f103 0208 	add.w	r2, r3, #8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f103 0208 	add.w	r2, r3, #8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f103 0208 	add.w	r2, r3, #8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d103      	bne.n	8005e00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e00c      	b.n	8005e1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3308      	adds	r3, #8
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e002      	b.n	8005e0e <vListInsert+0x2e>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d2f6      	bcs.n	8005e08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6892      	ldr	r2, [r2, #8]
 8005e66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6852      	ldr	r2, [r2, #4]
 8005e70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d103      	bne.n	8005e84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ece:	f002 fb35 	bl	800853c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	441a      	add	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efe:	3b01      	subs	r3, #1
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	22ff      	movs	r2, #255	@ 0xff
 8005f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	22ff      	movs	r2, #255	@ 0xff
 8005f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3310      	adds	r3, #16
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 fb13 	bl	800755c <xTaskRemoveFromEventList>
 8005f36:	e009      	b.n	8005f4c <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3310      	adds	r3, #16
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff ff01 	bl	8005d44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3324      	adds	r3, #36	@ 0x24
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fefc 	bl	8005d44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f4c:	f002 fb26 	bl	800859c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f50:	2301      	movs	r3, #1
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b08e      	sub	sp, #56	@ 0x38
 8005f5e:	af02      	add	r7, sp, #8
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	e7fd      	b.n	8005f82 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <xQueueGenericCreateStatic+0x56>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <xQueueGenericCreateStatic+0x5a>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <xQueueGenericCreateStatic+0x5c>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	623b      	str	r3, [r7, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <xQueueGenericCreateStatic+0x84>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <xQueueGenericCreateStatic+0x88>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueGenericCreateStatic+0x8a>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	61fb      	str	r3, [r7, #28]
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	e7fd      	b.n	8005ffc <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006000:	2350      	movs	r3, #80	@ 0x50
 8006002:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b50      	cmp	r3, #80	@ 0x50
 8006008:	d00b      	beq.n	8006022 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	61bb      	str	r3, [r7, #24]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006022:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00d      	beq.n	800604a <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800602e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006036:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f840 	bl	80060ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800604c:	4618      	mov	r0, r3
 800604e:	3730      	adds	r7, #48	@ 0x30
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	@ 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	613b      	str	r3, [r7, #16]
}
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	e7fd      	b.n	800607c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	fb02 f303 	mul.w	r3, r2, r3
 8006088:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3350      	adds	r3, #80	@ 0x50
 800608e:	4618      	mov	r0, r3
 8006090:	f002 fb56 	bl	8008740 <pvPortMalloc>
 8006094:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d011      	beq.n	80060c0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	3350      	adds	r3, #80	@ 0x50
 80060a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060ae:	79fa      	ldrb	r2, [r7, #7]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f805 	bl	80060ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060c0:	69bb      	ldr	r3, [r7, #24]
	}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d103      	bne.n	80060e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e002      	b.n	80060ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060f8:	2101      	movs	r1, #1
 80060fa:	69b8      	ldr	r0, [r7, #24]
 80060fc:	f7ff fed1 	bl	8005ea2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	78fa      	ldrb	r2, [r7, #3]
 8006104:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00e      	beq.n	800613c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006130:	2300      	movs	r3, #0
 8006132:	2200      	movs	r2, #0
 8006134:	2100      	movs	r1, #0
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f8a4 	bl	8006284 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800614e:	2301      	movs	r3, #1
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	461a      	mov	r2, r3
 800615a:	6939      	ldr	r1, [r7, #16]
 800615c:	6978      	ldr	r0, [r7, #20]
 800615e:	f7ff ff79 	bl	8006054 <xQueueGenericCreate>
 8006162:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff ffd3 	bl	8006110 <prvInitialiseMutex>

		return xNewQueue;
 800616a:	68fb      	ldr	r3, [r7, #12]
	}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af02      	add	r7, sp, #8
 800617a:	4603      	mov	r3, r0
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006180:	2301      	movs	r3, #1
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2200      	movs	r2, #0
 8006190:	6939      	ldr	r1, [r7, #16]
 8006192:	6978      	ldr	r0, [r7, #20]
 8006194:	f7ff fee1 	bl	8005f5a <xQueueGenericCreateStatic>
 8006198:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff ffb8 	bl	8006110 <prvInitialiseMutex>

		return xNewQueue;
 80061a0:	68fb      	ldr	r3, [r7, #12]
	}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80061aa:	b590      	push	{r4, r7, lr}
 80061ac:	b087      	sub	sp, #28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	60fb      	str	r3, [r7, #12]
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	689c      	ldr	r4, [r3, #8]
 80061d8:	f001 fb7a 	bl	80078d0 <xTaskGetCurrentTaskHandle>
 80061dc:	4603      	mov	r3, r0
 80061de:	429c      	cmp	r4, r3
 80061e0:	d111      	bne.n	8006206 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	1e5a      	subs	r2, r3, #1
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d105      	bne.n	8006200 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80061f4:	2300      	movs	r3, #0
 80061f6:	2200      	movs	r2, #0
 80061f8:	2100      	movs	r1, #0
 80061fa:	6938      	ldr	r0, [r7, #16]
 80061fc:	f000 f842 	bl	8006284 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006200:	2301      	movs	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e001      	b.n	800620a <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800620a:	697b      	ldr	r3, [r7, #20]
	}
 800620c:	4618      	mov	r0, r3
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	bd90      	pop	{r4, r7, pc}

08006214 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006214:	b590      	push	{r4, r7, lr}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	689c      	ldr	r4, [r3, #8]
 8006244:	f001 fb44 	bl	80078d0 <xTaskGetCurrentTaskHandle>
 8006248:	4603      	mov	r3, r0
 800624a:	429c      	cmp	r4, r3
 800624c:	d107      	bne.n	800625e <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e00c      	b.n	8006278 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6938      	ldr	r0, [r7, #16]
 8006262:	f000 fa6f 	bl	8006744 <xQueueSemaphoreTake>
 8006266:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006278:	697b      	ldr	r3, [r7, #20]
	}
 800627a:	4618      	mov	r0, r3
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd90      	pop	{r4, r7, pc}
	...

08006284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	@ 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006292:	2300      	movs	r3, #0
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <xQueueGenericSend+0x34>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <xQueueGenericSend+0x42>
 80062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <xQueueGenericSend+0x46>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <xQueueGenericSend+0x48>
 80062ca:	2300      	movs	r3, #0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10b      	bne.n	80062e8 <xQueueGenericSend+0x64>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d103      	bne.n	80062f6 <xQueueGenericSend+0x72>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <xQueueGenericSend+0x76>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <xQueueGenericSend+0x78>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <xQueueGenericSend+0x94>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	623b      	str	r3, [r7, #32]
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	e7fd      	b.n	8006314 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006318:	f001 fae8 	bl	80078ec <xTaskGetSchedulerState>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <xQueueGenericSend+0xa4>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <xQueueGenericSend+0xa8>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <xQueueGenericSend+0xaa>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <xQueueGenericSend+0xc6>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	61fb      	str	r3, [r7, #28]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800634a:	f002 f8f7 	bl	800853c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <xQueueGenericSend+0xdc>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d112      	bne.n	8006386 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006366:	f000 fb08 	bl	800697a <prvCopyDataToQueue>
 800636a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	3324      	adds	r3, #36	@ 0x24
 8006378:	4618      	mov	r0, r3
 800637a:	f001 f8ef 	bl	800755c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800637e:	f002 f90d 	bl	800859c <vPortExitCritical>
				return pdPASS;
 8006382:	2301      	movs	r3, #1
 8006384:	e062      	b.n	800644c <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d103      	bne.n	8006394 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800638c:	f002 f906 	bl	800859c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006390:	2300      	movs	r3, #0
 8006392:	e05b      	b.n	800644c <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 f940 	bl	8007624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063a8:	f002 f8f8 	bl	800859c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ac:	f000 fed0 	bl	8007150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b0:	f002 f8c4 	bl	800853c <vPortEnterCritical>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d103      	bne.n	80063ca <xQueueGenericSend+0x146>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d103      	bne.n	80063e0 <xQueueGenericSend+0x15c>
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063e0:	f002 f8dc 	bl	800859c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e4:	1d3a      	adds	r2, r7, #4
 80063e6:	f107 0314 	add.w	r3, r7, #20
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 f92f 	bl	8007650 <xTaskCheckForTimeOut>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d123      	bne.n	8006440 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063fa:	f000 fbb6 	bl	8006b6a <prvIsQueueFull>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	3310      	adds	r3, #16
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f001 f853 	bl	80074b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006412:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006414:	f000 fb41 	bl	8006a9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006418:	f000 fea8 	bl	800716c <xTaskResumeAll>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d193      	bne.n	800634a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006422:	4b0c      	ldr	r3, [pc, #48]	@ (8006454 <xQueueGenericSend+0x1d0>)
 8006424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	e78a      	b.n	800634a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006436:	f000 fb30 	bl	8006a9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800643a:	f000 fe97 	bl	800716c <xTaskResumeAll>
 800643e:	e784      	b.n	800634a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006442:	f000 fb2a 	bl	8006a9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006446:	f000 fe91 	bl	800716c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800644a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800644c:	4618      	mov	r0, r3
 800644e:	3738      	adds	r7, #56	@ 0x38
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b090      	sub	sp, #64	@ 0x40
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	e7fd      	b.n	8006484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <xQueueGenericSendFromISR+0x3e>
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <xQueueGenericSendFromISR+0x42>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <xQueueGenericSendFromISR+0x44>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d103      	bne.n	80064c6 <xQueueGenericSendFromISR+0x6e>
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <xQueueGenericSendFromISR+0x72>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <xQueueGenericSendFromISR+0x74>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10b      	bne.n	80064e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	623b      	str	r3, [r7, #32]
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	e7fd      	b.n	80064e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064e8:	f002 f8ea 	bl	80086c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064ec:	f3ef 8211 	mrs	r2, BASEPRI
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	61fa      	str	r2, [r7, #28]
 8006502:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006504:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <xQueueGenericSendFromISR+0xc2>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d12f      	bne.n	800657a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800651a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006520:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006530:	f000 fa23 	bl	800697a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006534:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d112      	bne.n	8006564 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	3324      	adds	r3, #36	@ 0x24
 800654a:	4618      	mov	r0, r3
 800654c:	f001 f806 	bl	800755c <xTaskRemoveFromEventList>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e007      	b.n	8006574 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006564:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006568:	3301      	adds	r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	b25a      	sxtb	r2, r3
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006574:	2301      	movs	r3, #1
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006578:	e001      	b.n	800657e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800657a:	2300      	movs	r3, #0
 800657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006580:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006588:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800658a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800658c:	4618      	mov	r0, r3
 800658e:	3740      	adds	r7, #64	@ 0x40
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	@ 0x30
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <xQueueReceive+0x32>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	623b      	str	r3, [r7, #32]
}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop
 80065c4:	e7fd      	b.n	80065c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <xQueueReceive+0x40>
 80065cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <xQueueReceive+0x44>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <xQueueReceive+0x46>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <xQueueReceive+0x62>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61fb      	str	r3, [r7, #28]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065f6:	f001 f979 	bl	80078ec <xTaskGetSchedulerState>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <xQueueReceive+0x72>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <xQueueReceive+0x76>
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <xQueueReceive+0x78>
 800660a:	2300      	movs	r3, #0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <xQueueReceive+0x94>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61bb      	str	r3, [r7, #24]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006628:	f001 ff88 	bl	800853c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	2b00      	cmp	r3, #0
 8006636:	d014      	beq.n	8006662 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800663c:	f000 fa07 	bl	8006a4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	1e5a      	subs	r2, r3, #1
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	3310      	adds	r3, #16
 8006654:	4618      	mov	r0, r3
 8006656:	f000 ff81 	bl	800755c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800665a:	f001 ff9f 	bl	800859c <vPortExitCritical>
				return pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	e069      	b.n	8006736 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006668:	f001 ff98 	bl	800859c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800666c:	2300      	movs	r3, #0
 800666e:	e062      	b.n	8006736 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006676:	f107 0310 	add.w	r3, r7, #16
 800667a:	4618      	mov	r0, r3
 800667c:	f000 ffd2 	bl	8007624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006684:	f001 ff8a 	bl	800859c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006688:	f000 fd62 	bl	8007150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800668c:	f001 ff56 	bl	800853c <vPortEnterCritical>
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006696:	b25b      	sxtb	r3, r3
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d103      	bne.n	80066a6 <xQueueReceive+0x112>
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d103      	bne.n	80066bc <xQueueReceive+0x128>
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066bc:	f001 ff6e 	bl	800859c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c0:	1d3a      	adds	r2, r7, #4
 80066c2:	f107 0310 	add.w	r3, r7, #16
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 ffc1 	bl	8007650 <xTaskCheckForTimeOut>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d123      	bne.n	800671c <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d6:	f000 fa32 	bl	8006b3e <prvIsQueueEmpty>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d017      	beq.n	8006710 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e2:	3324      	adds	r3, #36	@ 0x24
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fee5 	bl	80074b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f0:	f000 f9d3 	bl	8006a9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066f4:	f000 fd3a 	bl	800716c <xTaskResumeAll>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d194      	bne.n	8006628 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80066fe:	4b10      	ldr	r3, [pc, #64]	@ (8006740 <xQueueReceive+0x1ac>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	e78b      	b.n	8006628 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006712:	f000 f9c2 	bl	8006a9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006716:	f000 fd29 	bl	800716c <xTaskResumeAll>
 800671a:	e785      	b.n	8006628 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800671c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800671e:	f000 f9bc 	bl	8006a9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006722:	f000 fd23 	bl	800716c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006728:	f000 fa09 	bl	8006b3e <prvIsQueueEmpty>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f43f af7a 	beq.w	8006628 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006734:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006736:	4618      	mov	r0, r3
 8006738:	3730      	adds	r7, #48	@ 0x30
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08e      	sub	sp, #56	@ 0x38
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800674e:	2300      	movs	r3, #0
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	623b      	str	r3, [r7, #32]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	61fb      	str	r3, [r7, #28]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006798:	f001 f8a8 	bl	80078ec <xTaskGetSchedulerState>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <xQueueSemaphoreTake+0x64>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <xQueueSemaphoreTake+0x68>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <xQueueSemaphoreTake+0x6a>
 80067ac:	2300      	movs	r3, #0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	61bb      	str	r3, [r7, #24]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ca:	f001 feb7 	bl	800853c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d019      	beq.n	800680e <xQueueSemaphoreTake+0xca>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	1e5a      	subs	r2, r3, #1
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80067ea:	f001 f9f9 	bl	8007be0 <pvTaskIncrementMutexHeldCount>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <xQueueSemaphoreTake+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	3310      	adds	r3, #16
 8006800:	4618      	mov	r0, r3
 8006802:	f000 feab 	bl	800755c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006806:	f001 fec9 	bl	800859c <vPortExitCritical>
				return pdPASS;
 800680a:	2301      	movs	r3, #1
 800680c:	e098      	b.n	8006940 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d112      	bne.n	800683a <xQueueSemaphoreTake+0xf6>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <xQueueSemaphoreTake+0xee>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	617b      	str	r3, [r7, #20]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xQueueSemaphoreTake+0xea>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006832:	f001 feb3 	bl	800859c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006836:	2300      	movs	r3, #0
 8006838:	e082      	b.n	8006940 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 800683a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <xQueueSemaphoreTake+0x10a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	4618      	mov	r0, r3
 8006846:	f000 feed 	bl	8007624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800684e:	f001 fea5 	bl	800859c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006852:	f000 fc7d 	bl	8007150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006856:	f001 fe71 	bl	800853c <vPortEnterCritical>
 800685a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006860:	b25b      	sxtb	r3, r3
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d103      	bne.n	8006870 <xQueueSemaphoreTake+0x12c>
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006876:	b25b      	sxtb	r3, r3
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d103      	bne.n	8006886 <xQueueSemaphoreTake+0x142>
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006886:	f001 fe89 	bl	800859c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800688a:	463a      	mov	r2, r7
 800688c:	f107 030c 	add.w	r3, r7, #12
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fedc 	bl	8007650 <xTaskCheckForTimeOut>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d132      	bne.n	8006904 <xQueueSemaphoreTake+0x1c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800689e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068a0:	f000 f94d 	bl	8006b3e <prvIsQueueEmpty>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d026      	beq.n	80068f8 <xQueueSemaphoreTake+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 80068b2:	f001 fe43 	bl	800853c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 f834 	bl	8007928 <xTaskPriorityInherit>
 80068c0:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80068c2:	f001 fe6b 	bl	800859c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	3324      	adds	r3, #36	@ 0x24
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fdf2 	bl	80074b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068d6:	f000 f8e0 	bl	8006a9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068da:	f000 fc47 	bl	800716c <xTaskResumeAll>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f af72 	bne.w	80067ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80068e6:	4b18      	ldr	r3, [pc, #96]	@ (8006948 <xQueueSemaphoreTake+0x204>)
 80068e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	e768      	b.n	80067ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80068f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068fa:	f000 f8ce 	bl	8006a9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068fe:	f000 fc35 	bl	800716c <xTaskResumeAll>
 8006902:	e762      	b.n	80067ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006904:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006906:	f000 f8c8 	bl	8006a9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800690a:	f000 fc2f 	bl	800716c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800690e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006910:	f000 f915 	bl	8006b3e <prvIsQueueEmpty>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	f43f af57 	beq.w	80067ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00d      	beq.n	800693e <xQueueSemaphoreTake+0x1fa>
					{
						taskENTER_CRITICAL();
 8006922:	f001 fe0b 	bl	800853c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006926:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006928:	f000 f810 	bl	800694c <prvGetDisinheritPriorityAfterTimeout>
 800692c:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006934:	4618      	mov	r0, r3
 8006936:	f001 f8cf 	bl	8007ad8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800693a:	f001 fe2f 	bl	800859c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800693e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006940:	4618      	mov	r0, r3
 8006942:	3738      	adds	r7, #56	@ 0x38
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d006      	beq.n	800696a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e001      	b.n	800696e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800696e:	68fb      	ldr	r3, [r7, #12]
	}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b086      	sub	sp, #24
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10d      	bne.n	80069b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d14d      	bne.n	8006a3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f827 	bl	80079f8 <xTaskPriorityDisinherit>
 80069aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
 80069b2:	e043      	b.n	8006a3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d119      	bne.n	80069ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6858      	ldr	r0, [r3, #4]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	461a      	mov	r2, r3
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	f003 f972 	bl	8009cae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d2:	441a      	add	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d32b      	bcc.n	8006a3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	e026      	b.n	8006a3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68d8      	ldr	r0, [r3, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	461a      	mov	r2, r3
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	f003 f958 	bl	8009cae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	425b      	negs	r3, r3
 8006a08:	441a      	add	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d207      	bcs.n	8006a2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a22:	425b      	negs	r3, r3
 8006a24:	441a      	add	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d105      	bne.n	8006a3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006a44:	697b      	ldr	r3, [r7, #20]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d018      	beq.n	8006a92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	441a      	add	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d303      	bcc.n	8006a82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68d9      	ldr	r1, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6838      	ldr	r0, [r7, #0]
 8006a8e:	f003 f90e 	bl	8009cae <memcpy>
	}
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006aa2:	f001 fd4b 	bl	800853c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aae:	e011      	b.n	8006ad4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3324      	adds	r3, #36	@ 0x24
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fd4d 	bl	800755c <xTaskRemoveFromEventList>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ac8:	f000 fe26 	bl	8007718 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dce9      	bgt.n	8006ab0 <prvUnlockQueue+0x16>
 8006adc:	e000      	b.n	8006ae0 <prvUnlockQueue+0x46>
					break;
 8006ade:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	22ff      	movs	r2, #255	@ 0xff
 8006ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ae8:	f001 fd58 	bl	800859c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006aec:	f001 fd26 	bl	800853c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006af6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006af8:	e011      	b.n	8006b1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d012      	beq.n	8006b28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3310      	adds	r3, #16
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fd28 	bl	800755c <xTaskRemoveFromEventList>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b12:	f000 fe01 	bl	8007718 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dce9      	bgt.n	8006afa <prvUnlockQueue+0x60>
 8006b26:	e000      	b.n	8006b2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	22ff      	movs	r2, #255	@ 0xff
 8006b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006b32:	f001 fd33 	bl	800859c <vPortExitCritical>
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b46:	f001 fcf9 	bl	800853c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e001      	b.n	8006b5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b5c:	f001 fd1e 	bl	800859c <vPortExitCritical>

	return xReturn;
 8006b60:	68fb      	ldr	r3, [r7, #12]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b72:	f001 fce3 	bl	800853c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d102      	bne.n	8006b88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e001      	b.n	8006b8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b8c:	f001 fd06 	bl	800859c <vPortExitCritical>

	return xReturn;
 8006b90:	68fb      	ldr	r3, [r7, #12]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e014      	b.n	8006bd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bac:	4a0e      	ldr	r2, [pc, #56]	@ (8006be8 <vQueueAddToRegistry+0x4c>)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10b      	bne.n	8006bd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bb8:	490b      	ldr	r1, [pc, #44]	@ (8006be8 <vQueueAddToRegistry+0x4c>)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006bc2:	4a09      	ldr	r2, [pc, #36]	@ (8006be8 <vQueueAddToRegistry+0x4c>)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4413      	add	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006bce:	e006      	b.n	8006bde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b07      	cmp	r3, #7
 8006bda:	d9e7      	bls.n	8006bac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr
 8006be8:	20000a74 	.word	0x20000a74

08006bec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bfc:	f001 fc9e 	bl	800853c <vPortEnterCritical>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d103      	bne.n	8006c16 <vQueueWaitForMessageRestricted+0x2a>
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d103      	bne.n	8006c2c <vQueueWaitForMessageRestricted+0x40>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c2c:	f001 fcb6 	bl	800859c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d106      	bne.n	8006c46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	3324      	adds	r3, #36	@ 0x24
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fc5f 	bl	8007504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c46:	6978      	ldr	r0, [r7, #20]
 8006c48:	f7ff ff27 	bl	8006a9a <prvUnlockQueue>
	}
 8006c4c:	bf00      	nop
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08e      	sub	sp, #56	@ 0x38
 8006c58:	af04      	add	r7, sp, #16
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	623b      	str	r3, [r7, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	e7fd      	b.n	8006c7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	61fb      	str	r3, [r7, #28]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c9e:	235c      	movs	r3, #92	@ 0x5c
 8006ca0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ca6:	d00b      	beq.n	8006cc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	61bb      	str	r3, [r7, #24]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006cc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01e      	beq.n	8006d06 <xTaskCreateStatic+0xb2>
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01b      	beq.n	8006d06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9303      	str	r3, [sp, #12]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	9302      	str	r3, [sp, #8]
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f850 	bl	8006d9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d00:	f000 f8de 	bl	8006ec0 <prvAddNewTaskToReadyList>
 8006d04:	e001      	b.n	8006d0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d0a:	697b      	ldr	r3, [r7, #20]
	}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3728      	adds	r7, #40	@ 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	@ 0x30
 8006d18:	af04      	add	r7, sp, #16
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 fd09 	bl	8008740 <pvPortMalloc>
 8006d2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00e      	beq.n	8006d54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d36:	205c      	movs	r0, #92	@ 0x5c
 8006d38:	f001 fd02 	bl	8008740 <pvPortMalloc>
 8006d3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d4a:	e005      	b.n	8006d58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d4c:	6978      	ldr	r0, [r7, #20]
 8006d4e:	f001 fdc5 	bl	80088dc <vPortFree>
 8006d52:	e001      	b.n	8006d58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d017      	beq.n	8006d8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f80e 	bl	8006d9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d82:	69f8      	ldr	r0, [r7, #28]
 8006d84:	f000 f89c 	bl	8006ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	e002      	b.n	8006d94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d94:	69bb      	ldr	r3, [r7, #24]
	}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b088      	sub	sp, #32
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	461a      	mov	r2, r3
 8006db6:	21a5      	movs	r1, #165	@ 0xa5
 8006db8:	f002 fec3 	bl	8009b42 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	f023 0307 	bic.w	r3, r3, #7
 8006dd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	617b      	str	r3, [r7, #20]
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01f      	beq.n	8006e3e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
 8006e02:	e012      	b.n	8006e2a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	7819      	ldrb	r1, [r3, #0]
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	3334      	adds	r3, #52	@ 0x34
 8006e14:	460a      	mov	r2, r1
 8006e16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d006      	beq.n	8006e32 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	2b0f      	cmp	r3, #15
 8006e2e:	d9e9      	bls.n	8006e04 <prvInitialiseNewTask+0x66>
 8006e30:	e000      	b.n	8006e34 <prvInitialiseNewTask+0x96>
			{
				break;
 8006e32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e3c:	e003      	b.n	8006e46 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e48:	2b37      	cmp	r3, #55	@ 0x37
 8006e4a:	d901      	bls.n	8006e50 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e4c:	2337      	movs	r3, #55	@ 0x37
 8006e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	2200      	movs	r2, #0
 8006e60:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	3304      	adds	r3, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe ff8b 	bl	8005d82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	3318      	adds	r3, #24
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe ff86 	bl	8005d82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	2200      	movs	r2, #0
 8006e90:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	69b8      	ldr	r0, [r7, #24]
 8006ea0:	f001 fa5e 	bl	8008360 <pxPortInitialiseStack>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3720      	adds	r7, #32
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ec8:	f001 fb38 	bl	800853c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ecc:	4b26      	ldr	r3, [pc, #152]	@ (8006f68 <prvAddNewTaskToReadyList+0xa8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	4a25      	ldr	r2, [pc, #148]	@ (8006f68 <prvAddNewTaskToReadyList+0xa8>)
 8006ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ed6:	4b25      	ldr	r3, [pc, #148]	@ (8006f6c <prvAddNewTaskToReadyList+0xac>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ede:	4a23      	ldr	r2, [pc, #140]	@ (8006f6c <prvAddNewTaskToReadyList+0xac>)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ee4:	4b20      	ldr	r3, [pc, #128]	@ (8006f68 <prvAddNewTaskToReadyList+0xa8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d110      	bne.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006eec:	f000 fc32 	bl	8007754 <prvInitialiseTaskLists>
 8006ef0:	e00d      	b.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f70 <prvAddNewTaskToReadyList+0xb0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d109      	bne.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006efa:	4b1c      	ldr	r3, [pc, #112]	@ (8006f6c <prvAddNewTaskToReadyList+0xac>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d802      	bhi.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f08:	4a18      	ldr	r2, [pc, #96]	@ (8006f6c <prvAddNewTaskToReadyList+0xac>)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f0e:	4b19      	ldr	r3, [pc, #100]	@ (8006f74 <prvAddNewTaskToReadyList+0xb4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	4a17      	ldr	r2, [pc, #92]	@ (8006f74 <prvAddNewTaskToReadyList+0xb4>)
 8006f16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f18:	4b16      	ldr	r3, [pc, #88]	@ (8006f74 <prvAddNewTaskToReadyList+0xb4>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f24:	4b14      	ldr	r3, [pc, #80]	@ (8006f78 <prvAddNewTaskToReadyList+0xb8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d903      	bls.n	8006f34 <prvAddNewTaskToReadyList+0x74>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	4a11      	ldr	r2, [pc, #68]	@ (8006f78 <prvAddNewTaskToReadyList+0xb8>)
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4a0e      	ldr	r2, [pc, #56]	@ (8006f7c <prvAddNewTaskToReadyList+0xbc>)
 8006f42:	441a      	add	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f7fe ff25 	bl	8005d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f50:	f001 fb24 	bl	800859c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f54:	4b06      	ldr	r3, [pc, #24]	@ (8006f70 <prvAddNewTaskToReadyList+0xb0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f5c:	4b03      	ldr	r3, [pc, #12]	@ (8006f6c <prvAddNewTaskToReadyList+0xac>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000f88 	.word	0x20000f88
 8006f6c:	20000ab4 	.word	0x20000ab4
 8006f70:	20000f94 	.word	0x20000f94
 8006f74:	20000fa4 	.word	0x20000fa4
 8006f78:	20000f90 	.word	0x20000f90
 8006f7c:	20000ab8 	.word	0x20000ab8

08006f80 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	@ 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10b      	bne.n	8006fac <vTaskDelayUntil+0x2c>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	617b      	str	r3, [r7, #20]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <vTaskDelayUntil+0x4a>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	613b      	str	r3, [r7, #16]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006fca:	4b2a      	ldr	r3, [pc, #168]	@ (8007074 <vTaskDelayUntil+0xf4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <vTaskDelayUntil+0x6a>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	60fb      	str	r3, [r7, #12]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006fea:	f000 f8b1 	bl	8007150 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006fee:	4b22      	ldr	r3, [pc, #136]	@ (8007078 <vTaskDelayUntil+0xf8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6a3a      	ldr	r2, [r7, #32]
 8007004:	429a      	cmp	r2, r3
 8007006:	d20b      	bcs.n	8007020 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	429a      	cmp	r2, r3
 8007010:	d211      	bcs.n	8007036 <vTaskDelayUntil+0xb6>
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	429a      	cmp	r2, r3
 8007018:	d90d      	bls.n	8007036 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800701a:	2301      	movs	r3, #1
 800701c:	627b      	str	r3, [r7, #36]	@ 0x24
 800701e:	e00a      	b.n	8007036 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	429a      	cmp	r2, r3
 8007028:	d303      	bcc.n	8007032 <vTaskDelayUntil+0xb2>
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	429a      	cmp	r2, r3
 8007030:	d901      	bls.n	8007036 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	d006      	beq.n	8007050 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fddc 	bl	8007c08 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007050:	f000 f88c 	bl	800716c <xTaskResumeAll>
 8007054:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d107      	bne.n	800706c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800705c:	4b07      	ldr	r3, [pc, #28]	@ (800707c <vTaskDelayUntil+0xfc>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800706c:	bf00      	nop
 800706e:	3728      	adds	r7, #40	@ 0x28
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000fb0 	.word	0x20000fb0
 8007078:	20000f8c 	.word	0x20000f8c
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	@ 0x28
 8007084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800708e:	463a      	mov	r2, r7
 8007090:	1d39      	adds	r1, r7, #4
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fe22 	bl	8005ce0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	9202      	str	r2, [sp, #8]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	2300      	movs	r3, #0
 80070ac:	460a      	mov	r2, r1
 80070ae:	4922      	ldr	r1, [pc, #136]	@ (8007138 <vTaskStartScheduler+0xb8>)
 80070b0:	4822      	ldr	r0, [pc, #136]	@ (800713c <vTaskStartScheduler+0xbc>)
 80070b2:	f7ff fdcf 	bl	8006c54 <xTaskCreateStatic>
 80070b6:	4603      	mov	r3, r0
 80070b8:	4a21      	ldr	r2, [pc, #132]	@ (8007140 <vTaskStartScheduler+0xc0>)
 80070ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070bc:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <vTaskStartScheduler+0xc0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070c4:	2301      	movs	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e001      	b.n	80070ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d102      	bne.n	80070da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070d4:	f000 fdec 	bl	8007cb0 <xTimerCreateTimerTask>
 80070d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d116      	bne.n	800710e <vTaskStartScheduler+0x8e>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070f4:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <vTaskStartScheduler+0xc4>)
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <vTaskStartScheduler+0xc8>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007102:	4b12      	ldr	r3, [pc, #72]	@ (800714c <vTaskStartScheduler+0xcc>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007108:	f001 f9a6 	bl	8008458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800710c:	e00f      	b.n	800712e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d10b      	bne.n	800712e <vTaskStartScheduler+0xae>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60fb      	str	r3, [r7, #12]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <vTaskStartScheduler+0xaa>
}
 800712e:	bf00      	nop
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	0800d388 	.word	0x0800d388
 800713c:	08007731 	.word	0x08007731
 8007140:	20000fac 	.word	0x20000fac
 8007144:	20000fa8 	.word	0x20000fa8
 8007148:	20000f94 	.word	0x20000f94
 800714c:	20000f8c 	.word	0x20000f8c

08007150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007154:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <vTaskSuspendAll+0x18>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	4a03      	ldr	r2, [pc, #12]	@ (8007168 <vTaskSuspendAll+0x18>)
 800715c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800715e:	bf00      	nop
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000fb0 	.word	0x20000fb0

0800716c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800717a:	4b3c      	ldr	r3, [pc, #240]	@ (800726c <xTaskResumeAll+0x100>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10b      	bne.n	800719a <xTaskResumeAll+0x2e>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	603b      	str	r3, [r7, #0]
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	e7fd      	b.n	8007196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800719a:	f001 f9cf 	bl	800853c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800719e:	4b33      	ldr	r3, [pc, #204]	@ (800726c <xTaskResumeAll+0x100>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	4a31      	ldr	r2, [pc, #196]	@ (800726c <xTaskResumeAll+0x100>)
 80071a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071a8:	4b30      	ldr	r3, [pc, #192]	@ (800726c <xTaskResumeAll+0x100>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d156      	bne.n	800725e <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007270 <xTaskResumeAll+0x104>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d052      	beq.n	800725e <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071b8:	e02f      	b.n	800721a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ba:	4b2e      	ldr	r3, [pc, #184]	@ (8007274 <xTaskResumeAll+0x108>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3318      	adds	r3, #24
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fe42 	bl	8005e50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fe3d 	bl	8005e50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071da:	4b27      	ldr	r3, [pc, #156]	@ (8007278 <xTaskResumeAll+0x10c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d903      	bls.n	80071ea <xTaskResumeAll+0x7e>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4a24      	ldr	r2, [pc, #144]	@ (8007278 <xTaskResumeAll+0x10c>)
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4a21      	ldr	r2, [pc, #132]	@ (800727c <xTaskResumeAll+0x110>)
 80071f8:	441a      	add	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7fe fdca 	bl	8005d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <xTaskResumeAll+0x114>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007210:	429a      	cmp	r2, r3
 8007212:	d302      	bcc.n	800721a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007214:	4b1b      	ldr	r3, [pc, #108]	@ (8007284 <xTaskResumeAll+0x118>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800721a:	4b16      	ldr	r3, [pc, #88]	@ (8007274 <xTaskResumeAll+0x108>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1cb      	bne.n	80071ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007228:	f000 fb32 	bl	8007890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800722c:	4b16      	ldr	r3, [pc, #88]	@ (8007288 <xTaskResumeAll+0x11c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007238:	f000 f848 	bl	80072cc <xTaskIncrementTick>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007242:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <xTaskResumeAll+0x118>)
 8007244:	2201      	movs	r2, #1
 8007246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3b01      	subs	r3, #1
 800724c:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f1      	bne.n	8007238 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007254:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <xTaskResumeAll+0x11c>)
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800725a:	4b0a      	ldr	r3, [pc, #40]	@ (8007284 <xTaskResumeAll+0x118>)
 800725c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800725e:	f001 f99d 	bl	800859c <vPortExitCritical>

	return xAlreadyYielded;
 8007262:	687b      	ldr	r3, [r7, #4]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000fb0 	.word	0x20000fb0
 8007270:	20000f88 	.word	0x20000f88
 8007274:	20000f48 	.word	0x20000f48
 8007278:	20000f90 	.word	0x20000f90
 800727c:	20000ab8 	.word	0x20000ab8
 8007280:	20000ab4 	.word	0x20000ab4
 8007284:	20000f9c 	.word	0x20000f9c
 8007288:	20000f98 	.word	0x20000f98

0800728c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007292:	4b04      	ldr	r3, [pc, #16]	@ (80072a4 <xTaskGetTickCount+0x18>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007298:	687b      	ldr	r3, [r7, #4]
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr
 80072a4:	20000f8c 	.word	0x20000f8c

080072a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072ae:	f001 fa07 	bl	80086c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80072b6:	4b04      	ldr	r3, [pc, #16]	@ (80072c8 <xTaskGetTickCountFromISR+0x20>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072bc:	683b      	ldr	r3, [r7, #0]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000f8c 	.word	0x20000f8c

080072cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072d6:	4b40      	ldr	r3, [pc, #256]	@ (80073d8 <xTaskIncrementTick+0x10c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d171      	bne.n	80073c2 <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072de:	4b3f      	ldr	r3, [pc, #252]	@ (80073dc <xTaskIncrementTick+0x110>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3301      	adds	r3, #1
 80072e4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072e6:	4a3d      	ldr	r2, [pc, #244]	@ (80073dc <xTaskIncrementTick+0x110>)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d121      	bne.n	8007336 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072f2:	4b3b      	ldr	r3, [pc, #236]	@ (80073e0 <xTaskIncrementTick+0x114>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <xTaskIncrementTick+0x48>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	603b      	str	r3, [r7, #0]
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	e7fd      	b.n	8007310 <xTaskIncrementTick+0x44>
 8007314:	4b32      	ldr	r3, [pc, #200]	@ (80073e0 <xTaskIncrementTick+0x114>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	4b32      	ldr	r3, [pc, #200]	@ (80073e4 <xTaskIncrementTick+0x118>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a30      	ldr	r2, [pc, #192]	@ (80073e0 <xTaskIncrementTick+0x114>)
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	4a30      	ldr	r2, [pc, #192]	@ (80073e4 <xTaskIncrementTick+0x118>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	4b2f      	ldr	r3, [pc, #188]	@ (80073e8 <xTaskIncrementTick+0x11c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	4a2e      	ldr	r2, [pc, #184]	@ (80073e8 <xTaskIncrementTick+0x11c>)
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	f000 faad 	bl	8007890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007336:	4b2d      	ldr	r3, [pc, #180]	@ (80073ec <xTaskIncrementTick+0x120>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	429a      	cmp	r2, r3
 800733e:	d345      	bcc.n	80073cc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007340:	4b27      	ldr	r3, [pc, #156]	@ (80073e0 <xTaskIncrementTick+0x114>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734a:	4b28      	ldr	r3, [pc, #160]	@ (80073ec <xTaskIncrementTick+0x120>)
 800734c:	f04f 32ff 	mov.w	r2, #4294967295
 8007350:	601a      	str	r2, [r3, #0]
					break;
 8007352:	e03b      	b.n	80073cc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007354:	4b22      	ldr	r3, [pc, #136]	@ (80073e0 <xTaskIncrementTick+0x114>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	429a      	cmp	r2, r3
 800736a:	d203      	bcs.n	8007374 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800736c:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <xTaskIncrementTick+0x120>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007372:	e02b      	b.n	80073cc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fd69 	bl	8005e50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3318      	adds	r3, #24
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fd60 	bl	8005e50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007394:	4b16      	ldr	r3, [pc, #88]	@ (80073f0 <xTaskIncrementTick+0x124>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d903      	bls.n	80073a4 <xTaskIncrementTick+0xd8>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a0:	4a13      	ldr	r2, [pc, #76]	@ (80073f0 <xTaskIncrementTick+0x124>)
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4a10      	ldr	r2, [pc, #64]	@ (80073f4 <xTaskIncrementTick+0x128>)
 80073b2:	441a      	add	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7fe fced 	bl	8005d9a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073c0:	e7be      	b.n	8007340 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073c2:	4b0d      	ldr	r3, [pc, #52]	@ (80073f8 <xTaskIncrementTick+0x12c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3301      	adds	r3, #1
 80073c8:	4a0b      	ldr	r2, [pc, #44]	@ (80073f8 <xTaskIncrementTick+0x12c>)
 80073ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073cc:	697b      	ldr	r3, [r7, #20]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000fb0 	.word	0x20000fb0
 80073dc:	20000f8c 	.word	0x20000f8c
 80073e0:	20000f40 	.word	0x20000f40
 80073e4:	20000f44 	.word	0x20000f44
 80073e8:	20000fa0 	.word	0x20000fa0
 80073ec:	20000fa8 	.word	0x20000fa8
 80073f0:	20000f90 	.word	0x20000f90
 80073f4:	20000ab8 	.word	0x20000ab8
 80073f8:	20000f98 	.word	0x20000f98

080073fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007402:	4b28      	ldr	r3, [pc, #160]	@ (80074a4 <vTaskSwitchContext+0xa8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800740a:	4b27      	ldr	r3, [pc, #156]	@ (80074a8 <vTaskSwitchContext+0xac>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007410:	e042      	b.n	8007498 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007412:	4b25      	ldr	r3, [pc, #148]	@ (80074a8 <vTaskSwitchContext+0xac>)
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007418:	4b24      	ldr	r3, [pc, #144]	@ (80074ac <vTaskSwitchContext+0xb0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	e011      	b.n	8007444 <vTaskSwitchContext+0x48>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <vTaskSwitchContext+0x42>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	607b      	str	r3, [r7, #4]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <vTaskSwitchContext+0x3e>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3b01      	subs	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	491a      	ldr	r1, [pc, #104]	@ (80074b0 <vTaskSwitchContext+0xb4>)
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0e3      	beq.n	8007420 <vTaskSwitchContext+0x24>
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4a13      	ldr	r2, [pc, #76]	@ (80074b0 <vTaskSwitchContext+0xb4>)
 8007464:	4413      	add	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	605a      	str	r2, [r3, #4]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	3308      	adds	r3, #8
 800747a:	429a      	cmp	r2, r3
 800747c:	d104      	bne.n	8007488 <vTaskSwitchContext+0x8c>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	605a      	str	r2, [r3, #4]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	4a09      	ldr	r2, [pc, #36]	@ (80074b4 <vTaskSwitchContext+0xb8>)
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	4a06      	ldr	r2, [pc, #24]	@ (80074ac <vTaskSwitchContext+0xb0>)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6013      	str	r3, [r2, #0]
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000fb0 	.word	0x20000fb0
 80074a8:	20000f9c 	.word	0x20000f9c
 80074ac:	20000f90 	.word	0x20000f90
 80074b0:	20000ab8 	.word	0x20000ab8
 80074b4:	20000ab4 	.word	0x20000ab4

080074b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10b      	bne.n	80074e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <vTaskPlaceOnEventList+0x48>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3318      	adds	r3, #24
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fe fc79 	bl	8005de0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074ee:	2101      	movs	r1, #1
 80074f0:	6838      	ldr	r0, [r7, #0]
 80074f2:	f000 fb89 	bl	8007c08 <prvAddCurrentTaskToDelayedList>
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000ab4 	.word	0x20000ab4

08007504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	617b      	str	r3, [r7, #20]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800752e:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <vTaskPlaceOnEventListRestricted+0x54>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3318      	adds	r3, #24
 8007534:	4619      	mov	r1, r3
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7fe fc2f 	bl	8005d9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295
 8007546:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	68b8      	ldr	r0, [r7, #8]
 800754c:	f000 fb5c 	bl	8007c08 <prvAddCurrentTaskToDelayedList>
	}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000ab4 	.word	0x20000ab4

0800755c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60fb      	str	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	3318      	adds	r3, #24
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fc5e 	bl	8005e50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007594:	4b1d      	ldr	r3, [pc, #116]	@ (800760c <xTaskRemoveFromEventList+0xb0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d11d      	bne.n	80075d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fc55 	bl	8005e50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075aa:	4b19      	ldr	r3, [pc, #100]	@ (8007610 <xTaskRemoveFromEventList+0xb4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d903      	bls.n	80075ba <xTaskRemoveFromEventList+0x5e>
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	4a16      	ldr	r2, [pc, #88]	@ (8007610 <xTaskRemoveFromEventList+0xb4>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a13      	ldr	r2, [pc, #76]	@ (8007614 <xTaskRemoveFromEventList+0xb8>)
 80075c8:	441a      	add	r2, r3
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe fbe2 	bl	8005d9a <vListInsertEnd>
 80075d6:	e005      	b.n	80075e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3318      	adds	r3, #24
 80075dc:	4619      	mov	r1, r3
 80075de:	480e      	ldr	r0, [pc, #56]	@ (8007618 <xTaskRemoveFromEventList+0xbc>)
 80075e0:	f7fe fbdb 	bl	8005d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e8:	4b0c      	ldr	r3, [pc, #48]	@ (800761c <xTaskRemoveFromEventList+0xc0>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d905      	bls.n	80075fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075f2:	2301      	movs	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007620 <xTaskRemoveFromEventList+0xc4>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	e001      	b.n	8007602 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007602:	697b      	ldr	r3, [r7, #20]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20000fb0 	.word	0x20000fb0
 8007610:	20000f90 	.word	0x20000f90
 8007614:	20000ab8 	.word	0x20000ab8
 8007618:	20000f48 	.word	0x20000f48
 800761c:	20000ab4 	.word	0x20000ab4
 8007620:	20000f9c 	.word	0x20000f9c

08007624 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <vTaskInternalSetTimeOutState+0x24>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <vTaskInternalSetTimeOutState+0x28>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	605a      	str	r2, [r3, #4]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000fa0 	.word	0x20000fa0
 800764c:	20000f8c 	.word	0x20000f8c

08007650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	613b      	str	r3, [r7, #16]
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10b      	bne.n	8007696 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60fb      	str	r3, [r7, #12]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007696:	f000 ff51 	bl	800853c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800769a:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <xTaskCheckForTimeOut+0xc0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d102      	bne.n	80076ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e023      	b.n	8007702 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	4b15      	ldr	r3, [pc, #84]	@ (8007714 <xTaskCheckForTimeOut+0xc4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d007      	beq.n	80076d6 <xTaskCheckForTimeOut+0x86>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d302      	bcc.n	80076d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	61fb      	str	r3, [r7, #28]
 80076d4:	e015      	b.n	8007702 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d20b      	bcs.n	80076f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff ff99 	bl	8007624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	e004      	b.n	8007702 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007702:	f000 ff4b 	bl	800859c <vPortExitCritical>

	return xReturn;
 8007706:	69fb      	ldr	r3, [r7, #28]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20000f8c 	.word	0x20000f8c
 8007714:	20000fa0 	.word	0x20000fa0

08007718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800771c:	4b03      	ldr	r3, [pc, #12]	@ (800772c <vTaskMissedYield+0x14>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]
}
 8007722:	bf00      	nop
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000f9c 	.word	0x20000f9c

08007730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007738:	f000 f84c 	bl	80077d4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800773c:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <prvIdleTask+0x20>)
 800773e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800774c:	bf00      	nop
 800774e:	e7f3      	b.n	8007738 <prvIdleTask+0x8>
 8007750:	e000ed04 	.word	0xe000ed04

08007754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800775a:	2300      	movs	r3, #0
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	e00c      	b.n	800777a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4a12      	ldr	r2, [pc, #72]	@ (80077b4 <prvInitialiseTaskLists+0x60>)
 800776c:	4413      	add	r3, r2
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fae8 	bl	8005d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3301      	adds	r3, #1
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b37      	cmp	r3, #55	@ 0x37
 800777e:	d9ef      	bls.n	8007760 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007780:	480d      	ldr	r0, [pc, #52]	@ (80077b8 <prvInitialiseTaskLists+0x64>)
 8007782:	f7fe fadf 	bl	8005d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007786:	480d      	ldr	r0, [pc, #52]	@ (80077bc <prvInitialiseTaskLists+0x68>)
 8007788:	f7fe fadc 	bl	8005d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800778c:	480c      	ldr	r0, [pc, #48]	@ (80077c0 <prvInitialiseTaskLists+0x6c>)
 800778e:	f7fe fad9 	bl	8005d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007792:	480c      	ldr	r0, [pc, #48]	@ (80077c4 <prvInitialiseTaskLists+0x70>)
 8007794:	f7fe fad6 	bl	8005d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007798:	480b      	ldr	r0, [pc, #44]	@ (80077c8 <prvInitialiseTaskLists+0x74>)
 800779a:	f7fe fad3 	bl	8005d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800779e:	4b0b      	ldr	r3, [pc, #44]	@ (80077cc <prvInitialiseTaskLists+0x78>)
 80077a0:	4a05      	ldr	r2, [pc, #20]	@ (80077b8 <prvInitialiseTaskLists+0x64>)
 80077a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077a4:	4b0a      	ldr	r3, [pc, #40]	@ (80077d0 <prvInitialiseTaskLists+0x7c>)
 80077a6:	4a05      	ldr	r2, [pc, #20]	@ (80077bc <prvInitialiseTaskLists+0x68>)
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000ab8 	.word	0x20000ab8
 80077b8:	20000f18 	.word	0x20000f18
 80077bc:	20000f2c 	.word	0x20000f2c
 80077c0:	20000f48 	.word	0x20000f48
 80077c4:	20000f5c 	.word	0x20000f5c
 80077c8:	20000f74 	.word	0x20000f74
 80077cc:	20000f40 	.word	0x20000f40
 80077d0:	20000f44 	.word	0x20000f44

080077d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077da:	e019      	b.n	8007810 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077dc:	f000 feae 	bl	800853c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e0:	4b10      	ldr	r3, [pc, #64]	@ (8007824 <prvCheckTasksWaitingTermination+0x50>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fe fb2f 	bl	8005e50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007828 <prvCheckTasksWaitingTermination+0x54>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007828 <prvCheckTasksWaitingTermination+0x54>)
 80077fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <prvCheckTasksWaitingTermination+0x58>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3b01      	subs	r3, #1
 8007802:	4a0a      	ldr	r2, [pc, #40]	@ (800782c <prvCheckTasksWaitingTermination+0x58>)
 8007804:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007806:	f000 fec9 	bl	800859c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f810 	bl	8007830 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007810:	4b06      	ldr	r3, [pc, #24]	@ (800782c <prvCheckTasksWaitingTermination+0x58>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e1      	bne.n	80077dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000f5c 	.word	0x20000f5c
 8007828:	20000f88 	.word	0x20000f88
 800782c:	20000f70 	.word	0x20000f70

08007830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800783e:	2b00      	cmp	r3, #0
 8007840:	d108      	bne.n	8007854 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007846:	4618      	mov	r0, r3
 8007848:	f001 f848 	bl	80088dc <vPortFree>
				vPortFree( pxTCB );
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f845 	bl	80088dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007852:	e019      	b.n	8007888 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800785a:	2b01      	cmp	r3, #1
 800785c:	d103      	bne.n	8007866 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 f83c 	bl	80088dc <vPortFree>
	}
 8007864:	e010      	b.n	8007888 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800786c:	2b02      	cmp	r3, #2
 800786e:	d00b      	beq.n	8007888 <prvDeleteTCB+0x58>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <prvDeleteTCB+0x54>
	}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007896:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <prvResetNextTaskUnblockTime+0x38>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078a0:	4b0a      	ldr	r3, [pc, #40]	@ (80078cc <prvResetNextTaskUnblockTime+0x3c>)
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078a8:	e008      	b.n	80078bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078aa:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <prvResetNextTaskUnblockTime+0x38>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	4a04      	ldr	r2, [pc, #16]	@ (80078cc <prvResetNextTaskUnblockTime+0x3c>)
 80078ba:	6013      	str	r3, [r2, #0]
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000f40 	.word	0x20000f40
 80078cc:	20000fa8 	.word	0x20000fa8

080078d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80078d6:	4b04      	ldr	r3, [pc, #16]	@ (80078e8 <xTaskGetCurrentTaskHandle+0x18>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80078dc:	687b      	ldr	r3, [r7, #4]
	}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr
 80078e8:	20000ab4 	.word	0x20000ab4

080078ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <xTaskGetSchedulerState+0x34>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078fa:	2301      	movs	r3, #1
 80078fc:	607b      	str	r3, [r7, #4]
 80078fe:	e008      	b.n	8007912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007900:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <xTaskGetSchedulerState+0x38>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007908:	2302      	movs	r3, #2
 800790a:	607b      	str	r3, [r7, #4]
 800790c:	e001      	b.n	8007912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800790e:	2300      	movs	r3, #0
 8007910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007912:	687b      	ldr	r3, [r7, #4]
	}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20000f94 	.word	0x20000f94
 8007924:	20000fb0 	.word	0x20000fb0

08007928 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d051      	beq.n	80079e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007942:	4b2a      	ldr	r3, [pc, #168]	@ (80079ec <xTaskPriorityInherit+0xc4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007948:	429a      	cmp	r2, r3
 800794a:	d241      	bcs.n	80079d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	db06      	blt.n	8007962 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007954:	4b25      	ldr	r3, [pc, #148]	@ (80079ec <xTaskPriorityInherit+0xc4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6959      	ldr	r1, [r3, #20]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4a1f      	ldr	r2, [pc, #124]	@ (80079f0 <xTaskPriorityInherit+0xc8>)
 8007974:	4413      	add	r3, r2
 8007976:	4299      	cmp	r1, r3
 8007978:	d122      	bne.n	80079c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3304      	adds	r3, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fa66 	bl	8005e50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007984:	4b19      	ldr	r3, [pc, #100]	@ (80079ec <xTaskPriorityInherit+0xc4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007992:	4b18      	ldr	r3, [pc, #96]	@ (80079f4 <xTaskPriorityInherit+0xcc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d903      	bls.n	80079a2 <xTaskPriorityInherit+0x7a>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	4a15      	ldr	r2, [pc, #84]	@ (80079f4 <xTaskPriorityInherit+0xcc>)
 80079a0:	6013      	str	r3, [r2, #0]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4a10      	ldr	r2, [pc, #64]	@ (80079f0 <xTaskPriorityInherit+0xc8>)
 80079b0:	441a      	add	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fe f9ee 	bl	8005d9a <vListInsertEnd>
 80079be:	e004      	b.n	80079ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <xTaskPriorityInherit+0xc4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e008      	b.n	80079e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079d4:	4b05      	ldr	r3, [pc, #20]	@ (80079ec <xTaskPriorityInherit+0xc4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079da:	429a      	cmp	r2, r3
 80079dc:	d201      	bcs.n	80079e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079de:	2301      	movs	r3, #1
 80079e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079e2:	68fb      	ldr	r3, [r7, #12]
	}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000ab4 	.word	0x20000ab4
 80079f0:	20000ab8 	.word	0x20000ab8
 80079f4:	20000f90 	.word	0x20000f90

080079f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d058      	beq.n	8007ac0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007acc <xTaskPriorityDisinherit+0xd4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d00b      	beq.n	8007a30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60fb      	str	r3, [r7, #12]
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10b      	bne.n	8007a50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	60bb      	str	r3, [r7, #8]
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	e7fd      	b.n	8007a4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a54:	1e5a      	subs	r2, r3, #1
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d02c      	beq.n	8007ac0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d128      	bne.n	8007ac0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe f9ec 	bl	8005e50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a90:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad0 <xTaskPriorityDisinherit+0xd8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d903      	bls.n	8007aa0 <xTaskPriorityDisinherit+0xa8>
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad0 <xTaskPriorityDisinherit+0xd8>)
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4a09      	ldr	r2, [pc, #36]	@ (8007ad4 <xTaskPriorityDisinherit+0xdc>)
 8007aae:	441a      	add	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7fe f96f 	bl	8005d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ac0:	697b      	ldr	r3, [r7, #20]
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000ab4 	.word	0x20000ab4
 8007ad0:	20000f90 	.word	0x20000f90
 8007ad4:	20000ab8 	.word	0x20000ab8

08007ad8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d06c      	beq.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10b      	bne.n	8007b10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	60fb      	str	r3, [r7, #12]
}
 8007b0a:	bf00      	nop
 8007b0c:	bf00      	nop
 8007b0e:	e7fd      	b.n	8007b0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d902      	bls.n	8007b20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	e002      	b.n	8007b26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d04c      	beq.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d147      	bne.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b3a:	4b26      	ldr	r3, [pc, #152]	@ (8007bd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d10b      	bne.n	8007b5c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	60bb      	str	r3, [r7, #8]
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	69fa      	ldr	r2, [r7, #28]
 8007b66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	db04      	blt.n	8007b7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	6959      	ldr	r1, [r3, #20]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4a13      	ldr	r2, [pc, #76]	@ (8007bd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b8a:	4413      	add	r3, r2
 8007b8c:	4299      	cmp	r1, r3
 8007b8e:	d11c      	bne.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe f95b 	bl	8005e50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d903      	bls.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	4a0c      	ldr	r2, [pc, #48]	@ (8007bdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4a07      	ldr	r2, [pc, #28]	@ (8007bd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007bbc:	441a      	add	r2, r3
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	f7fe f8e8 	bl	8005d9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bca:	bf00      	nop
 8007bcc:	3720      	adds	r7, #32
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000ab4 	.word	0x20000ab4
 8007bd8:	20000ab8 	.word	0x20000ab8
 8007bdc:	20000f90 	.word	0x20000f90

08007be0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007be4:	4b07      	ldr	r3, [pc, #28]	@ (8007c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bec:	4b05      	ldr	r3, [pc, #20]	@ (8007c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007bf6:	4b03      	ldr	r3, [pc, #12]	@ (8007c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
	}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20000ab4 	.word	0x20000ab4

08007c08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c12:	4b21      	ldr	r3, [pc, #132]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c18:	4b20      	ldr	r3, [pc, #128]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe f916 	bl	8005e50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d10a      	bne.n	8007c42 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c32:	4b1a      	ldr	r3, [pc, #104]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4819      	ldr	r0, [pc, #100]	@ (8007ca0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c3c:	f7fe f8ad 	bl	8005d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c40:	e026      	b.n	8007c90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4413      	add	r3, r2
 8007c48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c4a:	4b14      	ldr	r3, [pc, #80]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d209      	bcs.n	8007c6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fe f8ba 	bl	8005de0 <vListInsert>
}
 8007c6c:	e010      	b.n	8007c90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b0a      	ldr	r3, [pc, #40]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7fe f8b0 	bl	8005de0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c80:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d202      	bcs.n	8007c90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c8a:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6013      	str	r3, [r2, #0]
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000f8c 	.word	0x20000f8c
 8007c9c:	20000ab4 	.word	0x20000ab4
 8007ca0:	20000f74 	.word	0x20000f74
 8007ca4:	20000f44 	.word	0x20000f44
 8007ca8:	20000f40 	.word	0x20000f40
 8007cac:	20000fa8 	.word	0x20000fa8

08007cb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	@ 0x28
 8007cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cba:	f000 fb11 	bl	80082e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8007d34 <xTimerCreateTimerTask+0x84>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d021      	beq.n	8007d0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cce:	1d3a      	adds	r2, r7, #4
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	f107 030c 	add.w	r3, r7, #12
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fe f819 	bl	8005d10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	9202      	str	r2, [sp, #8]
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	2302      	movs	r3, #2
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	460a      	mov	r2, r1
 8007cf0:	4911      	ldr	r1, [pc, #68]	@ (8007d38 <xTimerCreateTimerTask+0x88>)
 8007cf2:	4812      	ldr	r0, [pc, #72]	@ (8007d3c <xTimerCreateTimerTask+0x8c>)
 8007cf4:	f7fe ffae 	bl	8006c54 <xTaskCreateStatic>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	4a11      	ldr	r2, [pc, #68]	@ (8007d40 <xTimerCreateTimerTask+0x90>)
 8007cfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cfe:	4b10      	ldr	r3, [pc, #64]	@ (8007d40 <xTimerCreateTimerTask+0x90>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d06:	2301      	movs	r3, #1
 8007d08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	613b      	str	r3, [r7, #16]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d28:	697b      	ldr	r3, [r7, #20]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000fe4 	.word	0x20000fe4
 8007d38:	0800d390 	.word	0x0800d390
 8007d3c:	08007e7d 	.word	0x08007e7d
 8007d40:	20000fe8 	.word	0x20000fe8

08007d44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08a      	sub	sp, #40	@ 0x28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10b      	bne.n	8007d74 <xTimerGenericCommand+0x30>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	623b      	str	r3, [r7, #32]
}
 8007d6e:	bf00      	nop
 8007d70:	bf00      	nop
 8007d72:	e7fd      	b.n	8007d70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d74:	4b19      	ldr	r3, [pc, #100]	@ (8007ddc <xTimerGenericCommand+0x98>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d02a      	beq.n	8007dd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	dc18      	bgt.n	8007dc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d8e:	f7ff fdad 	bl	80078ec <xTaskGetSchedulerState>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d109      	bne.n	8007dac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d98:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <xTimerGenericCommand+0x98>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	f107 0110 	add.w	r1, r7, #16
 8007da0:	2300      	movs	r3, #0
 8007da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da4:	f7fe fa6e 	bl	8006284 <xQueueGenericSend>
 8007da8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007daa:	e012      	b.n	8007dd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <xTimerGenericCommand+0x98>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	f107 0110 	add.w	r1, r7, #16
 8007db4:	2300      	movs	r3, #0
 8007db6:	2200      	movs	r2, #0
 8007db8:	f7fe fa64 	bl	8006284 <xQueueGenericSend>
 8007dbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dbe:	e008      	b.n	8007dd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dc0:	4b06      	ldr	r3, [pc, #24]	@ (8007ddc <xTimerGenericCommand+0x98>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	f107 0110 	add.w	r1, r7, #16
 8007dc8:	2300      	movs	r3, #0
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	f7fe fb44 	bl	8006458 <xQueueGenericSendFromISR>
 8007dd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	@ 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000fe4 	.word	0x20000fe4

08007de0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dea:	4b23      	ldr	r3, [pc, #140]	@ (8007e78 <prvProcessExpiredTimer+0x98>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	3304      	adds	r3, #4
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fe f829 	bl	8005e50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d023      	beq.n	8007e54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	699a      	ldr	r2, [r3, #24]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	18d1      	adds	r1, r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	6978      	ldr	r0, [r7, #20]
 8007e1a:	f000 f8d3 	bl	8007fc4 <prvInsertTimerInActiveList>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d020      	beq.n	8007e66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e24:	2300      	movs	r3, #0
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6978      	ldr	r0, [r7, #20]
 8007e30:	f7ff ff88 	bl	8007d44 <xTimerGenericCommand>
 8007e34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d114      	bne.n	8007e66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60fb      	str	r3, [r7, #12]
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	e7fd      	b.n	8007e50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	6978      	ldr	r0, [r7, #20]
 8007e6c:	4798      	blx	r3
}
 8007e6e:	bf00      	nop
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000fdc 	.word	0x20000fdc

08007e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e84:	f107 0308 	add.w	r3, r7, #8
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 f859 	bl	8007f40 <prvGetNextExpireTime>
 8007e8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4619      	mov	r1, r3
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f805 	bl	8007ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e9a:	f000 f8d5 	bl	8008048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e9e:	bf00      	nop
 8007ea0:	e7f0      	b.n	8007e84 <prvTimerTask+0x8>
	...

08007ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007eae:	f7ff f94f 	bl	8007150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f864 	bl	8007f84 <prvSampleTimeNow>
 8007ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d130      	bne.n	8007f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <prvProcessTimerOrBlockTask+0x3c>
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d806      	bhi.n	8007ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ed2:	f7ff f94b 	bl	800716c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff ff81 	bl	8007de0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ede:	e024      	b.n	8007f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ee6:	4b13      	ldr	r3, [pc, #76]	@ (8007f34 <prvProcessTimerOrBlockTask+0x90>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <prvProcessTimerOrBlockTask+0x50>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <prvProcessTimerOrBlockTask+0x52>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <prvProcessTimerOrBlockTask+0x94>)
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4619      	mov	r1, r3
 8007f06:	f7fe fe71 	bl	8006bec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f0a:	f7ff f92f 	bl	800716c <xTaskResumeAll>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f14:	4b09      	ldr	r3, [pc, #36]	@ (8007f3c <prvProcessTimerOrBlockTask+0x98>)
 8007f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	f3bf 8f6f 	isb	sy
}
 8007f24:	e001      	b.n	8007f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f26:	f7ff f921 	bl	800716c <xTaskResumeAll>
}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000fe0 	.word	0x20000fe0
 8007f38:	20000fe4 	.word	0x20000fe4
 8007f3c:	e000ed04 	.word	0xe000ed04

08007f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f48:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <prvGetNextExpireTime+0x40>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <prvGetNextExpireTime+0x16>
 8007f52:	2201      	movs	r2, #1
 8007f54:	e000      	b.n	8007f58 <prvGetNextExpireTime+0x18>
 8007f56:	2200      	movs	r2, #0
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f64:	4b06      	ldr	r3, [pc, #24]	@ (8007f80 <prvGetNextExpireTime+0x40>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	e001      	b.n	8007f74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f74:	68fb      	ldr	r3, [r7, #12]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr
 8007f80:	20000fdc 	.word	0x20000fdc

08007f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f8c:	f7ff f97e 	bl	800728c <xTaskGetTickCount>
 8007f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <prvSampleTimeNow+0x3c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d205      	bcs.n	8007fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f9c:	f000 f93a 	bl	8008214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e002      	b.n	8007fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fae:	4a04      	ldr	r2, [pc, #16]	@ (8007fc0 <prvSampleTimeNow+0x3c>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000fec 	.word	0x20000fec

08007fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d812      	bhi.n	8008010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	1ad2      	subs	r2, r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d302      	bcc.n	8007ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e01b      	b.n	8008036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ffe:	4b10      	ldr	r3, [pc, #64]	@ (8008040 <prvInsertTimerInActiveList+0x7c>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3304      	adds	r3, #4
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f7fd fee9 	bl	8005de0 <vListInsert>
 800800e:	e012      	b.n	8008036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d206      	bcs.n	8008026 <prvInsertTimerInActiveList+0x62>
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d302      	bcc.n	8008026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008020:	2301      	movs	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	e007      	b.n	8008036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008026:	4b07      	ldr	r3, [pc, #28]	@ (8008044 <prvInsertTimerInActiveList+0x80>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3304      	adds	r3, #4
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f7fd fed5 	bl	8005de0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008036:	697b      	ldr	r3, [r7, #20]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000fe0 	.word	0x20000fe0
 8008044:	20000fdc 	.word	0x20000fdc

08008048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08e      	sub	sp, #56	@ 0x38
 800804c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800804e:	e0ce      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	da19      	bge.n	800808a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	3304      	adds	r3, #4
 800805a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10b      	bne.n	800807a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	61fb      	str	r3, [r7, #28]
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	e7fd      	b.n	8008076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008080:	6850      	ldr	r0, [r2, #4]
 8008082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008084:	6892      	ldr	r2, [r2, #8]
 8008086:	4611      	mov	r1, r2
 8008088:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f2c0 80ae 	blt.w	80081ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	3304      	adds	r3, #4
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd fed4 	bl	8005e50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080a8:	463b      	mov	r3, r7
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff ff6a 	bl	8007f84 <prvSampleTimeNow>
 80080b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	f200 8097 	bhi.w	80081e8 <prvProcessReceivedCommands+0x1a0>
 80080ba:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <prvProcessReceivedCommands+0x78>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080e9 	.word	0x080080e9
 80080c4:	080080e9 	.word	0x080080e9
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	0800815f 	.word	0x0800815f
 80080d0:	08008173 	.word	0x08008173
 80080d4:	080081bf 	.word	0x080081bf
 80080d8:	080080e9 	.word	0x080080e9
 80080dc:	080080e9 	.word	0x080080e9
 80080e0:	0800815f 	.word	0x0800815f
 80080e4:	08008173 	.word	0x08008173
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	18d1      	adds	r1, r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008108:	f7ff ff5c 	bl	8007fc4 <prvInsertTimerInActiveList>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d06c      	beq.n	80081ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d061      	beq.n	80081ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	441a      	add	r2, r3
 8008130:	2300      	movs	r3, #0
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	2300      	movs	r3, #0
 8008136:	2100      	movs	r1, #0
 8008138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813a:	f7ff fe03 	bl	8007d44 <xTimerGenericCommand>
 800813e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d152      	bne.n	80081ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	61bb      	str	r3, [r7, #24]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008160:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008170:	e03d      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008178:	f043 0301 	orr.w	r3, r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008180:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800818a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10b      	bne.n	80081aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	617b      	str	r3, [r7, #20]
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	e7fd      	b.n	80081a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b8:	f7ff ff04 	bl	8007fc4 <prvInsertTimerInActiveList>
					break;
 80081bc:	e017      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d103      	bne.n	80081d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80081cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ce:	f000 fb85 	bl	80088dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081d2:	e00c      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081e6:	e002      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80081e8:	bf00      	nop
 80081ea:	e000      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
					break;
 80081ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ee:	4b08      	ldr	r3, [pc, #32]	@ (8008210 <prvProcessReceivedCommands+0x1c8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	1d39      	adds	r1, r7, #4
 80081f4:	2200      	movs	r2, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe f9cc 	bl	8006594 <xQueueReceive>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f47f af26 	bne.w	8008050 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	3730      	adds	r7, #48	@ 0x30
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000fe4 	.word	0x20000fe4

08008214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800821a:	e049      	b.n	80082b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800821c:	4b2e      	ldr	r3, [pc, #184]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008226:	4b2c      	ldr	r3, [pc, #176]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3304      	adds	r3, #4
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd fe0b 	bl	8005e50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d02f      	beq.n	80082b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4413      	add	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	429a      	cmp	r2, r3
 8008260:	d90e      	bls.n	8008280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800826e:	4b1a      	ldr	r3, [pc, #104]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3304      	adds	r3, #4
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f7fd fdb1 	bl	8005de0 <vListInsert>
 800827e:	e017      	b.n	80082b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008280:	2300      	movs	r3, #0
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	2300      	movs	r3, #0
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	2100      	movs	r1, #0
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fd5a 	bl	8007d44 <xTimerGenericCommand>
 8008290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10b      	bne.n	80082b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	603b      	str	r3, [r7, #0]
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082b0:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1b0      	bne.n	800821c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082ba:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082c0:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <prvSwitchTimerLists+0xc8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a04      	ldr	r2, [pc, #16]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 80082c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082c8:	4a04      	ldr	r2, [pc, #16]	@ (80082dc <prvSwitchTimerLists+0xc8>)
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	6013      	str	r3, [r2, #0]
}
 80082ce:	bf00      	nop
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000fdc 	.word	0x20000fdc
 80082dc:	20000fe0 	.word	0x20000fe0

080082e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082e6:	f000 f929 	bl	800853c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082ea:	4b15      	ldr	r3, [pc, #84]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d120      	bne.n	8008334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082f2:	4814      	ldr	r0, [pc, #80]	@ (8008344 <prvCheckForValidListAndQueue+0x64>)
 80082f4:	f7fd fd26 	bl	8005d44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082f8:	4813      	ldr	r0, [pc, #76]	@ (8008348 <prvCheckForValidListAndQueue+0x68>)
 80082fa:	f7fd fd23 	bl	8005d44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082fe:	4b13      	ldr	r3, [pc, #76]	@ (800834c <prvCheckForValidListAndQueue+0x6c>)
 8008300:	4a10      	ldr	r2, [pc, #64]	@ (8008344 <prvCheckForValidListAndQueue+0x64>)
 8008302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008304:	4b12      	ldr	r3, [pc, #72]	@ (8008350 <prvCheckForValidListAndQueue+0x70>)
 8008306:	4a10      	ldr	r2, [pc, #64]	@ (8008348 <prvCheckForValidListAndQueue+0x68>)
 8008308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800830a:	2300      	movs	r3, #0
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4b11      	ldr	r3, [pc, #68]	@ (8008354 <prvCheckForValidListAndQueue+0x74>)
 8008310:	4a11      	ldr	r2, [pc, #68]	@ (8008358 <prvCheckForValidListAndQueue+0x78>)
 8008312:	2110      	movs	r1, #16
 8008314:	200a      	movs	r0, #10
 8008316:	f7fd fe20 	bl	8005f5a <xQueueGenericCreateStatic>
 800831a:	4603      	mov	r3, r0
 800831c:	4a08      	ldr	r2, [pc, #32]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 800831e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008320:	4b07      	ldr	r3, [pc, #28]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008328:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	490b      	ldr	r1, [pc, #44]	@ (800835c <prvCheckForValidListAndQueue+0x7c>)
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fc34 	bl	8006b9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008334:	f000 f932 	bl	800859c <vPortExitCritical>
}
 8008338:	bf00      	nop
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000fe4 	.word	0x20000fe4
 8008344:	20000fb4 	.word	0x20000fb4
 8008348:	20000fc8 	.word	0x20000fc8
 800834c:	20000fdc 	.word	0x20000fdc
 8008350:	20000fe0 	.word	0x20000fe0
 8008354:	20001090 	.word	0x20001090
 8008358:	20000ff0 	.word	0x20000ff0
 800835c:	0800d398 	.word	0x0800d398

08008360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3b04      	subs	r3, #4
 8008370:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3b04      	subs	r3, #4
 800837e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f023 0201 	bic.w	r2, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3b04      	subs	r3, #4
 800838e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008390:	4a08      	ldr	r2, [pc, #32]	@ (80083b4 <pxPortInitialiseStack+0x54>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3b14      	subs	r3, #20
 800839a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3b20      	subs	r3, #32
 80083a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083a8:	68fb      	ldr	r3, [r7, #12]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc80      	pop	{r7}
 80083b2:	4770      	bx	lr
 80083b4:	080083b9 	.word	0x080083b9

080083b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80083be:	2300      	movs	r3, #0
 80083c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083c2:	4b12      	ldr	r3, [pc, #72]	@ (800840c <prvTaskExitError+0x54>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d00b      	beq.n	80083e4 <prvTaskExitError+0x2c>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	60fb      	str	r3, [r7, #12]
}
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	e7fd      	b.n	80083e0 <prvTaskExitError+0x28>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	60bb      	str	r3, [r7, #8]
}
 80083f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083f8:	bf00      	nop
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0fc      	beq.n	80083fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	bc80      	pop	{r7}
 800840a:	4770      	bx	lr
 800840c:	2000000c 	.word	0x2000000c

08008410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008410:	4b07      	ldr	r3, [pc, #28]	@ (8008430 <pxCurrentTCBConst2>)
 8008412:	6819      	ldr	r1, [r3, #0]
 8008414:	6808      	ldr	r0, [r1, #0]
 8008416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800841a:	f380 8809 	msr	PSP, r0
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f380 8811 	msr	BASEPRI, r0
 800842a:	f04e 0e0d 	orr.w	lr, lr, #13
 800842e:	4770      	bx	lr

08008430 <pxCurrentTCBConst2>:
 8008430:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop

08008438 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008438:	4806      	ldr	r0, [pc, #24]	@ (8008454 <prvPortStartFirstTask+0x1c>)
 800843a:	6800      	ldr	r0, [r0, #0]
 800843c:	6800      	ldr	r0, [r0, #0]
 800843e:	f380 8808 	msr	MSP, r0
 8008442:	b662      	cpsie	i
 8008444:	b661      	cpsie	f
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	df00      	svc	0
 8008450:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008452:	bf00      	nop
 8008454:	e000ed08 	.word	0xe000ed08

08008458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800845e:	4b32      	ldr	r3, [pc, #200]	@ (8008528 <xPortStartScheduler+0xd0>)
 8008460:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	@ 0xff
 800846e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008480:	b2da      	uxtb	r2, r3
 8008482:	4b2a      	ldr	r3, [pc, #168]	@ (800852c <xPortStartScheduler+0xd4>)
 8008484:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008486:	4b2a      	ldr	r3, [pc, #168]	@ (8008530 <xPortStartScheduler+0xd8>)
 8008488:	2207      	movs	r2, #7
 800848a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800848c:	e009      	b.n	80084a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800848e:	4b28      	ldr	r3, [pc, #160]	@ (8008530 <xPortStartScheduler+0xd8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3b01      	subs	r3, #1
 8008494:	4a26      	ldr	r2, [pc, #152]	@ (8008530 <xPortStartScheduler+0xd8>)
 8008496:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084aa:	2b80      	cmp	r3, #128	@ 0x80
 80084ac:	d0ef      	beq.n	800848e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084ae:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <xPortStartScheduler+0xd8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f1c3 0307 	rsb	r3, r3, #7
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d00b      	beq.n	80084d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60bb      	str	r3, [r7, #8]
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	e7fd      	b.n	80084ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084d2:	4b17      	ldr	r3, [pc, #92]	@ (8008530 <xPortStartScheduler+0xd8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	021b      	lsls	r3, r3, #8
 80084d8:	4a15      	ldr	r2, [pc, #84]	@ (8008530 <xPortStartScheduler+0xd8>)
 80084da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084dc:	4b14      	ldr	r3, [pc, #80]	@ (8008530 <xPortStartScheduler+0xd8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084e4:	4a12      	ldr	r2, [pc, #72]	@ (8008530 <xPortStartScheduler+0xd8>)
 80084e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084f0:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <xPortStartScheduler+0xdc>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a0f      	ldr	r2, [pc, #60]	@ (8008534 <xPortStartScheduler+0xdc>)
 80084f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80084fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <xPortStartScheduler+0xdc>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0c      	ldr	r2, [pc, #48]	@ (8008534 <xPortStartScheduler+0xdc>)
 8008502:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008506:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008508:	f000 f8b8 	bl	800867c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <xPortStartScheduler+0xe0>)
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008512:	f7ff ff91 	bl	8008438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008516:	f7fe ff71 	bl	80073fc <vTaskSwitchContext>
	prvTaskExitError();
 800851a:	f7ff ff4d 	bl	80083b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000e400 	.word	0xe000e400
 800852c:	200010e0 	.word	0x200010e0
 8008530:	200010e4 	.word	0x200010e4
 8008534:	e000ed20 	.word	0xe000ed20
 8008538:	2000000c 	.word	0x2000000c

0800853c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	607b      	str	r3, [r7, #4]
}
 8008554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008556:	4b0f      	ldr	r3, [pc, #60]	@ (8008594 <vPortEnterCritical+0x58>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	4a0d      	ldr	r2, [pc, #52]	@ (8008594 <vPortEnterCritical+0x58>)
 800855e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008560:	4b0c      	ldr	r3, [pc, #48]	@ (8008594 <vPortEnterCritical+0x58>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d110      	bne.n	800858a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008568:	4b0b      	ldr	r3, [pc, #44]	@ (8008598 <vPortEnterCritical+0x5c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <vPortEnterCritical+0x4e>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	603b      	str	r3, [r7, #0]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <vPortEnterCritical+0x4a>
	}
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr
 8008594:	2000000c 	.word	0x2000000c
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085a2:	4b12      	ldr	r3, [pc, #72]	@ (80085ec <vPortExitCritical+0x50>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <vPortExitCritical+0x26>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	607b      	str	r3, [r7, #4]
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	e7fd      	b.n	80085be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085c2:	4b0a      	ldr	r3, [pc, #40]	@ (80085ec <vPortExitCritical+0x50>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	4a08      	ldr	r2, [pc, #32]	@ (80085ec <vPortExitCritical+0x50>)
 80085ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085cc:	4b07      	ldr	r3, [pc, #28]	@ (80085ec <vPortExitCritical+0x50>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d105      	bne.n	80085e0 <vPortExitCritical+0x44>
 80085d4:	2300      	movs	r3, #0
 80085d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f383 8811 	msr	BASEPRI, r3
}
 80085de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	2000000c 	.word	0x2000000c

080085f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085f0:	f3ef 8009 	mrs	r0, PSP
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008630 <pxCurrentTCBConst>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008600:	6010      	str	r0, [r2, #0]
 8008602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008606:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800860a:	f380 8811 	msr	BASEPRI, r0
 800860e:	f7fe fef5 	bl	80073fc <vTaskSwitchContext>
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8811 	msr	BASEPRI, r0
 800861a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800861e:	6819      	ldr	r1, [r3, #0]
 8008620:	6808      	ldr	r0, [r1, #0]
 8008622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008626:	f380 8809 	msr	PSP, r0
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	4770      	bx	lr

08008630 <pxCurrentTCBConst>:
 8008630:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop

08008638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	607b      	str	r3, [r7, #4]
}
 8008650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008652:	f7fe fe3b 	bl	80072cc <xTaskIncrementTick>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800865c:	4b06      	ldr	r3, [pc, #24]	@ (8008678 <xPortSysTickHandler+0x40>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f383 8811 	msr	BASEPRI, r3
}
 800866e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008680:	4b0a      	ldr	r3, [pc, #40]	@ (80086ac <vPortSetupTimerInterrupt+0x30>)
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008686:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <vPortSetupTimerInterrupt+0x34>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800868c:	4b09      	ldr	r3, [pc, #36]	@ (80086b4 <vPortSetupTimerInterrupt+0x38>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a09      	ldr	r2, [pc, #36]	@ (80086b8 <vPortSetupTimerInterrupt+0x3c>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	099b      	lsrs	r3, r3, #6
 8008698:	4a08      	ldr	r2, [pc, #32]	@ (80086bc <vPortSetupTimerInterrupt+0x40>)
 800869a:	3b01      	subs	r3, #1
 800869c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800869e:	4b03      	ldr	r3, [pc, #12]	@ (80086ac <vPortSetupTimerInterrupt+0x30>)
 80086a0:	2207      	movs	r2, #7
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc80      	pop	{r7}
 80086aa:	4770      	bx	lr
 80086ac:	e000e010 	.word	0xe000e010
 80086b0:	e000e018 	.word	0xe000e018
 80086b4:	20000000 	.word	0x20000000
 80086b8:	10624dd3 	.word	0x10624dd3
 80086bc:	e000e014 	.word	0xe000e014

080086c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086c6:	f3ef 8305 	mrs	r3, IPSR
 80086ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b0f      	cmp	r3, #15
 80086d0:	d915      	bls.n	80086fe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086d2:	4a17      	ldr	r2, [pc, #92]	@ (8008730 <vPortValidateInterruptPriority+0x70>)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4413      	add	r3, r2
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086dc:	4b15      	ldr	r3, [pc, #84]	@ (8008734 <vPortValidateInterruptPriority+0x74>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	7afa      	ldrb	r2, [r7, #11]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d20b      	bcs.n	80086fe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	607b      	str	r3, [r7, #4]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008738 <vPortValidateInterruptPriority+0x78>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008706:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <vPortValidateInterruptPriority+0x7c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d90b      	bls.n	8008726 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	603b      	str	r3, [r7, #0]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <vPortValidateInterruptPriority+0x62>
	}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr
 8008730:	e000e3f0 	.word	0xe000e3f0
 8008734:	200010e0 	.word	0x200010e0
 8008738:	e000ed0c 	.word	0xe000ed0c
 800873c:	200010e4 	.word	0x200010e4

08008740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	@ 0x28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800874c:	f7fe fd00 	bl	8007150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008750:	4b5c      	ldr	r3, [pc, #368]	@ (80088c4 <pvPortMalloc+0x184>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008758:	f000 f924 	bl	80089a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800875c:	4b5a      	ldr	r3, [pc, #360]	@ (80088c8 <pvPortMalloc+0x188>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4013      	ands	r3, r2
 8008764:	2b00      	cmp	r3, #0
 8008766:	f040 8095 	bne.w	8008894 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01e      	beq.n	80087ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008770:	2208      	movs	r2, #8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4413      	add	r3, r2
 8008776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f003 0307 	and.w	r3, r3, #7
 800877e:	2b00      	cmp	r3, #0
 8008780:	d015      	beq.n	80087ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f023 0307 	bic.w	r3, r3, #7
 8008788:	3308      	adds	r3, #8
 800878a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00b      	beq.n	80087ae <pvPortMalloc+0x6e>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	617b      	str	r3, [r7, #20]
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d06f      	beq.n	8008894 <pvPortMalloc+0x154>
 80087b4:	4b45      	ldr	r3, [pc, #276]	@ (80088cc <pvPortMalloc+0x18c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d86a      	bhi.n	8008894 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087be:	4b44      	ldr	r3, [pc, #272]	@ (80088d0 <pvPortMalloc+0x190>)
 80087c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087c2:	4b43      	ldr	r3, [pc, #268]	@ (80088d0 <pvPortMalloc+0x190>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087c8:	e004      	b.n	80087d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d903      	bls.n	80087e6 <pvPortMalloc+0xa6>
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f1      	bne.n	80087ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087e6:	4b37      	ldr	r3, [pc, #220]	@ (80088c4 <pvPortMalloc+0x184>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d051      	beq.n	8008894 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2208      	movs	r2, #8
 80087f6:	4413      	add	r3, r2
 80087f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	1ad2      	subs	r2, r2, r3
 800880a:	2308      	movs	r3, #8
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	429a      	cmp	r2, r3
 8008810:	d920      	bls.n	8008854 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4413      	add	r3, r2
 8008818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <pvPortMalloc+0xfc>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	613b      	str	r3, [r7, #16]
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	e7fd      	b.n	8008838 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800883c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	1ad2      	subs	r2, r2, r3
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800884e:	69b8      	ldr	r0, [r7, #24]
 8008850:	f000 f90a 	bl	8008a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008854:	4b1d      	ldr	r3, [pc, #116]	@ (80088cc <pvPortMalloc+0x18c>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	4a1b      	ldr	r2, [pc, #108]	@ (80088cc <pvPortMalloc+0x18c>)
 8008860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008862:	4b1a      	ldr	r3, [pc, #104]	@ (80088cc <pvPortMalloc+0x18c>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <pvPortMalloc+0x194>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d203      	bcs.n	8008876 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800886e:	4b17      	ldr	r3, [pc, #92]	@ (80088cc <pvPortMalloc+0x18c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a18      	ldr	r2, [pc, #96]	@ (80088d4 <pvPortMalloc+0x194>)
 8008874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	4b13      	ldr	r3, [pc, #76]	@ (80088c8 <pvPortMalloc+0x188>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	431a      	orrs	r2, r3
 8008880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800888a:	4b13      	ldr	r3, [pc, #76]	@ (80088d8 <pvPortMalloc+0x198>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3301      	adds	r3, #1
 8008890:	4a11      	ldr	r2, [pc, #68]	@ (80088d8 <pvPortMalloc+0x198>)
 8008892:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008894:	f7fe fc6a 	bl	800716c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00b      	beq.n	80088ba <pvPortMalloc+0x17a>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	60fb      	str	r3, [r7, #12]
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <pvPortMalloc+0x176>
	return pvReturn;
 80088ba:	69fb      	ldr	r3, [r7, #28]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3728      	adds	r7, #40	@ 0x28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	200020f0 	.word	0x200020f0
 80088c8:	20002104 	.word	0x20002104
 80088cc:	200020f4 	.word	0x200020f4
 80088d0:	200020e8 	.word	0x200020e8
 80088d4:	200020f8 	.word	0x200020f8
 80088d8:	200020fc 	.word	0x200020fc

080088dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d04f      	beq.n	800898e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088ee:	2308      	movs	r3, #8
 80088f0:	425b      	negs	r3, r3
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4413      	add	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	4b25      	ldr	r3, [pc, #148]	@ (8008998 <vPortFree+0xbc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4013      	ands	r3, r2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10b      	bne.n	8008922 <vPortFree+0x46>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	60fb      	str	r3, [r7, #12]
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	e7fd      	b.n	800891e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00b      	beq.n	8008942 <vPortFree+0x66>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	60bb      	str	r3, [r7, #8]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4b14      	ldr	r3, [pc, #80]	@ (8008998 <vPortFree+0xbc>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4013      	ands	r3, r2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01e      	beq.n	800898e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d11a      	bne.n	800898e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	4b0e      	ldr	r3, [pc, #56]	@ (8008998 <vPortFree+0xbc>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	43db      	mvns	r3, r3
 8008962:	401a      	ands	r2, r3
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008968:	f7fe fbf2 	bl	8007150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <vPortFree+0xc0>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4413      	add	r3, r2
 8008976:	4a09      	ldr	r2, [pc, #36]	@ (800899c <vPortFree+0xc0>)
 8008978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800897a:	6938      	ldr	r0, [r7, #16]
 800897c:	f000 f874 	bl	8008a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008980:	4b07      	ldr	r3, [pc, #28]	@ (80089a0 <vPortFree+0xc4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	4a06      	ldr	r2, [pc, #24]	@ (80089a0 <vPortFree+0xc4>)
 8008988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800898a:	f7fe fbef 	bl	800716c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800898e:	bf00      	nop
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20002104 	.word	0x20002104
 800899c:	200020f4 	.word	0x200020f4
 80089a0:	20002100 	.word	0x20002100

080089a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089b0:	4b27      	ldr	r3, [pc, #156]	@ (8008a50 <prvHeapInit+0xac>)
 80089b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00c      	beq.n	80089d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3307      	adds	r3, #7
 80089c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0307 	bic.w	r3, r3, #7
 80089ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a50 <prvHeapInit+0xac>)
 80089d4:	4413      	add	r3, r2
 80089d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a54 <prvHeapInit+0xb0>)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008a54 <prvHeapInit+0xb0>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4413      	add	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089f0:	2208      	movs	r2, #8
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0307 	bic.w	r3, r3, #7
 80089fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4a15      	ldr	r2, [pc, #84]	@ (8008a58 <prvHeapInit+0xb4>)
 8008a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a06:	4b14      	ldr	r3, [pc, #80]	@ (8008a58 <prvHeapInit+0xb4>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a0e:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <prvHeapInit+0xb4>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a24:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <prvHeapInit+0xb4>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	4a0a      	ldr	r2, [pc, #40]	@ (8008a5c <prvHeapInit+0xb8>)
 8008a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4a09      	ldr	r2, [pc, #36]	@ (8008a60 <prvHeapInit+0xbc>)
 8008a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a3c:	4b09      	ldr	r3, [pc, #36]	@ (8008a64 <prvHeapInit+0xc0>)
 8008a3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a42:	601a      	str	r2, [r3, #0]
}
 8008a44:	bf00      	nop
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	200010e8 	.word	0x200010e8
 8008a54:	200020e8 	.word	0x200020e8
 8008a58:	200020f0 	.word	0x200020f0
 8008a5c:	200020f8 	.word	0x200020f8
 8008a60:	200020f4 	.word	0x200020f4
 8008a64:	20002104 	.word	0x20002104

08008a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a70:	4b27      	ldr	r3, [pc, #156]	@ (8008b10 <prvInsertBlockIntoFreeList+0xa8>)
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e002      	b.n	8008a7c <prvInsertBlockIntoFreeList+0x14>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d8f7      	bhi.n	8008a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d108      	bne.n	8008aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	441a      	add	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d118      	bne.n	8008af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	4b14      	ldr	r3, [pc, #80]	@ (8008b14 <prvInsertBlockIntoFreeList+0xac>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d00d      	beq.n	8008ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	441a      	add	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	e008      	b.n	8008af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b14 <prvInsertBlockIntoFreeList+0xac>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e003      	b.n	8008af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d002      	beq.n	8008b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr
 8008b10:	200020e8 	.word	0x200020e8
 8008b14:	200020f0 	.word	0x200020f0

08008b18 <atoi>:
 8008b18:	220a      	movs	r2, #10
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f000 b87c 	b.w	8008c18 <strtol>

08008b20 <_strtol_l.isra.0>:
 8008b20:	2b24      	cmp	r3, #36	@ 0x24
 8008b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b26:	4686      	mov	lr, r0
 8008b28:	4690      	mov	r8, r2
 8008b2a:	d801      	bhi.n	8008b30 <_strtol_l.isra.0+0x10>
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d106      	bne.n	8008b3e <_strtol_l.isra.0+0x1e>
 8008b30:	f001 f882 	bl	8009c38 <__errno>
 8008b34:	2316      	movs	r3, #22
 8008b36:	6003      	str	r3, [r0, #0]
 8008b38:	2000      	movs	r0, #0
 8008b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3e:	460d      	mov	r5, r1
 8008b40:	4833      	ldr	r0, [pc, #204]	@ (8008c10 <_strtol_l.isra.0+0xf0>)
 8008b42:	462a      	mov	r2, r5
 8008b44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b48:	5d06      	ldrb	r6, [r0, r4]
 8008b4a:	f016 0608 	ands.w	r6, r6, #8
 8008b4e:	d1f8      	bne.n	8008b42 <_strtol_l.isra.0+0x22>
 8008b50:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b52:	d110      	bne.n	8008b76 <_strtol_l.isra.0+0x56>
 8008b54:	2601      	movs	r6, #1
 8008b56:	782c      	ldrb	r4, [r5, #0]
 8008b58:	1c95      	adds	r5, r2, #2
 8008b5a:	f033 0210 	bics.w	r2, r3, #16
 8008b5e:	d115      	bne.n	8008b8c <_strtol_l.isra.0+0x6c>
 8008b60:	2c30      	cmp	r4, #48	@ 0x30
 8008b62:	d10d      	bne.n	8008b80 <_strtol_l.isra.0+0x60>
 8008b64:	782a      	ldrb	r2, [r5, #0]
 8008b66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b6a:	2a58      	cmp	r2, #88	@ 0x58
 8008b6c:	d108      	bne.n	8008b80 <_strtol_l.isra.0+0x60>
 8008b6e:	786c      	ldrb	r4, [r5, #1]
 8008b70:	3502      	adds	r5, #2
 8008b72:	2310      	movs	r3, #16
 8008b74:	e00a      	b.n	8008b8c <_strtol_l.isra.0+0x6c>
 8008b76:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b78:	bf04      	itt	eq
 8008b7a:	782c      	ldrbeq	r4, [r5, #0]
 8008b7c:	1c95      	addeq	r5, r2, #2
 8008b7e:	e7ec      	b.n	8008b5a <_strtol_l.isra.0+0x3a>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f6      	bne.n	8008b72 <_strtol_l.isra.0+0x52>
 8008b84:	2c30      	cmp	r4, #48	@ 0x30
 8008b86:	bf14      	ite	ne
 8008b88:	230a      	movne	r3, #10
 8008b8a:	2308      	moveq	r3, #8
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008b92:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b96:	fbbc f9f3 	udiv	r9, ip, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ba0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ba4:	2f09      	cmp	r7, #9
 8008ba6:	d80f      	bhi.n	8008bc8 <_strtol_l.isra.0+0xa8>
 8008ba8:	463c      	mov	r4, r7
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	dd1b      	ble.n	8008be6 <_strtol_l.isra.0+0xc6>
 8008bae:	1c57      	adds	r7, r2, #1
 8008bb0:	d007      	beq.n	8008bc2 <_strtol_l.isra.0+0xa2>
 8008bb2:	4581      	cmp	r9, r0
 8008bb4:	d314      	bcc.n	8008be0 <_strtol_l.isra.0+0xc0>
 8008bb6:	d101      	bne.n	8008bbc <_strtol_l.isra.0+0x9c>
 8008bb8:	45a2      	cmp	sl, r4
 8008bba:	db11      	blt.n	8008be0 <_strtol_l.isra.0+0xc0>
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	fb00 4003 	mla	r0, r0, r3, r4
 8008bc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bc6:	e7eb      	b.n	8008ba0 <_strtol_l.isra.0+0x80>
 8008bc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008bcc:	2f19      	cmp	r7, #25
 8008bce:	d801      	bhi.n	8008bd4 <_strtol_l.isra.0+0xb4>
 8008bd0:	3c37      	subs	r4, #55	@ 0x37
 8008bd2:	e7ea      	b.n	8008baa <_strtol_l.isra.0+0x8a>
 8008bd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008bd8:	2f19      	cmp	r7, #25
 8008bda:	d804      	bhi.n	8008be6 <_strtol_l.isra.0+0xc6>
 8008bdc:	3c57      	subs	r4, #87	@ 0x57
 8008bde:	e7e4      	b.n	8008baa <_strtol_l.isra.0+0x8a>
 8008be0:	f04f 32ff 	mov.w	r2, #4294967295
 8008be4:	e7ed      	b.n	8008bc2 <_strtol_l.isra.0+0xa2>
 8008be6:	1c53      	adds	r3, r2, #1
 8008be8:	d108      	bne.n	8008bfc <_strtol_l.isra.0+0xdc>
 8008bea:	2322      	movs	r3, #34	@ 0x22
 8008bec:	4660      	mov	r0, ip
 8008bee:	f8ce 3000 	str.w	r3, [lr]
 8008bf2:	f1b8 0f00 	cmp.w	r8, #0
 8008bf6:	d0a0      	beq.n	8008b3a <_strtol_l.isra.0+0x1a>
 8008bf8:	1e69      	subs	r1, r5, #1
 8008bfa:	e006      	b.n	8008c0a <_strtol_l.isra.0+0xea>
 8008bfc:	b106      	cbz	r6, 8008c00 <_strtol_l.isra.0+0xe0>
 8008bfe:	4240      	negs	r0, r0
 8008c00:	f1b8 0f00 	cmp.w	r8, #0
 8008c04:	d099      	beq.n	8008b3a <_strtol_l.isra.0+0x1a>
 8008c06:	2a00      	cmp	r2, #0
 8008c08:	d1f6      	bne.n	8008bf8 <_strtol_l.isra.0+0xd8>
 8008c0a:	f8c8 1000 	str.w	r1, [r8]
 8008c0e:	e794      	b.n	8008b3a <_strtol_l.isra.0+0x1a>
 8008c10:	0800d48f 	.word	0x0800d48f

08008c14 <_strtol_r>:
 8008c14:	f7ff bf84 	b.w	8008b20 <_strtol_l.isra.0>

08008c18 <strtol>:
 8008c18:	4613      	mov	r3, r2
 8008c1a:	460a      	mov	r2, r1
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4802      	ldr	r0, [pc, #8]	@ (8008c28 <strtol+0x10>)
 8008c20:	6800      	ldr	r0, [r0, #0]
 8008c22:	f7ff bf7d 	b.w	8008b20 <_strtol_l.isra.0>
 8008c26:	bf00      	nop
 8008c28:	2000001c 	.word	0x2000001c

08008c2c <__cvt>:
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c32:	461d      	mov	r5, r3
 8008c34:	bfbb      	ittet	lt
 8008c36:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008c3a:	461d      	movlt	r5, r3
 8008c3c:	2300      	movge	r3, #0
 8008c3e:	232d      	movlt	r3, #45	@ 0x2d
 8008c40:	b088      	sub	sp, #32
 8008c42:	4614      	mov	r4, r2
 8008c44:	bfb8      	it	lt
 8008c46:	4614      	movlt	r4, r2
 8008c48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c4a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008c4c:	7013      	strb	r3, [r2, #0]
 8008c4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c50:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008c54:	f023 0820 	bic.w	r8, r3, #32
 8008c58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c5c:	d005      	beq.n	8008c6a <__cvt+0x3e>
 8008c5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c62:	d100      	bne.n	8008c66 <__cvt+0x3a>
 8008c64:	3601      	adds	r6, #1
 8008c66:	2302      	movs	r3, #2
 8008c68:	e000      	b.n	8008c6c <__cvt+0x40>
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	aa07      	add	r2, sp, #28
 8008c6e:	9204      	str	r2, [sp, #16]
 8008c70:	aa06      	add	r2, sp, #24
 8008c72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c76:	e9cd 3600 	strd	r3, r6, [sp]
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	f001 f8b3 	bl	8009de8 <_dtoa_r>
 8008c82:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c86:	4607      	mov	r7, r0
 8008c88:	d119      	bne.n	8008cbe <__cvt+0x92>
 8008c8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c8c:	07db      	lsls	r3, r3, #31
 8008c8e:	d50e      	bpl.n	8008cae <__cvt+0x82>
 8008c90:	eb00 0906 	add.w	r9, r0, r6
 8008c94:	2200      	movs	r2, #0
 8008c96:	2300      	movs	r3, #0
 8008c98:	4620      	mov	r0, r4
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f7f7 ff38 	bl	8000b10 <__aeabi_dcmpeq>
 8008ca0:	b108      	cbz	r0, 8008ca6 <__cvt+0x7a>
 8008ca2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ca6:	2230      	movs	r2, #48	@ 0x30
 8008ca8:	9b07      	ldr	r3, [sp, #28]
 8008caa:	454b      	cmp	r3, r9
 8008cac:	d31e      	bcc.n	8008cec <__cvt+0xc0>
 8008cae:	4638      	mov	r0, r7
 8008cb0:	9b07      	ldr	r3, [sp, #28]
 8008cb2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008cb4:	1bdb      	subs	r3, r3, r7
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	b008      	add	sp, #32
 8008cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cbe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cc2:	eb00 0906 	add.w	r9, r0, r6
 8008cc6:	d1e5      	bne.n	8008c94 <__cvt+0x68>
 8008cc8:	7803      	ldrb	r3, [r0, #0]
 8008cca:	2b30      	cmp	r3, #48	@ 0x30
 8008ccc:	d10a      	bne.n	8008ce4 <__cvt+0xb8>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 ff1b 	bl	8000b10 <__aeabi_dcmpeq>
 8008cda:	b918      	cbnz	r0, 8008ce4 <__cvt+0xb8>
 8008cdc:	f1c6 0601 	rsb	r6, r6, #1
 8008ce0:	f8ca 6000 	str.w	r6, [sl]
 8008ce4:	f8da 3000 	ldr.w	r3, [sl]
 8008ce8:	4499      	add	r9, r3
 8008cea:	e7d3      	b.n	8008c94 <__cvt+0x68>
 8008cec:	1c59      	adds	r1, r3, #1
 8008cee:	9107      	str	r1, [sp, #28]
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	e7d9      	b.n	8008ca8 <__cvt+0x7c>

08008cf4 <__exponent>:
 8008cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	bfb6      	itet	lt
 8008cfa:	232d      	movlt	r3, #45	@ 0x2d
 8008cfc:	232b      	movge	r3, #43	@ 0x2b
 8008cfe:	4249      	neglt	r1, r1
 8008d00:	2909      	cmp	r1, #9
 8008d02:	7002      	strb	r2, [r0, #0]
 8008d04:	7043      	strb	r3, [r0, #1]
 8008d06:	dd29      	ble.n	8008d5c <__exponent+0x68>
 8008d08:	f10d 0307 	add.w	r3, sp, #7
 8008d0c:	461d      	mov	r5, r3
 8008d0e:	270a      	movs	r7, #10
 8008d10:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d14:	461a      	mov	r2, r3
 8008d16:	fb07 1416 	mls	r4, r7, r6, r1
 8008d1a:	3430      	adds	r4, #48	@ 0x30
 8008d1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d20:	460c      	mov	r4, r1
 8008d22:	2c63      	cmp	r4, #99	@ 0x63
 8008d24:	4631      	mov	r1, r6
 8008d26:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d2a:	dcf1      	bgt.n	8008d10 <__exponent+0x1c>
 8008d2c:	3130      	adds	r1, #48	@ 0x30
 8008d2e:	1e94      	subs	r4, r2, #2
 8008d30:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d34:	4623      	mov	r3, r4
 8008d36:	1c41      	adds	r1, r0, #1
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	d30a      	bcc.n	8008d52 <__exponent+0x5e>
 8008d3c:	f10d 0309 	add.w	r3, sp, #9
 8008d40:	1a9b      	subs	r3, r3, r2
 8008d42:	42ac      	cmp	r4, r5
 8008d44:	bf88      	it	hi
 8008d46:	2300      	movhi	r3, #0
 8008d48:	3302      	adds	r3, #2
 8008d4a:	4403      	add	r3, r0
 8008d4c:	1a18      	subs	r0, r3, r0
 8008d4e:	b003      	add	sp, #12
 8008d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d52:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d56:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d5a:	e7ed      	b.n	8008d38 <__exponent+0x44>
 8008d5c:	2330      	movs	r3, #48	@ 0x30
 8008d5e:	3130      	adds	r1, #48	@ 0x30
 8008d60:	7083      	strb	r3, [r0, #2]
 8008d62:	70c1      	strb	r1, [r0, #3]
 8008d64:	1d03      	adds	r3, r0, #4
 8008d66:	e7f1      	b.n	8008d4c <__exponent+0x58>

08008d68 <_printf_float>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	b091      	sub	sp, #68	@ 0x44
 8008d6e:	460c      	mov	r4, r1
 8008d70:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008d74:	4616      	mov	r6, r2
 8008d76:	461f      	mov	r7, r3
 8008d78:	4605      	mov	r5, r0
 8008d7a:	f000 ff13 	bl	8009ba4 <_localeconv_r>
 8008d7e:	6803      	ldr	r3, [r0, #0]
 8008d80:	4618      	mov	r0, r3
 8008d82:	9308      	str	r3, [sp, #32]
 8008d84:	f7f7 f9e4 	bl	8000150 <strlen>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d90:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d92:	3307      	adds	r3, #7
 8008d94:	f023 0307 	bic.w	r3, r3, #7
 8008d98:	f103 0208 	add.w	r2, r3, #8
 8008d9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008da0:	f8d4 b000 	ldr.w	fp, [r4]
 8008da4:	f8c8 2000 	str.w	r2, [r8]
 8008da8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008db2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8009034 <_printf_float+0x2cc>)
 8008dc4:	f7f7 fed6 	bl	8000b74 <__aeabi_dcmpun>
 8008dc8:	bb70      	cbnz	r0, 8008e28 <_printf_float+0xc0>
 8008dca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd2:	4b98      	ldr	r3, [pc, #608]	@ (8009034 <_printf_float+0x2cc>)
 8008dd4:	f7f7 feb0 	bl	8000b38 <__aeabi_dcmple>
 8008dd8:	bb30      	cbnz	r0, 8008e28 <_printf_float+0xc0>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 fe9f 	bl	8000b24 <__aeabi_dcmplt>
 8008de6:	b110      	cbz	r0, 8008dee <_printf_float+0x86>
 8008de8:	232d      	movs	r3, #45	@ 0x2d
 8008dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dee:	4a92      	ldr	r2, [pc, #584]	@ (8009038 <_printf_float+0x2d0>)
 8008df0:	4b92      	ldr	r3, [pc, #584]	@ (800903c <_printf_float+0x2d4>)
 8008df2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008df6:	bf8c      	ite	hi
 8008df8:	4690      	movhi	r8, r2
 8008dfa:	4698      	movls	r8, r3
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	f04f 0900 	mov.w	r9, #0
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	f02b 0304 	bic.w	r3, fp, #4
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	4633      	mov	r3, r6
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4628      	mov	r0, r5
 8008e10:	9700      	str	r7, [sp, #0]
 8008e12:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008e14:	f000 f9d4 	bl	80091c0 <_printf_common>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	f040 8090 	bne.w	8008f3e <_printf_float+0x1d6>
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e22:	b011      	add	sp, #68	@ 0x44
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	4642      	mov	r2, r8
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	4649      	mov	r1, r9
 8008e30:	f7f7 fea0 	bl	8000b74 <__aeabi_dcmpun>
 8008e34:	b148      	cbz	r0, 8008e4a <_printf_float+0xe2>
 8008e36:	464b      	mov	r3, r9
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bfb8      	it	lt
 8008e3c:	232d      	movlt	r3, #45	@ 0x2d
 8008e3e:	4a80      	ldr	r2, [pc, #512]	@ (8009040 <_printf_float+0x2d8>)
 8008e40:	bfb8      	it	lt
 8008e42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e46:	4b7f      	ldr	r3, [pc, #508]	@ (8009044 <_printf_float+0x2dc>)
 8008e48:	e7d3      	b.n	8008df2 <_printf_float+0x8a>
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	d13f      	bne.n	8008ed4 <_printf_float+0x16c>
 8008e54:	2306      	movs	r3, #6
 8008e56:	6063      	str	r3, [r4, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	9206      	str	r2, [sp, #24]
 8008e62:	aa0e      	add	r2, sp, #56	@ 0x38
 8008e64:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008e68:	aa0d      	add	r2, sp, #52	@ 0x34
 8008e6a:	9203      	str	r2, [sp, #12]
 8008e6c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008e70:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	4642      	mov	r2, r8
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	464b      	mov	r3, r9
 8008e7e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e80:	f7ff fed4 	bl	8008c2c <__cvt>
 8008e84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e86:	4680      	mov	r8, r0
 8008e88:	2947      	cmp	r1, #71	@ 0x47
 8008e8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008e8c:	d128      	bne.n	8008ee0 <_printf_float+0x178>
 8008e8e:	1cc8      	adds	r0, r1, #3
 8008e90:	db02      	blt.n	8008e98 <_printf_float+0x130>
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	4299      	cmp	r1, r3
 8008e96:	dd40      	ble.n	8008f1a <_printf_float+0x1b2>
 8008e98:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e9c:	fa5f fa8a 	uxtb.w	sl, sl
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	3901      	subs	r1, #1
 8008ea4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ea8:	910d      	str	r1, [sp, #52]	@ 0x34
 8008eaa:	f7ff ff23 	bl	8008cf4 <__exponent>
 8008eae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eb0:	4681      	mov	r9, r0
 8008eb2:	1813      	adds	r3, r2, r0
 8008eb4:	2a01      	cmp	r2, #1
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	dc02      	bgt.n	8008ec0 <_printf_float+0x158>
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	07d2      	lsls	r2, r2, #31
 8008ebe:	d501      	bpl.n	8008ec4 <_printf_float+0x15c>
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d09e      	beq.n	8008e0a <_printf_float+0xa2>
 8008ecc:	232d      	movs	r3, #45	@ 0x2d
 8008ece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ed2:	e79a      	b.n	8008e0a <_printf_float+0xa2>
 8008ed4:	2947      	cmp	r1, #71	@ 0x47
 8008ed6:	d1bf      	bne.n	8008e58 <_printf_float+0xf0>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1bd      	bne.n	8008e58 <_printf_float+0xf0>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7ba      	b.n	8008e56 <_printf_float+0xee>
 8008ee0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ee4:	d9dc      	bls.n	8008ea0 <_printf_float+0x138>
 8008ee6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008eea:	d118      	bne.n	8008f1e <_printf_float+0x1b6>
 8008eec:	2900      	cmp	r1, #0
 8008eee:	6863      	ldr	r3, [r4, #4]
 8008ef0:	dd0b      	ble.n	8008f0a <_printf_float+0x1a2>
 8008ef2:	6121      	str	r1, [r4, #16]
 8008ef4:	b913      	cbnz	r3, 8008efc <_printf_float+0x194>
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	07d0      	lsls	r0, r2, #31
 8008efa:	d502      	bpl.n	8008f02 <_printf_float+0x19a>
 8008efc:	3301      	adds	r3, #1
 8008efe:	440b      	add	r3, r1
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	f04f 0900 	mov.w	r9, #0
 8008f06:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f08:	e7dc      	b.n	8008ec4 <_printf_float+0x15c>
 8008f0a:	b913      	cbnz	r3, 8008f12 <_printf_float+0x1aa>
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	07d2      	lsls	r2, r2, #31
 8008f10:	d501      	bpl.n	8008f16 <_printf_float+0x1ae>
 8008f12:	3302      	adds	r3, #2
 8008f14:	e7f4      	b.n	8008f00 <_printf_float+0x198>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e7f2      	b.n	8008f00 <_printf_float+0x198>
 8008f1a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f20:	4299      	cmp	r1, r3
 8008f22:	db05      	blt.n	8008f30 <_printf_float+0x1c8>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	6121      	str	r1, [r4, #16]
 8008f28:	07d8      	lsls	r0, r3, #31
 8008f2a:	d5ea      	bpl.n	8008f02 <_printf_float+0x19a>
 8008f2c:	1c4b      	adds	r3, r1, #1
 8008f2e:	e7e7      	b.n	8008f00 <_printf_float+0x198>
 8008f30:	2900      	cmp	r1, #0
 8008f32:	bfcc      	ite	gt
 8008f34:	2201      	movgt	r2, #1
 8008f36:	f1c1 0202 	rsble	r2, r1, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	e7e0      	b.n	8008f00 <_printf_float+0x198>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	055a      	lsls	r2, r3, #21
 8008f42:	d407      	bmi.n	8008f54 <_printf_float+0x1ec>
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	4642      	mov	r2, r8
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	47b8      	blx	r7
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d12b      	bne.n	8008faa <_printf_float+0x242>
 8008f52:	e764      	b.n	8008e1e <_printf_float+0xb6>
 8008f54:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f58:	f240 80dc 	bls.w	8009114 <_printf_float+0x3ac>
 8008f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f60:	2200      	movs	r2, #0
 8008f62:	2300      	movs	r3, #0
 8008f64:	f7f7 fdd4 	bl	8000b10 <__aeabi_dcmpeq>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d033      	beq.n	8008fd4 <_printf_float+0x26c>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4628      	mov	r0, r5
 8008f72:	4a35      	ldr	r2, [pc, #212]	@ (8009048 <_printf_float+0x2e0>)
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	f43f af51 	beq.w	8008e1e <_printf_float+0xb6>
 8008f7c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008f80:	4543      	cmp	r3, r8
 8008f82:	db02      	blt.n	8008f8a <_printf_float+0x222>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	07d8      	lsls	r0, r3, #31
 8008f88:	d50f      	bpl.n	8008faa <_printf_float+0x242>
 8008f8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f af42 	beq.w	8008e1e <_printf_float+0xb6>
 8008f9a:	f04f 0900 	mov.w	r9, #0
 8008f9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fa2:	f104 0a1a 	add.w	sl, r4, #26
 8008fa6:	45c8      	cmp	r8, r9
 8008fa8:	dc09      	bgt.n	8008fbe <_printf_float+0x256>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	079b      	lsls	r3, r3, #30
 8008fae:	f100 8102 	bmi.w	80091b6 <_printf_float+0x44e>
 8008fb2:	68e0      	ldr	r0, [r4, #12]
 8008fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fb6:	4298      	cmp	r0, r3
 8008fb8:	bfb8      	it	lt
 8008fba:	4618      	movlt	r0, r3
 8008fbc:	e731      	b.n	8008e22 <_printf_float+0xba>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4652      	mov	r2, sl
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f af28 	beq.w	8008e1e <_printf_float+0xb6>
 8008fce:	f109 0901 	add.w	r9, r9, #1
 8008fd2:	e7e8      	b.n	8008fa6 <_printf_float+0x23e>
 8008fd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dc38      	bgt.n	800904c <_printf_float+0x2e4>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4631      	mov	r1, r6
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4a19      	ldr	r2, [pc, #100]	@ (8009048 <_printf_float+0x2e0>)
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	f43f af1a 	beq.w	8008e1e <_printf_float+0xb6>
 8008fea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008fee:	ea59 0303 	orrs.w	r3, r9, r3
 8008ff2:	d102      	bne.n	8008ffa <_printf_float+0x292>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d5d7      	bpl.n	8008faa <_printf_float+0x242>
 8008ffa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f af0a 	beq.w	8008e1e <_printf_float+0xb6>
 800900a:	f04f 0a00 	mov.w	sl, #0
 800900e:	f104 0b1a 	add.w	fp, r4, #26
 8009012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009014:	425b      	negs	r3, r3
 8009016:	4553      	cmp	r3, sl
 8009018:	dc01      	bgt.n	800901e <_printf_float+0x2b6>
 800901a:	464b      	mov	r3, r9
 800901c:	e793      	b.n	8008f46 <_printf_float+0x1de>
 800901e:	2301      	movs	r3, #1
 8009020:	465a      	mov	r2, fp
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f aef8 	beq.w	8008e1e <_printf_float+0xb6>
 800902e:	f10a 0a01 	add.w	sl, sl, #1
 8009032:	e7ee      	b.n	8009012 <_printf_float+0x2aa>
 8009034:	7fefffff 	.word	0x7fefffff
 8009038:	0800d593 	.word	0x0800d593
 800903c:	0800d58f 	.word	0x0800d58f
 8009040:	0800d59b 	.word	0x0800d59b
 8009044:	0800d597 	.word	0x0800d597
 8009048:	0800d59f 	.word	0x0800d59f
 800904c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800904e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009052:	4553      	cmp	r3, sl
 8009054:	bfa8      	it	ge
 8009056:	4653      	movge	r3, sl
 8009058:	2b00      	cmp	r3, #0
 800905a:	4699      	mov	r9, r3
 800905c:	dc36      	bgt.n	80090cc <_printf_float+0x364>
 800905e:	f04f 0b00 	mov.w	fp, #0
 8009062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009066:	f104 021a 	add.w	r2, r4, #26
 800906a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800906c:	930a      	str	r3, [sp, #40]	@ 0x28
 800906e:	eba3 0309 	sub.w	r3, r3, r9
 8009072:	455b      	cmp	r3, fp
 8009074:	dc31      	bgt.n	80090da <_printf_float+0x372>
 8009076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009078:	459a      	cmp	sl, r3
 800907a:	dc3a      	bgt.n	80090f2 <_printf_float+0x38a>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	07da      	lsls	r2, r3, #31
 8009080:	d437      	bmi.n	80090f2 <_printf_float+0x38a>
 8009082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009084:	ebaa 0903 	sub.w	r9, sl, r3
 8009088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800908a:	ebaa 0303 	sub.w	r3, sl, r3
 800908e:	4599      	cmp	r9, r3
 8009090:	bfa8      	it	ge
 8009092:	4699      	movge	r9, r3
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	dc33      	bgt.n	8009102 <_printf_float+0x39a>
 800909a:	f04f 0800 	mov.w	r8, #0
 800909e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a2:	f104 0b1a 	add.w	fp, r4, #26
 80090a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090a8:	ebaa 0303 	sub.w	r3, sl, r3
 80090ac:	eba3 0309 	sub.w	r3, r3, r9
 80090b0:	4543      	cmp	r3, r8
 80090b2:	f77f af7a 	ble.w	8008faa <_printf_float+0x242>
 80090b6:	2301      	movs	r3, #1
 80090b8:	465a      	mov	r2, fp
 80090ba:	4631      	mov	r1, r6
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f aeac 	beq.w	8008e1e <_printf_float+0xb6>
 80090c6:	f108 0801 	add.w	r8, r8, #1
 80090ca:	e7ec      	b.n	80090a6 <_printf_float+0x33e>
 80090cc:	4642      	mov	r2, r8
 80090ce:	4631      	mov	r1, r6
 80090d0:	4628      	mov	r0, r5
 80090d2:	47b8      	blx	r7
 80090d4:	3001      	adds	r0, #1
 80090d6:	d1c2      	bne.n	800905e <_printf_float+0x2f6>
 80090d8:	e6a1      	b.n	8008e1e <_printf_float+0xb6>
 80090da:	2301      	movs	r3, #1
 80090dc:	4631      	mov	r1, r6
 80090de:	4628      	mov	r0, r5
 80090e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f ae9a 	beq.w	8008e1e <_printf_float+0xb6>
 80090ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090ec:	f10b 0b01 	add.w	fp, fp, #1
 80090f0:	e7bb      	b.n	800906a <_printf_float+0x302>
 80090f2:	4631      	mov	r1, r6
 80090f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	d1c0      	bne.n	8009082 <_printf_float+0x31a>
 8009100:	e68d      	b.n	8008e1e <_printf_float+0xb6>
 8009102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009104:	464b      	mov	r3, r9
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	4442      	add	r2, r8
 800910c:	47b8      	blx	r7
 800910e:	3001      	adds	r0, #1
 8009110:	d1c3      	bne.n	800909a <_printf_float+0x332>
 8009112:	e684      	b.n	8008e1e <_printf_float+0xb6>
 8009114:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009118:	f1ba 0f01 	cmp.w	sl, #1
 800911c:	dc01      	bgt.n	8009122 <_printf_float+0x3ba>
 800911e:	07db      	lsls	r3, r3, #31
 8009120:	d536      	bpl.n	8009190 <_printf_float+0x428>
 8009122:	2301      	movs	r3, #1
 8009124:	4642      	mov	r2, r8
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	47b8      	blx	r7
 800912c:	3001      	adds	r0, #1
 800912e:	f43f ae76 	beq.w	8008e1e <_printf_float+0xb6>
 8009132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009136:	4631      	mov	r1, r6
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	f43f ae6e 	beq.w	8008e1e <_printf_float+0xb6>
 8009142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009146:	2200      	movs	r2, #0
 8009148:	2300      	movs	r3, #0
 800914a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800914e:	f7f7 fcdf 	bl	8000b10 <__aeabi_dcmpeq>
 8009152:	b9c0      	cbnz	r0, 8009186 <_printf_float+0x41e>
 8009154:	4653      	mov	r3, sl
 8009156:	f108 0201 	add.w	r2, r8, #1
 800915a:	4631      	mov	r1, r6
 800915c:	4628      	mov	r0, r5
 800915e:	47b8      	blx	r7
 8009160:	3001      	adds	r0, #1
 8009162:	d10c      	bne.n	800917e <_printf_float+0x416>
 8009164:	e65b      	b.n	8008e1e <_printf_float+0xb6>
 8009166:	2301      	movs	r3, #1
 8009168:	465a      	mov	r2, fp
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	f43f ae54 	beq.w	8008e1e <_printf_float+0xb6>
 8009176:	f108 0801 	add.w	r8, r8, #1
 800917a:	45d0      	cmp	r8, sl
 800917c:	dbf3      	blt.n	8009166 <_printf_float+0x3fe>
 800917e:	464b      	mov	r3, r9
 8009180:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009184:	e6e0      	b.n	8008f48 <_printf_float+0x1e0>
 8009186:	f04f 0800 	mov.w	r8, #0
 800918a:	f104 0b1a 	add.w	fp, r4, #26
 800918e:	e7f4      	b.n	800917a <_printf_float+0x412>
 8009190:	2301      	movs	r3, #1
 8009192:	4642      	mov	r2, r8
 8009194:	e7e1      	b.n	800915a <_printf_float+0x3f2>
 8009196:	2301      	movs	r3, #1
 8009198:	464a      	mov	r2, r9
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	f43f ae3c 	beq.w	8008e1e <_printf_float+0xb6>
 80091a6:	f108 0801 	add.w	r8, r8, #1
 80091aa:	68e3      	ldr	r3, [r4, #12]
 80091ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091ae:	1a5b      	subs	r3, r3, r1
 80091b0:	4543      	cmp	r3, r8
 80091b2:	dcf0      	bgt.n	8009196 <_printf_float+0x42e>
 80091b4:	e6fd      	b.n	8008fb2 <_printf_float+0x24a>
 80091b6:	f04f 0800 	mov.w	r8, #0
 80091ba:	f104 0919 	add.w	r9, r4, #25
 80091be:	e7f4      	b.n	80091aa <_printf_float+0x442>

080091c0 <_printf_common>:
 80091c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	4616      	mov	r6, r2
 80091c6:	4698      	mov	r8, r3
 80091c8:	688a      	ldr	r2, [r1, #8]
 80091ca:	690b      	ldr	r3, [r1, #16]
 80091cc:	4607      	mov	r7, r0
 80091ce:	4293      	cmp	r3, r2
 80091d0:	bfb8      	it	lt
 80091d2:	4613      	movlt	r3, r2
 80091d4:	6033      	str	r3, [r6, #0]
 80091d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091da:	460c      	mov	r4, r1
 80091dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091e0:	b10a      	cbz	r2, 80091e6 <_printf_common+0x26>
 80091e2:	3301      	adds	r3, #1
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	0699      	lsls	r1, r3, #26
 80091ea:	bf42      	ittt	mi
 80091ec:	6833      	ldrmi	r3, [r6, #0]
 80091ee:	3302      	addmi	r3, #2
 80091f0:	6033      	strmi	r3, [r6, #0]
 80091f2:	6825      	ldr	r5, [r4, #0]
 80091f4:	f015 0506 	ands.w	r5, r5, #6
 80091f8:	d106      	bne.n	8009208 <_printf_common+0x48>
 80091fa:	f104 0a19 	add.w	sl, r4, #25
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	6832      	ldr	r2, [r6, #0]
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	42ab      	cmp	r3, r5
 8009206:	dc2b      	bgt.n	8009260 <_printf_common+0xa0>
 8009208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800920c:	6822      	ldr	r2, [r4, #0]
 800920e:	3b00      	subs	r3, #0
 8009210:	bf18      	it	ne
 8009212:	2301      	movne	r3, #1
 8009214:	0692      	lsls	r2, r2, #26
 8009216:	d430      	bmi.n	800927a <_printf_common+0xba>
 8009218:	4641      	mov	r1, r8
 800921a:	4638      	mov	r0, r7
 800921c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009220:	47c8      	blx	r9
 8009222:	3001      	adds	r0, #1
 8009224:	d023      	beq.n	800926e <_printf_common+0xae>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	6922      	ldr	r2, [r4, #16]
 800922a:	f003 0306 	and.w	r3, r3, #6
 800922e:	2b04      	cmp	r3, #4
 8009230:	bf14      	ite	ne
 8009232:	2500      	movne	r5, #0
 8009234:	6833      	ldreq	r3, [r6, #0]
 8009236:	f04f 0600 	mov.w	r6, #0
 800923a:	bf08      	it	eq
 800923c:	68e5      	ldreq	r5, [r4, #12]
 800923e:	f104 041a 	add.w	r4, r4, #26
 8009242:	bf08      	it	eq
 8009244:	1aed      	subeq	r5, r5, r3
 8009246:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800924a:	bf08      	it	eq
 800924c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009250:	4293      	cmp	r3, r2
 8009252:	bfc4      	itt	gt
 8009254:	1a9b      	subgt	r3, r3, r2
 8009256:	18ed      	addgt	r5, r5, r3
 8009258:	42b5      	cmp	r5, r6
 800925a:	d11a      	bne.n	8009292 <_printf_common+0xd2>
 800925c:	2000      	movs	r0, #0
 800925e:	e008      	b.n	8009272 <_printf_common+0xb2>
 8009260:	2301      	movs	r3, #1
 8009262:	4652      	mov	r2, sl
 8009264:	4641      	mov	r1, r8
 8009266:	4638      	mov	r0, r7
 8009268:	47c8      	blx	r9
 800926a:	3001      	adds	r0, #1
 800926c:	d103      	bne.n	8009276 <_printf_common+0xb6>
 800926e:	f04f 30ff 	mov.w	r0, #4294967295
 8009272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009276:	3501      	adds	r5, #1
 8009278:	e7c1      	b.n	80091fe <_printf_common+0x3e>
 800927a:	2030      	movs	r0, #48	@ 0x30
 800927c:	18e1      	adds	r1, r4, r3
 800927e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009288:	4422      	add	r2, r4
 800928a:	3302      	adds	r3, #2
 800928c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009290:	e7c2      	b.n	8009218 <_printf_common+0x58>
 8009292:	2301      	movs	r3, #1
 8009294:	4622      	mov	r2, r4
 8009296:	4641      	mov	r1, r8
 8009298:	4638      	mov	r0, r7
 800929a:	47c8      	blx	r9
 800929c:	3001      	adds	r0, #1
 800929e:	d0e6      	beq.n	800926e <_printf_common+0xae>
 80092a0:	3601      	adds	r6, #1
 80092a2:	e7d9      	b.n	8009258 <_printf_common+0x98>

080092a4 <_printf_i>:
 80092a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	7e0f      	ldrb	r7, [r1, #24]
 80092aa:	4691      	mov	r9, r2
 80092ac:	2f78      	cmp	r7, #120	@ 0x78
 80092ae:	4680      	mov	r8, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	469a      	mov	sl, r3
 80092b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ba:	d807      	bhi.n	80092cc <_printf_i+0x28>
 80092bc:	2f62      	cmp	r7, #98	@ 0x62
 80092be:	d80a      	bhi.n	80092d6 <_printf_i+0x32>
 80092c0:	2f00      	cmp	r7, #0
 80092c2:	f000 80d1 	beq.w	8009468 <_printf_i+0x1c4>
 80092c6:	2f58      	cmp	r7, #88	@ 0x58
 80092c8:	f000 80b8 	beq.w	800943c <_printf_i+0x198>
 80092cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092d4:	e03a      	b.n	800934c <_printf_i+0xa8>
 80092d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092da:	2b15      	cmp	r3, #21
 80092dc:	d8f6      	bhi.n	80092cc <_printf_i+0x28>
 80092de:	a101      	add	r1, pc, #4	@ (adr r1, 80092e4 <_printf_i+0x40>)
 80092e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092e4:	0800933d 	.word	0x0800933d
 80092e8:	08009351 	.word	0x08009351
 80092ec:	080092cd 	.word	0x080092cd
 80092f0:	080092cd 	.word	0x080092cd
 80092f4:	080092cd 	.word	0x080092cd
 80092f8:	080092cd 	.word	0x080092cd
 80092fc:	08009351 	.word	0x08009351
 8009300:	080092cd 	.word	0x080092cd
 8009304:	080092cd 	.word	0x080092cd
 8009308:	080092cd 	.word	0x080092cd
 800930c:	080092cd 	.word	0x080092cd
 8009310:	0800944f 	.word	0x0800944f
 8009314:	0800937b 	.word	0x0800937b
 8009318:	08009409 	.word	0x08009409
 800931c:	080092cd 	.word	0x080092cd
 8009320:	080092cd 	.word	0x080092cd
 8009324:	08009471 	.word	0x08009471
 8009328:	080092cd 	.word	0x080092cd
 800932c:	0800937b 	.word	0x0800937b
 8009330:	080092cd 	.word	0x080092cd
 8009334:	080092cd 	.word	0x080092cd
 8009338:	08009411 	.word	0x08009411
 800933c:	6833      	ldr	r3, [r6, #0]
 800933e:	1d1a      	adds	r2, r3, #4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6032      	str	r2, [r6, #0]
 8009344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800934c:	2301      	movs	r3, #1
 800934e:	e09c      	b.n	800948a <_printf_i+0x1e6>
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	6820      	ldr	r0, [r4, #0]
 8009354:	1d19      	adds	r1, r3, #4
 8009356:	6031      	str	r1, [r6, #0]
 8009358:	0606      	lsls	r6, r0, #24
 800935a:	d501      	bpl.n	8009360 <_printf_i+0xbc>
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	e003      	b.n	8009368 <_printf_i+0xc4>
 8009360:	0645      	lsls	r5, r0, #25
 8009362:	d5fb      	bpl.n	800935c <_printf_i+0xb8>
 8009364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009368:	2d00      	cmp	r5, #0
 800936a:	da03      	bge.n	8009374 <_printf_i+0xd0>
 800936c:	232d      	movs	r3, #45	@ 0x2d
 800936e:	426d      	negs	r5, r5
 8009370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009374:	230a      	movs	r3, #10
 8009376:	4858      	ldr	r0, [pc, #352]	@ (80094d8 <_printf_i+0x234>)
 8009378:	e011      	b.n	800939e <_printf_i+0xfa>
 800937a:	6821      	ldr	r1, [r4, #0]
 800937c:	6833      	ldr	r3, [r6, #0]
 800937e:	0608      	lsls	r0, r1, #24
 8009380:	f853 5b04 	ldr.w	r5, [r3], #4
 8009384:	d402      	bmi.n	800938c <_printf_i+0xe8>
 8009386:	0649      	lsls	r1, r1, #25
 8009388:	bf48      	it	mi
 800938a:	b2ad      	uxthmi	r5, r5
 800938c:	2f6f      	cmp	r7, #111	@ 0x6f
 800938e:	6033      	str	r3, [r6, #0]
 8009390:	bf14      	ite	ne
 8009392:	230a      	movne	r3, #10
 8009394:	2308      	moveq	r3, #8
 8009396:	4850      	ldr	r0, [pc, #320]	@ (80094d8 <_printf_i+0x234>)
 8009398:	2100      	movs	r1, #0
 800939a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800939e:	6866      	ldr	r6, [r4, #4]
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	60a6      	str	r6, [r4, #8]
 80093a4:	db05      	blt.n	80093b2 <_printf_i+0x10e>
 80093a6:	6821      	ldr	r1, [r4, #0]
 80093a8:	432e      	orrs	r6, r5
 80093aa:	f021 0104 	bic.w	r1, r1, #4
 80093ae:	6021      	str	r1, [r4, #0]
 80093b0:	d04b      	beq.n	800944a <_printf_i+0x1a6>
 80093b2:	4616      	mov	r6, r2
 80093b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80093b8:	fb03 5711 	mls	r7, r3, r1, r5
 80093bc:	5dc7      	ldrb	r7, [r0, r7]
 80093be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093c2:	462f      	mov	r7, r5
 80093c4:	42bb      	cmp	r3, r7
 80093c6:	460d      	mov	r5, r1
 80093c8:	d9f4      	bls.n	80093b4 <_printf_i+0x110>
 80093ca:	2b08      	cmp	r3, #8
 80093cc:	d10b      	bne.n	80093e6 <_printf_i+0x142>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	07df      	lsls	r7, r3, #31
 80093d2:	d508      	bpl.n	80093e6 <_printf_i+0x142>
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	6861      	ldr	r1, [r4, #4]
 80093d8:	4299      	cmp	r1, r3
 80093da:	bfde      	ittt	le
 80093dc:	2330      	movle	r3, #48	@ 0x30
 80093de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093e6:	1b92      	subs	r2, r2, r6
 80093e8:	6122      	str	r2, [r4, #16]
 80093ea:	464b      	mov	r3, r9
 80093ec:	4621      	mov	r1, r4
 80093ee:	4640      	mov	r0, r8
 80093f0:	f8cd a000 	str.w	sl, [sp]
 80093f4:	aa03      	add	r2, sp, #12
 80093f6:	f7ff fee3 	bl	80091c0 <_printf_common>
 80093fa:	3001      	adds	r0, #1
 80093fc:	d14a      	bne.n	8009494 <_printf_i+0x1f0>
 80093fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009402:	b004      	add	sp, #16
 8009404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	f043 0320 	orr.w	r3, r3, #32
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	2778      	movs	r7, #120	@ 0x78
 8009412:	4832      	ldr	r0, [pc, #200]	@ (80094dc <_printf_i+0x238>)
 8009414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	6831      	ldr	r1, [r6, #0]
 800941c:	061f      	lsls	r7, r3, #24
 800941e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009422:	d402      	bmi.n	800942a <_printf_i+0x186>
 8009424:	065f      	lsls	r7, r3, #25
 8009426:	bf48      	it	mi
 8009428:	b2ad      	uxthmi	r5, r5
 800942a:	6031      	str	r1, [r6, #0]
 800942c:	07d9      	lsls	r1, r3, #31
 800942e:	bf44      	itt	mi
 8009430:	f043 0320 	orrmi.w	r3, r3, #32
 8009434:	6023      	strmi	r3, [r4, #0]
 8009436:	b11d      	cbz	r5, 8009440 <_printf_i+0x19c>
 8009438:	2310      	movs	r3, #16
 800943a:	e7ad      	b.n	8009398 <_printf_i+0xf4>
 800943c:	4826      	ldr	r0, [pc, #152]	@ (80094d8 <_printf_i+0x234>)
 800943e:	e7e9      	b.n	8009414 <_printf_i+0x170>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	f023 0320 	bic.w	r3, r3, #32
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	e7f6      	b.n	8009438 <_printf_i+0x194>
 800944a:	4616      	mov	r6, r2
 800944c:	e7bd      	b.n	80093ca <_printf_i+0x126>
 800944e:	6833      	ldr	r3, [r6, #0]
 8009450:	6825      	ldr	r5, [r4, #0]
 8009452:	1d18      	adds	r0, r3, #4
 8009454:	6961      	ldr	r1, [r4, #20]
 8009456:	6030      	str	r0, [r6, #0]
 8009458:	062e      	lsls	r6, r5, #24
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	d501      	bpl.n	8009462 <_printf_i+0x1be>
 800945e:	6019      	str	r1, [r3, #0]
 8009460:	e002      	b.n	8009468 <_printf_i+0x1c4>
 8009462:	0668      	lsls	r0, r5, #25
 8009464:	d5fb      	bpl.n	800945e <_printf_i+0x1ba>
 8009466:	8019      	strh	r1, [r3, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	4616      	mov	r6, r2
 800946c:	6123      	str	r3, [r4, #16]
 800946e:	e7bc      	b.n	80093ea <_printf_i+0x146>
 8009470:	6833      	ldr	r3, [r6, #0]
 8009472:	2100      	movs	r1, #0
 8009474:	1d1a      	adds	r2, r3, #4
 8009476:	6032      	str	r2, [r6, #0]
 8009478:	681e      	ldr	r6, [r3, #0]
 800947a:	6862      	ldr	r2, [r4, #4]
 800947c:	4630      	mov	r0, r6
 800947e:	f000 fc08 	bl	8009c92 <memchr>
 8009482:	b108      	cbz	r0, 8009488 <_printf_i+0x1e4>
 8009484:	1b80      	subs	r0, r0, r6
 8009486:	6060      	str	r0, [r4, #4]
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	2300      	movs	r3, #0
 800948e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009492:	e7aa      	b.n	80093ea <_printf_i+0x146>
 8009494:	4632      	mov	r2, r6
 8009496:	4649      	mov	r1, r9
 8009498:	4640      	mov	r0, r8
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	47d0      	blx	sl
 800949e:	3001      	adds	r0, #1
 80094a0:	d0ad      	beq.n	80093fe <_printf_i+0x15a>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	079b      	lsls	r3, r3, #30
 80094a6:	d413      	bmi.n	80094d0 <_printf_i+0x22c>
 80094a8:	68e0      	ldr	r0, [r4, #12]
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	4298      	cmp	r0, r3
 80094ae:	bfb8      	it	lt
 80094b0:	4618      	movlt	r0, r3
 80094b2:	e7a6      	b.n	8009402 <_printf_i+0x15e>
 80094b4:	2301      	movs	r3, #1
 80094b6:	4632      	mov	r2, r6
 80094b8:	4649      	mov	r1, r9
 80094ba:	4640      	mov	r0, r8
 80094bc:	47d0      	blx	sl
 80094be:	3001      	adds	r0, #1
 80094c0:	d09d      	beq.n	80093fe <_printf_i+0x15a>
 80094c2:	3501      	adds	r5, #1
 80094c4:	68e3      	ldr	r3, [r4, #12]
 80094c6:	9903      	ldr	r1, [sp, #12]
 80094c8:	1a5b      	subs	r3, r3, r1
 80094ca:	42ab      	cmp	r3, r5
 80094cc:	dcf2      	bgt.n	80094b4 <_printf_i+0x210>
 80094ce:	e7eb      	b.n	80094a8 <_printf_i+0x204>
 80094d0:	2500      	movs	r5, #0
 80094d2:	f104 0619 	add.w	r6, r4, #25
 80094d6:	e7f5      	b.n	80094c4 <_printf_i+0x220>
 80094d8:	0800d5a1 	.word	0x0800d5a1
 80094dc:	0800d5b2 	.word	0x0800d5b2

080094e0 <_scanf_float>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	b087      	sub	sp, #28
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	688b      	ldr	r3, [r1, #8]
 80094ea:	4691      	mov	r9, r2
 80094ec:	1e5a      	subs	r2, r3, #1
 80094ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80094f2:	bf82      	ittt	hi
 80094f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80094f8:	eb03 0b05 	addhi.w	fp, r3, r5
 80094fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009500:	460a      	mov	r2, r1
 8009502:	f04f 0500 	mov.w	r5, #0
 8009506:	bf88      	it	hi
 8009508:	608b      	strhi	r3, [r1, #8]
 800950a:	680b      	ldr	r3, [r1, #0]
 800950c:	4680      	mov	r8, r0
 800950e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009512:	f842 3b1c 	str.w	r3, [r2], #28
 8009516:	460c      	mov	r4, r1
 8009518:	bf98      	it	ls
 800951a:	f04f 0b00 	movls.w	fp, #0
 800951e:	4616      	mov	r6, r2
 8009520:	46aa      	mov	sl, r5
 8009522:	462f      	mov	r7, r5
 8009524:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009528:	9201      	str	r2, [sp, #4]
 800952a:	9502      	str	r5, [sp, #8]
 800952c:	68a2      	ldr	r2, [r4, #8]
 800952e:	b15a      	cbz	r2, 8009548 <_scanf_float+0x68>
 8009530:	f8d9 3000 	ldr.w	r3, [r9]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b4e      	cmp	r3, #78	@ 0x4e
 8009538:	d862      	bhi.n	8009600 <_scanf_float+0x120>
 800953a:	2b40      	cmp	r3, #64	@ 0x40
 800953c:	d83a      	bhi.n	80095b4 <_scanf_float+0xd4>
 800953e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009542:	b2c8      	uxtb	r0, r1
 8009544:	280e      	cmp	r0, #14
 8009546:	d938      	bls.n	80095ba <_scanf_float+0xda>
 8009548:	b11f      	cbz	r7, 8009552 <_scanf_float+0x72>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009556:	f1ba 0f01 	cmp.w	sl, #1
 800955a:	f200 8114 	bhi.w	8009786 <_scanf_float+0x2a6>
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	429e      	cmp	r6, r3
 8009562:	f200 8105 	bhi.w	8009770 <_scanf_float+0x290>
 8009566:	2001      	movs	r0, #1
 8009568:	b007      	add	sp, #28
 800956a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009572:	2a0d      	cmp	r2, #13
 8009574:	d8e8      	bhi.n	8009548 <_scanf_float+0x68>
 8009576:	a101      	add	r1, pc, #4	@ (adr r1, 800957c <_scanf_float+0x9c>)
 8009578:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800957c:	080096c5 	.word	0x080096c5
 8009580:	08009549 	.word	0x08009549
 8009584:	08009549 	.word	0x08009549
 8009588:	08009549 	.word	0x08009549
 800958c:	08009721 	.word	0x08009721
 8009590:	080096fb 	.word	0x080096fb
 8009594:	08009549 	.word	0x08009549
 8009598:	08009549 	.word	0x08009549
 800959c:	080096d3 	.word	0x080096d3
 80095a0:	08009549 	.word	0x08009549
 80095a4:	08009549 	.word	0x08009549
 80095a8:	08009549 	.word	0x08009549
 80095ac:	08009549 	.word	0x08009549
 80095b0:	0800968f 	.word	0x0800968f
 80095b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80095b8:	e7db      	b.n	8009572 <_scanf_float+0x92>
 80095ba:	290e      	cmp	r1, #14
 80095bc:	d8c4      	bhi.n	8009548 <_scanf_float+0x68>
 80095be:	a001      	add	r0, pc, #4	@ (adr r0, 80095c4 <_scanf_float+0xe4>)
 80095c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095c4:	0800967f 	.word	0x0800967f
 80095c8:	08009549 	.word	0x08009549
 80095cc:	0800967f 	.word	0x0800967f
 80095d0:	0800970f 	.word	0x0800970f
 80095d4:	08009549 	.word	0x08009549
 80095d8:	08009621 	.word	0x08009621
 80095dc:	08009665 	.word	0x08009665
 80095e0:	08009665 	.word	0x08009665
 80095e4:	08009665 	.word	0x08009665
 80095e8:	08009665 	.word	0x08009665
 80095ec:	08009665 	.word	0x08009665
 80095f0:	08009665 	.word	0x08009665
 80095f4:	08009665 	.word	0x08009665
 80095f8:	08009665 	.word	0x08009665
 80095fc:	08009665 	.word	0x08009665
 8009600:	2b6e      	cmp	r3, #110	@ 0x6e
 8009602:	d809      	bhi.n	8009618 <_scanf_float+0x138>
 8009604:	2b60      	cmp	r3, #96	@ 0x60
 8009606:	d8b2      	bhi.n	800956e <_scanf_float+0x8e>
 8009608:	2b54      	cmp	r3, #84	@ 0x54
 800960a:	d07b      	beq.n	8009704 <_scanf_float+0x224>
 800960c:	2b59      	cmp	r3, #89	@ 0x59
 800960e:	d19b      	bne.n	8009548 <_scanf_float+0x68>
 8009610:	2d07      	cmp	r5, #7
 8009612:	d199      	bne.n	8009548 <_scanf_float+0x68>
 8009614:	2508      	movs	r5, #8
 8009616:	e02f      	b.n	8009678 <_scanf_float+0x198>
 8009618:	2b74      	cmp	r3, #116	@ 0x74
 800961a:	d073      	beq.n	8009704 <_scanf_float+0x224>
 800961c:	2b79      	cmp	r3, #121	@ 0x79
 800961e:	e7f6      	b.n	800960e <_scanf_float+0x12e>
 8009620:	6821      	ldr	r1, [r4, #0]
 8009622:	05c8      	lsls	r0, r1, #23
 8009624:	d51e      	bpl.n	8009664 <_scanf_float+0x184>
 8009626:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800962a:	6021      	str	r1, [r4, #0]
 800962c:	3701      	adds	r7, #1
 800962e:	f1bb 0f00 	cmp.w	fp, #0
 8009632:	d003      	beq.n	800963c <_scanf_float+0x15c>
 8009634:	3201      	adds	r2, #1
 8009636:	f10b 3bff 	add.w	fp, fp, #4294967295
 800963a:	60a2      	str	r2, [r4, #8]
 800963c:	68a3      	ldr	r3, [r4, #8]
 800963e:	3b01      	subs	r3, #1
 8009640:	60a3      	str	r3, [r4, #8]
 8009642:	6923      	ldr	r3, [r4, #16]
 8009644:	3301      	adds	r3, #1
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800964c:	3b01      	subs	r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	f8c9 3004 	str.w	r3, [r9, #4]
 8009654:	f340 8083 	ble.w	800975e <_scanf_float+0x27e>
 8009658:	f8d9 3000 	ldr.w	r3, [r9]
 800965c:	3301      	adds	r3, #1
 800965e:	f8c9 3000 	str.w	r3, [r9]
 8009662:	e763      	b.n	800952c <_scanf_float+0x4c>
 8009664:	eb1a 0105 	adds.w	r1, sl, r5
 8009668:	f47f af6e 	bne.w	8009548 <_scanf_float+0x68>
 800966c:	460d      	mov	r5, r1
 800966e:	468a      	mov	sl, r1
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009676:	6022      	str	r2, [r4, #0]
 8009678:	f806 3b01 	strb.w	r3, [r6], #1
 800967c:	e7de      	b.n	800963c <_scanf_float+0x15c>
 800967e:	6822      	ldr	r2, [r4, #0]
 8009680:	0610      	lsls	r0, r2, #24
 8009682:	f57f af61 	bpl.w	8009548 <_scanf_float+0x68>
 8009686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800968a:	6022      	str	r2, [r4, #0]
 800968c:	e7f4      	b.n	8009678 <_scanf_float+0x198>
 800968e:	f1ba 0f00 	cmp.w	sl, #0
 8009692:	d10c      	bne.n	80096ae <_scanf_float+0x1ce>
 8009694:	b977      	cbnz	r7, 80096b4 <_scanf_float+0x1d4>
 8009696:	6822      	ldr	r2, [r4, #0]
 8009698:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800969c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80096a0:	d108      	bne.n	80096b4 <_scanf_float+0x1d4>
 80096a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096a6:	f04f 0a01 	mov.w	sl, #1
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	e7e4      	b.n	8009678 <_scanf_float+0x198>
 80096ae:	f1ba 0f02 	cmp.w	sl, #2
 80096b2:	d051      	beq.n	8009758 <_scanf_float+0x278>
 80096b4:	2d01      	cmp	r5, #1
 80096b6:	d002      	beq.n	80096be <_scanf_float+0x1de>
 80096b8:	2d04      	cmp	r5, #4
 80096ba:	f47f af45 	bne.w	8009548 <_scanf_float+0x68>
 80096be:	3501      	adds	r5, #1
 80096c0:	b2ed      	uxtb	r5, r5
 80096c2:	e7d9      	b.n	8009678 <_scanf_float+0x198>
 80096c4:	f1ba 0f01 	cmp.w	sl, #1
 80096c8:	f47f af3e 	bne.w	8009548 <_scanf_float+0x68>
 80096cc:	f04f 0a02 	mov.w	sl, #2
 80096d0:	e7d2      	b.n	8009678 <_scanf_float+0x198>
 80096d2:	b975      	cbnz	r5, 80096f2 <_scanf_float+0x212>
 80096d4:	2f00      	cmp	r7, #0
 80096d6:	f47f af38 	bne.w	800954a <_scanf_float+0x6a>
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80096e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80096e4:	f040 80ff 	bne.w	80098e6 <_scanf_float+0x406>
 80096e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096ec:	2501      	movs	r5, #1
 80096ee:	6022      	str	r2, [r4, #0]
 80096f0:	e7c2      	b.n	8009678 <_scanf_float+0x198>
 80096f2:	2d03      	cmp	r5, #3
 80096f4:	d0e3      	beq.n	80096be <_scanf_float+0x1de>
 80096f6:	2d05      	cmp	r5, #5
 80096f8:	e7df      	b.n	80096ba <_scanf_float+0x1da>
 80096fa:	2d02      	cmp	r5, #2
 80096fc:	f47f af24 	bne.w	8009548 <_scanf_float+0x68>
 8009700:	2503      	movs	r5, #3
 8009702:	e7b9      	b.n	8009678 <_scanf_float+0x198>
 8009704:	2d06      	cmp	r5, #6
 8009706:	f47f af1f 	bne.w	8009548 <_scanf_float+0x68>
 800970a:	2507      	movs	r5, #7
 800970c:	e7b4      	b.n	8009678 <_scanf_float+0x198>
 800970e:	6822      	ldr	r2, [r4, #0]
 8009710:	0591      	lsls	r1, r2, #22
 8009712:	f57f af19 	bpl.w	8009548 <_scanf_float+0x68>
 8009716:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800971a:	6022      	str	r2, [r4, #0]
 800971c:	9702      	str	r7, [sp, #8]
 800971e:	e7ab      	b.n	8009678 <_scanf_float+0x198>
 8009720:	6822      	ldr	r2, [r4, #0]
 8009722:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009726:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800972a:	d005      	beq.n	8009738 <_scanf_float+0x258>
 800972c:	0550      	lsls	r0, r2, #21
 800972e:	f57f af0b 	bpl.w	8009548 <_scanf_float+0x68>
 8009732:	2f00      	cmp	r7, #0
 8009734:	f000 80d7 	beq.w	80098e6 <_scanf_float+0x406>
 8009738:	0591      	lsls	r1, r2, #22
 800973a:	bf58      	it	pl
 800973c:	9902      	ldrpl	r1, [sp, #8]
 800973e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009742:	bf58      	it	pl
 8009744:	1a79      	subpl	r1, r7, r1
 8009746:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800974a:	f04f 0700 	mov.w	r7, #0
 800974e:	bf58      	it	pl
 8009750:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009754:	6022      	str	r2, [r4, #0]
 8009756:	e78f      	b.n	8009678 <_scanf_float+0x198>
 8009758:	f04f 0a03 	mov.w	sl, #3
 800975c:	e78c      	b.n	8009678 <_scanf_float+0x198>
 800975e:	4649      	mov	r1, r9
 8009760:	4640      	mov	r0, r8
 8009762:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009766:	4798      	blx	r3
 8009768:	2800      	cmp	r0, #0
 800976a:	f43f aedf 	beq.w	800952c <_scanf_float+0x4c>
 800976e:	e6eb      	b.n	8009548 <_scanf_float+0x68>
 8009770:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009774:	464a      	mov	r2, r9
 8009776:	4640      	mov	r0, r8
 8009778:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800977c:	4798      	blx	r3
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	3b01      	subs	r3, #1
 8009782:	6123      	str	r3, [r4, #16]
 8009784:	e6eb      	b.n	800955e <_scanf_float+0x7e>
 8009786:	1e6b      	subs	r3, r5, #1
 8009788:	2b06      	cmp	r3, #6
 800978a:	d824      	bhi.n	80097d6 <_scanf_float+0x2f6>
 800978c:	2d02      	cmp	r5, #2
 800978e:	d836      	bhi.n	80097fe <_scanf_float+0x31e>
 8009790:	9b01      	ldr	r3, [sp, #4]
 8009792:	429e      	cmp	r6, r3
 8009794:	f67f aee7 	bls.w	8009566 <_scanf_float+0x86>
 8009798:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800979c:	464a      	mov	r2, r9
 800979e:	4640      	mov	r0, r8
 80097a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097a4:	4798      	blx	r3
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	e7f0      	b.n	8009790 <_scanf_float+0x2b0>
 80097ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097b2:	464a      	mov	r2, r9
 80097b4:	4640      	mov	r0, r8
 80097b6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80097ba:	4798      	blx	r3
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	3b01      	subs	r3, #1
 80097c0:	6123      	str	r3, [r4, #16]
 80097c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097c6:	fa5f fa8a 	uxtb.w	sl, sl
 80097ca:	f1ba 0f02 	cmp.w	sl, #2
 80097ce:	d1ee      	bne.n	80097ae <_scanf_float+0x2ce>
 80097d0:	3d03      	subs	r5, #3
 80097d2:	b2ed      	uxtb	r5, r5
 80097d4:	1b76      	subs	r6, r6, r5
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	05da      	lsls	r2, r3, #23
 80097da:	d530      	bpl.n	800983e <_scanf_float+0x35e>
 80097dc:	055b      	lsls	r3, r3, #21
 80097de:	d511      	bpl.n	8009804 <_scanf_float+0x324>
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	429e      	cmp	r6, r3
 80097e4:	f67f aebf 	bls.w	8009566 <_scanf_float+0x86>
 80097e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097ec:	464a      	mov	r2, r9
 80097ee:	4640      	mov	r0, r8
 80097f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097f4:	4798      	blx	r3
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	6123      	str	r3, [r4, #16]
 80097fc:	e7f0      	b.n	80097e0 <_scanf_float+0x300>
 80097fe:	46aa      	mov	sl, r5
 8009800:	46b3      	mov	fp, r6
 8009802:	e7de      	b.n	80097c2 <_scanf_float+0x2e2>
 8009804:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	2965      	cmp	r1, #101	@ 0x65
 800980c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009810:	f106 35ff 	add.w	r5, r6, #4294967295
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	d00c      	beq.n	8009832 <_scanf_float+0x352>
 8009818:	2945      	cmp	r1, #69	@ 0x45
 800981a:	d00a      	beq.n	8009832 <_scanf_float+0x352>
 800981c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009820:	464a      	mov	r2, r9
 8009822:	4640      	mov	r0, r8
 8009824:	4798      	blx	r3
 8009826:	6923      	ldr	r3, [r4, #16]
 8009828:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800982c:	3b01      	subs	r3, #1
 800982e:	1eb5      	subs	r5, r6, #2
 8009830:	6123      	str	r3, [r4, #16]
 8009832:	464a      	mov	r2, r9
 8009834:	4640      	mov	r0, r8
 8009836:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800983a:	4798      	blx	r3
 800983c:	462e      	mov	r6, r5
 800983e:	6822      	ldr	r2, [r4, #0]
 8009840:	f012 0210 	ands.w	r2, r2, #16
 8009844:	d001      	beq.n	800984a <_scanf_float+0x36a>
 8009846:	2000      	movs	r0, #0
 8009848:	e68e      	b.n	8009568 <_scanf_float+0x88>
 800984a:	7032      	strb	r2, [r6, #0]
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009856:	d125      	bne.n	80098a4 <_scanf_float+0x3c4>
 8009858:	9b02      	ldr	r3, [sp, #8]
 800985a:	429f      	cmp	r7, r3
 800985c:	d00a      	beq.n	8009874 <_scanf_float+0x394>
 800985e:	1bda      	subs	r2, r3, r7
 8009860:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009864:	429e      	cmp	r6, r3
 8009866:	bf28      	it	cs
 8009868:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800986c:	4630      	mov	r0, r6
 800986e:	491f      	ldr	r1, [pc, #124]	@ (80098ec <_scanf_float+0x40c>)
 8009870:	f000 f902 	bl	8009a78 <siprintf>
 8009874:	2200      	movs	r2, #0
 8009876:	4640      	mov	r0, r8
 8009878:	9901      	ldr	r1, [sp, #4]
 800987a:	f002 fc21 	bl	800c0c0 <_strtod_r>
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	6825      	ldr	r5, [r4, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f015 0f02 	tst.w	r5, #2
 8009888:	4606      	mov	r6, r0
 800988a:	460f      	mov	r7, r1
 800988c:	f103 0204 	add.w	r2, r3, #4
 8009890:	d015      	beq.n	80098be <_scanf_float+0x3de>
 8009892:	9903      	ldr	r1, [sp, #12]
 8009894:	600a      	str	r2, [r1, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	e9c3 6700 	strd	r6, r7, [r3]
 800989c:	68e3      	ldr	r3, [r4, #12]
 800989e:	3301      	adds	r3, #1
 80098a0:	60e3      	str	r3, [r4, #12]
 80098a2:	e7d0      	b.n	8009846 <_scanf_float+0x366>
 80098a4:	9b04      	ldr	r3, [sp, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0e4      	beq.n	8009874 <_scanf_float+0x394>
 80098aa:	9905      	ldr	r1, [sp, #20]
 80098ac:	230a      	movs	r3, #10
 80098ae:	4640      	mov	r0, r8
 80098b0:	3101      	adds	r1, #1
 80098b2:	f7ff f9af 	bl	8008c14 <_strtol_r>
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	9e05      	ldr	r6, [sp, #20]
 80098ba:	1ac2      	subs	r2, r0, r3
 80098bc:	e7d0      	b.n	8009860 <_scanf_float+0x380>
 80098be:	076d      	lsls	r5, r5, #29
 80098c0:	d4e7      	bmi.n	8009892 <_scanf_float+0x3b2>
 80098c2:	9d03      	ldr	r5, [sp, #12]
 80098c4:	602a      	str	r2, [r5, #0]
 80098c6:	681d      	ldr	r5, [r3, #0]
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	f7f7 f952 	bl	8000b74 <__aeabi_dcmpun>
 80098d0:	b120      	cbz	r0, 80098dc <_scanf_float+0x3fc>
 80098d2:	4807      	ldr	r0, [pc, #28]	@ (80098f0 <_scanf_float+0x410>)
 80098d4:	f000 f9fa 	bl	8009ccc <nanf>
 80098d8:	6028      	str	r0, [r5, #0]
 80098da:	e7df      	b.n	800989c <_scanf_float+0x3bc>
 80098dc:	4630      	mov	r0, r6
 80098de:	4639      	mov	r1, r7
 80098e0:	f7f7 f9a6 	bl	8000c30 <__aeabi_d2f>
 80098e4:	e7f8      	b.n	80098d8 <_scanf_float+0x3f8>
 80098e6:	2700      	movs	r7, #0
 80098e8:	e633      	b.n	8009552 <_scanf_float+0x72>
 80098ea:	bf00      	nop
 80098ec:	0800d5c3 	.word	0x0800d5c3
 80098f0:	0800d704 	.word	0x0800d704

080098f4 <std>:
 80098f4:	2300      	movs	r3, #0
 80098f6:	b510      	push	{r4, lr}
 80098f8:	4604      	mov	r4, r0
 80098fa:	e9c0 3300 	strd	r3, r3, [r0]
 80098fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009902:	6083      	str	r3, [r0, #8]
 8009904:	8181      	strh	r1, [r0, #12]
 8009906:	6643      	str	r3, [r0, #100]	@ 0x64
 8009908:	81c2      	strh	r2, [r0, #14]
 800990a:	6183      	str	r3, [r0, #24]
 800990c:	4619      	mov	r1, r3
 800990e:	2208      	movs	r2, #8
 8009910:	305c      	adds	r0, #92	@ 0x5c
 8009912:	f000 f916 	bl	8009b42 <memset>
 8009916:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <std+0x58>)
 8009918:	6224      	str	r4, [r4, #32]
 800991a:	6263      	str	r3, [r4, #36]	@ 0x24
 800991c:	4b0c      	ldr	r3, [pc, #48]	@ (8009950 <std+0x5c>)
 800991e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009920:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <std+0x60>)
 8009922:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009924:	4b0c      	ldr	r3, [pc, #48]	@ (8009958 <std+0x64>)
 8009926:	6323      	str	r3, [r4, #48]	@ 0x30
 8009928:	4b0c      	ldr	r3, [pc, #48]	@ (800995c <std+0x68>)
 800992a:	429c      	cmp	r4, r3
 800992c:	d006      	beq.n	800993c <std+0x48>
 800992e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009932:	4294      	cmp	r4, r2
 8009934:	d002      	beq.n	800993c <std+0x48>
 8009936:	33d0      	adds	r3, #208	@ 0xd0
 8009938:	429c      	cmp	r4, r3
 800993a:	d105      	bne.n	8009948 <std+0x54>
 800993c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009944:	f000 b9a2 	b.w	8009c8c <__retarget_lock_init_recursive>
 8009948:	bd10      	pop	{r4, pc}
 800994a:	bf00      	nop
 800994c:	08009abd 	.word	0x08009abd
 8009950:	08009adf 	.word	0x08009adf
 8009954:	08009b17 	.word	0x08009b17
 8009958:	08009b3b 	.word	0x08009b3b
 800995c:	20002108 	.word	0x20002108

08009960 <stdio_exit_handler>:
 8009960:	4a02      	ldr	r2, [pc, #8]	@ (800996c <stdio_exit_handler+0xc>)
 8009962:	4903      	ldr	r1, [pc, #12]	@ (8009970 <stdio_exit_handler+0x10>)
 8009964:	4803      	ldr	r0, [pc, #12]	@ (8009974 <stdio_exit_handler+0x14>)
 8009966:	f000 b869 	b.w	8009a3c <_fwalk_sglue>
 800996a:	bf00      	nop
 800996c:	20000010 	.word	0x20000010
 8009970:	0800c47d 	.word	0x0800c47d
 8009974:	20000020 	.word	0x20000020

08009978 <cleanup_stdio>:
 8009978:	6841      	ldr	r1, [r0, #4]
 800997a:	4b0c      	ldr	r3, [pc, #48]	@ (80099ac <cleanup_stdio+0x34>)
 800997c:	b510      	push	{r4, lr}
 800997e:	4299      	cmp	r1, r3
 8009980:	4604      	mov	r4, r0
 8009982:	d001      	beq.n	8009988 <cleanup_stdio+0x10>
 8009984:	f002 fd7a 	bl	800c47c <_fflush_r>
 8009988:	68a1      	ldr	r1, [r4, #8]
 800998a:	4b09      	ldr	r3, [pc, #36]	@ (80099b0 <cleanup_stdio+0x38>)
 800998c:	4299      	cmp	r1, r3
 800998e:	d002      	beq.n	8009996 <cleanup_stdio+0x1e>
 8009990:	4620      	mov	r0, r4
 8009992:	f002 fd73 	bl	800c47c <_fflush_r>
 8009996:	68e1      	ldr	r1, [r4, #12]
 8009998:	4b06      	ldr	r3, [pc, #24]	@ (80099b4 <cleanup_stdio+0x3c>)
 800999a:	4299      	cmp	r1, r3
 800999c:	d004      	beq.n	80099a8 <cleanup_stdio+0x30>
 800999e:	4620      	mov	r0, r4
 80099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a4:	f002 bd6a 	b.w	800c47c <_fflush_r>
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	bf00      	nop
 80099ac:	20002108 	.word	0x20002108
 80099b0:	20002170 	.word	0x20002170
 80099b4:	200021d8 	.word	0x200021d8

080099b8 <global_stdio_init.part.0>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	4b0b      	ldr	r3, [pc, #44]	@ (80099e8 <global_stdio_init.part.0+0x30>)
 80099bc:	4c0b      	ldr	r4, [pc, #44]	@ (80099ec <global_stdio_init.part.0+0x34>)
 80099be:	4a0c      	ldr	r2, [pc, #48]	@ (80099f0 <global_stdio_init.part.0+0x38>)
 80099c0:	4620      	mov	r0, r4
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	2104      	movs	r1, #4
 80099c6:	2200      	movs	r2, #0
 80099c8:	f7ff ff94 	bl	80098f4 <std>
 80099cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099d0:	2201      	movs	r2, #1
 80099d2:	2109      	movs	r1, #9
 80099d4:	f7ff ff8e 	bl	80098f4 <std>
 80099d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099dc:	2202      	movs	r2, #2
 80099de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e2:	2112      	movs	r1, #18
 80099e4:	f7ff bf86 	b.w	80098f4 <std>
 80099e8:	20002240 	.word	0x20002240
 80099ec:	20002108 	.word	0x20002108
 80099f0:	08009961 	.word	0x08009961

080099f4 <__sfp_lock_acquire>:
 80099f4:	4801      	ldr	r0, [pc, #4]	@ (80099fc <__sfp_lock_acquire+0x8>)
 80099f6:	f000 b94a 	b.w	8009c8e <__retarget_lock_acquire_recursive>
 80099fa:	bf00      	nop
 80099fc:	20002249 	.word	0x20002249

08009a00 <__sfp_lock_release>:
 8009a00:	4801      	ldr	r0, [pc, #4]	@ (8009a08 <__sfp_lock_release+0x8>)
 8009a02:	f000 b945 	b.w	8009c90 <__retarget_lock_release_recursive>
 8009a06:	bf00      	nop
 8009a08:	20002249 	.word	0x20002249

08009a0c <__sinit>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	4604      	mov	r4, r0
 8009a10:	f7ff fff0 	bl	80099f4 <__sfp_lock_acquire>
 8009a14:	6a23      	ldr	r3, [r4, #32]
 8009a16:	b11b      	cbz	r3, 8009a20 <__sinit+0x14>
 8009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a1c:	f7ff bff0 	b.w	8009a00 <__sfp_lock_release>
 8009a20:	4b04      	ldr	r3, [pc, #16]	@ (8009a34 <__sinit+0x28>)
 8009a22:	6223      	str	r3, [r4, #32]
 8009a24:	4b04      	ldr	r3, [pc, #16]	@ (8009a38 <__sinit+0x2c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f5      	bne.n	8009a18 <__sinit+0xc>
 8009a2c:	f7ff ffc4 	bl	80099b8 <global_stdio_init.part.0>
 8009a30:	e7f2      	b.n	8009a18 <__sinit+0xc>
 8009a32:	bf00      	nop
 8009a34:	08009979 	.word	0x08009979
 8009a38:	20002240 	.word	0x20002240

08009a3c <_fwalk_sglue>:
 8009a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a40:	4607      	mov	r7, r0
 8009a42:	4688      	mov	r8, r1
 8009a44:	4614      	mov	r4, r2
 8009a46:	2600      	movs	r6, #0
 8009a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8009a50:	d505      	bpl.n	8009a5e <_fwalk_sglue+0x22>
 8009a52:	6824      	ldr	r4, [r4, #0]
 8009a54:	2c00      	cmp	r4, #0
 8009a56:	d1f7      	bne.n	8009a48 <_fwalk_sglue+0xc>
 8009a58:	4630      	mov	r0, r6
 8009a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5e:	89ab      	ldrh	r3, [r5, #12]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d907      	bls.n	8009a74 <_fwalk_sglue+0x38>
 8009a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	d003      	beq.n	8009a74 <_fwalk_sglue+0x38>
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4638      	mov	r0, r7
 8009a70:	47c0      	blx	r8
 8009a72:	4306      	orrs	r6, r0
 8009a74:	3568      	adds	r5, #104	@ 0x68
 8009a76:	e7e9      	b.n	8009a4c <_fwalk_sglue+0x10>

08009a78 <siprintf>:
 8009a78:	b40e      	push	{r1, r2, r3}
 8009a7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	2400      	movs	r4, #0
 8009a82:	b09d      	sub	sp, #116	@ 0x74
 8009a84:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009a86:	9002      	str	r0, [sp, #8]
 8009a88:	9006      	str	r0, [sp, #24]
 8009a8a:	9107      	str	r1, [sp, #28]
 8009a8c:	9104      	str	r1, [sp, #16]
 8009a8e:	4809      	ldr	r0, [pc, #36]	@ (8009ab4 <siprintf+0x3c>)
 8009a90:	4909      	ldr	r1, [pc, #36]	@ (8009ab8 <siprintf+0x40>)
 8009a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a96:	9105      	str	r1, [sp, #20]
 8009a98:	6800      	ldr	r0, [r0, #0]
 8009a9a:	a902      	add	r1, sp, #8
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009aa0:	f002 fb70 	bl	800c184 <_svfiprintf_r>
 8009aa4:	9b02      	ldr	r3, [sp, #8]
 8009aa6:	701c      	strb	r4, [r3, #0]
 8009aa8:	b01d      	add	sp, #116	@ 0x74
 8009aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aae:	b003      	add	sp, #12
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	2000001c 	.word	0x2000001c
 8009ab8:	ffff0208 	.word	0xffff0208

08009abc <__sread>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	460c      	mov	r4, r1
 8009ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac4:	f000 f894 	bl	8009bf0 <_read_r>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	bfab      	itete	ge
 8009acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ace:	89a3      	ldrhlt	r3, [r4, #12]
 8009ad0:	181b      	addge	r3, r3, r0
 8009ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ad6:	bfac      	ite	ge
 8009ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ada:	81a3      	strhlt	r3, [r4, #12]
 8009adc:	bd10      	pop	{r4, pc}

08009ade <__swrite>:
 8009ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae2:	461f      	mov	r7, r3
 8009ae4:	898b      	ldrh	r3, [r1, #12]
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	05db      	lsls	r3, r3, #23
 8009aea:	460c      	mov	r4, r1
 8009aec:	4616      	mov	r6, r2
 8009aee:	d505      	bpl.n	8009afc <__swrite+0x1e>
 8009af0:	2302      	movs	r3, #2
 8009af2:	2200      	movs	r2, #0
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	f000 f868 	bl	8009bcc <_lseek_r>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	4632      	mov	r2, r6
 8009b00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	4628      	mov	r0, r5
 8009b08:	463b      	mov	r3, r7
 8009b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	f000 b87f 	b.w	8009c14 <_write_r>

08009b16 <__sseek>:
 8009b16:	b510      	push	{r4, lr}
 8009b18:	460c      	mov	r4, r1
 8009b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1e:	f000 f855 	bl	8009bcc <_lseek_r>
 8009b22:	1c43      	adds	r3, r0, #1
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	bf15      	itete	ne
 8009b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b32:	81a3      	strheq	r3, [r4, #12]
 8009b34:	bf18      	it	ne
 8009b36:	81a3      	strhne	r3, [r4, #12]
 8009b38:	bd10      	pop	{r4, pc}

08009b3a <__sclose>:
 8009b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3e:	f000 b835 	b.w	8009bac <_close_r>

08009b42 <memset>:
 8009b42:	4603      	mov	r3, r0
 8009b44:	4402      	add	r2, r0
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d100      	bne.n	8009b4c <memset+0xa>
 8009b4a:	4770      	bx	lr
 8009b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b50:	e7f9      	b.n	8009b46 <memset+0x4>

08009b52 <strncmp>:
 8009b52:	b510      	push	{r4, lr}
 8009b54:	b16a      	cbz	r2, 8009b72 <strncmp+0x20>
 8009b56:	3901      	subs	r1, #1
 8009b58:	1884      	adds	r4, r0, r2
 8009b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d103      	bne.n	8009b6e <strncmp+0x1c>
 8009b66:	42a0      	cmp	r0, r4
 8009b68:	d001      	beq.n	8009b6e <strncmp+0x1c>
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	d1f5      	bne.n	8009b5a <strncmp+0x8>
 8009b6e:	1ad0      	subs	r0, r2, r3
 8009b70:	bd10      	pop	{r4, pc}
 8009b72:	4610      	mov	r0, r2
 8009b74:	e7fc      	b.n	8009b70 <strncmp+0x1e>

08009b76 <strstr>:
 8009b76:	780a      	ldrb	r2, [r1, #0]
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	b96a      	cbnz	r2, 8009b98 <strstr+0x22>
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d109      	bne.n	8009b96 <strstr+0x20>
 8009b82:	460c      	mov	r4, r1
 8009b84:	4605      	mov	r5, r0
 8009b86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0f6      	beq.n	8009b7c <strstr+0x6>
 8009b8e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009b92:	429e      	cmp	r6, r3
 8009b94:	d0f7      	beq.n	8009b86 <strstr+0x10>
 8009b96:	3001      	adds	r0, #1
 8009b98:	7803      	ldrb	r3, [r0, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1ef      	bne.n	8009b7e <strstr+0x8>
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	e7ec      	b.n	8009b7c <strstr+0x6>
	...

08009ba4 <_localeconv_r>:
 8009ba4:	4800      	ldr	r0, [pc, #0]	@ (8009ba8 <_localeconv_r+0x4>)
 8009ba6:	4770      	bx	lr
 8009ba8:	2000015c 	.word	0x2000015c

08009bac <_close_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4d05      	ldr	r5, [pc, #20]	@ (8009bc8 <_close_r+0x1c>)
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	f7f8 fae5 	bl	8002186 <_close>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_close_r+0x1a>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_close_r+0x1a>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	20002244 	.word	0x20002244

08009bcc <_lseek_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4d05      	ldr	r5, [pc, #20]	@ (8009bec <_lseek_r+0x20>)
 8009bd8:	602a      	str	r2, [r5, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f7f8 faf7 	bl	80021ce <_lseek>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d102      	bne.n	8009bea <_lseek_r+0x1e>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	b103      	cbz	r3, 8009bea <_lseek_r+0x1e>
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	20002244 	.word	0x20002244

08009bf0 <_read_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4d05      	ldr	r5, [pc, #20]	@ (8009c10 <_read_r+0x20>)
 8009bfc:	602a      	str	r2, [r5, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7f8 fa88 	bl	8002114 <_read>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_read_r+0x1e>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_read_r+0x1e>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	20002244 	.word	0x20002244

08009c14 <_write_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4d05      	ldr	r5, [pc, #20]	@ (8009c34 <_write_r+0x20>)
 8009c20:	602a      	str	r2, [r5, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	f7f8 fa93 	bl	800214e <_write>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_write_r+0x1e>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_write_r+0x1e>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	20002244 	.word	0x20002244

08009c38 <__errno>:
 8009c38:	4b01      	ldr	r3, [pc, #4]	@ (8009c40 <__errno+0x8>)
 8009c3a:	6818      	ldr	r0, [r3, #0]
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	2000001c 	.word	0x2000001c

08009c44 <__libc_init_array>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	2600      	movs	r6, #0
 8009c48:	4d0c      	ldr	r5, [pc, #48]	@ (8009c7c <__libc_init_array+0x38>)
 8009c4a:	4c0d      	ldr	r4, [pc, #52]	@ (8009c80 <__libc_init_array+0x3c>)
 8009c4c:	1b64      	subs	r4, r4, r5
 8009c4e:	10a4      	asrs	r4, r4, #2
 8009c50:	42a6      	cmp	r6, r4
 8009c52:	d109      	bne.n	8009c68 <__libc_init_array+0x24>
 8009c54:	f003 fade 	bl	800d214 <_init>
 8009c58:	2600      	movs	r6, #0
 8009c5a:	4d0a      	ldr	r5, [pc, #40]	@ (8009c84 <__libc_init_array+0x40>)
 8009c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8009c88 <__libc_init_array+0x44>)
 8009c5e:	1b64      	subs	r4, r4, r5
 8009c60:	10a4      	asrs	r4, r4, #2
 8009c62:	42a6      	cmp	r6, r4
 8009c64:	d105      	bne.n	8009c72 <__libc_init_array+0x2e>
 8009c66:	bd70      	pop	{r4, r5, r6, pc}
 8009c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c6c:	4798      	blx	r3
 8009c6e:	3601      	adds	r6, #1
 8009c70:	e7ee      	b.n	8009c50 <__libc_init_array+0xc>
 8009c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c76:	4798      	blx	r3
 8009c78:	3601      	adds	r6, #1
 8009c7a:	e7f2      	b.n	8009c62 <__libc_init_array+0x1e>
 8009c7c:	0800d8c0 	.word	0x0800d8c0
 8009c80:	0800d8c0 	.word	0x0800d8c0
 8009c84:	0800d8c0 	.word	0x0800d8c0
 8009c88:	0800d8c4 	.word	0x0800d8c4

08009c8c <__retarget_lock_init_recursive>:
 8009c8c:	4770      	bx	lr

08009c8e <__retarget_lock_acquire_recursive>:
 8009c8e:	4770      	bx	lr

08009c90 <__retarget_lock_release_recursive>:
 8009c90:	4770      	bx	lr

08009c92 <memchr>:
 8009c92:	4603      	mov	r3, r0
 8009c94:	b510      	push	{r4, lr}
 8009c96:	b2c9      	uxtb	r1, r1
 8009c98:	4402      	add	r2, r0
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	d101      	bne.n	8009ca4 <memchr+0x12>
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e003      	b.n	8009cac <memchr+0x1a>
 8009ca4:	7804      	ldrb	r4, [r0, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	428c      	cmp	r4, r1
 8009caa:	d1f6      	bne.n	8009c9a <memchr+0x8>
 8009cac:	bd10      	pop	{r4, pc}

08009cae <memcpy>:
 8009cae:	440a      	add	r2, r1
 8009cb0:	4291      	cmp	r1, r2
 8009cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cb6:	d100      	bne.n	8009cba <memcpy+0xc>
 8009cb8:	4770      	bx	lr
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cc0:	4291      	cmp	r1, r2
 8009cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cc6:	d1f9      	bne.n	8009cbc <memcpy+0xe>
 8009cc8:	bd10      	pop	{r4, pc}
	...

08009ccc <nanf>:
 8009ccc:	4800      	ldr	r0, [pc, #0]	@ (8009cd0 <nanf+0x4>)
 8009cce:	4770      	bx	lr
 8009cd0:	7fc00000 	.word	0x7fc00000

08009cd4 <quorem>:
 8009cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	6903      	ldr	r3, [r0, #16]
 8009cda:	690c      	ldr	r4, [r1, #16]
 8009cdc:	4607      	mov	r7, r0
 8009cde:	42a3      	cmp	r3, r4
 8009ce0:	db7e      	blt.n	8009de0 <quorem+0x10c>
 8009ce2:	3c01      	subs	r4, #1
 8009ce4:	00a3      	lsls	r3, r4, #2
 8009ce6:	f100 0514 	add.w	r5, r0, #20
 8009cea:	f101 0814 	add.w	r8, r1, #20
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	429a      	cmp	r2, r3
 8009d02:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d0a:	d32e      	bcc.n	8009d6a <quorem+0x96>
 8009d0c:	f04f 0a00 	mov.w	sl, #0
 8009d10:	46c4      	mov	ip, r8
 8009d12:	46ae      	mov	lr, r5
 8009d14:	46d3      	mov	fp, sl
 8009d16:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d1a:	b298      	uxth	r0, r3
 8009d1c:	fb06 a000 	mla	r0, r6, r0, sl
 8009d20:	0c1b      	lsrs	r3, r3, #16
 8009d22:	0c02      	lsrs	r2, r0, #16
 8009d24:	fb06 2303 	mla	r3, r6, r3, r2
 8009d28:	f8de 2000 	ldr.w	r2, [lr]
 8009d2c:	b280      	uxth	r0, r0
 8009d2e:	b292      	uxth	r2, r2
 8009d30:	1a12      	subs	r2, r2, r0
 8009d32:	445a      	add	r2, fp
 8009d34:	f8de 0000 	ldr.w	r0, [lr]
 8009d38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d46:	b292      	uxth	r2, r2
 8009d48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d4c:	45e1      	cmp	r9, ip
 8009d4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d52:	f84e 2b04 	str.w	r2, [lr], #4
 8009d56:	d2de      	bcs.n	8009d16 <quorem+0x42>
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	58eb      	ldr	r3, [r5, r3]
 8009d5c:	b92b      	cbnz	r3, 8009d6a <quorem+0x96>
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	3b04      	subs	r3, #4
 8009d62:	429d      	cmp	r5, r3
 8009d64:	461a      	mov	r2, r3
 8009d66:	d32f      	bcc.n	8009dc8 <quorem+0xf4>
 8009d68:	613c      	str	r4, [r7, #16]
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	f001 f9ca 	bl	800b104 <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	db25      	blt.n	8009dc0 <quorem+0xec>
 8009d74:	4629      	mov	r1, r5
 8009d76:	2000      	movs	r0, #0
 8009d78:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d7c:	f8d1 c000 	ldr.w	ip, [r1]
 8009d80:	fa1f fe82 	uxth.w	lr, r2
 8009d84:	fa1f f38c 	uxth.w	r3, ip
 8009d88:	eba3 030e 	sub.w	r3, r3, lr
 8009d8c:	4403      	add	r3, r0
 8009d8e:	0c12      	lsrs	r2, r2, #16
 8009d90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d9e:	45c1      	cmp	r9, r8
 8009da0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009da4:	f841 3b04 	str.w	r3, [r1], #4
 8009da8:	d2e6      	bcs.n	8009d78 <quorem+0xa4>
 8009daa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009db2:	b922      	cbnz	r2, 8009dbe <quorem+0xea>
 8009db4:	3b04      	subs	r3, #4
 8009db6:	429d      	cmp	r5, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	d30b      	bcc.n	8009dd4 <quorem+0x100>
 8009dbc:	613c      	str	r4, [r7, #16]
 8009dbe:	3601      	adds	r6, #1
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	b003      	add	sp, #12
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	3b04      	subs	r3, #4
 8009dcc:	2a00      	cmp	r2, #0
 8009dce:	d1cb      	bne.n	8009d68 <quorem+0x94>
 8009dd0:	3c01      	subs	r4, #1
 8009dd2:	e7c6      	b.n	8009d62 <quorem+0x8e>
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	3b04      	subs	r3, #4
 8009dd8:	2a00      	cmp	r2, #0
 8009dda:	d1ef      	bne.n	8009dbc <quorem+0xe8>
 8009ddc:	3c01      	subs	r4, #1
 8009dde:	e7ea      	b.n	8009db6 <quorem+0xe2>
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7ee      	b.n	8009dc2 <quorem+0xee>
 8009de4:	0000      	movs	r0, r0
	...

08009de8 <_dtoa_r>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	4614      	mov	r4, r2
 8009dee:	461d      	mov	r5, r3
 8009df0:	69c7      	ldr	r7, [r0, #28]
 8009df2:	b097      	sub	sp, #92	@ 0x5c
 8009df4:	4681      	mov	r9, r0
 8009df6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009dfa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009dfc:	b97f      	cbnz	r7, 8009e1e <_dtoa_r+0x36>
 8009dfe:	2010      	movs	r0, #16
 8009e00:	f000 fe0e 	bl	800aa20 <malloc>
 8009e04:	4602      	mov	r2, r0
 8009e06:	f8c9 001c 	str.w	r0, [r9, #28]
 8009e0a:	b920      	cbnz	r0, 8009e16 <_dtoa_r+0x2e>
 8009e0c:	21ef      	movs	r1, #239	@ 0xef
 8009e0e:	4bac      	ldr	r3, [pc, #688]	@ (800a0c0 <_dtoa_r+0x2d8>)
 8009e10:	48ac      	ldr	r0, [pc, #688]	@ (800a0c4 <_dtoa_r+0x2dc>)
 8009e12:	f002 fb8b 	bl	800c52c <__assert_func>
 8009e16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e1a:	6007      	str	r7, [r0, #0]
 8009e1c:	60c7      	str	r7, [r0, #12]
 8009e1e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	b159      	cbz	r1, 8009e3e <_dtoa_r+0x56>
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4093      	lsls	r3, r2
 8009e2c:	604a      	str	r2, [r1, #4]
 8009e2e:	608b      	str	r3, [r1, #8]
 8009e30:	4648      	mov	r0, r9
 8009e32:	f000 feeb 	bl	800ac0c <_Bfree>
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	1e2b      	subs	r3, r5, #0
 8009e40:	bfaf      	iteee	ge
 8009e42:	2300      	movge	r3, #0
 8009e44:	2201      	movlt	r2, #1
 8009e46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e4a:	9307      	strlt	r3, [sp, #28]
 8009e4c:	bfa8      	it	ge
 8009e4e:	6033      	strge	r3, [r6, #0]
 8009e50:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009e54:	4b9c      	ldr	r3, [pc, #624]	@ (800a0c8 <_dtoa_r+0x2e0>)
 8009e56:	bfb8      	it	lt
 8009e58:	6032      	strlt	r2, [r6, #0]
 8009e5a:	ea33 0308 	bics.w	r3, r3, r8
 8009e5e:	d112      	bne.n	8009e86 <_dtoa_r+0x9e>
 8009e60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009e6c:	4323      	orrs	r3, r4
 8009e6e:	f000 855e 	beq.w	800a92e <_dtoa_r+0xb46>
 8009e72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a0cc <_dtoa_r+0x2e4>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 8560 	beq.w	800a93e <_dtoa_r+0xb56>
 8009e7e:	f10a 0303 	add.w	r3, sl, #3
 8009e82:	f000 bd5a 	b.w	800a93a <_dtoa_r+0xb52>
 8009e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e92:	2200      	movs	r2, #0
 8009e94:	2300      	movs	r3, #0
 8009e96:	f7f6 fe3b 	bl	8000b10 <__aeabi_dcmpeq>
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	b158      	cbz	r0, 8009eb6 <_dtoa_r+0xce>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009ea6:	b113      	cbz	r3, 8009eae <_dtoa_r+0xc6>
 8009ea8:	4b89      	ldr	r3, [pc, #548]	@ (800a0d0 <_dtoa_r+0x2e8>)
 8009eaa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a0d4 <_dtoa_r+0x2ec>
 8009eb2:	f000 bd44 	b.w	800a93e <_dtoa_r+0xb56>
 8009eb6:	ab14      	add	r3, sp, #80	@ 0x50
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	ab15      	add	r3, sp, #84	@ 0x54
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	4648      	mov	r0, r9
 8009ec0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ec4:	f001 fa36 	bl	800b334 <__d2b>
 8009ec8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009ecc:	9003      	str	r0, [sp, #12]
 8009ece:	2e00      	cmp	r6, #0
 8009ed0:	d078      	beq.n	8009fc4 <_dtoa_r+0x1dc>
 8009ed2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ed8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ee0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ee4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009ee8:	9712      	str	r7, [sp, #72]	@ 0x48
 8009eea:	4619      	mov	r1, r3
 8009eec:	2200      	movs	r2, #0
 8009eee:	4b7a      	ldr	r3, [pc, #488]	@ (800a0d8 <_dtoa_r+0x2f0>)
 8009ef0:	f7f6 f9ee 	bl	80002d0 <__aeabi_dsub>
 8009ef4:	a36c      	add	r3, pc, #432	@ (adr r3, 800a0a8 <_dtoa_r+0x2c0>)
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	f7f6 fba1 	bl	8000640 <__aeabi_dmul>
 8009efe:	a36c      	add	r3, pc, #432	@ (adr r3, 800a0b0 <_dtoa_r+0x2c8>)
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7f6 f9e6 	bl	80002d4 <__adddf3>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	f7f6 fb2d 	bl	800056c <__aeabi_i2d>
 8009f12:	a369      	add	r3, pc, #420	@ (adr r3, 800a0b8 <_dtoa_r+0x2d0>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f7f6 fb92 	bl	8000640 <__aeabi_dmul>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4620      	mov	r0, r4
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7f6 f9d6 	bl	80002d4 <__adddf3>
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	f7f6 fe38 	bl	8000ba0 <__aeabi_d2iz>
 8009f30:	2200      	movs	r2, #0
 8009f32:	4607      	mov	r7, r0
 8009f34:	2300      	movs	r3, #0
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 fdf3 	bl	8000b24 <__aeabi_dcmplt>
 8009f3e:	b140      	cbz	r0, 8009f52 <_dtoa_r+0x16a>
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7f6 fb13 	bl	800056c <__aeabi_i2d>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	f7f6 fde1 	bl	8000b10 <__aeabi_dcmpeq>
 8009f4e:	b900      	cbnz	r0, 8009f52 <_dtoa_r+0x16a>
 8009f50:	3f01      	subs	r7, #1
 8009f52:	2f16      	cmp	r7, #22
 8009f54:	d854      	bhi.n	800a000 <_dtoa_r+0x218>
 8009f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f5a:	4b60      	ldr	r3, [pc, #384]	@ (800a0dc <_dtoa_r+0x2f4>)
 8009f5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f7f6 fdde 	bl	8000b24 <__aeabi_dcmplt>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d04b      	beq.n	800a004 <_dtoa_r+0x21c>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	3f01      	subs	r7, #1
 8009f70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f74:	1b9b      	subs	r3, r3, r6
 8009f76:	1e5a      	subs	r2, r3, #1
 8009f78:	bf49      	itett	mi
 8009f7a:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f7e:	2300      	movpl	r3, #0
 8009f80:	9304      	strmi	r3, [sp, #16]
 8009f82:	2300      	movmi	r3, #0
 8009f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f86:	bf54      	ite	pl
 8009f88:	9304      	strpl	r3, [sp, #16]
 8009f8a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009f8c:	2f00      	cmp	r7, #0
 8009f8e:	db3b      	blt.n	800a008 <_dtoa_r+0x220>
 8009f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f92:	970e      	str	r7, [sp, #56]	@ 0x38
 8009f94:	443b      	add	r3, r7
 8009f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f98:	2300      	movs	r3, #0
 8009f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f9e:	2b09      	cmp	r3, #9
 8009fa0:	d865      	bhi.n	800a06e <_dtoa_r+0x286>
 8009fa2:	2b05      	cmp	r3, #5
 8009fa4:	bfc4      	itt	gt
 8009fa6:	3b04      	subgt	r3, #4
 8009fa8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009faa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009fac:	bfc8      	it	gt
 8009fae:	2400      	movgt	r4, #0
 8009fb0:	f1a3 0302 	sub.w	r3, r3, #2
 8009fb4:	bfd8      	it	le
 8009fb6:	2401      	movle	r4, #1
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d864      	bhi.n	800a086 <_dtoa_r+0x29e>
 8009fbc:	e8df f003 	tbb	[pc, r3]
 8009fc0:	2c385553 	.word	0x2c385553
 8009fc4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009fc8:	441e      	add	r6, r3
 8009fca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	bfc1      	itttt	gt
 8009fd2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009fd6:	fa08 f803 	lslgt.w	r8, r8, r3
 8009fda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009fde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009fe2:	bfd6      	itet	le
 8009fe4:	f1c3 0320 	rsble	r3, r3, #32
 8009fe8:	ea48 0003 	orrgt.w	r0, r8, r3
 8009fec:	fa04 f003 	lslle.w	r0, r4, r3
 8009ff0:	f7f6 faac 	bl	800054c <__aeabi_ui2d>
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ffa:	3e01      	subs	r6, #1
 8009ffc:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ffe:	e774      	b.n	8009eea <_dtoa_r+0x102>
 800a000:	2301      	movs	r3, #1
 800a002:	e7b5      	b.n	8009f70 <_dtoa_r+0x188>
 800a004:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a006:	e7b4      	b.n	8009f72 <_dtoa_r+0x18a>
 800a008:	9b04      	ldr	r3, [sp, #16]
 800a00a:	1bdb      	subs	r3, r3, r7
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	427b      	negs	r3, r7
 800a010:	930a      	str	r3, [sp, #40]	@ 0x28
 800a012:	2300      	movs	r3, #0
 800a014:	930e      	str	r3, [sp, #56]	@ 0x38
 800a016:	e7c1      	b.n	8009f9c <_dtoa_r+0x1b4>
 800a018:	2301      	movs	r3, #1
 800a01a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a01c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a01e:	eb07 0b03 	add.w	fp, r7, r3
 800a022:	f10b 0301 	add.w	r3, fp, #1
 800a026:	2b01      	cmp	r3, #1
 800a028:	9308      	str	r3, [sp, #32]
 800a02a:	bfb8      	it	lt
 800a02c:	2301      	movlt	r3, #1
 800a02e:	e006      	b.n	800a03e <_dtoa_r+0x256>
 800a030:	2301      	movs	r3, #1
 800a032:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a034:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a036:	2b00      	cmp	r3, #0
 800a038:	dd28      	ble.n	800a08c <_dtoa_r+0x2a4>
 800a03a:	469b      	mov	fp, r3
 800a03c:	9308      	str	r3, [sp, #32]
 800a03e:	2100      	movs	r1, #0
 800a040:	2204      	movs	r2, #4
 800a042:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a046:	f102 0514 	add.w	r5, r2, #20
 800a04a:	429d      	cmp	r5, r3
 800a04c:	d926      	bls.n	800a09c <_dtoa_r+0x2b4>
 800a04e:	6041      	str	r1, [r0, #4]
 800a050:	4648      	mov	r0, r9
 800a052:	f000 fd9b 	bl	800ab8c <_Balloc>
 800a056:	4682      	mov	sl, r0
 800a058:	2800      	cmp	r0, #0
 800a05a:	d143      	bne.n	800a0e4 <_dtoa_r+0x2fc>
 800a05c:	4602      	mov	r2, r0
 800a05e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a062:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e0 <_dtoa_r+0x2f8>)
 800a064:	e6d4      	b.n	8009e10 <_dtoa_r+0x28>
 800a066:	2300      	movs	r3, #0
 800a068:	e7e3      	b.n	800a032 <_dtoa_r+0x24a>
 800a06a:	2300      	movs	r3, #0
 800a06c:	e7d5      	b.n	800a01a <_dtoa_r+0x232>
 800a06e:	2401      	movs	r4, #1
 800a070:	2300      	movs	r3, #0
 800a072:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a074:	9320      	str	r3, [sp, #128]	@ 0x80
 800a076:	f04f 3bff 	mov.w	fp, #4294967295
 800a07a:	2200      	movs	r2, #0
 800a07c:	2312      	movs	r3, #18
 800a07e:	f8cd b020 	str.w	fp, [sp, #32]
 800a082:	9221      	str	r2, [sp, #132]	@ 0x84
 800a084:	e7db      	b.n	800a03e <_dtoa_r+0x256>
 800a086:	2301      	movs	r3, #1
 800a088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a08a:	e7f4      	b.n	800a076 <_dtoa_r+0x28e>
 800a08c:	f04f 0b01 	mov.w	fp, #1
 800a090:	465b      	mov	r3, fp
 800a092:	f8cd b020 	str.w	fp, [sp, #32]
 800a096:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a09a:	e7d0      	b.n	800a03e <_dtoa_r+0x256>
 800a09c:	3101      	adds	r1, #1
 800a09e:	0052      	lsls	r2, r2, #1
 800a0a0:	e7d1      	b.n	800a046 <_dtoa_r+0x25e>
 800a0a2:	bf00      	nop
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	636f4361 	.word	0x636f4361
 800a0ac:	3fd287a7 	.word	0x3fd287a7
 800a0b0:	8b60c8b3 	.word	0x8b60c8b3
 800a0b4:	3fc68a28 	.word	0x3fc68a28
 800a0b8:	509f79fb 	.word	0x509f79fb
 800a0bc:	3fd34413 	.word	0x3fd34413
 800a0c0:	0800d5d5 	.word	0x0800d5d5
 800a0c4:	0800d5ec 	.word	0x0800d5ec
 800a0c8:	7ff00000 	.word	0x7ff00000
 800a0cc:	0800d5d1 	.word	0x0800d5d1
 800a0d0:	0800d5a0 	.word	0x0800d5a0
 800a0d4:	0800d59f 	.word	0x0800d59f
 800a0d8:	3ff80000 	.word	0x3ff80000
 800a0dc:	0800d7a0 	.word	0x0800d7a0
 800a0e0:	0800d644 	.word	0x0800d644
 800a0e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a0e8:	6018      	str	r0, [r3, #0]
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	2b0e      	cmp	r3, #14
 800a0ee:	f200 80a1 	bhi.w	800a234 <_dtoa_r+0x44c>
 800a0f2:	2c00      	cmp	r4, #0
 800a0f4:	f000 809e 	beq.w	800a234 <_dtoa_r+0x44c>
 800a0f8:	2f00      	cmp	r7, #0
 800a0fa:	dd33      	ble.n	800a164 <_dtoa_r+0x37c>
 800a0fc:	4b9c      	ldr	r3, [pc, #624]	@ (800a370 <_dtoa_r+0x588>)
 800a0fe:	f007 020f 	and.w	r2, r7, #15
 800a102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a106:	05f8      	lsls	r0, r7, #23
 800a108:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a10c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800a110:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a114:	d516      	bpl.n	800a144 <_dtoa_r+0x35c>
 800a116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a11a:	4b96      	ldr	r3, [pc, #600]	@ (800a374 <_dtoa_r+0x58c>)
 800a11c:	2603      	movs	r6, #3
 800a11e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a122:	f7f6 fbb7 	bl	8000894 <__aeabi_ddiv>
 800a126:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a12a:	f004 040f 	and.w	r4, r4, #15
 800a12e:	4d91      	ldr	r5, [pc, #580]	@ (800a374 <_dtoa_r+0x58c>)
 800a130:	b954      	cbnz	r4, 800a148 <_dtoa_r+0x360>
 800a132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a13a:	f7f6 fbab 	bl	8000894 <__aeabi_ddiv>
 800a13e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a142:	e028      	b.n	800a196 <_dtoa_r+0x3ae>
 800a144:	2602      	movs	r6, #2
 800a146:	e7f2      	b.n	800a12e <_dtoa_r+0x346>
 800a148:	07e1      	lsls	r1, r4, #31
 800a14a:	d508      	bpl.n	800a15e <_dtoa_r+0x376>
 800a14c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a150:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a154:	f7f6 fa74 	bl	8000640 <__aeabi_dmul>
 800a158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a15c:	3601      	adds	r6, #1
 800a15e:	1064      	asrs	r4, r4, #1
 800a160:	3508      	adds	r5, #8
 800a162:	e7e5      	b.n	800a130 <_dtoa_r+0x348>
 800a164:	f000 80af 	beq.w	800a2c6 <_dtoa_r+0x4de>
 800a168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a16c:	427c      	negs	r4, r7
 800a16e:	4b80      	ldr	r3, [pc, #512]	@ (800a370 <_dtoa_r+0x588>)
 800a170:	f004 020f 	and.w	r2, r4, #15
 800a174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	f7f6 fa60 	bl	8000640 <__aeabi_dmul>
 800a180:	2602      	movs	r6, #2
 800a182:	2300      	movs	r3, #0
 800a184:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a188:	4d7a      	ldr	r5, [pc, #488]	@ (800a374 <_dtoa_r+0x58c>)
 800a18a:	1124      	asrs	r4, r4, #4
 800a18c:	2c00      	cmp	r4, #0
 800a18e:	f040 808f 	bne.w	800a2b0 <_dtoa_r+0x4c8>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1d3      	bne.n	800a13e <_dtoa_r+0x356>
 800a196:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800a19a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 8094 	beq.w	800a2ca <_dtoa_r+0x4e2>
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4b73      	ldr	r3, [pc, #460]	@ (800a378 <_dtoa_r+0x590>)
 800a1aa:	f7f6 fcbb 	bl	8000b24 <__aeabi_dcmplt>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f000 808b 	beq.w	800a2ca <_dtoa_r+0x4e2>
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 8087 	beq.w	800a2ca <_dtoa_r+0x4e2>
 800a1bc:	f1bb 0f00 	cmp.w	fp, #0
 800a1c0:	dd34      	ble.n	800a22c <_dtoa_r+0x444>
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4b6c      	ldr	r3, [pc, #432]	@ (800a37c <_dtoa_r+0x594>)
 800a1ca:	f7f6 fa39 	bl	8000640 <__aeabi_dmul>
 800a1ce:	465c      	mov	r4, fp
 800a1d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1d4:	f107 38ff 	add.w	r8, r7, #4294967295
 800a1d8:	3601      	adds	r6, #1
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7f6 f9c6 	bl	800056c <__aeabi_i2d>
 800a1e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1e4:	f7f6 fa2c 	bl	8000640 <__aeabi_dmul>
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4b65      	ldr	r3, [pc, #404]	@ (800a380 <_dtoa_r+0x598>)
 800a1ec:	f7f6 f872 	bl	80002d4 <__adddf3>
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a1f6:	2c00      	cmp	r4, #0
 800a1f8:	d16a      	bne.n	800a2d0 <_dtoa_r+0x4e8>
 800a1fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1fe:	2200      	movs	r2, #0
 800a200:	4b60      	ldr	r3, [pc, #384]	@ (800a384 <_dtoa_r+0x59c>)
 800a202:	f7f6 f865 	bl	80002d0 <__aeabi_dsub>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a20e:	462a      	mov	r2, r5
 800a210:	4633      	mov	r3, r6
 800a212:	f7f6 fca5 	bl	8000b60 <__aeabi_dcmpgt>
 800a216:	2800      	cmp	r0, #0
 800a218:	f040 8298 	bne.w	800a74c <_dtoa_r+0x964>
 800a21c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a220:	462a      	mov	r2, r5
 800a222:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a226:	f7f6 fc7d 	bl	8000b24 <__aeabi_dcmplt>
 800a22a:	bb38      	cbnz	r0, 800a27c <_dtoa_r+0x494>
 800a22c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a230:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a234:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a236:	2b00      	cmp	r3, #0
 800a238:	f2c0 8157 	blt.w	800a4ea <_dtoa_r+0x702>
 800a23c:	2f0e      	cmp	r7, #14
 800a23e:	f300 8154 	bgt.w	800a4ea <_dtoa_r+0x702>
 800a242:	4b4b      	ldr	r3, [pc, #300]	@ (800a370 <_dtoa_r+0x588>)
 800a244:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a248:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a24c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a250:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a252:	2b00      	cmp	r3, #0
 800a254:	f280 80e5 	bge.w	800a422 <_dtoa_r+0x63a>
 800a258:	9b08      	ldr	r3, [sp, #32]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f300 80e1 	bgt.w	800a422 <_dtoa_r+0x63a>
 800a260:	d10c      	bne.n	800a27c <_dtoa_r+0x494>
 800a262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a266:	2200      	movs	r2, #0
 800a268:	4b46      	ldr	r3, [pc, #280]	@ (800a384 <_dtoa_r+0x59c>)
 800a26a:	f7f6 f9e9 	bl	8000640 <__aeabi_dmul>
 800a26e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a272:	f7f6 fc6b 	bl	8000b4c <__aeabi_dcmpge>
 800a276:	2800      	cmp	r0, #0
 800a278:	f000 8266 	beq.w	800a748 <_dtoa_r+0x960>
 800a27c:	2400      	movs	r4, #0
 800a27e:	4625      	mov	r5, r4
 800a280:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a282:	4656      	mov	r6, sl
 800a284:	ea6f 0803 	mvn.w	r8, r3
 800a288:	2700      	movs	r7, #0
 800a28a:	4621      	mov	r1, r4
 800a28c:	4648      	mov	r0, r9
 800a28e:	f000 fcbd 	bl	800ac0c <_Bfree>
 800a292:	2d00      	cmp	r5, #0
 800a294:	f000 80bd 	beq.w	800a412 <_dtoa_r+0x62a>
 800a298:	b12f      	cbz	r7, 800a2a6 <_dtoa_r+0x4be>
 800a29a:	42af      	cmp	r7, r5
 800a29c:	d003      	beq.n	800a2a6 <_dtoa_r+0x4be>
 800a29e:	4639      	mov	r1, r7
 800a2a0:	4648      	mov	r0, r9
 800a2a2:	f000 fcb3 	bl	800ac0c <_Bfree>
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f000 fcaf 	bl	800ac0c <_Bfree>
 800a2ae:	e0b0      	b.n	800a412 <_dtoa_r+0x62a>
 800a2b0:	07e2      	lsls	r2, r4, #31
 800a2b2:	d505      	bpl.n	800a2c0 <_dtoa_r+0x4d8>
 800a2b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2b8:	f7f6 f9c2 	bl	8000640 <__aeabi_dmul>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	3601      	adds	r6, #1
 800a2c0:	1064      	asrs	r4, r4, #1
 800a2c2:	3508      	adds	r5, #8
 800a2c4:	e762      	b.n	800a18c <_dtoa_r+0x3a4>
 800a2c6:	2602      	movs	r6, #2
 800a2c8:	e765      	b.n	800a196 <_dtoa_r+0x3ae>
 800a2ca:	46b8      	mov	r8, r7
 800a2cc:	9c08      	ldr	r4, [sp, #32]
 800a2ce:	e784      	b.n	800a1da <_dtoa_r+0x3f2>
 800a2d0:	4b27      	ldr	r3, [pc, #156]	@ (800a370 <_dtoa_r+0x588>)
 800a2d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2dc:	4454      	add	r4, sl
 800a2de:	2900      	cmp	r1, #0
 800a2e0:	d054      	beq.n	800a38c <_dtoa_r+0x5a4>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	4928      	ldr	r1, [pc, #160]	@ (800a388 <_dtoa_r+0x5a0>)
 800a2e6:	f7f6 fad5 	bl	8000894 <__aeabi_ddiv>
 800a2ea:	4633      	mov	r3, r6
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	f7f5 ffef 	bl	80002d0 <__aeabi_dsub>
 800a2f2:	4656      	mov	r6, sl
 800a2f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2fc:	f7f6 fc50 	bl	8000ba0 <__aeabi_d2iz>
 800a300:	4605      	mov	r5, r0
 800a302:	f7f6 f933 	bl	800056c <__aeabi_i2d>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a30e:	f7f5 ffdf 	bl	80002d0 <__aeabi_dsub>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	3530      	adds	r5, #48	@ 0x30
 800a318:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a31c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a320:	f806 5b01 	strb.w	r5, [r6], #1
 800a324:	f7f6 fbfe 	bl	8000b24 <__aeabi_dcmplt>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d172      	bne.n	800a412 <_dtoa_r+0x62a>
 800a32c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a330:	2000      	movs	r0, #0
 800a332:	4911      	ldr	r1, [pc, #68]	@ (800a378 <_dtoa_r+0x590>)
 800a334:	f7f5 ffcc 	bl	80002d0 <__aeabi_dsub>
 800a338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a33c:	f7f6 fbf2 	bl	8000b24 <__aeabi_dcmplt>
 800a340:	2800      	cmp	r0, #0
 800a342:	f040 80b4 	bne.w	800a4ae <_dtoa_r+0x6c6>
 800a346:	42a6      	cmp	r6, r4
 800a348:	f43f af70 	beq.w	800a22c <_dtoa_r+0x444>
 800a34c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a350:	2200      	movs	r2, #0
 800a352:	4b0a      	ldr	r3, [pc, #40]	@ (800a37c <_dtoa_r+0x594>)
 800a354:	f7f6 f974 	bl	8000640 <__aeabi_dmul>
 800a358:	2200      	movs	r2, #0
 800a35a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a35e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a362:	4b06      	ldr	r3, [pc, #24]	@ (800a37c <_dtoa_r+0x594>)
 800a364:	f7f6 f96c 	bl	8000640 <__aeabi_dmul>
 800a368:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a36c:	e7c4      	b.n	800a2f8 <_dtoa_r+0x510>
 800a36e:	bf00      	nop
 800a370:	0800d7a0 	.word	0x0800d7a0
 800a374:	0800d778 	.word	0x0800d778
 800a378:	3ff00000 	.word	0x3ff00000
 800a37c:	40240000 	.word	0x40240000
 800a380:	401c0000 	.word	0x401c0000
 800a384:	40140000 	.word	0x40140000
 800a388:	3fe00000 	.word	0x3fe00000
 800a38c:	4631      	mov	r1, r6
 800a38e:	4628      	mov	r0, r5
 800a390:	f7f6 f956 	bl	8000640 <__aeabi_dmul>
 800a394:	4656      	mov	r6, sl
 800a396:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a39a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a39c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3a0:	f7f6 fbfe 	bl	8000ba0 <__aeabi_d2iz>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	f7f6 f8e1 	bl	800056c <__aeabi_i2d>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3b2:	f7f5 ff8d 	bl	80002d0 <__aeabi_dsub>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	3530      	adds	r5, #48	@ 0x30
 800a3bc:	f806 5b01 	strb.w	r5, [r6], #1
 800a3c0:	42a6      	cmp	r6, r4
 800a3c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	d124      	bne.n	800a416 <_dtoa_r+0x62e>
 800a3cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3d0:	4bae      	ldr	r3, [pc, #696]	@ (800a68c <_dtoa_r+0x8a4>)
 800a3d2:	f7f5 ff7f 	bl	80002d4 <__adddf3>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3de:	f7f6 fbbf 	bl	8000b60 <__aeabi_dcmpgt>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d163      	bne.n	800a4ae <_dtoa_r+0x6c6>
 800a3e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	49a7      	ldr	r1, [pc, #668]	@ (800a68c <_dtoa_r+0x8a4>)
 800a3ee:	f7f5 ff6f 	bl	80002d0 <__aeabi_dsub>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3fa:	f7f6 fb93 	bl	8000b24 <__aeabi_dcmplt>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f43f af14 	beq.w	800a22c <_dtoa_r+0x444>
 800a404:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a406:	1e73      	subs	r3, r6, #1
 800a408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a40a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a40e:	2b30      	cmp	r3, #48	@ 0x30
 800a410:	d0f8      	beq.n	800a404 <_dtoa_r+0x61c>
 800a412:	4647      	mov	r7, r8
 800a414:	e03b      	b.n	800a48e <_dtoa_r+0x6a6>
 800a416:	4b9e      	ldr	r3, [pc, #632]	@ (800a690 <_dtoa_r+0x8a8>)
 800a418:	f7f6 f912 	bl	8000640 <__aeabi_dmul>
 800a41c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a420:	e7bc      	b.n	800a39c <_dtoa_r+0x5b4>
 800a422:	4656      	mov	r6, sl
 800a424:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800a428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f6 fa30 	bl	8000894 <__aeabi_ddiv>
 800a434:	f7f6 fbb4 	bl	8000ba0 <__aeabi_d2iz>
 800a438:	4680      	mov	r8, r0
 800a43a:	f7f6 f897 	bl	800056c <__aeabi_i2d>
 800a43e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a442:	f7f6 f8fd 	bl	8000640 <__aeabi_dmul>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4620      	mov	r0, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	f7f5 ff3f 	bl	80002d0 <__aeabi_dsub>
 800a452:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a456:	9d08      	ldr	r5, [sp, #32]
 800a458:	f806 4b01 	strb.w	r4, [r6], #1
 800a45c:	eba6 040a 	sub.w	r4, r6, sl
 800a460:	42a5      	cmp	r5, r4
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	d133      	bne.n	800a4d0 <_dtoa_r+0x6e8>
 800a468:	f7f5 ff34 	bl	80002d4 <__adddf3>
 800a46c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a470:	4604      	mov	r4, r0
 800a472:	460d      	mov	r5, r1
 800a474:	f7f6 fb74 	bl	8000b60 <__aeabi_dcmpgt>
 800a478:	b9c0      	cbnz	r0, 800a4ac <_dtoa_r+0x6c4>
 800a47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	f7f6 fb45 	bl	8000b10 <__aeabi_dcmpeq>
 800a486:	b110      	cbz	r0, 800a48e <_dtoa_r+0x6a6>
 800a488:	f018 0f01 	tst.w	r8, #1
 800a48c:	d10e      	bne.n	800a4ac <_dtoa_r+0x6c4>
 800a48e:	4648      	mov	r0, r9
 800a490:	9903      	ldr	r1, [sp, #12]
 800a492:	f000 fbbb 	bl	800ac0c <_Bfree>
 800a496:	2300      	movs	r3, #0
 800a498:	7033      	strb	r3, [r6, #0]
 800a49a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a49c:	3701      	adds	r7, #1
 800a49e:	601f      	str	r7, [r3, #0]
 800a4a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 824b 	beq.w	800a93e <_dtoa_r+0xb56>
 800a4a8:	601e      	str	r6, [r3, #0]
 800a4aa:	e248      	b.n	800a93e <_dtoa_r+0xb56>
 800a4ac:	46b8      	mov	r8, r7
 800a4ae:	4633      	mov	r3, r6
 800a4b0:	461e      	mov	r6, r3
 800a4b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4b6:	2a39      	cmp	r2, #57	@ 0x39
 800a4b8:	d106      	bne.n	800a4c8 <_dtoa_r+0x6e0>
 800a4ba:	459a      	cmp	sl, r3
 800a4bc:	d1f8      	bne.n	800a4b0 <_dtoa_r+0x6c8>
 800a4be:	2230      	movs	r2, #48	@ 0x30
 800a4c0:	f108 0801 	add.w	r8, r8, #1
 800a4c4:	f88a 2000 	strb.w	r2, [sl]
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	3201      	adds	r2, #1
 800a4cc:	701a      	strb	r2, [r3, #0]
 800a4ce:	e7a0      	b.n	800a412 <_dtoa_r+0x62a>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4b6f      	ldr	r3, [pc, #444]	@ (800a690 <_dtoa_r+0x8a8>)
 800a4d4:	f7f6 f8b4 	bl	8000640 <__aeabi_dmul>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4604      	mov	r4, r0
 800a4de:	460d      	mov	r5, r1
 800a4e0:	f7f6 fb16 	bl	8000b10 <__aeabi_dcmpeq>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d09f      	beq.n	800a428 <_dtoa_r+0x640>
 800a4e8:	e7d1      	b.n	800a48e <_dtoa_r+0x6a6>
 800a4ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4ec:	2a00      	cmp	r2, #0
 800a4ee:	f000 80ea 	beq.w	800a6c6 <_dtoa_r+0x8de>
 800a4f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a4f4:	2a01      	cmp	r2, #1
 800a4f6:	f300 80cd 	bgt.w	800a694 <_dtoa_r+0x8ac>
 800a4fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	f000 80c1 	beq.w	800a684 <_dtoa_r+0x89c>
 800a502:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a506:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a508:	9e04      	ldr	r6, [sp, #16]
 800a50a:	9a04      	ldr	r2, [sp, #16]
 800a50c:	2101      	movs	r1, #1
 800a50e:	441a      	add	r2, r3
 800a510:	9204      	str	r2, [sp, #16]
 800a512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a514:	4648      	mov	r0, r9
 800a516:	441a      	add	r2, r3
 800a518:	9209      	str	r2, [sp, #36]	@ 0x24
 800a51a:	f000 fc75 	bl	800ae08 <__i2b>
 800a51e:	4605      	mov	r5, r0
 800a520:	b166      	cbz	r6, 800a53c <_dtoa_r+0x754>
 800a522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd09      	ble.n	800a53c <_dtoa_r+0x754>
 800a528:	42b3      	cmp	r3, r6
 800a52a:	bfa8      	it	ge
 800a52c:	4633      	movge	r3, r6
 800a52e:	9a04      	ldr	r2, [sp, #16]
 800a530:	1af6      	subs	r6, r6, r3
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	9204      	str	r2, [sp, #16]
 800a536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a53e:	b30b      	cbz	r3, 800a584 <_dtoa_r+0x79c>
 800a540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 80c6 	beq.w	800a6d4 <_dtoa_r+0x8ec>
 800a548:	2c00      	cmp	r4, #0
 800a54a:	f000 80c0 	beq.w	800a6ce <_dtoa_r+0x8e6>
 800a54e:	4629      	mov	r1, r5
 800a550:	4622      	mov	r2, r4
 800a552:	4648      	mov	r0, r9
 800a554:	f000 fd10 	bl	800af78 <__pow5mult>
 800a558:	9a03      	ldr	r2, [sp, #12]
 800a55a:	4601      	mov	r1, r0
 800a55c:	4605      	mov	r5, r0
 800a55e:	4648      	mov	r0, r9
 800a560:	f000 fc68 	bl	800ae34 <__multiply>
 800a564:	9903      	ldr	r1, [sp, #12]
 800a566:	4680      	mov	r8, r0
 800a568:	4648      	mov	r0, r9
 800a56a:	f000 fb4f 	bl	800ac0c <_Bfree>
 800a56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a570:	1b1b      	subs	r3, r3, r4
 800a572:	930a      	str	r3, [sp, #40]	@ 0x28
 800a574:	f000 80b1 	beq.w	800a6da <_dtoa_r+0x8f2>
 800a578:	4641      	mov	r1, r8
 800a57a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a57c:	4648      	mov	r0, r9
 800a57e:	f000 fcfb 	bl	800af78 <__pow5mult>
 800a582:	9003      	str	r0, [sp, #12]
 800a584:	2101      	movs	r1, #1
 800a586:	4648      	mov	r0, r9
 800a588:	f000 fc3e 	bl	800ae08 <__i2b>
 800a58c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a58e:	4604      	mov	r4, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 81d8 	beq.w	800a946 <_dtoa_r+0xb5e>
 800a596:	461a      	mov	r2, r3
 800a598:	4601      	mov	r1, r0
 800a59a:	4648      	mov	r0, r9
 800a59c:	f000 fcec 	bl	800af78 <__pow5mult>
 800a5a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	f300 809f 	bgt.w	800a6e8 <_dtoa_r+0x900>
 800a5aa:	9b06      	ldr	r3, [sp, #24]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f040 8097 	bne.w	800a6e0 <_dtoa_r+0x8f8>
 800a5b2:	9b07      	ldr	r3, [sp, #28]
 800a5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 8093 	bne.w	800a6e4 <_dtoa_r+0x8fc>
 800a5be:	9b07      	ldr	r3, [sp, #28]
 800a5c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5c4:	0d1b      	lsrs	r3, r3, #20
 800a5c6:	051b      	lsls	r3, r3, #20
 800a5c8:	b133      	cbz	r3, 800a5d8 <_dtoa_r+0x7f0>
 800a5ca:	9b04      	ldr	r3, [sp, #16]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	9304      	str	r3, [sp, #16]
 800a5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 81b8 	beq.w	800a952 <_dtoa_r+0xb6a>
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5e8:	6918      	ldr	r0, [r3, #16]
 800a5ea:	f000 fbc1 	bl	800ad70 <__hi0bits>
 800a5ee:	f1c0 0020 	rsb	r0, r0, #32
 800a5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f4:	4418      	add	r0, r3
 800a5f6:	f010 001f 	ands.w	r0, r0, #31
 800a5fa:	f000 8082 	beq.w	800a702 <_dtoa_r+0x91a>
 800a5fe:	f1c0 0320 	rsb	r3, r0, #32
 800a602:	2b04      	cmp	r3, #4
 800a604:	dd73      	ble.n	800a6ee <_dtoa_r+0x906>
 800a606:	9b04      	ldr	r3, [sp, #16]
 800a608:	f1c0 001c 	rsb	r0, r0, #28
 800a60c:	4403      	add	r3, r0
 800a60e:	9304      	str	r3, [sp, #16]
 800a610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a612:	4406      	add	r6, r0
 800a614:	4403      	add	r3, r0
 800a616:	9309      	str	r3, [sp, #36]	@ 0x24
 800a618:	9b04      	ldr	r3, [sp, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dd05      	ble.n	800a62a <_dtoa_r+0x842>
 800a61e:	461a      	mov	r2, r3
 800a620:	4648      	mov	r0, r9
 800a622:	9903      	ldr	r1, [sp, #12]
 800a624:	f000 fd02 	bl	800b02c <__lshift>
 800a628:	9003      	str	r0, [sp, #12]
 800a62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dd05      	ble.n	800a63c <_dtoa_r+0x854>
 800a630:	4621      	mov	r1, r4
 800a632:	461a      	mov	r2, r3
 800a634:	4648      	mov	r0, r9
 800a636:	f000 fcf9 	bl	800b02c <__lshift>
 800a63a:	4604      	mov	r4, r0
 800a63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d061      	beq.n	800a706 <_dtoa_r+0x91e>
 800a642:	4621      	mov	r1, r4
 800a644:	9803      	ldr	r0, [sp, #12]
 800a646:	f000 fd5d 	bl	800b104 <__mcmp>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	da5b      	bge.n	800a706 <_dtoa_r+0x91e>
 800a64e:	2300      	movs	r3, #0
 800a650:	220a      	movs	r2, #10
 800a652:	4648      	mov	r0, r9
 800a654:	9903      	ldr	r1, [sp, #12]
 800a656:	f000 fafb 	bl	800ac50 <__multadd>
 800a65a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a65c:	f107 38ff 	add.w	r8, r7, #4294967295
 800a660:	9003      	str	r0, [sp, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 8177 	beq.w	800a956 <_dtoa_r+0xb6e>
 800a668:	4629      	mov	r1, r5
 800a66a:	2300      	movs	r3, #0
 800a66c:	220a      	movs	r2, #10
 800a66e:	4648      	mov	r0, r9
 800a670:	f000 faee 	bl	800ac50 <__multadd>
 800a674:	f1bb 0f00 	cmp.w	fp, #0
 800a678:	4605      	mov	r5, r0
 800a67a:	dc6f      	bgt.n	800a75c <_dtoa_r+0x974>
 800a67c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a67e:	2b02      	cmp	r3, #2
 800a680:	dc49      	bgt.n	800a716 <_dtoa_r+0x92e>
 800a682:	e06b      	b.n	800a75c <_dtoa_r+0x974>
 800a684:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a686:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a68a:	e73c      	b.n	800a506 <_dtoa_r+0x71e>
 800a68c:	3fe00000 	.word	0x3fe00000
 800a690:	40240000 	.word	0x40240000
 800a694:	9b08      	ldr	r3, [sp, #32]
 800a696:	1e5c      	subs	r4, r3, #1
 800a698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a69a:	42a3      	cmp	r3, r4
 800a69c:	db09      	blt.n	800a6b2 <_dtoa_r+0x8ca>
 800a69e:	1b1c      	subs	r4, r3, r4
 800a6a0:	9b08      	ldr	r3, [sp, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f6bf af30 	bge.w	800a508 <_dtoa_r+0x720>
 800a6a8:	9b04      	ldr	r3, [sp, #16]
 800a6aa:	9a08      	ldr	r2, [sp, #32]
 800a6ac:	1a9e      	subs	r6, r3, r2
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e72b      	b.n	800a50a <_dtoa_r+0x722>
 800a6b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6b6:	1ae3      	subs	r3, r4, r3
 800a6b8:	441a      	add	r2, r3
 800a6ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800a6bc:	9e04      	ldr	r6, [sp, #16]
 800a6be:	2400      	movs	r4, #0
 800a6c0:	9b08      	ldr	r3, [sp, #32]
 800a6c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6c4:	e721      	b.n	800a50a <_dtoa_r+0x722>
 800a6c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6c8:	9e04      	ldr	r6, [sp, #16]
 800a6ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a6cc:	e728      	b.n	800a520 <_dtoa_r+0x738>
 800a6ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a6d2:	e751      	b.n	800a578 <_dtoa_r+0x790>
 800a6d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6d6:	9903      	ldr	r1, [sp, #12]
 800a6d8:	e750      	b.n	800a57c <_dtoa_r+0x794>
 800a6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6de:	e751      	b.n	800a584 <_dtoa_r+0x79c>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e779      	b.n	800a5d8 <_dtoa_r+0x7f0>
 800a6e4:	9b06      	ldr	r3, [sp, #24]
 800a6e6:	e777      	b.n	800a5d8 <_dtoa_r+0x7f0>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6ec:	e779      	b.n	800a5e2 <_dtoa_r+0x7fa>
 800a6ee:	d093      	beq.n	800a618 <_dtoa_r+0x830>
 800a6f0:	9a04      	ldr	r2, [sp, #16]
 800a6f2:	331c      	adds	r3, #28
 800a6f4:	441a      	add	r2, r3
 800a6f6:	9204      	str	r2, [sp, #16]
 800a6f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6fa:	441e      	add	r6, r3
 800a6fc:	441a      	add	r2, r3
 800a6fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800a700:	e78a      	b.n	800a618 <_dtoa_r+0x830>
 800a702:	4603      	mov	r3, r0
 800a704:	e7f4      	b.n	800a6f0 <_dtoa_r+0x908>
 800a706:	9b08      	ldr	r3, [sp, #32]
 800a708:	46b8      	mov	r8, r7
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	dc20      	bgt.n	800a750 <_dtoa_r+0x968>
 800a70e:	469b      	mov	fp, r3
 800a710:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a712:	2b02      	cmp	r3, #2
 800a714:	dd1e      	ble.n	800a754 <_dtoa_r+0x96c>
 800a716:	f1bb 0f00 	cmp.w	fp, #0
 800a71a:	f47f adb1 	bne.w	800a280 <_dtoa_r+0x498>
 800a71e:	4621      	mov	r1, r4
 800a720:	465b      	mov	r3, fp
 800a722:	2205      	movs	r2, #5
 800a724:	4648      	mov	r0, r9
 800a726:	f000 fa93 	bl	800ac50 <__multadd>
 800a72a:	4601      	mov	r1, r0
 800a72c:	4604      	mov	r4, r0
 800a72e:	9803      	ldr	r0, [sp, #12]
 800a730:	f000 fce8 	bl	800b104 <__mcmp>
 800a734:	2800      	cmp	r0, #0
 800a736:	f77f ada3 	ble.w	800a280 <_dtoa_r+0x498>
 800a73a:	4656      	mov	r6, sl
 800a73c:	2331      	movs	r3, #49	@ 0x31
 800a73e:	f108 0801 	add.w	r8, r8, #1
 800a742:	f806 3b01 	strb.w	r3, [r6], #1
 800a746:	e59f      	b.n	800a288 <_dtoa_r+0x4a0>
 800a748:	46b8      	mov	r8, r7
 800a74a:	9c08      	ldr	r4, [sp, #32]
 800a74c:	4625      	mov	r5, r4
 800a74e:	e7f4      	b.n	800a73a <_dtoa_r+0x952>
 800a750:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 8101 	beq.w	800a95e <_dtoa_r+0xb76>
 800a75c:	2e00      	cmp	r6, #0
 800a75e:	dd05      	ble.n	800a76c <_dtoa_r+0x984>
 800a760:	4629      	mov	r1, r5
 800a762:	4632      	mov	r2, r6
 800a764:	4648      	mov	r0, r9
 800a766:	f000 fc61 	bl	800b02c <__lshift>
 800a76a:	4605      	mov	r5, r0
 800a76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d05c      	beq.n	800a82c <_dtoa_r+0xa44>
 800a772:	4648      	mov	r0, r9
 800a774:	6869      	ldr	r1, [r5, #4]
 800a776:	f000 fa09 	bl	800ab8c <_Balloc>
 800a77a:	4606      	mov	r6, r0
 800a77c:	b928      	cbnz	r0, 800a78a <_dtoa_r+0x9a2>
 800a77e:	4602      	mov	r2, r0
 800a780:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a784:	4b80      	ldr	r3, [pc, #512]	@ (800a988 <_dtoa_r+0xba0>)
 800a786:	f7ff bb43 	b.w	8009e10 <_dtoa_r+0x28>
 800a78a:	692a      	ldr	r2, [r5, #16]
 800a78c:	f105 010c 	add.w	r1, r5, #12
 800a790:	3202      	adds	r2, #2
 800a792:	0092      	lsls	r2, r2, #2
 800a794:	300c      	adds	r0, #12
 800a796:	f7ff fa8a 	bl	8009cae <memcpy>
 800a79a:	2201      	movs	r2, #1
 800a79c:	4631      	mov	r1, r6
 800a79e:	4648      	mov	r0, r9
 800a7a0:	f000 fc44 	bl	800b02c <__lshift>
 800a7a4:	462f      	mov	r7, r5
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	f10a 0301 	add.w	r3, sl, #1
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	eb0a 030b 	add.w	r3, sl, fp
 800a7b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b4:	9b06      	ldr	r3, [sp, #24]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	4621      	mov	r1, r4
 800a7c0:	9803      	ldr	r0, [sp, #12]
 800a7c2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7c6:	f7ff fa85 	bl	8009cd4 <quorem>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	3330      	adds	r3, #48	@ 0x30
 800a7d0:	9006      	str	r0, [sp, #24]
 800a7d2:	9803      	ldr	r0, [sp, #12]
 800a7d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7d6:	f000 fc95 	bl	800b104 <__mcmp>
 800a7da:	462a      	mov	r2, r5
 800a7dc:	9008      	str	r0, [sp, #32]
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	f000 fcab 	bl	800b13c <__mdiff>
 800a7e6:	68c2      	ldr	r2, [r0, #12]
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7ec:	bb02      	cbnz	r2, 800a830 <_dtoa_r+0xa48>
 800a7ee:	4601      	mov	r1, r0
 800a7f0:	9803      	ldr	r0, [sp, #12]
 800a7f2:	f000 fc87 	bl	800b104 <__mcmp>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4648      	mov	r0, r9
 800a7fe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a802:	f000 fa03 	bl	800ac0c <_Bfree>
 800a806:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a808:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a80a:	9e04      	ldr	r6, [sp, #16]
 800a80c:	ea42 0103 	orr.w	r1, r2, r3
 800a810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a812:	4319      	orrs	r1, r3
 800a814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a816:	d10d      	bne.n	800a834 <_dtoa_r+0xa4c>
 800a818:	2b39      	cmp	r3, #57	@ 0x39
 800a81a:	d027      	beq.n	800a86c <_dtoa_r+0xa84>
 800a81c:	9a08      	ldr	r2, [sp, #32]
 800a81e:	2a00      	cmp	r2, #0
 800a820:	dd01      	ble.n	800a826 <_dtoa_r+0xa3e>
 800a822:	9b06      	ldr	r3, [sp, #24]
 800a824:	3331      	adds	r3, #49	@ 0x31
 800a826:	f88b 3000 	strb.w	r3, [fp]
 800a82a:	e52e      	b.n	800a28a <_dtoa_r+0x4a2>
 800a82c:	4628      	mov	r0, r5
 800a82e:	e7b9      	b.n	800a7a4 <_dtoa_r+0x9bc>
 800a830:	2201      	movs	r2, #1
 800a832:	e7e2      	b.n	800a7fa <_dtoa_r+0xa12>
 800a834:	9908      	ldr	r1, [sp, #32]
 800a836:	2900      	cmp	r1, #0
 800a838:	db04      	blt.n	800a844 <_dtoa_r+0xa5c>
 800a83a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a83c:	4301      	orrs	r1, r0
 800a83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a840:	4301      	orrs	r1, r0
 800a842:	d120      	bne.n	800a886 <_dtoa_r+0xa9e>
 800a844:	2a00      	cmp	r2, #0
 800a846:	ddee      	ble.n	800a826 <_dtoa_r+0xa3e>
 800a848:	2201      	movs	r2, #1
 800a84a:	9903      	ldr	r1, [sp, #12]
 800a84c:	4648      	mov	r0, r9
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	f000 fbec 	bl	800b02c <__lshift>
 800a854:	4621      	mov	r1, r4
 800a856:	9003      	str	r0, [sp, #12]
 800a858:	f000 fc54 	bl	800b104 <__mcmp>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	dc02      	bgt.n	800a868 <_dtoa_r+0xa80>
 800a862:	d1e0      	bne.n	800a826 <_dtoa_r+0xa3e>
 800a864:	07da      	lsls	r2, r3, #31
 800a866:	d5de      	bpl.n	800a826 <_dtoa_r+0xa3e>
 800a868:	2b39      	cmp	r3, #57	@ 0x39
 800a86a:	d1da      	bne.n	800a822 <_dtoa_r+0xa3a>
 800a86c:	2339      	movs	r3, #57	@ 0x39
 800a86e:	f88b 3000 	strb.w	r3, [fp]
 800a872:	4633      	mov	r3, r6
 800a874:	461e      	mov	r6, r3
 800a876:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	2a39      	cmp	r2, #57	@ 0x39
 800a87e:	d04e      	beq.n	800a91e <_dtoa_r+0xb36>
 800a880:	3201      	adds	r2, #1
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	e501      	b.n	800a28a <_dtoa_r+0x4a2>
 800a886:	2a00      	cmp	r2, #0
 800a888:	dd03      	ble.n	800a892 <_dtoa_r+0xaaa>
 800a88a:	2b39      	cmp	r3, #57	@ 0x39
 800a88c:	d0ee      	beq.n	800a86c <_dtoa_r+0xa84>
 800a88e:	3301      	adds	r3, #1
 800a890:	e7c9      	b.n	800a826 <_dtoa_r+0xa3e>
 800a892:	9a04      	ldr	r2, [sp, #16]
 800a894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a896:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a89a:	428a      	cmp	r2, r1
 800a89c:	d028      	beq.n	800a8f0 <_dtoa_r+0xb08>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	9903      	ldr	r1, [sp, #12]
 800a8a4:	4648      	mov	r0, r9
 800a8a6:	f000 f9d3 	bl	800ac50 <__multadd>
 800a8aa:	42af      	cmp	r7, r5
 800a8ac:	9003      	str	r0, [sp, #12]
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	f04f 020a 	mov.w	r2, #10
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	4648      	mov	r0, r9
 800a8ba:	d107      	bne.n	800a8cc <_dtoa_r+0xae4>
 800a8bc:	f000 f9c8 	bl	800ac50 <__multadd>
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	9304      	str	r3, [sp, #16]
 800a8ca:	e777      	b.n	800a7bc <_dtoa_r+0x9d4>
 800a8cc:	f000 f9c0 	bl	800ac50 <__multadd>
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	220a      	movs	r2, #10
 800a8d8:	4648      	mov	r0, r9
 800a8da:	f000 f9b9 	bl	800ac50 <__multadd>
 800a8de:	4605      	mov	r5, r0
 800a8e0:	e7f0      	b.n	800a8c4 <_dtoa_r+0xadc>
 800a8e2:	f1bb 0f00 	cmp.w	fp, #0
 800a8e6:	bfcc      	ite	gt
 800a8e8:	465e      	movgt	r6, fp
 800a8ea:	2601      	movle	r6, #1
 800a8ec:	2700      	movs	r7, #0
 800a8ee:	4456      	add	r6, sl
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	9903      	ldr	r1, [sp, #12]
 800a8f4:	4648      	mov	r0, r9
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	f000 fb98 	bl	800b02c <__lshift>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	9003      	str	r0, [sp, #12]
 800a900:	f000 fc00 	bl	800b104 <__mcmp>
 800a904:	2800      	cmp	r0, #0
 800a906:	dcb4      	bgt.n	800a872 <_dtoa_r+0xa8a>
 800a908:	d102      	bne.n	800a910 <_dtoa_r+0xb28>
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	07db      	lsls	r3, r3, #31
 800a90e:	d4b0      	bmi.n	800a872 <_dtoa_r+0xa8a>
 800a910:	4633      	mov	r3, r6
 800a912:	461e      	mov	r6, r3
 800a914:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a918:	2a30      	cmp	r2, #48	@ 0x30
 800a91a:	d0fa      	beq.n	800a912 <_dtoa_r+0xb2a>
 800a91c:	e4b5      	b.n	800a28a <_dtoa_r+0x4a2>
 800a91e:	459a      	cmp	sl, r3
 800a920:	d1a8      	bne.n	800a874 <_dtoa_r+0xa8c>
 800a922:	2331      	movs	r3, #49	@ 0x31
 800a924:	f108 0801 	add.w	r8, r8, #1
 800a928:	f88a 3000 	strb.w	r3, [sl]
 800a92c:	e4ad      	b.n	800a28a <_dtoa_r+0x4a2>
 800a92e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a930:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a98c <_dtoa_r+0xba4>
 800a934:	b11b      	cbz	r3, 800a93e <_dtoa_r+0xb56>
 800a936:	f10a 0308 	add.w	r3, sl, #8
 800a93a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	4650      	mov	r0, sl
 800a940:	b017      	add	sp, #92	@ 0x5c
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a948:	2b01      	cmp	r3, #1
 800a94a:	f77f ae2e 	ble.w	800a5aa <_dtoa_r+0x7c2>
 800a94e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a950:	930a      	str	r3, [sp, #40]	@ 0x28
 800a952:	2001      	movs	r0, #1
 800a954:	e64d      	b.n	800a5f2 <_dtoa_r+0x80a>
 800a956:	f1bb 0f00 	cmp.w	fp, #0
 800a95a:	f77f aed9 	ble.w	800a710 <_dtoa_r+0x928>
 800a95e:	4656      	mov	r6, sl
 800a960:	4621      	mov	r1, r4
 800a962:	9803      	ldr	r0, [sp, #12]
 800a964:	f7ff f9b6 	bl	8009cd4 <quorem>
 800a968:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a96c:	f806 3b01 	strb.w	r3, [r6], #1
 800a970:	eba6 020a 	sub.w	r2, r6, sl
 800a974:	4593      	cmp	fp, r2
 800a976:	ddb4      	ble.n	800a8e2 <_dtoa_r+0xafa>
 800a978:	2300      	movs	r3, #0
 800a97a:	220a      	movs	r2, #10
 800a97c:	4648      	mov	r0, r9
 800a97e:	9903      	ldr	r1, [sp, #12]
 800a980:	f000 f966 	bl	800ac50 <__multadd>
 800a984:	9003      	str	r0, [sp, #12]
 800a986:	e7eb      	b.n	800a960 <_dtoa_r+0xb78>
 800a988:	0800d644 	.word	0x0800d644
 800a98c:	0800d5c8 	.word	0x0800d5c8

0800a990 <_free_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4605      	mov	r5, r0
 800a994:	2900      	cmp	r1, #0
 800a996:	d040      	beq.n	800aa1a <_free_r+0x8a>
 800a998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99c:	1f0c      	subs	r4, r1, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	18e4      	addlt	r4, r4, r3
 800a9a4:	f000 f8e6 	bl	800ab74 <__malloc_lock>
 800a9a8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa1c <_free_r+0x8c>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b933      	cbnz	r3, 800a9bc <_free_r+0x2c>
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	6014      	str	r4, [r2, #0]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b8:	f000 b8e2 	b.w	800ab80 <__malloc_unlock>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d908      	bls.n	800a9d2 <_free_r+0x42>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	1821      	adds	r1, r4, r0
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf01      	itttt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	1809      	addeq	r1, r1, r0
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	e7ed      	b.n	800a9ae <_free_r+0x1e>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b10b      	cbz	r3, 800a9dc <_free_r+0x4c>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d9fa      	bls.n	800a9d2 <_free_r+0x42>
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	1850      	adds	r0, r2, r1
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d10b      	bne.n	800a9fc <_free_r+0x6c>
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	4401      	add	r1, r0
 800a9e8:	1850      	adds	r0, r2, r1
 800a9ea:	4283      	cmp	r3, r0
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	d1e0      	bne.n	800a9b2 <_free_r+0x22>
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4408      	add	r0, r1
 800a9f6:	6010      	str	r0, [r2, #0]
 800a9f8:	6053      	str	r3, [r2, #4]
 800a9fa:	e7da      	b.n	800a9b2 <_free_r+0x22>
 800a9fc:	d902      	bls.n	800aa04 <_free_r+0x74>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	e7d6      	b.n	800a9b2 <_free_r+0x22>
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	1821      	adds	r1, r4, r0
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf01      	itttt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	1809      	addeq	r1, r1, r0
 800aa12:	6021      	streq	r1, [r4, #0]
 800aa14:	6063      	str	r3, [r4, #4]
 800aa16:	6054      	str	r4, [r2, #4]
 800aa18:	e7cb      	b.n	800a9b2 <_free_r+0x22>
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	20002250 	.word	0x20002250

0800aa20 <malloc>:
 800aa20:	4b02      	ldr	r3, [pc, #8]	@ (800aa2c <malloc+0xc>)
 800aa22:	4601      	mov	r1, r0
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	f000 b825 	b.w	800aa74 <_malloc_r>
 800aa2a:	bf00      	nop
 800aa2c:	2000001c 	.word	0x2000001c

0800aa30 <sbrk_aligned>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	4e0f      	ldr	r6, [pc, #60]	@ (800aa70 <sbrk_aligned+0x40>)
 800aa34:	460c      	mov	r4, r1
 800aa36:	6831      	ldr	r1, [r6, #0]
 800aa38:	4605      	mov	r5, r0
 800aa3a:	b911      	cbnz	r1, 800aa42 <sbrk_aligned+0x12>
 800aa3c:	f001 fd60 	bl	800c500 <_sbrk_r>
 800aa40:	6030      	str	r0, [r6, #0]
 800aa42:	4621      	mov	r1, r4
 800aa44:	4628      	mov	r0, r5
 800aa46:	f001 fd5b 	bl	800c500 <_sbrk_r>
 800aa4a:	1c43      	adds	r3, r0, #1
 800aa4c:	d103      	bne.n	800aa56 <sbrk_aligned+0x26>
 800aa4e:	f04f 34ff 	mov.w	r4, #4294967295
 800aa52:	4620      	mov	r0, r4
 800aa54:	bd70      	pop	{r4, r5, r6, pc}
 800aa56:	1cc4      	adds	r4, r0, #3
 800aa58:	f024 0403 	bic.w	r4, r4, #3
 800aa5c:	42a0      	cmp	r0, r4
 800aa5e:	d0f8      	beq.n	800aa52 <sbrk_aligned+0x22>
 800aa60:	1a21      	subs	r1, r4, r0
 800aa62:	4628      	mov	r0, r5
 800aa64:	f001 fd4c 	bl	800c500 <_sbrk_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d1f2      	bne.n	800aa52 <sbrk_aligned+0x22>
 800aa6c:	e7ef      	b.n	800aa4e <sbrk_aligned+0x1e>
 800aa6e:	bf00      	nop
 800aa70:	2000224c 	.word	0x2000224c

0800aa74 <_malloc_r>:
 800aa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa78:	1ccd      	adds	r5, r1, #3
 800aa7a:	f025 0503 	bic.w	r5, r5, #3
 800aa7e:	3508      	adds	r5, #8
 800aa80:	2d0c      	cmp	r5, #12
 800aa82:	bf38      	it	cc
 800aa84:	250c      	movcc	r5, #12
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	4606      	mov	r6, r0
 800aa8a:	db01      	blt.n	800aa90 <_malloc_r+0x1c>
 800aa8c:	42a9      	cmp	r1, r5
 800aa8e:	d904      	bls.n	800aa9a <_malloc_r+0x26>
 800aa90:	230c      	movs	r3, #12
 800aa92:	6033      	str	r3, [r6, #0]
 800aa94:	2000      	movs	r0, #0
 800aa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab70 <_malloc_r+0xfc>
 800aa9e:	f000 f869 	bl	800ab74 <__malloc_lock>
 800aaa2:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	bb44      	cbnz	r4, 800aafc <_malloc_r+0x88>
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff ffbf 	bl	800aa30 <sbrk_aligned>
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	4604      	mov	r4, r0
 800aab6:	d158      	bne.n	800ab6a <_malloc_r+0xf6>
 800aab8:	f8d8 4000 	ldr.w	r4, [r8]
 800aabc:	4627      	mov	r7, r4
 800aabe:	2f00      	cmp	r7, #0
 800aac0:	d143      	bne.n	800ab4a <_malloc_r+0xd6>
 800aac2:	2c00      	cmp	r4, #0
 800aac4:	d04b      	beq.n	800ab5e <_malloc_r+0xea>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	4639      	mov	r1, r7
 800aaca:	4630      	mov	r0, r6
 800aacc:	eb04 0903 	add.w	r9, r4, r3
 800aad0:	f001 fd16 	bl	800c500 <_sbrk_r>
 800aad4:	4581      	cmp	r9, r0
 800aad6:	d142      	bne.n	800ab5e <_malloc_r+0xea>
 800aad8:	6821      	ldr	r1, [r4, #0]
 800aada:	4630      	mov	r0, r6
 800aadc:	1a6d      	subs	r5, r5, r1
 800aade:	4629      	mov	r1, r5
 800aae0:	f7ff ffa6 	bl	800aa30 <sbrk_aligned>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d03a      	beq.n	800ab5e <_malloc_r+0xea>
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	442b      	add	r3, r5
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	bb62      	cbnz	r2, 800ab50 <_malloc_r+0xdc>
 800aaf6:	f8c8 7000 	str.w	r7, [r8]
 800aafa:	e00f      	b.n	800ab1c <_malloc_r+0xa8>
 800aafc:	6822      	ldr	r2, [r4, #0]
 800aafe:	1b52      	subs	r2, r2, r5
 800ab00:	d420      	bmi.n	800ab44 <_malloc_r+0xd0>
 800ab02:	2a0b      	cmp	r2, #11
 800ab04:	d917      	bls.n	800ab36 <_malloc_r+0xc2>
 800ab06:	1961      	adds	r1, r4, r5
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	6025      	str	r5, [r4, #0]
 800ab0c:	bf18      	it	ne
 800ab0e:	6059      	strne	r1, [r3, #4]
 800ab10:	6863      	ldr	r3, [r4, #4]
 800ab12:	bf08      	it	eq
 800ab14:	f8c8 1000 	streq.w	r1, [r8]
 800ab18:	5162      	str	r2, [r4, r5]
 800ab1a:	604b      	str	r3, [r1, #4]
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f000 f82f 	bl	800ab80 <__malloc_unlock>
 800ab22:	f104 000b 	add.w	r0, r4, #11
 800ab26:	1d23      	adds	r3, r4, #4
 800ab28:	f020 0007 	bic.w	r0, r0, #7
 800ab2c:	1ac2      	subs	r2, r0, r3
 800ab2e:	bf1c      	itt	ne
 800ab30:	1a1b      	subne	r3, r3, r0
 800ab32:	50a3      	strne	r3, [r4, r2]
 800ab34:	e7af      	b.n	800aa96 <_malloc_r+0x22>
 800ab36:	6862      	ldr	r2, [r4, #4]
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	bf0c      	ite	eq
 800ab3c:	f8c8 2000 	streq.w	r2, [r8]
 800ab40:	605a      	strne	r2, [r3, #4]
 800ab42:	e7eb      	b.n	800ab1c <_malloc_r+0xa8>
 800ab44:	4623      	mov	r3, r4
 800ab46:	6864      	ldr	r4, [r4, #4]
 800ab48:	e7ae      	b.n	800aaa8 <_malloc_r+0x34>
 800ab4a:	463c      	mov	r4, r7
 800ab4c:	687f      	ldr	r7, [r7, #4]
 800ab4e:	e7b6      	b.n	800aabe <_malloc_r+0x4a>
 800ab50:	461a      	mov	r2, r3
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	d1fb      	bne.n	800ab50 <_malloc_r+0xdc>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	6053      	str	r3, [r2, #4]
 800ab5c:	e7de      	b.n	800ab1c <_malloc_r+0xa8>
 800ab5e:	230c      	movs	r3, #12
 800ab60:	4630      	mov	r0, r6
 800ab62:	6033      	str	r3, [r6, #0]
 800ab64:	f000 f80c 	bl	800ab80 <__malloc_unlock>
 800ab68:	e794      	b.n	800aa94 <_malloc_r+0x20>
 800ab6a:	6005      	str	r5, [r0, #0]
 800ab6c:	e7d6      	b.n	800ab1c <_malloc_r+0xa8>
 800ab6e:	bf00      	nop
 800ab70:	20002250 	.word	0x20002250

0800ab74 <__malloc_lock>:
 800ab74:	4801      	ldr	r0, [pc, #4]	@ (800ab7c <__malloc_lock+0x8>)
 800ab76:	f7ff b88a 	b.w	8009c8e <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	20002248 	.word	0x20002248

0800ab80 <__malloc_unlock>:
 800ab80:	4801      	ldr	r0, [pc, #4]	@ (800ab88 <__malloc_unlock+0x8>)
 800ab82:	f7ff b885 	b.w	8009c90 <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	20002248 	.word	0x20002248

0800ab8c <_Balloc>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	69c6      	ldr	r6, [r0, #28]
 800ab90:	4604      	mov	r4, r0
 800ab92:	460d      	mov	r5, r1
 800ab94:	b976      	cbnz	r6, 800abb4 <_Balloc+0x28>
 800ab96:	2010      	movs	r0, #16
 800ab98:	f7ff ff42 	bl	800aa20 <malloc>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	61e0      	str	r0, [r4, #28]
 800aba0:	b920      	cbnz	r0, 800abac <_Balloc+0x20>
 800aba2:	216b      	movs	r1, #107	@ 0x6b
 800aba4:	4b17      	ldr	r3, [pc, #92]	@ (800ac04 <_Balloc+0x78>)
 800aba6:	4818      	ldr	r0, [pc, #96]	@ (800ac08 <_Balloc+0x7c>)
 800aba8:	f001 fcc0 	bl	800c52c <__assert_func>
 800abac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb0:	6006      	str	r6, [r0, #0]
 800abb2:	60c6      	str	r6, [r0, #12]
 800abb4:	69e6      	ldr	r6, [r4, #28]
 800abb6:	68f3      	ldr	r3, [r6, #12]
 800abb8:	b183      	cbz	r3, 800abdc <_Balloc+0x50>
 800abba:	69e3      	ldr	r3, [r4, #28]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abc2:	b9b8      	cbnz	r0, 800abf4 <_Balloc+0x68>
 800abc4:	2101      	movs	r1, #1
 800abc6:	fa01 f605 	lsl.w	r6, r1, r5
 800abca:	1d72      	adds	r2, r6, #5
 800abcc:	4620      	mov	r0, r4
 800abce:	0092      	lsls	r2, r2, #2
 800abd0:	f001 fcca 	bl	800c568 <_calloc_r>
 800abd4:	b160      	cbz	r0, 800abf0 <_Balloc+0x64>
 800abd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abda:	e00e      	b.n	800abfa <_Balloc+0x6e>
 800abdc:	2221      	movs	r2, #33	@ 0x21
 800abde:	2104      	movs	r1, #4
 800abe0:	4620      	mov	r0, r4
 800abe2:	f001 fcc1 	bl	800c568 <_calloc_r>
 800abe6:	69e3      	ldr	r3, [r4, #28]
 800abe8:	60f0      	str	r0, [r6, #12]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e4      	bne.n	800abba <_Balloc+0x2e>
 800abf0:	2000      	movs	r0, #0
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	6802      	ldr	r2, [r0, #0]
 800abf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abfa:	2300      	movs	r3, #0
 800abfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac00:	e7f7      	b.n	800abf2 <_Balloc+0x66>
 800ac02:	bf00      	nop
 800ac04:	0800d5d5 	.word	0x0800d5d5
 800ac08:	0800d655 	.word	0x0800d655

0800ac0c <_Bfree>:
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	69c6      	ldr	r6, [r0, #28]
 800ac10:	4605      	mov	r5, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	b976      	cbnz	r6, 800ac34 <_Bfree+0x28>
 800ac16:	2010      	movs	r0, #16
 800ac18:	f7ff ff02 	bl	800aa20 <malloc>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	61e8      	str	r0, [r5, #28]
 800ac20:	b920      	cbnz	r0, 800ac2c <_Bfree+0x20>
 800ac22:	218f      	movs	r1, #143	@ 0x8f
 800ac24:	4b08      	ldr	r3, [pc, #32]	@ (800ac48 <_Bfree+0x3c>)
 800ac26:	4809      	ldr	r0, [pc, #36]	@ (800ac4c <_Bfree+0x40>)
 800ac28:	f001 fc80 	bl	800c52c <__assert_func>
 800ac2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac30:	6006      	str	r6, [r0, #0]
 800ac32:	60c6      	str	r6, [r0, #12]
 800ac34:	b13c      	cbz	r4, 800ac46 <_Bfree+0x3a>
 800ac36:	69eb      	ldr	r3, [r5, #28]
 800ac38:	6862      	ldr	r2, [r4, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac40:	6021      	str	r1, [r4, #0]
 800ac42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
 800ac48:	0800d5d5 	.word	0x0800d5d5
 800ac4c:	0800d655 	.word	0x0800d655

0800ac50 <__multadd>:
 800ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac54:	4607      	mov	r7, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	461e      	mov	r6, r3
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	690d      	ldr	r5, [r1, #16]
 800ac5e:	f101 0c14 	add.w	ip, r1, #20
 800ac62:	f8dc 3000 	ldr.w	r3, [ip]
 800ac66:	3001      	adds	r0, #1
 800ac68:	b299      	uxth	r1, r3
 800ac6a:	fb02 6101 	mla	r1, r2, r1, r6
 800ac6e:	0c1e      	lsrs	r6, r3, #16
 800ac70:	0c0b      	lsrs	r3, r1, #16
 800ac72:	fb02 3306 	mla	r3, r2, r6, r3
 800ac76:	b289      	uxth	r1, r1
 800ac78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac7c:	4285      	cmp	r5, r0
 800ac7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac82:	f84c 1b04 	str.w	r1, [ip], #4
 800ac86:	dcec      	bgt.n	800ac62 <__multadd+0x12>
 800ac88:	b30e      	cbz	r6, 800acce <__multadd+0x7e>
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	42ab      	cmp	r3, r5
 800ac8e:	dc19      	bgt.n	800acc4 <__multadd+0x74>
 800ac90:	6861      	ldr	r1, [r4, #4]
 800ac92:	4638      	mov	r0, r7
 800ac94:	3101      	adds	r1, #1
 800ac96:	f7ff ff79 	bl	800ab8c <_Balloc>
 800ac9a:	4680      	mov	r8, r0
 800ac9c:	b928      	cbnz	r0, 800acaa <__multadd+0x5a>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	21ba      	movs	r1, #186	@ 0xba
 800aca2:	4b0c      	ldr	r3, [pc, #48]	@ (800acd4 <__multadd+0x84>)
 800aca4:	480c      	ldr	r0, [pc, #48]	@ (800acd8 <__multadd+0x88>)
 800aca6:	f001 fc41 	bl	800c52c <__assert_func>
 800acaa:	6922      	ldr	r2, [r4, #16]
 800acac:	f104 010c 	add.w	r1, r4, #12
 800acb0:	3202      	adds	r2, #2
 800acb2:	0092      	lsls	r2, r2, #2
 800acb4:	300c      	adds	r0, #12
 800acb6:	f7fe fffa 	bl	8009cae <memcpy>
 800acba:	4621      	mov	r1, r4
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7ff ffa5 	bl	800ac0c <_Bfree>
 800acc2:	4644      	mov	r4, r8
 800acc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acc8:	3501      	adds	r5, #1
 800acca:	615e      	str	r6, [r3, #20]
 800accc:	6125      	str	r5, [r4, #16]
 800acce:	4620      	mov	r0, r4
 800acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd4:	0800d644 	.word	0x0800d644
 800acd8:	0800d655 	.word	0x0800d655

0800acdc <__s2b>:
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	4615      	mov	r5, r2
 800ace2:	2209      	movs	r2, #9
 800ace4:	461f      	mov	r7, r3
 800ace6:	3308      	adds	r3, #8
 800ace8:	460c      	mov	r4, r1
 800acea:	fb93 f3f2 	sdiv	r3, r3, r2
 800acee:	4606      	mov	r6, r0
 800acf0:	2201      	movs	r2, #1
 800acf2:	2100      	movs	r1, #0
 800acf4:	429a      	cmp	r2, r3
 800acf6:	db09      	blt.n	800ad0c <__s2b+0x30>
 800acf8:	4630      	mov	r0, r6
 800acfa:	f7ff ff47 	bl	800ab8c <_Balloc>
 800acfe:	b940      	cbnz	r0, 800ad12 <__s2b+0x36>
 800ad00:	4602      	mov	r2, r0
 800ad02:	21d3      	movs	r1, #211	@ 0xd3
 800ad04:	4b18      	ldr	r3, [pc, #96]	@ (800ad68 <__s2b+0x8c>)
 800ad06:	4819      	ldr	r0, [pc, #100]	@ (800ad6c <__s2b+0x90>)
 800ad08:	f001 fc10 	bl	800c52c <__assert_func>
 800ad0c:	0052      	lsls	r2, r2, #1
 800ad0e:	3101      	adds	r1, #1
 800ad10:	e7f0      	b.n	800acf4 <__s2b+0x18>
 800ad12:	9b08      	ldr	r3, [sp, #32]
 800ad14:	2d09      	cmp	r5, #9
 800ad16:	6143      	str	r3, [r0, #20]
 800ad18:	f04f 0301 	mov.w	r3, #1
 800ad1c:	6103      	str	r3, [r0, #16]
 800ad1e:	dd16      	ble.n	800ad4e <__s2b+0x72>
 800ad20:	f104 0909 	add.w	r9, r4, #9
 800ad24:	46c8      	mov	r8, r9
 800ad26:	442c      	add	r4, r5
 800ad28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	220a      	movs	r2, #10
 800ad30:	4630      	mov	r0, r6
 800ad32:	3b30      	subs	r3, #48	@ 0x30
 800ad34:	f7ff ff8c 	bl	800ac50 <__multadd>
 800ad38:	45a0      	cmp	r8, r4
 800ad3a:	d1f5      	bne.n	800ad28 <__s2b+0x4c>
 800ad3c:	f1a5 0408 	sub.w	r4, r5, #8
 800ad40:	444c      	add	r4, r9
 800ad42:	1b2d      	subs	r5, r5, r4
 800ad44:	1963      	adds	r3, r4, r5
 800ad46:	42bb      	cmp	r3, r7
 800ad48:	db04      	blt.n	800ad54 <__s2b+0x78>
 800ad4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad4e:	2509      	movs	r5, #9
 800ad50:	340a      	adds	r4, #10
 800ad52:	e7f6      	b.n	800ad42 <__s2b+0x66>
 800ad54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad58:	4601      	mov	r1, r0
 800ad5a:	220a      	movs	r2, #10
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	3b30      	subs	r3, #48	@ 0x30
 800ad60:	f7ff ff76 	bl	800ac50 <__multadd>
 800ad64:	e7ee      	b.n	800ad44 <__s2b+0x68>
 800ad66:	bf00      	nop
 800ad68:	0800d644 	.word	0x0800d644
 800ad6c:	0800d655 	.word	0x0800d655

0800ad70 <__hi0bits>:
 800ad70:	4603      	mov	r3, r0
 800ad72:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad76:	bf3a      	itte	cc
 800ad78:	0403      	lslcc	r3, r0, #16
 800ad7a:	2010      	movcc	r0, #16
 800ad7c:	2000      	movcs	r0, #0
 800ad7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad82:	bf3c      	itt	cc
 800ad84:	021b      	lslcc	r3, r3, #8
 800ad86:	3008      	addcc	r0, #8
 800ad88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad8c:	bf3c      	itt	cc
 800ad8e:	011b      	lslcc	r3, r3, #4
 800ad90:	3004      	addcc	r0, #4
 800ad92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad96:	bf3c      	itt	cc
 800ad98:	009b      	lslcc	r3, r3, #2
 800ad9a:	3002      	addcc	r0, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	db05      	blt.n	800adac <__hi0bits+0x3c>
 800ada0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ada4:	f100 0001 	add.w	r0, r0, #1
 800ada8:	bf08      	it	eq
 800adaa:	2020      	moveq	r0, #32
 800adac:	4770      	bx	lr

0800adae <__lo0bits>:
 800adae:	6803      	ldr	r3, [r0, #0]
 800adb0:	4602      	mov	r2, r0
 800adb2:	f013 0007 	ands.w	r0, r3, #7
 800adb6:	d00b      	beq.n	800add0 <__lo0bits+0x22>
 800adb8:	07d9      	lsls	r1, r3, #31
 800adba:	d421      	bmi.n	800ae00 <__lo0bits+0x52>
 800adbc:	0798      	lsls	r0, r3, #30
 800adbe:	bf49      	itett	mi
 800adc0:	085b      	lsrmi	r3, r3, #1
 800adc2:	089b      	lsrpl	r3, r3, #2
 800adc4:	2001      	movmi	r0, #1
 800adc6:	6013      	strmi	r3, [r2, #0]
 800adc8:	bf5c      	itt	pl
 800adca:	2002      	movpl	r0, #2
 800adcc:	6013      	strpl	r3, [r2, #0]
 800adce:	4770      	bx	lr
 800add0:	b299      	uxth	r1, r3
 800add2:	b909      	cbnz	r1, 800add8 <__lo0bits+0x2a>
 800add4:	2010      	movs	r0, #16
 800add6:	0c1b      	lsrs	r3, r3, #16
 800add8:	b2d9      	uxtb	r1, r3
 800adda:	b909      	cbnz	r1, 800ade0 <__lo0bits+0x32>
 800addc:	3008      	adds	r0, #8
 800adde:	0a1b      	lsrs	r3, r3, #8
 800ade0:	0719      	lsls	r1, r3, #28
 800ade2:	bf04      	itt	eq
 800ade4:	091b      	lsreq	r3, r3, #4
 800ade6:	3004      	addeq	r0, #4
 800ade8:	0799      	lsls	r1, r3, #30
 800adea:	bf04      	itt	eq
 800adec:	089b      	lsreq	r3, r3, #2
 800adee:	3002      	addeq	r0, #2
 800adf0:	07d9      	lsls	r1, r3, #31
 800adf2:	d403      	bmi.n	800adfc <__lo0bits+0x4e>
 800adf4:	085b      	lsrs	r3, r3, #1
 800adf6:	f100 0001 	add.w	r0, r0, #1
 800adfa:	d003      	beq.n	800ae04 <__lo0bits+0x56>
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	4770      	bx	lr
 800ae00:	2000      	movs	r0, #0
 800ae02:	4770      	bx	lr
 800ae04:	2020      	movs	r0, #32
 800ae06:	4770      	bx	lr

0800ae08 <__i2b>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	f7ff febd 	bl	800ab8c <_Balloc>
 800ae12:	4602      	mov	r2, r0
 800ae14:	b928      	cbnz	r0, 800ae22 <__i2b+0x1a>
 800ae16:	f240 1145 	movw	r1, #325	@ 0x145
 800ae1a:	4b04      	ldr	r3, [pc, #16]	@ (800ae2c <__i2b+0x24>)
 800ae1c:	4804      	ldr	r0, [pc, #16]	@ (800ae30 <__i2b+0x28>)
 800ae1e:	f001 fb85 	bl	800c52c <__assert_func>
 800ae22:	2301      	movs	r3, #1
 800ae24:	6144      	str	r4, [r0, #20]
 800ae26:	6103      	str	r3, [r0, #16]
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0800d644 	.word	0x0800d644
 800ae30:	0800d655 	.word	0x0800d655

0800ae34 <__multiply>:
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	4617      	mov	r7, r2
 800ae3a:	690a      	ldr	r2, [r1, #16]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	4689      	mov	r9, r1
 800ae40:	429a      	cmp	r2, r3
 800ae42:	bfa2      	ittt	ge
 800ae44:	463b      	movge	r3, r7
 800ae46:	460f      	movge	r7, r1
 800ae48:	4699      	movge	r9, r3
 800ae4a:	693d      	ldr	r5, [r7, #16]
 800ae4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	eb05 060a 	add.w	r6, r5, sl
 800ae58:	42b3      	cmp	r3, r6
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	bfb8      	it	lt
 800ae5e:	3101      	addlt	r1, #1
 800ae60:	f7ff fe94 	bl	800ab8c <_Balloc>
 800ae64:	b930      	cbnz	r0, 800ae74 <__multiply+0x40>
 800ae66:	4602      	mov	r2, r0
 800ae68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae6c:	4b40      	ldr	r3, [pc, #256]	@ (800af70 <__multiply+0x13c>)
 800ae6e:	4841      	ldr	r0, [pc, #260]	@ (800af74 <__multiply+0x140>)
 800ae70:	f001 fb5c 	bl	800c52c <__assert_func>
 800ae74:	f100 0414 	add.w	r4, r0, #20
 800ae78:	4623      	mov	r3, r4
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ae80:	4573      	cmp	r3, lr
 800ae82:	d320      	bcc.n	800aec6 <__multiply+0x92>
 800ae84:	f107 0814 	add.w	r8, r7, #20
 800ae88:	f109 0114 	add.w	r1, r9, #20
 800ae8c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ae90:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ae94:	9302      	str	r3, [sp, #8]
 800ae96:	1beb      	subs	r3, r5, r7
 800ae98:	3b15      	subs	r3, #21
 800ae9a:	f023 0303 	bic.w	r3, r3, #3
 800ae9e:	3304      	adds	r3, #4
 800aea0:	3715      	adds	r7, #21
 800aea2:	42bd      	cmp	r5, r7
 800aea4:	bf38      	it	cc
 800aea6:	2304      	movcc	r3, #4
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	9b02      	ldr	r3, [sp, #8]
 800aeac:	9103      	str	r1, [sp, #12]
 800aeae:	428b      	cmp	r3, r1
 800aeb0:	d80c      	bhi.n	800aecc <__multiply+0x98>
 800aeb2:	2e00      	cmp	r6, #0
 800aeb4:	dd03      	ble.n	800aebe <__multiply+0x8a>
 800aeb6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d055      	beq.n	800af6a <__multiply+0x136>
 800aebe:	6106      	str	r6, [r0, #16]
 800aec0:	b005      	add	sp, #20
 800aec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec6:	f843 2b04 	str.w	r2, [r3], #4
 800aeca:	e7d9      	b.n	800ae80 <__multiply+0x4c>
 800aecc:	f8b1 a000 	ldrh.w	sl, [r1]
 800aed0:	f1ba 0f00 	cmp.w	sl, #0
 800aed4:	d01f      	beq.n	800af16 <__multiply+0xe2>
 800aed6:	46c4      	mov	ip, r8
 800aed8:	46a1      	mov	r9, r4
 800aeda:	2700      	movs	r7, #0
 800aedc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aee0:	f8d9 3000 	ldr.w	r3, [r9]
 800aee4:	fa1f fb82 	uxth.w	fp, r2
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	fb0a 330b 	mla	r3, sl, fp, r3
 800aeee:	443b      	add	r3, r7
 800aef0:	f8d9 7000 	ldr.w	r7, [r9]
 800aef4:	0c12      	lsrs	r2, r2, #16
 800aef6:	0c3f      	lsrs	r7, r7, #16
 800aef8:	fb0a 7202 	mla	r2, sl, r2, r7
 800aefc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800af00:	b29b      	uxth	r3, r3
 800af02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af06:	4565      	cmp	r5, ip
 800af08:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800af0c:	f849 3b04 	str.w	r3, [r9], #4
 800af10:	d8e4      	bhi.n	800aedc <__multiply+0xa8>
 800af12:	9b01      	ldr	r3, [sp, #4]
 800af14:	50e7      	str	r7, [r4, r3]
 800af16:	9b03      	ldr	r3, [sp, #12]
 800af18:	3104      	adds	r1, #4
 800af1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af1e:	f1b9 0f00 	cmp.w	r9, #0
 800af22:	d020      	beq.n	800af66 <__multiply+0x132>
 800af24:	4647      	mov	r7, r8
 800af26:	46a4      	mov	ip, r4
 800af28:	f04f 0a00 	mov.w	sl, #0
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	f8b7 b000 	ldrh.w	fp, [r7]
 800af32:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800af36:	b29b      	uxth	r3, r3
 800af38:	fb09 220b 	mla	r2, r9, fp, r2
 800af3c:	4452      	add	r2, sl
 800af3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af42:	f84c 3b04 	str.w	r3, [ip], #4
 800af46:	f857 3b04 	ldr.w	r3, [r7], #4
 800af4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af4e:	f8bc 3000 	ldrh.w	r3, [ip]
 800af52:	42bd      	cmp	r5, r7
 800af54:	fb09 330a 	mla	r3, r9, sl, r3
 800af58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800af5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af60:	d8e5      	bhi.n	800af2e <__multiply+0xfa>
 800af62:	9a01      	ldr	r2, [sp, #4]
 800af64:	50a3      	str	r3, [r4, r2]
 800af66:	3404      	adds	r4, #4
 800af68:	e79f      	b.n	800aeaa <__multiply+0x76>
 800af6a:	3e01      	subs	r6, #1
 800af6c:	e7a1      	b.n	800aeb2 <__multiply+0x7e>
 800af6e:	bf00      	nop
 800af70:	0800d644 	.word	0x0800d644
 800af74:	0800d655 	.word	0x0800d655

0800af78 <__pow5mult>:
 800af78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af7c:	4615      	mov	r5, r2
 800af7e:	f012 0203 	ands.w	r2, r2, #3
 800af82:	4607      	mov	r7, r0
 800af84:	460e      	mov	r6, r1
 800af86:	d007      	beq.n	800af98 <__pow5mult+0x20>
 800af88:	4c25      	ldr	r4, [pc, #148]	@ (800b020 <__pow5mult+0xa8>)
 800af8a:	3a01      	subs	r2, #1
 800af8c:	2300      	movs	r3, #0
 800af8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af92:	f7ff fe5d 	bl	800ac50 <__multadd>
 800af96:	4606      	mov	r6, r0
 800af98:	10ad      	asrs	r5, r5, #2
 800af9a:	d03d      	beq.n	800b018 <__pow5mult+0xa0>
 800af9c:	69fc      	ldr	r4, [r7, #28]
 800af9e:	b97c      	cbnz	r4, 800afc0 <__pow5mult+0x48>
 800afa0:	2010      	movs	r0, #16
 800afa2:	f7ff fd3d 	bl	800aa20 <malloc>
 800afa6:	4602      	mov	r2, r0
 800afa8:	61f8      	str	r0, [r7, #28]
 800afaa:	b928      	cbnz	r0, 800afb8 <__pow5mult+0x40>
 800afac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800afb0:	4b1c      	ldr	r3, [pc, #112]	@ (800b024 <__pow5mult+0xac>)
 800afb2:	481d      	ldr	r0, [pc, #116]	@ (800b028 <__pow5mult+0xb0>)
 800afb4:	f001 faba 	bl	800c52c <__assert_func>
 800afb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afbc:	6004      	str	r4, [r0, #0]
 800afbe:	60c4      	str	r4, [r0, #12]
 800afc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800afc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afc8:	b94c      	cbnz	r4, 800afde <__pow5mult+0x66>
 800afca:	f240 2171 	movw	r1, #625	@ 0x271
 800afce:	4638      	mov	r0, r7
 800afd0:	f7ff ff1a 	bl	800ae08 <__i2b>
 800afd4:	2300      	movs	r3, #0
 800afd6:	4604      	mov	r4, r0
 800afd8:	f8c8 0008 	str.w	r0, [r8, #8]
 800afdc:	6003      	str	r3, [r0, #0]
 800afde:	f04f 0900 	mov.w	r9, #0
 800afe2:	07eb      	lsls	r3, r5, #31
 800afe4:	d50a      	bpl.n	800affc <__pow5mult+0x84>
 800afe6:	4631      	mov	r1, r6
 800afe8:	4622      	mov	r2, r4
 800afea:	4638      	mov	r0, r7
 800afec:	f7ff ff22 	bl	800ae34 <__multiply>
 800aff0:	4680      	mov	r8, r0
 800aff2:	4631      	mov	r1, r6
 800aff4:	4638      	mov	r0, r7
 800aff6:	f7ff fe09 	bl	800ac0c <_Bfree>
 800affa:	4646      	mov	r6, r8
 800affc:	106d      	asrs	r5, r5, #1
 800affe:	d00b      	beq.n	800b018 <__pow5mult+0xa0>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	b938      	cbnz	r0, 800b014 <__pow5mult+0x9c>
 800b004:	4622      	mov	r2, r4
 800b006:	4621      	mov	r1, r4
 800b008:	4638      	mov	r0, r7
 800b00a:	f7ff ff13 	bl	800ae34 <__multiply>
 800b00e:	6020      	str	r0, [r4, #0]
 800b010:	f8c0 9000 	str.w	r9, [r0]
 800b014:	4604      	mov	r4, r0
 800b016:	e7e4      	b.n	800afe2 <__pow5mult+0x6a>
 800b018:	4630      	mov	r0, r6
 800b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01e:	bf00      	nop
 800b020:	0800d768 	.word	0x0800d768
 800b024:	0800d5d5 	.word	0x0800d5d5
 800b028:	0800d655 	.word	0x0800d655

0800b02c <__lshift>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	460c      	mov	r4, r1
 800b032:	4607      	mov	r7, r0
 800b034:	4691      	mov	r9, r2
 800b036:	6923      	ldr	r3, [r4, #16]
 800b038:	6849      	ldr	r1, [r1, #4]
 800b03a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b044:	f108 0601 	add.w	r6, r8, #1
 800b048:	42b3      	cmp	r3, r6
 800b04a:	db0b      	blt.n	800b064 <__lshift+0x38>
 800b04c:	4638      	mov	r0, r7
 800b04e:	f7ff fd9d 	bl	800ab8c <_Balloc>
 800b052:	4605      	mov	r5, r0
 800b054:	b948      	cbnz	r0, 800b06a <__lshift+0x3e>
 800b056:	4602      	mov	r2, r0
 800b058:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b05c:	4b27      	ldr	r3, [pc, #156]	@ (800b0fc <__lshift+0xd0>)
 800b05e:	4828      	ldr	r0, [pc, #160]	@ (800b100 <__lshift+0xd4>)
 800b060:	f001 fa64 	bl	800c52c <__assert_func>
 800b064:	3101      	adds	r1, #1
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	e7ee      	b.n	800b048 <__lshift+0x1c>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f100 0114 	add.w	r1, r0, #20
 800b070:	f100 0210 	add.w	r2, r0, #16
 800b074:	4618      	mov	r0, r3
 800b076:	4553      	cmp	r3, sl
 800b078:	db33      	blt.n	800b0e2 <__lshift+0xb6>
 800b07a:	6920      	ldr	r0, [r4, #16]
 800b07c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b080:	f104 0314 	add.w	r3, r4, #20
 800b084:	f019 091f 	ands.w	r9, r9, #31
 800b088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b08c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b090:	d02b      	beq.n	800b0ea <__lshift+0xbe>
 800b092:	468a      	mov	sl, r1
 800b094:	2200      	movs	r2, #0
 800b096:	f1c9 0e20 	rsb	lr, r9, #32
 800b09a:	6818      	ldr	r0, [r3, #0]
 800b09c:	fa00 f009 	lsl.w	r0, r0, r9
 800b0a0:	4310      	orrs	r0, r2
 800b0a2:	f84a 0b04 	str.w	r0, [sl], #4
 800b0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0aa:	459c      	cmp	ip, r3
 800b0ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0b0:	d8f3      	bhi.n	800b09a <__lshift+0x6e>
 800b0b2:	ebac 0304 	sub.w	r3, ip, r4
 800b0b6:	3b15      	subs	r3, #21
 800b0b8:	f023 0303 	bic.w	r3, r3, #3
 800b0bc:	3304      	adds	r3, #4
 800b0be:	f104 0015 	add.w	r0, r4, #21
 800b0c2:	4560      	cmp	r0, ip
 800b0c4:	bf88      	it	hi
 800b0c6:	2304      	movhi	r3, #4
 800b0c8:	50ca      	str	r2, [r1, r3]
 800b0ca:	b10a      	cbz	r2, 800b0d0 <__lshift+0xa4>
 800b0cc:	f108 0602 	add.w	r6, r8, #2
 800b0d0:	3e01      	subs	r6, #1
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	612e      	str	r6, [r5, #16]
 800b0d8:	f7ff fd98 	bl	800ac0c <_Bfree>
 800b0dc:	4628      	mov	r0, r5
 800b0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	e7c5      	b.n	800b076 <__lshift+0x4a>
 800b0ea:	3904      	subs	r1, #4
 800b0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f0:	459c      	cmp	ip, r3
 800b0f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0f6:	d8f9      	bhi.n	800b0ec <__lshift+0xc0>
 800b0f8:	e7ea      	b.n	800b0d0 <__lshift+0xa4>
 800b0fa:	bf00      	nop
 800b0fc:	0800d644 	.word	0x0800d644
 800b100:	0800d655 	.word	0x0800d655

0800b104 <__mcmp>:
 800b104:	4603      	mov	r3, r0
 800b106:	690a      	ldr	r2, [r1, #16]
 800b108:	6900      	ldr	r0, [r0, #16]
 800b10a:	b530      	push	{r4, r5, lr}
 800b10c:	1a80      	subs	r0, r0, r2
 800b10e:	d10e      	bne.n	800b12e <__mcmp+0x2a>
 800b110:	3314      	adds	r3, #20
 800b112:	3114      	adds	r1, #20
 800b114:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b118:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b11c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b124:	4295      	cmp	r5, r2
 800b126:	d003      	beq.n	800b130 <__mcmp+0x2c>
 800b128:	d205      	bcs.n	800b136 <__mcmp+0x32>
 800b12a:	f04f 30ff 	mov.w	r0, #4294967295
 800b12e:	bd30      	pop	{r4, r5, pc}
 800b130:	42a3      	cmp	r3, r4
 800b132:	d3f3      	bcc.n	800b11c <__mcmp+0x18>
 800b134:	e7fb      	b.n	800b12e <__mcmp+0x2a>
 800b136:	2001      	movs	r0, #1
 800b138:	e7f9      	b.n	800b12e <__mcmp+0x2a>
	...

0800b13c <__mdiff>:
 800b13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	4689      	mov	r9, r1
 800b142:	4606      	mov	r6, r0
 800b144:	4611      	mov	r1, r2
 800b146:	4648      	mov	r0, r9
 800b148:	4614      	mov	r4, r2
 800b14a:	f7ff ffdb 	bl	800b104 <__mcmp>
 800b14e:	1e05      	subs	r5, r0, #0
 800b150:	d112      	bne.n	800b178 <__mdiff+0x3c>
 800b152:	4629      	mov	r1, r5
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff fd19 	bl	800ab8c <_Balloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	b928      	cbnz	r0, 800b16a <__mdiff+0x2e>
 800b15e:	f240 2137 	movw	r1, #567	@ 0x237
 800b162:	4b3e      	ldr	r3, [pc, #248]	@ (800b25c <__mdiff+0x120>)
 800b164:	483e      	ldr	r0, [pc, #248]	@ (800b260 <__mdiff+0x124>)
 800b166:	f001 f9e1 	bl	800c52c <__assert_func>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b170:	4610      	mov	r0, r2
 800b172:	b003      	add	sp, #12
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	bfbc      	itt	lt
 800b17a:	464b      	movlt	r3, r9
 800b17c:	46a1      	movlt	r9, r4
 800b17e:	4630      	mov	r0, r6
 800b180:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b184:	bfba      	itte	lt
 800b186:	461c      	movlt	r4, r3
 800b188:	2501      	movlt	r5, #1
 800b18a:	2500      	movge	r5, #0
 800b18c:	f7ff fcfe 	bl	800ab8c <_Balloc>
 800b190:	4602      	mov	r2, r0
 800b192:	b918      	cbnz	r0, 800b19c <__mdiff+0x60>
 800b194:	f240 2145 	movw	r1, #581	@ 0x245
 800b198:	4b30      	ldr	r3, [pc, #192]	@ (800b25c <__mdiff+0x120>)
 800b19a:	e7e3      	b.n	800b164 <__mdiff+0x28>
 800b19c:	f100 0b14 	add.w	fp, r0, #20
 800b1a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b1a4:	f109 0310 	add.w	r3, r9, #16
 800b1a8:	60c5      	str	r5, [r0, #12]
 800b1aa:	f04f 0c00 	mov.w	ip, #0
 800b1ae:	f109 0514 	add.w	r5, r9, #20
 800b1b2:	46d9      	mov	r9, fp
 800b1b4:	6926      	ldr	r6, [r4, #16]
 800b1b6:	f104 0e14 	add.w	lr, r4, #20
 800b1ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1ce:	b281      	uxth	r1, r0
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	fa1f f38a 	uxth.w	r3, sl
 800b1d6:	1a5b      	subs	r3, r3, r1
 800b1d8:	0c00      	lsrs	r0, r0, #16
 800b1da:	4463      	add	r3, ip
 800b1dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1ea:	4576      	cmp	r6, lr
 800b1ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1f0:	f849 3b04 	str.w	r3, [r9], #4
 800b1f4:	d8e6      	bhi.n	800b1c4 <__mdiff+0x88>
 800b1f6:	1b33      	subs	r3, r6, r4
 800b1f8:	3b15      	subs	r3, #21
 800b1fa:	f023 0303 	bic.w	r3, r3, #3
 800b1fe:	3415      	adds	r4, #21
 800b200:	3304      	adds	r3, #4
 800b202:	42a6      	cmp	r6, r4
 800b204:	bf38      	it	cc
 800b206:	2304      	movcc	r3, #4
 800b208:	441d      	add	r5, r3
 800b20a:	445b      	add	r3, fp
 800b20c:	461e      	mov	r6, r3
 800b20e:	462c      	mov	r4, r5
 800b210:	4544      	cmp	r4, r8
 800b212:	d30e      	bcc.n	800b232 <__mdiff+0xf6>
 800b214:	f108 0103 	add.w	r1, r8, #3
 800b218:	1b49      	subs	r1, r1, r5
 800b21a:	f021 0103 	bic.w	r1, r1, #3
 800b21e:	3d03      	subs	r5, #3
 800b220:	45a8      	cmp	r8, r5
 800b222:	bf38      	it	cc
 800b224:	2100      	movcc	r1, #0
 800b226:	440b      	add	r3, r1
 800b228:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b22c:	b199      	cbz	r1, 800b256 <__mdiff+0x11a>
 800b22e:	6117      	str	r7, [r2, #16]
 800b230:	e79e      	b.n	800b170 <__mdiff+0x34>
 800b232:	46e6      	mov	lr, ip
 800b234:	f854 1b04 	ldr.w	r1, [r4], #4
 800b238:	fa1f fc81 	uxth.w	ip, r1
 800b23c:	44f4      	add	ip, lr
 800b23e:	0c08      	lsrs	r0, r1, #16
 800b240:	4471      	add	r1, lr
 800b242:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b246:	b289      	uxth	r1, r1
 800b248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b24c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b250:	f846 1b04 	str.w	r1, [r6], #4
 800b254:	e7dc      	b.n	800b210 <__mdiff+0xd4>
 800b256:	3f01      	subs	r7, #1
 800b258:	e7e6      	b.n	800b228 <__mdiff+0xec>
 800b25a:	bf00      	nop
 800b25c:	0800d644 	.word	0x0800d644
 800b260:	0800d655 	.word	0x0800d655

0800b264 <__ulp>:
 800b264:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a0 <__ulp+0x3c>)
 800b266:	400b      	ands	r3, r1
 800b268:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dc08      	bgt.n	800b282 <__ulp+0x1e>
 800b270:	425b      	negs	r3, r3
 800b272:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b276:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b27a:	da04      	bge.n	800b286 <__ulp+0x22>
 800b27c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b280:	4113      	asrs	r3, r2
 800b282:	2200      	movs	r2, #0
 800b284:	e008      	b.n	800b298 <__ulp+0x34>
 800b286:	f1a2 0314 	sub.w	r3, r2, #20
 800b28a:	2b1e      	cmp	r3, #30
 800b28c:	bfd6      	itet	le
 800b28e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b292:	2201      	movgt	r2, #1
 800b294:	40da      	lsrle	r2, r3
 800b296:	2300      	movs	r3, #0
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	7ff00000 	.word	0x7ff00000

0800b2a4 <__b2d>:
 800b2a4:	6902      	ldr	r2, [r0, #16]
 800b2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a8:	f100 0614 	add.w	r6, r0, #20
 800b2ac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b2b0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b2b4:	4f1e      	ldr	r7, [pc, #120]	@ (800b330 <__b2d+0x8c>)
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f7ff fd5a 	bl	800ad70 <__hi0bits>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	f1c0 0020 	rsb	r0, r0, #32
 800b2c2:	2b0a      	cmp	r3, #10
 800b2c4:	f1a2 0504 	sub.w	r5, r2, #4
 800b2c8:	6008      	str	r0, [r1, #0]
 800b2ca:	dc12      	bgt.n	800b2f2 <__b2d+0x4e>
 800b2cc:	42ae      	cmp	r6, r5
 800b2ce:	bf2c      	ite	cs
 800b2d0:	2200      	movcs	r2, #0
 800b2d2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b2d6:	f1c3 0c0b 	rsb	ip, r3, #11
 800b2da:	3315      	adds	r3, #21
 800b2dc:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b2e0:	fa04 f303 	lsl.w	r3, r4, r3
 800b2e4:	fa22 f20c 	lsr.w	r2, r2, ip
 800b2e8:	ea4e 0107 	orr.w	r1, lr, r7
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f2:	42ae      	cmp	r6, r5
 800b2f4:	bf36      	itet	cc
 800b2f6:	f1a2 0508 	subcc.w	r5, r2, #8
 800b2fa:	2200      	movcs	r2, #0
 800b2fc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b300:	3b0b      	subs	r3, #11
 800b302:	d012      	beq.n	800b32a <__b2d+0x86>
 800b304:	f1c3 0720 	rsb	r7, r3, #32
 800b308:	fa22 f107 	lsr.w	r1, r2, r7
 800b30c:	409c      	lsls	r4, r3
 800b30e:	430c      	orrs	r4, r1
 800b310:	42b5      	cmp	r5, r6
 800b312:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b316:	bf94      	ite	ls
 800b318:	2400      	movls	r4, #0
 800b31a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b31e:	409a      	lsls	r2, r3
 800b320:	40fc      	lsrs	r4, r7
 800b322:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b326:	4322      	orrs	r2, r4
 800b328:	e7e1      	b.n	800b2ee <__b2d+0x4a>
 800b32a:	ea44 0107 	orr.w	r1, r4, r7
 800b32e:	e7de      	b.n	800b2ee <__b2d+0x4a>
 800b330:	3ff00000 	.word	0x3ff00000

0800b334 <__d2b>:
 800b334:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b338:	2101      	movs	r1, #1
 800b33a:	4690      	mov	r8, r2
 800b33c:	4699      	mov	r9, r3
 800b33e:	9e08      	ldr	r6, [sp, #32]
 800b340:	f7ff fc24 	bl	800ab8c <_Balloc>
 800b344:	4604      	mov	r4, r0
 800b346:	b930      	cbnz	r0, 800b356 <__d2b+0x22>
 800b348:	4602      	mov	r2, r0
 800b34a:	f240 310f 	movw	r1, #783	@ 0x30f
 800b34e:	4b23      	ldr	r3, [pc, #140]	@ (800b3dc <__d2b+0xa8>)
 800b350:	4823      	ldr	r0, [pc, #140]	@ (800b3e0 <__d2b+0xac>)
 800b352:	f001 f8eb 	bl	800c52c <__assert_func>
 800b356:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b35a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b35e:	b10d      	cbz	r5, 800b364 <__d2b+0x30>
 800b360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	f1b8 0300 	subs.w	r3, r8, #0
 800b36a:	d024      	beq.n	800b3b6 <__d2b+0x82>
 800b36c:	4668      	mov	r0, sp
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	f7ff fd1d 	bl	800adae <__lo0bits>
 800b374:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b378:	b1d8      	cbz	r0, 800b3b2 <__d2b+0x7e>
 800b37a:	f1c0 0320 	rsb	r3, r0, #32
 800b37e:	fa02 f303 	lsl.w	r3, r2, r3
 800b382:	430b      	orrs	r3, r1
 800b384:	40c2      	lsrs	r2, r0
 800b386:	6163      	str	r3, [r4, #20]
 800b388:	9201      	str	r2, [sp, #4]
 800b38a:	9b01      	ldr	r3, [sp, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bf0c      	ite	eq
 800b390:	2201      	moveq	r2, #1
 800b392:	2202      	movne	r2, #2
 800b394:	61a3      	str	r3, [r4, #24]
 800b396:	6122      	str	r2, [r4, #16]
 800b398:	b1ad      	cbz	r5, 800b3c6 <__d2b+0x92>
 800b39a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b39e:	4405      	add	r5, r0
 800b3a0:	6035      	str	r5, [r6, #0]
 800b3a2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a8:	6018      	str	r0, [r3, #0]
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	b002      	add	sp, #8
 800b3ae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b3b2:	6161      	str	r1, [r4, #20]
 800b3b4:	e7e9      	b.n	800b38a <__d2b+0x56>
 800b3b6:	a801      	add	r0, sp, #4
 800b3b8:	f7ff fcf9 	bl	800adae <__lo0bits>
 800b3bc:	9b01      	ldr	r3, [sp, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	6163      	str	r3, [r4, #20]
 800b3c2:	3020      	adds	r0, #32
 800b3c4:	e7e7      	b.n	800b396 <__d2b+0x62>
 800b3c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3ce:	6030      	str	r0, [r6, #0]
 800b3d0:	6918      	ldr	r0, [r3, #16]
 800b3d2:	f7ff fccd 	bl	800ad70 <__hi0bits>
 800b3d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3da:	e7e4      	b.n	800b3a6 <__d2b+0x72>
 800b3dc:	0800d644 	.word	0x0800d644
 800b3e0:	0800d655 	.word	0x0800d655

0800b3e4 <__ratio>:
 800b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	e9cd 1000 	strd	r1, r0, [sp]
 800b3ee:	a902      	add	r1, sp, #8
 800b3f0:	f7ff ff58 	bl	800b2a4 <__b2d>
 800b3f4:	468b      	mov	fp, r1
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	9800      	ldr	r0, [sp, #0]
 800b3fc:	a903      	add	r1, sp, #12
 800b3fe:	f7ff ff51 	bl	800b2a4 <__b2d>
 800b402:	460d      	mov	r5, r1
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	4689      	mov	r9, r1
 800b408:	6919      	ldr	r1, [r3, #16]
 800b40a:	9b00      	ldr	r3, [sp, #0]
 800b40c:	4604      	mov	r4, r0
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	4630      	mov	r0, r6
 800b412:	1ac9      	subs	r1, r1, r3
 800b414:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b418:	1a9b      	subs	r3, r3, r2
 800b41a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfcd      	iteet	gt
 800b422:	463a      	movgt	r2, r7
 800b424:	462a      	movle	r2, r5
 800b426:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b42a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b42e:	bfd8      	it	le
 800b430:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b434:	464b      	mov	r3, r9
 800b436:	4622      	mov	r2, r4
 800b438:	4659      	mov	r1, fp
 800b43a:	f7f5 fa2b 	bl	8000894 <__aeabi_ddiv>
 800b43e:	b005      	add	sp, #20
 800b440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b444 <__copybits>:
 800b444:	3901      	subs	r1, #1
 800b446:	b570      	push	{r4, r5, r6, lr}
 800b448:	1149      	asrs	r1, r1, #5
 800b44a:	6914      	ldr	r4, [r2, #16]
 800b44c:	3101      	adds	r1, #1
 800b44e:	f102 0314 	add.w	r3, r2, #20
 800b452:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b45a:	1f05      	subs	r5, r0, #4
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	d30c      	bcc.n	800b47a <__copybits+0x36>
 800b460:	1aa3      	subs	r3, r4, r2
 800b462:	3b11      	subs	r3, #17
 800b464:	f023 0303 	bic.w	r3, r3, #3
 800b468:	3211      	adds	r2, #17
 800b46a:	42a2      	cmp	r2, r4
 800b46c:	bf88      	it	hi
 800b46e:	2300      	movhi	r3, #0
 800b470:	4418      	add	r0, r3
 800b472:	2300      	movs	r3, #0
 800b474:	4288      	cmp	r0, r1
 800b476:	d305      	bcc.n	800b484 <__copybits+0x40>
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b47e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b482:	e7eb      	b.n	800b45c <__copybits+0x18>
 800b484:	f840 3b04 	str.w	r3, [r0], #4
 800b488:	e7f4      	b.n	800b474 <__copybits+0x30>

0800b48a <__any_on>:
 800b48a:	f100 0214 	add.w	r2, r0, #20
 800b48e:	6900      	ldr	r0, [r0, #16]
 800b490:	114b      	asrs	r3, r1, #5
 800b492:	4298      	cmp	r0, r3
 800b494:	b510      	push	{r4, lr}
 800b496:	db11      	blt.n	800b4bc <__any_on+0x32>
 800b498:	dd0a      	ble.n	800b4b0 <__any_on+0x26>
 800b49a:	f011 011f 	ands.w	r1, r1, #31
 800b49e:	d007      	beq.n	800b4b0 <__any_on+0x26>
 800b4a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4a4:	fa24 f001 	lsr.w	r0, r4, r1
 800b4a8:	fa00 f101 	lsl.w	r1, r0, r1
 800b4ac:	428c      	cmp	r4, r1
 800b4ae:	d10b      	bne.n	800b4c8 <__any_on+0x3e>
 800b4b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d803      	bhi.n	800b4c0 <__any_on+0x36>
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	bd10      	pop	{r4, pc}
 800b4bc:	4603      	mov	r3, r0
 800b4be:	e7f7      	b.n	800b4b0 <__any_on+0x26>
 800b4c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	d0f5      	beq.n	800b4b4 <__any_on+0x2a>
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	e7f6      	b.n	800b4ba <__any_on+0x30>

0800b4cc <sulp>:
 800b4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	4690      	mov	r8, r2
 800b4d4:	f7ff fec6 	bl	800b264 <__ulp>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	f1b8 0f00 	cmp.w	r8, #0
 800b4e0:	d011      	beq.n	800b506 <sulp+0x3a>
 800b4e2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b4e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	dd0b      	ble.n	800b506 <sulp+0x3a>
 800b4ee:	2400      	movs	r4, #0
 800b4f0:	051b      	lsls	r3, r3, #20
 800b4f2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b4f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	f7f5 f89f 	bl	8000640 <__aeabi_dmul>
 800b502:	4604      	mov	r4, r0
 800b504:	460d      	mov	r5, r1
 800b506:	4620      	mov	r0, r4
 800b508:	4629      	mov	r1, r5
 800b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b510 <_strtod_l>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	b09f      	sub	sp, #124	@ 0x7c
 800b516:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b518:	2200      	movs	r2, #0
 800b51a:	460c      	mov	r4, r1
 800b51c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b51e:	f04f 0a00 	mov.w	sl, #0
 800b522:	f04f 0b00 	mov.w	fp, #0
 800b526:	460a      	mov	r2, r1
 800b528:	9005      	str	r0, [sp, #20]
 800b52a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b52c:	7811      	ldrb	r1, [r2, #0]
 800b52e:	292b      	cmp	r1, #43	@ 0x2b
 800b530:	d048      	beq.n	800b5c4 <_strtod_l+0xb4>
 800b532:	d836      	bhi.n	800b5a2 <_strtod_l+0x92>
 800b534:	290d      	cmp	r1, #13
 800b536:	d830      	bhi.n	800b59a <_strtod_l+0x8a>
 800b538:	2908      	cmp	r1, #8
 800b53a:	d830      	bhi.n	800b59e <_strtod_l+0x8e>
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d039      	beq.n	800b5b4 <_strtod_l+0xa4>
 800b540:	2200      	movs	r2, #0
 800b542:	920e      	str	r2, [sp, #56]	@ 0x38
 800b544:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b546:	782a      	ldrb	r2, [r5, #0]
 800b548:	2a30      	cmp	r2, #48	@ 0x30
 800b54a:	f040 80b0 	bne.w	800b6ae <_strtod_l+0x19e>
 800b54e:	786a      	ldrb	r2, [r5, #1]
 800b550:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b554:	2a58      	cmp	r2, #88	@ 0x58
 800b556:	d16c      	bne.n	800b632 <_strtod_l+0x122>
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b55c:	4a8f      	ldr	r2, [pc, #572]	@ (800b79c <_strtod_l+0x28c>)
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	ab1a      	add	r3, sp, #104	@ 0x68
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	9805      	ldr	r0, [sp, #20]
 800b566:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b568:	a919      	add	r1, sp, #100	@ 0x64
 800b56a:	f001 f879 	bl	800c660 <__gethex>
 800b56e:	f010 060f 	ands.w	r6, r0, #15
 800b572:	4604      	mov	r4, r0
 800b574:	d005      	beq.n	800b582 <_strtod_l+0x72>
 800b576:	2e06      	cmp	r6, #6
 800b578:	d126      	bne.n	800b5c8 <_strtod_l+0xb8>
 800b57a:	2300      	movs	r3, #0
 800b57c:	3501      	adds	r5, #1
 800b57e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b580:	930e      	str	r3, [sp, #56]	@ 0x38
 800b582:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b584:	2b00      	cmp	r3, #0
 800b586:	f040 8582 	bne.w	800c08e <_strtod_l+0xb7e>
 800b58a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b58c:	b1bb      	cbz	r3, 800b5be <_strtod_l+0xae>
 800b58e:	4650      	mov	r0, sl
 800b590:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b594:	b01f      	add	sp, #124	@ 0x7c
 800b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59a:	2920      	cmp	r1, #32
 800b59c:	d1d0      	bne.n	800b540 <_strtod_l+0x30>
 800b59e:	3201      	adds	r2, #1
 800b5a0:	e7c3      	b.n	800b52a <_strtod_l+0x1a>
 800b5a2:	292d      	cmp	r1, #45	@ 0x2d
 800b5a4:	d1cc      	bne.n	800b540 <_strtod_l+0x30>
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	910e      	str	r1, [sp, #56]	@ 0x38
 800b5aa:	1c51      	adds	r1, r2, #1
 800b5ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5ae:	7852      	ldrb	r2, [r2, #1]
 800b5b0:	2a00      	cmp	r2, #0
 800b5b2:	d1c7      	bne.n	800b544 <_strtod_l+0x34>
 800b5b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5b6:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f040 8566 	bne.w	800c08a <_strtod_l+0xb7a>
 800b5be:	4650      	mov	r0, sl
 800b5c0:	4659      	mov	r1, fp
 800b5c2:	e7e7      	b.n	800b594 <_strtod_l+0x84>
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	e7ef      	b.n	800b5a8 <_strtod_l+0x98>
 800b5c8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b5ca:	b13a      	cbz	r2, 800b5dc <_strtod_l+0xcc>
 800b5cc:	2135      	movs	r1, #53	@ 0x35
 800b5ce:	a81c      	add	r0, sp, #112	@ 0x70
 800b5d0:	f7ff ff38 	bl	800b444 <__copybits>
 800b5d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5d6:	9805      	ldr	r0, [sp, #20]
 800b5d8:	f7ff fb18 	bl	800ac0c <_Bfree>
 800b5dc:	3e01      	subs	r6, #1
 800b5de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b5e0:	2e04      	cmp	r6, #4
 800b5e2:	d806      	bhi.n	800b5f2 <_strtod_l+0xe2>
 800b5e4:	e8df f006 	tbb	[pc, r6]
 800b5e8:	201d0314 	.word	0x201d0314
 800b5ec:	14          	.byte	0x14
 800b5ed:	00          	.byte	0x00
 800b5ee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b5f2:	05e1      	lsls	r1, r4, #23
 800b5f4:	bf48      	it	mi
 800b5f6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b5fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5fe:	0d1b      	lsrs	r3, r3, #20
 800b600:	051b      	lsls	r3, r3, #20
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1bd      	bne.n	800b582 <_strtod_l+0x72>
 800b606:	f7fe fb17 	bl	8009c38 <__errno>
 800b60a:	2322      	movs	r3, #34	@ 0x22
 800b60c:	6003      	str	r3, [r0, #0]
 800b60e:	e7b8      	b.n	800b582 <_strtod_l+0x72>
 800b610:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b614:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b618:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b61c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b620:	e7e7      	b.n	800b5f2 <_strtod_l+0xe2>
 800b622:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b7a0 <_strtod_l+0x290>
 800b626:	e7e4      	b.n	800b5f2 <_strtod_l+0xe2>
 800b628:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b62c:	f04f 3aff 	mov.w	sl, #4294967295
 800b630:	e7df      	b.n	800b5f2 <_strtod_l+0xe2>
 800b632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	9219      	str	r2, [sp, #100]	@ 0x64
 800b638:	785b      	ldrb	r3, [r3, #1]
 800b63a:	2b30      	cmp	r3, #48	@ 0x30
 800b63c:	d0f9      	beq.n	800b632 <_strtod_l+0x122>
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d09f      	beq.n	800b582 <_strtod_l+0x72>
 800b642:	2301      	movs	r3, #1
 800b644:	2700      	movs	r7, #0
 800b646:	220a      	movs	r2, #10
 800b648:	46b9      	mov	r9, r7
 800b64a:	9308      	str	r3, [sp, #32]
 800b64c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b64e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b650:	930c      	str	r3, [sp, #48]	@ 0x30
 800b652:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b654:	7805      	ldrb	r5, [r0, #0]
 800b656:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b65a:	b2d9      	uxtb	r1, r3
 800b65c:	2909      	cmp	r1, #9
 800b65e:	d928      	bls.n	800b6b2 <_strtod_l+0x1a2>
 800b660:	2201      	movs	r2, #1
 800b662:	4950      	ldr	r1, [pc, #320]	@ (800b7a4 <_strtod_l+0x294>)
 800b664:	f7fe fa75 	bl	8009b52 <strncmp>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d032      	beq.n	800b6d2 <_strtod_l+0x1c2>
 800b66c:	2000      	movs	r0, #0
 800b66e:	462a      	mov	r2, r5
 800b670:	4603      	mov	r3, r0
 800b672:	464d      	mov	r5, r9
 800b674:	900a      	str	r0, [sp, #40]	@ 0x28
 800b676:	2a65      	cmp	r2, #101	@ 0x65
 800b678:	d001      	beq.n	800b67e <_strtod_l+0x16e>
 800b67a:	2a45      	cmp	r2, #69	@ 0x45
 800b67c:	d114      	bne.n	800b6a8 <_strtod_l+0x198>
 800b67e:	b91d      	cbnz	r5, 800b688 <_strtod_l+0x178>
 800b680:	9a08      	ldr	r2, [sp, #32]
 800b682:	4302      	orrs	r2, r0
 800b684:	d096      	beq.n	800b5b4 <_strtod_l+0xa4>
 800b686:	2500      	movs	r5, #0
 800b688:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b68a:	1c62      	adds	r2, r4, #1
 800b68c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b68e:	7862      	ldrb	r2, [r4, #1]
 800b690:	2a2b      	cmp	r2, #43	@ 0x2b
 800b692:	d07a      	beq.n	800b78a <_strtod_l+0x27a>
 800b694:	2a2d      	cmp	r2, #45	@ 0x2d
 800b696:	d07e      	beq.n	800b796 <_strtod_l+0x286>
 800b698:	f04f 0c00 	mov.w	ip, #0
 800b69c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b6a0:	2909      	cmp	r1, #9
 800b6a2:	f240 8085 	bls.w	800b7b0 <_strtod_l+0x2a0>
 800b6a6:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6a8:	f04f 0800 	mov.w	r8, #0
 800b6ac:	e0a5      	b.n	800b7fa <_strtod_l+0x2ea>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e7c8      	b.n	800b644 <_strtod_l+0x134>
 800b6b2:	f1b9 0f08 	cmp.w	r9, #8
 800b6b6:	bfd8      	it	le
 800b6b8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b6ba:	f100 0001 	add.w	r0, r0, #1
 800b6be:	bfd6      	itet	le
 800b6c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6c4:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b6c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b6ca:	f109 0901 	add.w	r9, r9, #1
 800b6ce:	9019      	str	r0, [sp, #100]	@ 0x64
 800b6d0:	e7bf      	b.n	800b652 <_strtod_l+0x142>
 800b6d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6d8:	785a      	ldrb	r2, [r3, #1]
 800b6da:	f1b9 0f00 	cmp.w	r9, #0
 800b6de:	d03b      	beq.n	800b758 <_strtod_l+0x248>
 800b6e0:	464d      	mov	r5, r9
 800b6e2:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6e4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b6e8:	2b09      	cmp	r3, #9
 800b6ea:	d912      	bls.n	800b712 <_strtod_l+0x202>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e7c2      	b.n	800b676 <_strtod_l+0x166>
 800b6f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6f8:	785a      	ldrb	r2, [r3, #1]
 800b6fa:	2a30      	cmp	r2, #48	@ 0x30
 800b6fc:	d0f8      	beq.n	800b6f0 <_strtod_l+0x1e0>
 800b6fe:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b702:	2b08      	cmp	r3, #8
 800b704:	f200 84c8 	bhi.w	800c098 <_strtod_l+0xb88>
 800b708:	900a      	str	r0, [sp, #40]	@ 0x28
 800b70a:	2000      	movs	r0, #0
 800b70c:	4605      	mov	r5, r0
 800b70e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b710:	930c      	str	r3, [sp, #48]	@ 0x30
 800b712:	3a30      	subs	r2, #48	@ 0x30
 800b714:	f100 0301 	add.w	r3, r0, #1
 800b718:	d018      	beq.n	800b74c <_strtod_l+0x23c>
 800b71a:	462e      	mov	r6, r5
 800b71c:	f04f 0e0a 	mov.w	lr, #10
 800b720:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b722:	4419      	add	r1, r3
 800b724:	910a      	str	r1, [sp, #40]	@ 0x28
 800b726:	1c71      	adds	r1, r6, #1
 800b728:	eba1 0c05 	sub.w	ip, r1, r5
 800b72c:	4563      	cmp	r3, ip
 800b72e:	dc15      	bgt.n	800b75c <_strtod_l+0x24c>
 800b730:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b734:	182b      	adds	r3, r5, r0
 800b736:	2b08      	cmp	r3, #8
 800b738:	f105 0501 	add.w	r5, r5, #1
 800b73c:	4405      	add	r5, r0
 800b73e:	dc1a      	bgt.n	800b776 <_strtod_l+0x266>
 800b740:	230a      	movs	r3, #10
 800b742:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b744:	fb03 2301 	mla	r3, r3, r1, r2
 800b748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b74a:	2300      	movs	r3, #0
 800b74c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b74e:	4618      	mov	r0, r3
 800b750:	1c51      	adds	r1, r2, #1
 800b752:	9119      	str	r1, [sp, #100]	@ 0x64
 800b754:	7852      	ldrb	r2, [r2, #1]
 800b756:	e7c5      	b.n	800b6e4 <_strtod_l+0x1d4>
 800b758:	4648      	mov	r0, r9
 800b75a:	e7ce      	b.n	800b6fa <_strtod_l+0x1ea>
 800b75c:	2e08      	cmp	r6, #8
 800b75e:	dc05      	bgt.n	800b76c <_strtod_l+0x25c>
 800b760:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b762:	fb0e f606 	mul.w	r6, lr, r6
 800b766:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b768:	460e      	mov	r6, r1
 800b76a:	e7dc      	b.n	800b726 <_strtod_l+0x216>
 800b76c:	2910      	cmp	r1, #16
 800b76e:	bfd8      	it	le
 800b770:	fb0e f707 	mulle.w	r7, lr, r7
 800b774:	e7f8      	b.n	800b768 <_strtod_l+0x258>
 800b776:	2b0f      	cmp	r3, #15
 800b778:	bfdc      	itt	le
 800b77a:	230a      	movle	r3, #10
 800b77c:	fb03 2707 	mlale	r7, r3, r7, r2
 800b780:	e7e3      	b.n	800b74a <_strtod_l+0x23a>
 800b782:	2300      	movs	r3, #0
 800b784:	930a      	str	r3, [sp, #40]	@ 0x28
 800b786:	2301      	movs	r3, #1
 800b788:	e77a      	b.n	800b680 <_strtod_l+0x170>
 800b78a:	f04f 0c00 	mov.w	ip, #0
 800b78e:	1ca2      	adds	r2, r4, #2
 800b790:	9219      	str	r2, [sp, #100]	@ 0x64
 800b792:	78a2      	ldrb	r2, [r4, #2]
 800b794:	e782      	b.n	800b69c <_strtod_l+0x18c>
 800b796:	f04f 0c01 	mov.w	ip, #1
 800b79a:	e7f8      	b.n	800b78e <_strtod_l+0x27e>
 800b79c:	0800d87c 	.word	0x0800d87c
 800b7a0:	7ff00000 	.word	0x7ff00000
 800b7a4:	0800d6ae 	.word	0x0800d6ae
 800b7a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7aa:	1c51      	adds	r1, r2, #1
 800b7ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7ae:	7852      	ldrb	r2, [r2, #1]
 800b7b0:	2a30      	cmp	r2, #48	@ 0x30
 800b7b2:	d0f9      	beq.n	800b7a8 <_strtod_l+0x298>
 800b7b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b7b8:	2908      	cmp	r1, #8
 800b7ba:	f63f af75 	bhi.w	800b6a8 <_strtod_l+0x198>
 800b7be:	f04f 080a 	mov.w	r8, #10
 800b7c2:	3a30      	subs	r2, #48	@ 0x30
 800b7c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b7ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7cc:	1c56      	adds	r6, r2, #1
 800b7ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800b7d0:	7852      	ldrb	r2, [r2, #1]
 800b7d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b7d6:	f1be 0f09 	cmp.w	lr, #9
 800b7da:	d939      	bls.n	800b850 <_strtod_l+0x340>
 800b7dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b7de:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b7e2:	1a76      	subs	r6, r6, r1
 800b7e4:	2e08      	cmp	r6, #8
 800b7e6:	dc03      	bgt.n	800b7f0 <_strtod_l+0x2e0>
 800b7e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7ea:	4588      	cmp	r8, r1
 800b7ec:	bfa8      	it	ge
 800b7ee:	4688      	movge	r8, r1
 800b7f0:	f1bc 0f00 	cmp.w	ip, #0
 800b7f4:	d001      	beq.n	800b7fa <_strtod_l+0x2ea>
 800b7f6:	f1c8 0800 	rsb	r8, r8, #0
 800b7fa:	2d00      	cmp	r5, #0
 800b7fc:	d14e      	bne.n	800b89c <_strtod_l+0x38c>
 800b7fe:	9908      	ldr	r1, [sp, #32]
 800b800:	4308      	orrs	r0, r1
 800b802:	f47f aebe 	bne.w	800b582 <_strtod_l+0x72>
 800b806:	2b00      	cmp	r3, #0
 800b808:	f47f aed4 	bne.w	800b5b4 <_strtod_l+0xa4>
 800b80c:	2a69      	cmp	r2, #105	@ 0x69
 800b80e:	d028      	beq.n	800b862 <_strtod_l+0x352>
 800b810:	dc25      	bgt.n	800b85e <_strtod_l+0x34e>
 800b812:	2a49      	cmp	r2, #73	@ 0x49
 800b814:	d025      	beq.n	800b862 <_strtod_l+0x352>
 800b816:	2a4e      	cmp	r2, #78	@ 0x4e
 800b818:	f47f aecc 	bne.w	800b5b4 <_strtod_l+0xa4>
 800b81c:	4999      	ldr	r1, [pc, #612]	@ (800ba84 <_strtod_l+0x574>)
 800b81e:	a819      	add	r0, sp, #100	@ 0x64
 800b820:	f001 f940 	bl	800caa4 <__match>
 800b824:	2800      	cmp	r0, #0
 800b826:	f43f aec5 	beq.w	800b5b4 <_strtod_l+0xa4>
 800b82a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2b28      	cmp	r3, #40	@ 0x28
 800b830:	d12e      	bne.n	800b890 <_strtod_l+0x380>
 800b832:	4995      	ldr	r1, [pc, #596]	@ (800ba88 <_strtod_l+0x578>)
 800b834:	aa1c      	add	r2, sp, #112	@ 0x70
 800b836:	a819      	add	r0, sp, #100	@ 0x64
 800b838:	f001 f948 	bl	800cacc <__hexnan>
 800b83c:	2805      	cmp	r0, #5
 800b83e:	d127      	bne.n	800b890 <_strtod_l+0x380>
 800b840:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b842:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b846:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b84a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b84e:	e698      	b.n	800b582 <_strtod_l+0x72>
 800b850:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b852:	fb08 2101 	mla	r1, r8, r1, r2
 800b856:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b85a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b85c:	e7b5      	b.n	800b7ca <_strtod_l+0x2ba>
 800b85e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b860:	e7da      	b.n	800b818 <_strtod_l+0x308>
 800b862:	498a      	ldr	r1, [pc, #552]	@ (800ba8c <_strtod_l+0x57c>)
 800b864:	a819      	add	r0, sp, #100	@ 0x64
 800b866:	f001 f91d 	bl	800caa4 <__match>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f43f aea2 	beq.w	800b5b4 <_strtod_l+0xa4>
 800b870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b872:	4987      	ldr	r1, [pc, #540]	@ (800ba90 <_strtod_l+0x580>)
 800b874:	3b01      	subs	r3, #1
 800b876:	a819      	add	r0, sp, #100	@ 0x64
 800b878:	9319      	str	r3, [sp, #100]	@ 0x64
 800b87a:	f001 f913 	bl	800caa4 <__match>
 800b87e:	b910      	cbnz	r0, 800b886 <_strtod_l+0x376>
 800b880:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b882:	3301      	adds	r3, #1
 800b884:	9319      	str	r3, [sp, #100]	@ 0x64
 800b886:	f04f 0a00 	mov.w	sl, #0
 800b88a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800ba94 <_strtod_l+0x584>
 800b88e:	e678      	b.n	800b582 <_strtod_l+0x72>
 800b890:	4881      	ldr	r0, [pc, #516]	@ (800ba98 <_strtod_l+0x588>)
 800b892:	f000 fe45 	bl	800c520 <nan>
 800b896:	4682      	mov	sl, r0
 800b898:	468b      	mov	fp, r1
 800b89a:	e672      	b.n	800b582 <_strtod_l+0x72>
 800b89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b89e:	f1b9 0f00 	cmp.w	r9, #0
 800b8a2:	bf08      	it	eq
 800b8a4:	46a9      	moveq	r9, r5
 800b8a6:	eba8 0303 	sub.w	r3, r8, r3
 800b8aa:	2d10      	cmp	r5, #16
 800b8ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b8ae:	462c      	mov	r4, r5
 800b8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8b2:	bfa8      	it	ge
 800b8b4:	2410      	movge	r4, #16
 800b8b6:	f7f4 fe49 	bl	800054c <__aeabi_ui2d>
 800b8ba:	2d09      	cmp	r5, #9
 800b8bc:	4682      	mov	sl, r0
 800b8be:	468b      	mov	fp, r1
 800b8c0:	dc11      	bgt.n	800b8e6 <_strtod_l+0x3d6>
 800b8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f43f ae5c 	beq.w	800b582 <_strtod_l+0x72>
 800b8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8cc:	dd76      	ble.n	800b9bc <_strtod_l+0x4ac>
 800b8ce:	2b16      	cmp	r3, #22
 800b8d0:	dc5d      	bgt.n	800b98e <_strtod_l+0x47e>
 800b8d2:	4972      	ldr	r1, [pc, #456]	@ (800ba9c <_strtod_l+0x58c>)
 800b8d4:	4652      	mov	r2, sl
 800b8d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8da:	465b      	mov	r3, fp
 800b8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e0:	f7f4 feae 	bl	8000640 <__aeabi_dmul>
 800b8e4:	e7d7      	b.n	800b896 <_strtod_l+0x386>
 800b8e6:	4b6d      	ldr	r3, [pc, #436]	@ (800ba9c <_strtod_l+0x58c>)
 800b8e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b8f0:	f7f4 fea6 	bl	8000640 <__aeabi_dmul>
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	468b      	mov	fp, r1
 800b8fa:	f7f4 fe27 	bl	800054c <__aeabi_ui2d>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4650      	mov	r0, sl
 800b904:	4659      	mov	r1, fp
 800b906:	f7f4 fce5 	bl	80002d4 <__adddf3>
 800b90a:	2d0f      	cmp	r5, #15
 800b90c:	4682      	mov	sl, r0
 800b90e:	468b      	mov	fp, r1
 800b910:	ddd7      	ble.n	800b8c2 <_strtod_l+0x3b2>
 800b912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b914:	1b2c      	subs	r4, r5, r4
 800b916:	441c      	add	r4, r3
 800b918:	2c00      	cmp	r4, #0
 800b91a:	f340 8093 	ble.w	800ba44 <_strtod_l+0x534>
 800b91e:	f014 030f 	ands.w	r3, r4, #15
 800b922:	d00a      	beq.n	800b93a <_strtod_l+0x42a>
 800b924:	495d      	ldr	r1, [pc, #372]	@ (800ba9c <_strtod_l+0x58c>)
 800b926:	4652      	mov	r2, sl
 800b928:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b92c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b930:	465b      	mov	r3, fp
 800b932:	f7f4 fe85 	bl	8000640 <__aeabi_dmul>
 800b936:	4682      	mov	sl, r0
 800b938:	468b      	mov	fp, r1
 800b93a:	f034 040f 	bics.w	r4, r4, #15
 800b93e:	d073      	beq.n	800ba28 <_strtod_l+0x518>
 800b940:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b944:	dd49      	ble.n	800b9da <_strtod_l+0x4ca>
 800b946:	2400      	movs	r4, #0
 800b948:	46a0      	mov	r8, r4
 800b94a:	46a1      	mov	r9, r4
 800b94c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b94e:	2322      	movs	r3, #34	@ 0x22
 800b950:	f04f 0a00 	mov.w	sl, #0
 800b954:	9a05      	ldr	r2, [sp, #20]
 800b956:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800ba94 <_strtod_l+0x584>
 800b95a:	6013      	str	r3, [r2, #0]
 800b95c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f43f ae0f 	beq.w	800b582 <_strtod_l+0x72>
 800b964:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b966:	9805      	ldr	r0, [sp, #20]
 800b968:	f7ff f950 	bl	800ac0c <_Bfree>
 800b96c:	4649      	mov	r1, r9
 800b96e:	9805      	ldr	r0, [sp, #20]
 800b970:	f7ff f94c 	bl	800ac0c <_Bfree>
 800b974:	4641      	mov	r1, r8
 800b976:	9805      	ldr	r0, [sp, #20]
 800b978:	f7ff f948 	bl	800ac0c <_Bfree>
 800b97c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b97e:	9805      	ldr	r0, [sp, #20]
 800b980:	f7ff f944 	bl	800ac0c <_Bfree>
 800b984:	4621      	mov	r1, r4
 800b986:	9805      	ldr	r0, [sp, #20]
 800b988:	f7ff f940 	bl	800ac0c <_Bfree>
 800b98c:	e5f9      	b.n	800b582 <_strtod_l+0x72>
 800b98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b990:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b994:	4293      	cmp	r3, r2
 800b996:	dbbc      	blt.n	800b912 <_strtod_l+0x402>
 800b998:	4c40      	ldr	r4, [pc, #256]	@ (800ba9c <_strtod_l+0x58c>)
 800b99a:	f1c5 050f 	rsb	r5, r5, #15
 800b99e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9a2:	4652      	mov	r2, sl
 800b9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a8:	465b      	mov	r3, fp
 800b9aa:	f7f4 fe49 	bl	8000640 <__aeabi_dmul>
 800b9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b0:	1b5d      	subs	r5, r3, r5
 800b9b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9ba:	e791      	b.n	800b8e0 <_strtod_l+0x3d0>
 800b9bc:	3316      	adds	r3, #22
 800b9be:	dba8      	blt.n	800b912 <_strtod_l+0x402>
 800b9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9c2:	4650      	mov	r0, sl
 800b9c4:	eba3 0808 	sub.w	r8, r3, r8
 800b9c8:	4b34      	ldr	r3, [pc, #208]	@ (800ba9c <_strtod_l+0x58c>)
 800b9ca:	4659      	mov	r1, fp
 800b9cc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b9d0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b9d4:	f7f4 ff5e 	bl	8000894 <__aeabi_ddiv>
 800b9d8:	e75d      	b.n	800b896 <_strtod_l+0x386>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4650      	mov	r0, sl
 800b9de:	4659      	mov	r1, fp
 800b9e0:	461e      	mov	r6, r3
 800b9e2:	4f2f      	ldr	r7, [pc, #188]	@ (800baa0 <_strtod_l+0x590>)
 800b9e4:	1124      	asrs	r4, r4, #4
 800b9e6:	2c01      	cmp	r4, #1
 800b9e8:	dc21      	bgt.n	800ba2e <_strtod_l+0x51e>
 800b9ea:	b10b      	cbz	r3, 800b9f0 <_strtod_l+0x4e0>
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	468b      	mov	fp, r1
 800b9f0:	492b      	ldr	r1, [pc, #172]	@ (800baa0 <_strtod_l+0x590>)
 800b9f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b9f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b9fa:	4652      	mov	r2, sl
 800b9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba00:	465b      	mov	r3, fp
 800ba02:	f7f4 fe1d 	bl	8000640 <__aeabi_dmul>
 800ba06:	4b23      	ldr	r3, [pc, #140]	@ (800ba94 <_strtod_l+0x584>)
 800ba08:	460a      	mov	r2, r1
 800ba0a:	400b      	ands	r3, r1
 800ba0c:	4925      	ldr	r1, [pc, #148]	@ (800baa4 <_strtod_l+0x594>)
 800ba0e:	4682      	mov	sl, r0
 800ba10:	428b      	cmp	r3, r1
 800ba12:	d898      	bhi.n	800b946 <_strtod_l+0x436>
 800ba14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	bf86      	itte	hi
 800ba1c:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba20:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800baa8 <_strtod_l+0x598>
 800ba24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9308      	str	r3, [sp, #32]
 800ba2c:	e076      	b.n	800bb1c <_strtod_l+0x60c>
 800ba2e:	07e2      	lsls	r2, r4, #31
 800ba30:	d504      	bpl.n	800ba3c <_strtod_l+0x52c>
 800ba32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba36:	f7f4 fe03 	bl	8000640 <__aeabi_dmul>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	3601      	adds	r6, #1
 800ba3e:	1064      	asrs	r4, r4, #1
 800ba40:	3708      	adds	r7, #8
 800ba42:	e7d0      	b.n	800b9e6 <_strtod_l+0x4d6>
 800ba44:	d0f0      	beq.n	800ba28 <_strtod_l+0x518>
 800ba46:	4264      	negs	r4, r4
 800ba48:	f014 020f 	ands.w	r2, r4, #15
 800ba4c:	d00a      	beq.n	800ba64 <_strtod_l+0x554>
 800ba4e:	4b13      	ldr	r3, [pc, #76]	@ (800ba9c <_strtod_l+0x58c>)
 800ba50:	4650      	mov	r0, sl
 800ba52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba56:	4659      	mov	r1, fp
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f7f4 ff1a 	bl	8000894 <__aeabi_ddiv>
 800ba60:	4682      	mov	sl, r0
 800ba62:	468b      	mov	fp, r1
 800ba64:	1124      	asrs	r4, r4, #4
 800ba66:	d0df      	beq.n	800ba28 <_strtod_l+0x518>
 800ba68:	2c1f      	cmp	r4, #31
 800ba6a:	dd1f      	ble.n	800baac <_strtod_l+0x59c>
 800ba6c:	2400      	movs	r4, #0
 800ba6e:	46a0      	mov	r8, r4
 800ba70:	46a1      	mov	r9, r4
 800ba72:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba74:	2322      	movs	r3, #34	@ 0x22
 800ba76:	9a05      	ldr	r2, [sp, #20]
 800ba78:	f04f 0a00 	mov.w	sl, #0
 800ba7c:	f04f 0b00 	mov.w	fp, #0
 800ba80:	6013      	str	r3, [r2, #0]
 800ba82:	e76b      	b.n	800b95c <_strtod_l+0x44c>
 800ba84:	0800d59c 	.word	0x0800d59c
 800ba88:	0800d868 	.word	0x0800d868
 800ba8c:	0800d594 	.word	0x0800d594
 800ba90:	0800d5cb 	.word	0x0800d5cb
 800ba94:	7ff00000 	.word	0x7ff00000
 800ba98:	0800d704 	.word	0x0800d704
 800ba9c:	0800d7a0 	.word	0x0800d7a0
 800baa0:	0800d778 	.word	0x0800d778
 800baa4:	7ca00000 	.word	0x7ca00000
 800baa8:	7fefffff 	.word	0x7fefffff
 800baac:	f014 0310 	ands.w	r3, r4, #16
 800bab0:	bf18      	it	ne
 800bab2:	236a      	movne	r3, #106	@ 0x6a
 800bab4:	4650      	mov	r0, sl
 800bab6:	9308      	str	r3, [sp, #32]
 800bab8:	4659      	mov	r1, fp
 800baba:	2300      	movs	r3, #0
 800babc:	4e77      	ldr	r6, [pc, #476]	@ (800bc9c <_strtod_l+0x78c>)
 800babe:	07e7      	lsls	r7, r4, #31
 800bac0:	d504      	bpl.n	800bacc <_strtod_l+0x5bc>
 800bac2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bac6:	f7f4 fdbb 	bl	8000640 <__aeabi_dmul>
 800baca:	2301      	movs	r3, #1
 800bacc:	1064      	asrs	r4, r4, #1
 800bace:	f106 0608 	add.w	r6, r6, #8
 800bad2:	d1f4      	bne.n	800babe <_strtod_l+0x5ae>
 800bad4:	b10b      	cbz	r3, 800bada <_strtod_l+0x5ca>
 800bad6:	4682      	mov	sl, r0
 800bad8:	468b      	mov	fp, r1
 800bada:	9b08      	ldr	r3, [sp, #32]
 800badc:	b1b3      	cbz	r3, 800bb0c <_strtod_l+0x5fc>
 800bade:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bae2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	4659      	mov	r1, fp
 800baea:	dd0f      	ble.n	800bb0c <_strtod_l+0x5fc>
 800baec:	2b1f      	cmp	r3, #31
 800baee:	dd58      	ble.n	800bba2 <_strtod_l+0x692>
 800baf0:	2b34      	cmp	r3, #52	@ 0x34
 800baf2:	bfd8      	it	le
 800baf4:	f04f 33ff 	movle.w	r3, #4294967295
 800baf8:	f04f 0a00 	mov.w	sl, #0
 800bafc:	bfcf      	iteee	gt
 800bafe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb02:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb06:	4093      	lslle	r3, r2
 800bb08:	ea03 0b01 	andle.w	fp, r3, r1
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2300      	movs	r3, #0
 800bb10:	4650      	mov	r0, sl
 800bb12:	4659      	mov	r1, fp
 800bb14:	f7f4 fffc 	bl	8000b10 <__aeabi_dcmpeq>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d1a7      	bne.n	800ba6c <_strtod_l+0x55c>
 800bb1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb1e:	464a      	mov	r2, r9
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb24:	462b      	mov	r3, r5
 800bb26:	9805      	ldr	r0, [sp, #20]
 800bb28:	f7ff f8d8 	bl	800acdc <__s2b>
 800bb2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f43f af09 	beq.w	800b946 <_strtod_l+0x436>
 800bb34:	2400      	movs	r4, #0
 800bb36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3a:	2a00      	cmp	r2, #0
 800bb3c:	eba3 0308 	sub.w	r3, r3, r8
 800bb40:	bfa8      	it	ge
 800bb42:	2300      	movge	r3, #0
 800bb44:	46a0      	mov	r8, r4
 800bb46:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb4c:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb50:	9805      	ldr	r0, [sp, #20]
 800bb52:	6859      	ldr	r1, [r3, #4]
 800bb54:	f7ff f81a 	bl	800ab8c <_Balloc>
 800bb58:	4681      	mov	r9, r0
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	f43f aef7 	beq.w	800b94e <_strtod_l+0x43e>
 800bb60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb62:	300c      	adds	r0, #12
 800bb64:	691a      	ldr	r2, [r3, #16]
 800bb66:	f103 010c 	add.w	r1, r3, #12
 800bb6a:	3202      	adds	r2, #2
 800bb6c:	0092      	lsls	r2, r2, #2
 800bb6e:	f7fe f89e 	bl	8009cae <memcpy>
 800bb72:	ab1c      	add	r3, sp, #112	@ 0x70
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	4652      	mov	r2, sl
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	9805      	ldr	r0, [sp, #20]
 800bb80:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bb84:	f7ff fbd6 	bl	800b334 <__d2b>
 800bb88:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f43f aedf 	beq.w	800b94e <_strtod_l+0x43e>
 800bb90:	2101      	movs	r1, #1
 800bb92:	9805      	ldr	r0, [sp, #20]
 800bb94:	f7ff f938 	bl	800ae08 <__i2b>
 800bb98:	4680      	mov	r8, r0
 800bb9a:	b948      	cbnz	r0, 800bbb0 <_strtod_l+0x6a0>
 800bb9c:	f04f 0800 	mov.w	r8, #0
 800bba0:	e6d5      	b.n	800b94e <_strtod_l+0x43e>
 800bba2:	f04f 32ff 	mov.w	r2, #4294967295
 800bba6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbaa:	ea03 0a0a 	and.w	sl, r3, sl
 800bbae:	e7ad      	b.n	800bb0c <_strtod_l+0x5fc>
 800bbb0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bbb2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bbb4:	2d00      	cmp	r5, #0
 800bbb6:	bfab      	itete	ge
 800bbb8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bbba:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bbbc:	18ef      	addge	r7, r5, r3
 800bbbe:	1b5e      	sublt	r6, r3, r5
 800bbc0:	9b08      	ldr	r3, [sp, #32]
 800bbc2:	bfa8      	it	ge
 800bbc4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bbc6:	eba5 0503 	sub.w	r5, r5, r3
 800bbca:	4415      	add	r5, r2
 800bbcc:	4b34      	ldr	r3, [pc, #208]	@ (800bca0 <_strtod_l+0x790>)
 800bbce:	f105 35ff 	add.w	r5, r5, #4294967295
 800bbd2:	bfb8      	it	lt
 800bbd4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bbd6:	429d      	cmp	r5, r3
 800bbd8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bbdc:	da50      	bge.n	800bc80 <_strtod_l+0x770>
 800bbde:	1b5b      	subs	r3, r3, r5
 800bbe0:	2b1f      	cmp	r3, #31
 800bbe2:	f04f 0101 	mov.w	r1, #1
 800bbe6:	eba2 0203 	sub.w	r2, r2, r3
 800bbea:	dc3d      	bgt.n	800bc68 <_strtod_l+0x758>
 800bbec:	fa01 f303 	lsl.w	r3, r1, r3
 800bbf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbf6:	18bd      	adds	r5, r7, r2
 800bbf8:	9b08      	ldr	r3, [sp, #32]
 800bbfa:	42af      	cmp	r7, r5
 800bbfc:	4416      	add	r6, r2
 800bbfe:	441e      	add	r6, r3
 800bc00:	463b      	mov	r3, r7
 800bc02:	bfa8      	it	ge
 800bc04:	462b      	movge	r3, r5
 800bc06:	42b3      	cmp	r3, r6
 800bc08:	bfa8      	it	ge
 800bc0a:	4633      	movge	r3, r6
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bfc2      	ittt	gt
 800bc10:	1aed      	subgt	r5, r5, r3
 800bc12:	1af6      	subgt	r6, r6, r3
 800bc14:	1aff      	subgt	r7, r7, r3
 800bc16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	dd16      	ble.n	800bc4a <_strtod_l+0x73a>
 800bc1c:	4641      	mov	r1, r8
 800bc1e:	461a      	mov	r2, r3
 800bc20:	9805      	ldr	r0, [sp, #20]
 800bc22:	f7ff f9a9 	bl	800af78 <__pow5mult>
 800bc26:	4680      	mov	r8, r0
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d0b7      	beq.n	800bb9c <_strtod_l+0x68c>
 800bc2c:	4601      	mov	r1, r0
 800bc2e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc30:	9805      	ldr	r0, [sp, #20]
 800bc32:	f7ff f8ff 	bl	800ae34 <__multiply>
 800bc36:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	f43f ae88 	beq.w	800b94e <_strtod_l+0x43e>
 800bc3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc40:	9805      	ldr	r0, [sp, #20]
 800bc42:	f7fe ffe3 	bl	800ac0c <_Bfree>
 800bc46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc48:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc4a:	2d00      	cmp	r5, #0
 800bc4c:	dc1d      	bgt.n	800bc8a <_strtod_l+0x77a>
 800bc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dd27      	ble.n	800bca4 <_strtod_l+0x794>
 800bc54:	4649      	mov	r1, r9
 800bc56:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc58:	9805      	ldr	r0, [sp, #20]
 800bc5a:	f7ff f98d 	bl	800af78 <__pow5mult>
 800bc5e:	4681      	mov	r9, r0
 800bc60:	bb00      	cbnz	r0, 800bca4 <_strtod_l+0x794>
 800bc62:	f04f 0900 	mov.w	r9, #0
 800bc66:	e672      	b.n	800b94e <_strtod_l+0x43e>
 800bc68:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bc6c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bc70:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bc74:	35e2      	adds	r5, #226	@ 0xe2
 800bc76:	fa01 f305 	lsl.w	r3, r1, r5
 800bc7a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc7c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bc7e:	e7ba      	b.n	800bbf6 <_strtod_l+0x6e6>
 800bc80:	2300      	movs	r3, #0
 800bc82:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc84:	2301      	movs	r3, #1
 800bc86:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc88:	e7b5      	b.n	800bbf6 <_strtod_l+0x6e6>
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc8e:	9805      	ldr	r0, [sp, #20]
 800bc90:	f7ff f9cc 	bl	800b02c <__lshift>
 800bc94:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d1d9      	bne.n	800bc4e <_strtod_l+0x73e>
 800bc9a:	e658      	b.n	800b94e <_strtod_l+0x43e>
 800bc9c:	0800d890 	.word	0x0800d890
 800bca0:	fffffc02 	.word	0xfffffc02
 800bca4:	2e00      	cmp	r6, #0
 800bca6:	dd07      	ble.n	800bcb8 <_strtod_l+0x7a8>
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4632      	mov	r2, r6
 800bcac:	9805      	ldr	r0, [sp, #20]
 800bcae:	f7ff f9bd 	bl	800b02c <__lshift>
 800bcb2:	4681      	mov	r9, r0
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d0d4      	beq.n	800bc62 <_strtod_l+0x752>
 800bcb8:	2f00      	cmp	r7, #0
 800bcba:	dd08      	ble.n	800bcce <_strtod_l+0x7be>
 800bcbc:	4641      	mov	r1, r8
 800bcbe:	463a      	mov	r2, r7
 800bcc0:	9805      	ldr	r0, [sp, #20]
 800bcc2:	f7ff f9b3 	bl	800b02c <__lshift>
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	f43f ae40 	beq.w	800b94e <_strtod_l+0x43e>
 800bcce:	464a      	mov	r2, r9
 800bcd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcd2:	9805      	ldr	r0, [sp, #20]
 800bcd4:	f7ff fa32 	bl	800b13c <__mdiff>
 800bcd8:	4604      	mov	r4, r0
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	f43f ae37 	beq.w	800b94e <_strtod_l+0x43e>
 800bce0:	68c3      	ldr	r3, [r0, #12]
 800bce2:	4641      	mov	r1, r8
 800bce4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bce6:	2300      	movs	r3, #0
 800bce8:	60c3      	str	r3, [r0, #12]
 800bcea:	f7ff fa0b 	bl	800b104 <__mcmp>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	da3d      	bge.n	800bd6e <_strtod_l+0x85e>
 800bcf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcf4:	ea53 030a 	orrs.w	r3, r3, sl
 800bcf8:	d163      	bne.n	800bdc2 <_strtod_l+0x8b2>
 800bcfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d15f      	bne.n	800bdc2 <_strtod_l+0x8b2>
 800bd02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd06:	0d1b      	lsrs	r3, r3, #20
 800bd08:	051b      	lsls	r3, r3, #20
 800bd0a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd0e:	d958      	bls.n	800bdc2 <_strtod_l+0x8b2>
 800bd10:	6963      	ldr	r3, [r4, #20]
 800bd12:	b913      	cbnz	r3, 800bd1a <_strtod_l+0x80a>
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	dd53      	ble.n	800bdc2 <_strtod_l+0x8b2>
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	9805      	ldr	r0, [sp, #20]
 800bd20:	f7ff f984 	bl	800b02c <__lshift>
 800bd24:	4641      	mov	r1, r8
 800bd26:	4604      	mov	r4, r0
 800bd28:	f7ff f9ec 	bl	800b104 <__mcmp>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	dd48      	ble.n	800bdc2 <_strtod_l+0x8b2>
 800bd30:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd34:	9a08      	ldr	r2, [sp, #32]
 800bd36:	0d1b      	lsrs	r3, r3, #20
 800bd38:	051b      	lsls	r3, r3, #20
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	d062      	beq.n	800be04 <_strtod_l+0x8f4>
 800bd3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd42:	d85f      	bhi.n	800be04 <_strtod_l+0x8f4>
 800bd44:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd48:	f67f ae94 	bls.w	800ba74 <_strtod_l+0x564>
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	4659      	mov	r1, fp
 800bd50:	4ba3      	ldr	r3, [pc, #652]	@ (800bfe0 <_strtod_l+0xad0>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	f7f4 fc74 	bl	8000640 <__aeabi_dmul>
 800bd58:	4ba2      	ldr	r3, [pc, #648]	@ (800bfe4 <_strtod_l+0xad4>)
 800bd5a:	4682      	mov	sl, r0
 800bd5c:	400b      	ands	r3, r1
 800bd5e:	468b      	mov	fp, r1
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f47f adff 	bne.w	800b964 <_strtod_l+0x454>
 800bd66:	2322      	movs	r3, #34	@ 0x22
 800bd68:	9a05      	ldr	r2, [sp, #20]
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	e5fa      	b.n	800b964 <_strtod_l+0x454>
 800bd6e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bd72:	d165      	bne.n	800be40 <_strtod_l+0x930>
 800bd74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bd76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd7a:	b35a      	cbz	r2, 800bdd4 <_strtod_l+0x8c4>
 800bd7c:	4a9a      	ldr	r2, [pc, #616]	@ (800bfe8 <_strtod_l+0xad8>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d12b      	bne.n	800bdda <_strtod_l+0x8ca>
 800bd82:	9b08      	ldr	r3, [sp, #32]
 800bd84:	4651      	mov	r1, sl
 800bd86:	b303      	cbz	r3, 800bdca <_strtod_l+0x8ba>
 800bd88:	465a      	mov	r2, fp
 800bd8a:	4b96      	ldr	r3, [pc, #600]	@ (800bfe4 <_strtod_l+0xad4>)
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bd92:	f04f 32ff 	mov.w	r2, #4294967295
 800bd96:	d81b      	bhi.n	800bdd0 <_strtod_l+0x8c0>
 800bd98:	0d1b      	lsrs	r3, r3, #20
 800bd9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bda2:	4299      	cmp	r1, r3
 800bda4:	d119      	bne.n	800bdda <_strtod_l+0x8ca>
 800bda6:	4b91      	ldr	r3, [pc, #580]	@ (800bfec <_strtod_l+0xadc>)
 800bda8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d102      	bne.n	800bdb4 <_strtod_l+0x8a4>
 800bdae:	3101      	adds	r1, #1
 800bdb0:	f43f adcd 	beq.w	800b94e <_strtod_l+0x43e>
 800bdb4:	f04f 0a00 	mov.w	sl, #0
 800bdb8:	4b8a      	ldr	r3, [pc, #552]	@ (800bfe4 <_strtod_l+0xad4>)
 800bdba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdbc:	401a      	ands	r2, r3
 800bdbe:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bdc2:	9b08      	ldr	r3, [sp, #32]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1c1      	bne.n	800bd4c <_strtod_l+0x83c>
 800bdc8:	e5cc      	b.n	800b964 <_strtod_l+0x454>
 800bdca:	f04f 33ff 	mov.w	r3, #4294967295
 800bdce:	e7e8      	b.n	800bda2 <_strtod_l+0x892>
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	e7e6      	b.n	800bda2 <_strtod_l+0x892>
 800bdd4:	ea53 030a 	orrs.w	r3, r3, sl
 800bdd8:	d0aa      	beq.n	800bd30 <_strtod_l+0x820>
 800bdda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bddc:	b1db      	cbz	r3, 800be16 <_strtod_l+0x906>
 800bdde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bde0:	4213      	tst	r3, r2
 800bde2:	d0ee      	beq.n	800bdc2 <_strtod_l+0x8b2>
 800bde4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bde6:	4650      	mov	r0, sl
 800bde8:	4659      	mov	r1, fp
 800bdea:	9a08      	ldr	r2, [sp, #32]
 800bdec:	b1bb      	cbz	r3, 800be1e <_strtod_l+0x90e>
 800bdee:	f7ff fb6d 	bl	800b4cc <sulp>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdfa:	f7f4 fa6b 	bl	80002d4 <__adddf3>
 800bdfe:	4682      	mov	sl, r0
 800be00:	468b      	mov	fp, r1
 800be02:	e7de      	b.n	800bdc2 <_strtod_l+0x8b2>
 800be04:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be08:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be0c:	f04f 3aff 	mov.w	sl, #4294967295
 800be10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be14:	e7d5      	b.n	800bdc2 <_strtod_l+0x8b2>
 800be16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be18:	ea13 0f0a 	tst.w	r3, sl
 800be1c:	e7e1      	b.n	800bde2 <_strtod_l+0x8d2>
 800be1e:	f7ff fb55 	bl	800b4cc <sulp>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be2a:	f7f4 fa51 	bl	80002d0 <__aeabi_dsub>
 800be2e:	2200      	movs	r2, #0
 800be30:	2300      	movs	r3, #0
 800be32:	4682      	mov	sl, r0
 800be34:	468b      	mov	fp, r1
 800be36:	f7f4 fe6b 	bl	8000b10 <__aeabi_dcmpeq>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d0c1      	beq.n	800bdc2 <_strtod_l+0x8b2>
 800be3e:	e619      	b.n	800ba74 <_strtod_l+0x564>
 800be40:	4641      	mov	r1, r8
 800be42:	4620      	mov	r0, r4
 800be44:	f7ff face 	bl	800b3e4 <__ratio>
 800be48:	2200      	movs	r2, #0
 800be4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	f7f4 fe71 	bl	8000b38 <__aeabi_dcmple>
 800be56:	2800      	cmp	r0, #0
 800be58:	d06d      	beq.n	800bf36 <_strtod_l+0xa26>
 800be5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d178      	bne.n	800bf52 <_strtod_l+0xa42>
 800be60:	f1ba 0f00 	cmp.w	sl, #0
 800be64:	d156      	bne.n	800bf14 <_strtod_l+0xa04>
 800be66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d158      	bne.n	800bf22 <_strtod_l+0xa12>
 800be70:	2200      	movs	r2, #0
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	4b5e      	ldr	r3, [pc, #376]	@ (800bff0 <_strtod_l+0xae0>)
 800be78:	f7f4 fe54 	bl	8000b24 <__aeabi_dcmplt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d157      	bne.n	800bf30 <_strtod_l+0xa20>
 800be80:	4630      	mov	r0, r6
 800be82:	4639      	mov	r1, r7
 800be84:	2200      	movs	r2, #0
 800be86:	4b5b      	ldr	r3, [pc, #364]	@ (800bff4 <_strtod_l+0xae4>)
 800be88:	f7f4 fbda 	bl	8000640 <__aeabi_dmul>
 800be8c:	4606      	mov	r6, r0
 800be8e:	460f      	mov	r7, r1
 800be90:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800be94:	9606      	str	r6, [sp, #24]
 800be96:	9307      	str	r3, [sp, #28]
 800be98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be9c:	4d51      	ldr	r5, [pc, #324]	@ (800bfe4 <_strtod_l+0xad4>)
 800be9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bea4:	401d      	ands	r5, r3
 800bea6:	4b54      	ldr	r3, [pc, #336]	@ (800bff8 <_strtod_l+0xae8>)
 800bea8:	429d      	cmp	r5, r3
 800beaa:	f040 80ab 	bne.w	800c004 <_strtod_l+0xaf4>
 800beae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beb0:	4650      	mov	r0, sl
 800beb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800beb6:	4659      	mov	r1, fp
 800beb8:	f7ff f9d4 	bl	800b264 <__ulp>
 800bebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bec0:	f7f4 fbbe 	bl	8000640 <__aeabi_dmul>
 800bec4:	4652      	mov	r2, sl
 800bec6:	465b      	mov	r3, fp
 800bec8:	f7f4 fa04 	bl	80002d4 <__adddf3>
 800becc:	460b      	mov	r3, r1
 800bece:	4945      	ldr	r1, [pc, #276]	@ (800bfe4 <_strtod_l+0xad4>)
 800bed0:	4a4a      	ldr	r2, [pc, #296]	@ (800bffc <_strtod_l+0xaec>)
 800bed2:	4019      	ands	r1, r3
 800bed4:	4291      	cmp	r1, r2
 800bed6:	4682      	mov	sl, r0
 800bed8:	d942      	bls.n	800bf60 <_strtod_l+0xa50>
 800beda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bedc:	4b43      	ldr	r3, [pc, #268]	@ (800bfec <_strtod_l+0xadc>)
 800bede:	429a      	cmp	r2, r3
 800bee0:	d103      	bne.n	800beea <_strtod_l+0x9da>
 800bee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bee4:	3301      	adds	r3, #1
 800bee6:	f43f ad32 	beq.w	800b94e <_strtod_l+0x43e>
 800beea:	f04f 3aff 	mov.w	sl, #4294967295
 800beee:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800bfec <_strtod_l+0xadc>
 800bef2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bef4:	9805      	ldr	r0, [sp, #20]
 800bef6:	f7fe fe89 	bl	800ac0c <_Bfree>
 800befa:	4649      	mov	r1, r9
 800befc:	9805      	ldr	r0, [sp, #20]
 800befe:	f7fe fe85 	bl	800ac0c <_Bfree>
 800bf02:	4641      	mov	r1, r8
 800bf04:	9805      	ldr	r0, [sp, #20]
 800bf06:	f7fe fe81 	bl	800ac0c <_Bfree>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	9805      	ldr	r0, [sp, #20]
 800bf0e:	f7fe fe7d 	bl	800ac0c <_Bfree>
 800bf12:	e61c      	b.n	800bb4e <_strtod_l+0x63e>
 800bf14:	f1ba 0f01 	cmp.w	sl, #1
 800bf18:	d103      	bne.n	800bf22 <_strtod_l+0xa12>
 800bf1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f43f ada9 	beq.w	800ba74 <_strtod_l+0x564>
 800bf22:	2200      	movs	r2, #0
 800bf24:	4b36      	ldr	r3, [pc, #216]	@ (800c000 <_strtod_l+0xaf0>)
 800bf26:	2600      	movs	r6, #0
 800bf28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf2c:	4f30      	ldr	r7, [pc, #192]	@ (800bff0 <_strtod_l+0xae0>)
 800bf2e:	e7b3      	b.n	800be98 <_strtod_l+0x988>
 800bf30:	2600      	movs	r6, #0
 800bf32:	4f30      	ldr	r7, [pc, #192]	@ (800bff4 <_strtod_l+0xae4>)
 800bf34:	e7ac      	b.n	800be90 <_strtod_l+0x980>
 800bf36:	4630      	mov	r0, r6
 800bf38:	4639      	mov	r1, r7
 800bf3a:	4b2e      	ldr	r3, [pc, #184]	@ (800bff4 <_strtod_l+0xae4>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f7f4 fb7f 	bl	8000640 <__aeabi_dmul>
 800bf42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf44:	4606      	mov	r6, r0
 800bf46:	460f      	mov	r7, r1
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0a1      	beq.n	800be90 <_strtod_l+0x980>
 800bf4c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf50:	e7a2      	b.n	800be98 <_strtod_l+0x988>
 800bf52:	2200      	movs	r2, #0
 800bf54:	4b26      	ldr	r3, [pc, #152]	@ (800bff0 <_strtod_l+0xae0>)
 800bf56:	4616      	mov	r6, r2
 800bf58:	461f      	mov	r7, r3
 800bf5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf5e:	e79b      	b.n	800be98 <_strtod_l+0x988>
 800bf60:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bf64:	9b08      	ldr	r3, [sp, #32]
 800bf66:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1c1      	bne.n	800bef2 <_strtod_l+0x9e2>
 800bf6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf72:	0d1b      	lsrs	r3, r3, #20
 800bf74:	051b      	lsls	r3, r3, #20
 800bf76:	429d      	cmp	r5, r3
 800bf78:	d1bb      	bne.n	800bef2 <_strtod_l+0x9e2>
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	f7f4 ffdb 	bl	8000f38 <__aeabi_d2lz>
 800bf82:	f7f4 fb2f 	bl	80005e4 <__aeabi_l2d>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7f4 f99f 	bl	80002d0 <__aeabi_dsub>
 800bf92:	460b      	mov	r3, r1
 800bf94:	4602      	mov	r2, r0
 800bf96:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bf9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bf9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfa0:	ea46 060a 	orr.w	r6, r6, sl
 800bfa4:	431e      	orrs	r6, r3
 800bfa6:	d06a      	beq.n	800c07e <_strtod_l+0xb6e>
 800bfa8:	a309      	add	r3, pc, #36	@ (adr r3, 800bfd0 <_strtod_l+0xac0>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	f7f4 fdb9 	bl	8000b24 <__aeabi_dcmplt>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	f47f acd6 	bne.w	800b964 <_strtod_l+0x454>
 800bfb8:	a307      	add	r3, pc, #28	@ (adr r3, 800bfd8 <_strtod_l+0xac8>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfc2:	f7f4 fdcd 	bl	8000b60 <__aeabi_dcmpgt>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d093      	beq.n	800bef2 <_strtod_l+0x9e2>
 800bfca:	e4cb      	b.n	800b964 <_strtod_l+0x454>
 800bfcc:	f3af 8000 	nop.w
 800bfd0:	94a03595 	.word	0x94a03595
 800bfd4:	3fdfffff 	.word	0x3fdfffff
 800bfd8:	35afe535 	.word	0x35afe535
 800bfdc:	3fe00000 	.word	0x3fe00000
 800bfe0:	39500000 	.word	0x39500000
 800bfe4:	7ff00000 	.word	0x7ff00000
 800bfe8:	000fffff 	.word	0x000fffff
 800bfec:	7fefffff 	.word	0x7fefffff
 800bff0:	3ff00000 	.word	0x3ff00000
 800bff4:	3fe00000 	.word	0x3fe00000
 800bff8:	7fe00000 	.word	0x7fe00000
 800bffc:	7c9fffff 	.word	0x7c9fffff
 800c000:	bff00000 	.word	0xbff00000
 800c004:	9b08      	ldr	r3, [sp, #32]
 800c006:	b323      	cbz	r3, 800c052 <_strtod_l+0xb42>
 800c008:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c00c:	d821      	bhi.n	800c052 <_strtod_l+0xb42>
 800c00e:	a328      	add	r3, pc, #160	@ (adr r3, 800c0b0 <_strtod_l+0xba0>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	4630      	mov	r0, r6
 800c016:	4639      	mov	r1, r7
 800c018:	f7f4 fd8e 	bl	8000b38 <__aeabi_dcmple>
 800c01c:	b1a0      	cbz	r0, 800c048 <_strtod_l+0xb38>
 800c01e:	4639      	mov	r1, r7
 800c020:	4630      	mov	r0, r6
 800c022:	f7f4 fde5 	bl	8000bf0 <__aeabi_d2uiz>
 800c026:	2801      	cmp	r0, #1
 800c028:	bf38      	it	cc
 800c02a:	2001      	movcc	r0, #1
 800c02c:	f7f4 fa8e 	bl	800054c <__aeabi_ui2d>
 800c030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c032:	4606      	mov	r6, r0
 800c034:	460f      	mov	r7, r1
 800c036:	b9fb      	cbnz	r3, 800c078 <_strtod_l+0xb68>
 800c038:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c03c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c03e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c040:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c044:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c048:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c04a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c04e:	1b5b      	subs	r3, r3, r5
 800c050:	9311      	str	r3, [sp, #68]	@ 0x44
 800c052:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c056:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c05a:	f7ff f903 	bl	800b264 <__ulp>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4650      	mov	r0, sl
 800c064:	4659      	mov	r1, fp
 800c066:	f7f4 faeb 	bl	8000640 <__aeabi_dmul>
 800c06a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c06e:	f7f4 f931 	bl	80002d4 <__adddf3>
 800c072:	4682      	mov	sl, r0
 800c074:	468b      	mov	fp, r1
 800c076:	e775      	b.n	800bf64 <_strtod_l+0xa54>
 800c078:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c07c:	e7e0      	b.n	800c040 <_strtod_l+0xb30>
 800c07e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0b8 <_strtod_l+0xba8>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7f4 fd4e 	bl	8000b24 <__aeabi_dcmplt>
 800c088:	e79d      	b.n	800bfc6 <_strtod_l+0xab6>
 800c08a:	2300      	movs	r3, #0
 800c08c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c08e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c090:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	f7ff ba79 	b.w	800b58a <_strtod_l+0x7a>
 800c098:	2a65      	cmp	r2, #101	@ 0x65
 800c09a:	f43f ab72 	beq.w	800b782 <_strtod_l+0x272>
 800c09e:	2a45      	cmp	r2, #69	@ 0x45
 800c0a0:	f43f ab6f 	beq.w	800b782 <_strtod_l+0x272>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	f7ff bbaa 	b.w	800b7fe <_strtod_l+0x2ee>
 800c0aa:	bf00      	nop
 800c0ac:	f3af 8000 	nop.w
 800c0b0:	ffc00000 	.word	0xffc00000
 800c0b4:	41dfffff 	.word	0x41dfffff
 800c0b8:	94a03595 	.word	0x94a03595
 800c0bc:	3fcfffff 	.word	0x3fcfffff

0800c0c0 <_strtod_r>:
 800c0c0:	4b01      	ldr	r3, [pc, #4]	@ (800c0c8 <_strtod_r+0x8>)
 800c0c2:	f7ff ba25 	b.w	800b510 <_strtod_l>
 800c0c6:	bf00      	nop
 800c0c8:	2000006c 	.word	0x2000006c

0800c0cc <__ssputs_r>:
 800c0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d0:	461f      	mov	r7, r3
 800c0d2:	688e      	ldr	r6, [r1, #8]
 800c0d4:	4682      	mov	sl, r0
 800c0d6:	42be      	cmp	r6, r7
 800c0d8:	460c      	mov	r4, r1
 800c0da:	4690      	mov	r8, r2
 800c0dc:	680b      	ldr	r3, [r1, #0]
 800c0de:	d82d      	bhi.n	800c13c <__ssputs_r+0x70>
 800c0e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c0e8:	d026      	beq.n	800c138 <__ssputs_r+0x6c>
 800c0ea:	6965      	ldr	r5, [r4, #20]
 800c0ec:	6909      	ldr	r1, [r1, #16]
 800c0ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0f2:	eba3 0901 	sub.w	r9, r3, r1
 800c0f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0fa:	1c7b      	adds	r3, r7, #1
 800c0fc:	444b      	add	r3, r9
 800c0fe:	106d      	asrs	r5, r5, #1
 800c100:	429d      	cmp	r5, r3
 800c102:	bf38      	it	cc
 800c104:	461d      	movcc	r5, r3
 800c106:	0553      	lsls	r3, r2, #21
 800c108:	d527      	bpl.n	800c15a <__ssputs_r+0x8e>
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7fe fcb2 	bl	800aa74 <_malloc_r>
 800c110:	4606      	mov	r6, r0
 800c112:	b360      	cbz	r0, 800c16e <__ssputs_r+0xa2>
 800c114:	464a      	mov	r2, r9
 800c116:	6921      	ldr	r1, [r4, #16]
 800c118:	f7fd fdc9 	bl	8009cae <memcpy>
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c126:	81a3      	strh	r3, [r4, #12]
 800c128:	6126      	str	r6, [r4, #16]
 800c12a:	444e      	add	r6, r9
 800c12c:	6026      	str	r6, [r4, #0]
 800c12e:	463e      	mov	r6, r7
 800c130:	6165      	str	r5, [r4, #20]
 800c132:	eba5 0509 	sub.w	r5, r5, r9
 800c136:	60a5      	str	r5, [r4, #8]
 800c138:	42be      	cmp	r6, r7
 800c13a:	d900      	bls.n	800c13e <__ssputs_r+0x72>
 800c13c:	463e      	mov	r6, r7
 800c13e:	4632      	mov	r2, r6
 800c140:	4641      	mov	r1, r8
 800c142:	6820      	ldr	r0, [r4, #0]
 800c144:	f000 f9c2 	bl	800c4cc <memmove>
 800c148:	2000      	movs	r0, #0
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	1b9b      	subs	r3, r3, r6
 800c14e:	60a3      	str	r3, [r4, #8]
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	4433      	add	r3, r6
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15a:	462a      	mov	r2, r5
 800c15c:	f000 fd63 	bl	800cc26 <_realloc_r>
 800c160:	4606      	mov	r6, r0
 800c162:	2800      	cmp	r0, #0
 800c164:	d1e0      	bne.n	800c128 <__ssputs_r+0x5c>
 800c166:	4650      	mov	r0, sl
 800c168:	6921      	ldr	r1, [r4, #16]
 800c16a:	f7fe fc11 	bl	800a990 <_free_r>
 800c16e:	230c      	movs	r3, #12
 800c170:	f8ca 3000 	str.w	r3, [sl]
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	f04f 30ff 	mov.w	r0, #4294967295
 800c17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	e7e9      	b.n	800c156 <__ssputs_r+0x8a>
	...

0800c184 <_svfiprintf_r>:
 800c184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c188:	4698      	mov	r8, r3
 800c18a:	898b      	ldrh	r3, [r1, #12]
 800c18c:	4607      	mov	r7, r0
 800c18e:	061b      	lsls	r3, r3, #24
 800c190:	460d      	mov	r5, r1
 800c192:	4614      	mov	r4, r2
 800c194:	b09d      	sub	sp, #116	@ 0x74
 800c196:	d510      	bpl.n	800c1ba <_svfiprintf_r+0x36>
 800c198:	690b      	ldr	r3, [r1, #16]
 800c19a:	b973      	cbnz	r3, 800c1ba <_svfiprintf_r+0x36>
 800c19c:	2140      	movs	r1, #64	@ 0x40
 800c19e:	f7fe fc69 	bl	800aa74 <_malloc_r>
 800c1a2:	6028      	str	r0, [r5, #0]
 800c1a4:	6128      	str	r0, [r5, #16]
 800c1a6:	b930      	cbnz	r0, 800c1b6 <_svfiprintf_r+0x32>
 800c1a8:	230c      	movs	r3, #12
 800c1aa:	603b      	str	r3, [r7, #0]
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	b01d      	add	sp, #116	@ 0x74
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	2340      	movs	r3, #64	@ 0x40
 800c1b8:	616b      	str	r3, [r5, #20]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1be:	2320      	movs	r3, #32
 800c1c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1c4:	2330      	movs	r3, #48	@ 0x30
 800c1c6:	f04f 0901 	mov.w	r9, #1
 800c1ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c368 <_svfiprintf_r+0x1e4>
 800c1d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1d6:	4623      	mov	r3, r4
 800c1d8:	469a      	mov	sl, r3
 800c1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1de:	b10a      	cbz	r2, 800c1e4 <_svfiprintf_r+0x60>
 800c1e0:	2a25      	cmp	r2, #37	@ 0x25
 800c1e2:	d1f9      	bne.n	800c1d8 <_svfiprintf_r+0x54>
 800c1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1e8:	d00b      	beq.n	800c202 <_svfiprintf_r+0x7e>
 800c1ea:	465b      	mov	r3, fp
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	4638      	mov	r0, r7
 800c1f2:	f7ff ff6b 	bl	800c0cc <__ssputs_r>
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	f000 80a7 	beq.w	800c34a <_svfiprintf_r+0x1c6>
 800c1fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1fe:	445a      	add	r2, fp
 800c200:	9209      	str	r2, [sp, #36]	@ 0x24
 800c202:	f89a 3000 	ldrb.w	r3, [sl]
 800c206:	2b00      	cmp	r3, #0
 800c208:	f000 809f 	beq.w	800c34a <_svfiprintf_r+0x1c6>
 800c20c:	2300      	movs	r3, #0
 800c20e:	f04f 32ff 	mov.w	r2, #4294967295
 800c212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c216:	f10a 0a01 	add.w	sl, sl, #1
 800c21a:	9304      	str	r3, [sp, #16]
 800c21c:	9307      	str	r3, [sp, #28]
 800c21e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c222:	931a      	str	r3, [sp, #104]	@ 0x68
 800c224:	4654      	mov	r4, sl
 800c226:	2205      	movs	r2, #5
 800c228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22c:	484e      	ldr	r0, [pc, #312]	@ (800c368 <_svfiprintf_r+0x1e4>)
 800c22e:	f7fd fd30 	bl	8009c92 <memchr>
 800c232:	9a04      	ldr	r2, [sp, #16]
 800c234:	b9d8      	cbnz	r0, 800c26e <_svfiprintf_r+0xea>
 800c236:	06d0      	lsls	r0, r2, #27
 800c238:	bf44      	itt	mi
 800c23a:	2320      	movmi	r3, #32
 800c23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c240:	0711      	lsls	r1, r2, #28
 800c242:	bf44      	itt	mi
 800c244:	232b      	movmi	r3, #43	@ 0x2b
 800c246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c24a:	f89a 3000 	ldrb.w	r3, [sl]
 800c24e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c250:	d015      	beq.n	800c27e <_svfiprintf_r+0xfa>
 800c252:	4654      	mov	r4, sl
 800c254:	2000      	movs	r0, #0
 800c256:	f04f 0c0a 	mov.w	ip, #10
 800c25a:	9a07      	ldr	r2, [sp, #28]
 800c25c:	4621      	mov	r1, r4
 800c25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c262:	3b30      	subs	r3, #48	@ 0x30
 800c264:	2b09      	cmp	r3, #9
 800c266:	d94b      	bls.n	800c300 <_svfiprintf_r+0x17c>
 800c268:	b1b0      	cbz	r0, 800c298 <_svfiprintf_r+0x114>
 800c26a:	9207      	str	r2, [sp, #28]
 800c26c:	e014      	b.n	800c298 <_svfiprintf_r+0x114>
 800c26e:	eba0 0308 	sub.w	r3, r0, r8
 800c272:	fa09 f303 	lsl.w	r3, r9, r3
 800c276:	4313      	orrs	r3, r2
 800c278:	46a2      	mov	sl, r4
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	e7d2      	b.n	800c224 <_svfiprintf_r+0xa0>
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	1d19      	adds	r1, r3, #4
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	9103      	str	r1, [sp, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	bfbb      	ittet	lt
 800c28a:	425b      	neglt	r3, r3
 800c28c:	f042 0202 	orrlt.w	r2, r2, #2
 800c290:	9307      	strge	r3, [sp, #28]
 800c292:	9307      	strlt	r3, [sp, #28]
 800c294:	bfb8      	it	lt
 800c296:	9204      	strlt	r2, [sp, #16]
 800c298:	7823      	ldrb	r3, [r4, #0]
 800c29a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c29c:	d10a      	bne.n	800c2b4 <_svfiprintf_r+0x130>
 800c29e:	7863      	ldrb	r3, [r4, #1]
 800c2a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2a2:	d132      	bne.n	800c30a <_svfiprintf_r+0x186>
 800c2a4:	9b03      	ldr	r3, [sp, #12]
 800c2a6:	3402      	adds	r4, #2
 800c2a8:	1d1a      	adds	r2, r3, #4
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	9203      	str	r2, [sp, #12]
 800c2ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2b2:	9305      	str	r3, [sp, #20]
 800c2b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c36c <_svfiprintf_r+0x1e8>
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	4650      	mov	r0, sl
 800c2bc:	7821      	ldrb	r1, [r4, #0]
 800c2be:	f7fd fce8 	bl	8009c92 <memchr>
 800c2c2:	b138      	cbz	r0, 800c2d4 <_svfiprintf_r+0x150>
 800c2c4:	2240      	movs	r2, #64	@ 0x40
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	eba0 000a 	sub.w	r0, r0, sl
 800c2cc:	4082      	lsls	r2, r0
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	3401      	adds	r4, #1
 800c2d2:	9304      	str	r3, [sp, #16]
 800c2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d8:	2206      	movs	r2, #6
 800c2da:	4825      	ldr	r0, [pc, #148]	@ (800c370 <_svfiprintf_r+0x1ec>)
 800c2dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2e0:	f7fd fcd7 	bl	8009c92 <memchr>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d036      	beq.n	800c356 <_svfiprintf_r+0x1d2>
 800c2e8:	4b22      	ldr	r3, [pc, #136]	@ (800c374 <_svfiprintf_r+0x1f0>)
 800c2ea:	bb1b      	cbnz	r3, 800c334 <_svfiprintf_r+0x1b0>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	3307      	adds	r3, #7
 800c2f0:	f023 0307 	bic.w	r3, r3, #7
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	9303      	str	r3, [sp, #12]
 800c2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2fa:	4433      	add	r3, r6
 800c2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2fe:	e76a      	b.n	800c1d6 <_svfiprintf_r+0x52>
 800c300:	460c      	mov	r4, r1
 800c302:	2001      	movs	r0, #1
 800c304:	fb0c 3202 	mla	r2, ip, r2, r3
 800c308:	e7a8      	b.n	800c25c <_svfiprintf_r+0xd8>
 800c30a:	2300      	movs	r3, #0
 800c30c:	f04f 0c0a 	mov.w	ip, #10
 800c310:	4619      	mov	r1, r3
 800c312:	3401      	adds	r4, #1
 800c314:	9305      	str	r3, [sp, #20]
 800c316:	4620      	mov	r0, r4
 800c318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c31c:	3a30      	subs	r2, #48	@ 0x30
 800c31e:	2a09      	cmp	r2, #9
 800c320:	d903      	bls.n	800c32a <_svfiprintf_r+0x1a6>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d0c6      	beq.n	800c2b4 <_svfiprintf_r+0x130>
 800c326:	9105      	str	r1, [sp, #20]
 800c328:	e7c4      	b.n	800c2b4 <_svfiprintf_r+0x130>
 800c32a:	4604      	mov	r4, r0
 800c32c:	2301      	movs	r3, #1
 800c32e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c332:	e7f0      	b.n	800c316 <_svfiprintf_r+0x192>
 800c334:	ab03      	add	r3, sp, #12
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	462a      	mov	r2, r5
 800c33a:	4638      	mov	r0, r7
 800c33c:	4b0e      	ldr	r3, [pc, #56]	@ (800c378 <_svfiprintf_r+0x1f4>)
 800c33e:	a904      	add	r1, sp, #16
 800c340:	f7fc fd12 	bl	8008d68 <_printf_float>
 800c344:	1c42      	adds	r2, r0, #1
 800c346:	4606      	mov	r6, r0
 800c348:	d1d6      	bne.n	800c2f8 <_svfiprintf_r+0x174>
 800c34a:	89ab      	ldrh	r3, [r5, #12]
 800c34c:	065b      	lsls	r3, r3, #25
 800c34e:	f53f af2d 	bmi.w	800c1ac <_svfiprintf_r+0x28>
 800c352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c354:	e72c      	b.n	800c1b0 <_svfiprintf_r+0x2c>
 800c356:	ab03      	add	r3, sp, #12
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	462a      	mov	r2, r5
 800c35c:	4638      	mov	r0, r7
 800c35e:	4b06      	ldr	r3, [pc, #24]	@ (800c378 <_svfiprintf_r+0x1f4>)
 800c360:	a904      	add	r1, sp, #16
 800c362:	f7fc ff9f 	bl	80092a4 <_printf_i>
 800c366:	e7ed      	b.n	800c344 <_svfiprintf_r+0x1c0>
 800c368:	0800d6b0 	.word	0x0800d6b0
 800c36c:	0800d6b6 	.word	0x0800d6b6
 800c370:	0800d6ba 	.word	0x0800d6ba
 800c374:	08008d69 	.word	0x08008d69
 800c378:	0800c0cd 	.word	0x0800c0cd

0800c37c <__sflush_r>:
 800c37c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	0716      	lsls	r6, r2, #28
 800c384:	4605      	mov	r5, r0
 800c386:	460c      	mov	r4, r1
 800c388:	d454      	bmi.n	800c434 <__sflush_r+0xb8>
 800c38a:	684b      	ldr	r3, [r1, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dc02      	bgt.n	800c396 <__sflush_r+0x1a>
 800c390:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	dd48      	ble.n	800c428 <__sflush_r+0xac>
 800c396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c398:	2e00      	cmp	r6, #0
 800c39a:	d045      	beq.n	800c428 <__sflush_r+0xac>
 800c39c:	2300      	movs	r3, #0
 800c39e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3a2:	682f      	ldr	r7, [r5, #0]
 800c3a4:	6a21      	ldr	r1, [r4, #32]
 800c3a6:	602b      	str	r3, [r5, #0]
 800c3a8:	d030      	beq.n	800c40c <__sflush_r+0x90>
 800c3aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	0759      	lsls	r1, r3, #29
 800c3b0:	d505      	bpl.n	800c3be <__sflush_r+0x42>
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	1ad2      	subs	r2, r2, r3
 800c3b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3b8:	b10b      	cbz	r3, 800c3be <__sflush_r+0x42>
 800c3ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3bc:	1ad2      	subs	r2, r2, r3
 800c3be:	2300      	movs	r3, #0
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3c4:	6a21      	ldr	r1, [r4, #32]
 800c3c6:	47b0      	blx	r6
 800c3c8:	1c43      	adds	r3, r0, #1
 800c3ca:	89a3      	ldrh	r3, [r4, #12]
 800c3cc:	d106      	bne.n	800c3dc <__sflush_r+0x60>
 800c3ce:	6829      	ldr	r1, [r5, #0]
 800c3d0:	291d      	cmp	r1, #29
 800c3d2:	d82b      	bhi.n	800c42c <__sflush_r+0xb0>
 800c3d4:	4a28      	ldr	r2, [pc, #160]	@ (800c478 <__sflush_r+0xfc>)
 800c3d6:	40ca      	lsrs	r2, r1
 800c3d8:	07d6      	lsls	r6, r2, #31
 800c3da:	d527      	bpl.n	800c42c <__sflush_r+0xb0>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	6062      	str	r2, [r4, #4]
 800c3e0:	6922      	ldr	r2, [r4, #16]
 800c3e2:	04d9      	lsls	r1, r3, #19
 800c3e4:	6022      	str	r2, [r4, #0]
 800c3e6:	d504      	bpl.n	800c3f2 <__sflush_r+0x76>
 800c3e8:	1c42      	adds	r2, r0, #1
 800c3ea:	d101      	bne.n	800c3f0 <__sflush_r+0x74>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	b903      	cbnz	r3, 800c3f2 <__sflush_r+0x76>
 800c3f0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3f4:	602f      	str	r7, [r5, #0]
 800c3f6:	b1b9      	cbz	r1, 800c428 <__sflush_r+0xac>
 800c3f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3fc:	4299      	cmp	r1, r3
 800c3fe:	d002      	beq.n	800c406 <__sflush_r+0x8a>
 800c400:	4628      	mov	r0, r5
 800c402:	f7fe fac5 	bl	800a990 <_free_r>
 800c406:	2300      	movs	r3, #0
 800c408:	6363      	str	r3, [r4, #52]	@ 0x34
 800c40a:	e00d      	b.n	800c428 <__sflush_r+0xac>
 800c40c:	2301      	movs	r3, #1
 800c40e:	4628      	mov	r0, r5
 800c410:	47b0      	blx	r6
 800c412:	4602      	mov	r2, r0
 800c414:	1c50      	adds	r0, r2, #1
 800c416:	d1c9      	bne.n	800c3ac <__sflush_r+0x30>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0c6      	beq.n	800c3ac <__sflush_r+0x30>
 800c41e:	2b1d      	cmp	r3, #29
 800c420:	d001      	beq.n	800c426 <__sflush_r+0xaa>
 800c422:	2b16      	cmp	r3, #22
 800c424:	d11d      	bne.n	800c462 <__sflush_r+0xe6>
 800c426:	602f      	str	r7, [r5, #0]
 800c428:	2000      	movs	r0, #0
 800c42a:	e021      	b.n	800c470 <__sflush_r+0xf4>
 800c42c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c430:	b21b      	sxth	r3, r3
 800c432:	e01a      	b.n	800c46a <__sflush_r+0xee>
 800c434:	690f      	ldr	r7, [r1, #16]
 800c436:	2f00      	cmp	r7, #0
 800c438:	d0f6      	beq.n	800c428 <__sflush_r+0xac>
 800c43a:	0793      	lsls	r3, r2, #30
 800c43c:	bf18      	it	ne
 800c43e:	2300      	movne	r3, #0
 800c440:	680e      	ldr	r6, [r1, #0]
 800c442:	bf08      	it	eq
 800c444:	694b      	ldreq	r3, [r1, #20]
 800c446:	1bf6      	subs	r6, r6, r7
 800c448:	600f      	str	r7, [r1, #0]
 800c44a:	608b      	str	r3, [r1, #8]
 800c44c:	2e00      	cmp	r6, #0
 800c44e:	ddeb      	ble.n	800c428 <__sflush_r+0xac>
 800c450:	4633      	mov	r3, r6
 800c452:	463a      	mov	r2, r7
 800c454:	4628      	mov	r0, r5
 800c456:	6a21      	ldr	r1, [r4, #32]
 800c458:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c45c:	47e0      	blx	ip
 800c45e:	2800      	cmp	r0, #0
 800c460:	dc07      	bgt.n	800c472 <__sflush_r+0xf6>
 800c462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c472:	4407      	add	r7, r0
 800c474:	1a36      	subs	r6, r6, r0
 800c476:	e7e9      	b.n	800c44c <__sflush_r+0xd0>
 800c478:	20400001 	.word	0x20400001

0800c47c <_fflush_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	690b      	ldr	r3, [r1, #16]
 800c480:	4605      	mov	r5, r0
 800c482:	460c      	mov	r4, r1
 800c484:	b913      	cbnz	r3, 800c48c <_fflush_r+0x10>
 800c486:	2500      	movs	r5, #0
 800c488:	4628      	mov	r0, r5
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	b118      	cbz	r0, 800c496 <_fflush_r+0x1a>
 800c48e:	6a03      	ldr	r3, [r0, #32]
 800c490:	b90b      	cbnz	r3, 800c496 <_fflush_r+0x1a>
 800c492:	f7fd fabb 	bl	8009a0c <__sinit>
 800c496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0f3      	beq.n	800c486 <_fflush_r+0xa>
 800c49e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4a0:	07d0      	lsls	r0, r2, #31
 800c4a2:	d404      	bmi.n	800c4ae <_fflush_r+0x32>
 800c4a4:	0599      	lsls	r1, r3, #22
 800c4a6:	d402      	bmi.n	800c4ae <_fflush_r+0x32>
 800c4a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4aa:	f7fd fbf0 	bl	8009c8e <__retarget_lock_acquire_recursive>
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	f7ff ff63 	bl	800c37c <__sflush_r>
 800c4b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	07da      	lsls	r2, r3, #31
 800c4bc:	d4e4      	bmi.n	800c488 <_fflush_r+0xc>
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	059b      	lsls	r3, r3, #22
 800c4c2:	d4e1      	bmi.n	800c488 <_fflush_r+0xc>
 800c4c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4c6:	f7fd fbe3 	bl	8009c90 <__retarget_lock_release_recursive>
 800c4ca:	e7dd      	b.n	800c488 <_fflush_r+0xc>

0800c4cc <memmove>:
 800c4cc:	4288      	cmp	r0, r1
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	eb01 0402 	add.w	r4, r1, r2
 800c4d4:	d902      	bls.n	800c4dc <memmove+0x10>
 800c4d6:	4284      	cmp	r4, r0
 800c4d8:	4623      	mov	r3, r4
 800c4da:	d807      	bhi.n	800c4ec <memmove+0x20>
 800c4dc:	1e43      	subs	r3, r0, #1
 800c4de:	42a1      	cmp	r1, r4
 800c4e0:	d008      	beq.n	800c4f4 <memmove+0x28>
 800c4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4ea:	e7f8      	b.n	800c4de <memmove+0x12>
 800c4ec:	4601      	mov	r1, r0
 800c4ee:	4402      	add	r2, r0
 800c4f0:	428a      	cmp	r2, r1
 800c4f2:	d100      	bne.n	800c4f6 <memmove+0x2a>
 800c4f4:	bd10      	pop	{r4, pc}
 800c4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4fe:	e7f7      	b.n	800c4f0 <memmove+0x24>

0800c500 <_sbrk_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	2300      	movs	r3, #0
 800c504:	4d05      	ldr	r5, [pc, #20]	@ (800c51c <_sbrk_r+0x1c>)
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	f7f5 fe6c 	bl	80021e8 <_sbrk>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_sbrk_r+0x1a>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_sbrk_r+0x1a>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	20002244 	.word	0x20002244

0800c520 <nan>:
 800c520:	2000      	movs	r0, #0
 800c522:	4901      	ldr	r1, [pc, #4]	@ (800c528 <nan+0x8>)
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	7ff80000 	.word	0x7ff80000

0800c52c <__assert_func>:
 800c52c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c52e:	4614      	mov	r4, r2
 800c530:	461a      	mov	r2, r3
 800c532:	4b09      	ldr	r3, [pc, #36]	@ (800c558 <__assert_func+0x2c>)
 800c534:	4605      	mov	r5, r0
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68d8      	ldr	r0, [r3, #12]
 800c53a:	b14c      	cbz	r4, 800c550 <__assert_func+0x24>
 800c53c:	4b07      	ldr	r3, [pc, #28]	@ (800c55c <__assert_func+0x30>)
 800c53e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c542:	9100      	str	r1, [sp, #0]
 800c544:	462b      	mov	r3, r5
 800c546:	4906      	ldr	r1, [pc, #24]	@ (800c560 <__assert_func+0x34>)
 800c548:	f000 fba8 	bl	800cc9c <fiprintf>
 800c54c:	f000 fbb8 	bl	800ccc0 <abort>
 800c550:	4b04      	ldr	r3, [pc, #16]	@ (800c564 <__assert_func+0x38>)
 800c552:	461c      	mov	r4, r3
 800c554:	e7f3      	b.n	800c53e <__assert_func+0x12>
 800c556:	bf00      	nop
 800c558:	2000001c 	.word	0x2000001c
 800c55c:	0800d6c9 	.word	0x0800d6c9
 800c560:	0800d6d6 	.word	0x0800d6d6
 800c564:	0800d704 	.word	0x0800d704

0800c568 <_calloc_r>:
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	fba1 5402 	umull	r5, r4, r1, r2
 800c56e:	b934      	cbnz	r4, 800c57e <_calloc_r+0x16>
 800c570:	4629      	mov	r1, r5
 800c572:	f7fe fa7f 	bl	800aa74 <_malloc_r>
 800c576:	4606      	mov	r6, r0
 800c578:	b928      	cbnz	r0, 800c586 <_calloc_r+0x1e>
 800c57a:	4630      	mov	r0, r6
 800c57c:	bd70      	pop	{r4, r5, r6, pc}
 800c57e:	220c      	movs	r2, #12
 800c580:	2600      	movs	r6, #0
 800c582:	6002      	str	r2, [r0, #0]
 800c584:	e7f9      	b.n	800c57a <_calloc_r+0x12>
 800c586:	462a      	mov	r2, r5
 800c588:	4621      	mov	r1, r4
 800c58a:	f7fd fada 	bl	8009b42 <memset>
 800c58e:	e7f4      	b.n	800c57a <_calloc_r+0x12>

0800c590 <rshift>:
 800c590:	6903      	ldr	r3, [r0, #16]
 800c592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c596:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c59a:	f100 0414 	add.w	r4, r0, #20
 800c59e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c5a2:	dd46      	ble.n	800c632 <rshift+0xa2>
 800c5a4:	f011 011f 	ands.w	r1, r1, #31
 800c5a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c5ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c5b0:	d10c      	bne.n	800c5cc <rshift+0x3c>
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	f100 0710 	add.w	r7, r0, #16
 800c5b8:	42b1      	cmp	r1, r6
 800c5ba:	d335      	bcc.n	800c628 <rshift+0x98>
 800c5bc:	1a9b      	subs	r3, r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	1eea      	subs	r2, r5, #3
 800c5c2:	4296      	cmp	r6, r2
 800c5c4:	bf38      	it	cc
 800c5c6:	2300      	movcc	r3, #0
 800c5c8:	4423      	add	r3, r4
 800c5ca:	e015      	b.n	800c5f8 <rshift+0x68>
 800c5cc:	46a1      	mov	r9, r4
 800c5ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5d2:	f1c1 0820 	rsb	r8, r1, #32
 800c5d6:	40cf      	lsrs	r7, r1
 800c5d8:	f105 0e04 	add.w	lr, r5, #4
 800c5dc:	4576      	cmp	r6, lr
 800c5de:	46f4      	mov	ip, lr
 800c5e0:	d816      	bhi.n	800c610 <rshift+0x80>
 800c5e2:	1a9a      	subs	r2, r3, r2
 800c5e4:	0092      	lsls	r2, r2, #2
 800c5e6:	3a04      	subs	r2, #4
 800c5e8:	3501      	adds	r5, #1
 800c5ea:	42ae      	cmp	r6, r5
 800c5ec:	bf38      	it	cc
 800c5ee:	2200      	movcc	r2, #0
 800c5f0:	18a3      	adds	r3, r4, r2
 800c5f2:	50a7      	str	r7, [r4, r2]
 800c5f4:	b107      	cbz	r7, 800c5f8 <rshift+0x68>
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	42a3      	cmp	r3, r4
 800c5fa:	eba3 0204 	sub.w	r2, r3, r4
 800c5fe:	bf08      	it	eq
 800c600:	2300      	moveq	r3, #0
 800c602:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c606:	6102      	str	r2, [r0, #16]
 800c608:	bf08      	it	eq
 800c60a:	6143      	streq	r3, [r0, #20]
 800c60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c610:	f8dc c000 	ldr.w	ip, [ip]
 800c614:	fa0c fc08 	lsl.w	ip, ip, r8
 800c618:	ea4c 0707 	orr.w	r7, ip, r7
 800c61c:	f849 7b04 	str.w	r7, [r9], #4
 800c620:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c624:	40cf      	lsrs	r7, r1
 800c626:	e7d9      	b.n	800c5dc <rshift+0x4c>
 800c628:	f851 cb04 	ldr.w	ip, [r1], #4
 800c62c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c630:	e7c2      	b.n	800c5b8 <rshift+0x28>
 800c632:	4623      	mov	r3, r4
 800c634:	e7e0      	b.n	800c5f8 <rshift+0x68>

0800c636 <__hexdig_fun>:
 800c636:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c63a:	2b09      	cmp	r3, #9
 800c63c:	d802      	bhi.n	800c644 <__hexdig_fun+0xe>
 800c63e:	3820      	subs	r0, #32
 800c640:	b2c0      	uxtb	r0, r0
 800c642:	4770      	bx	lr
 800c644:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c648:	2b05      	cmp	r3, #5
 800c64a:	d801      	bhi.n	800c650 <__hexdig_fun+0x1a>
 800c64c:	3847      	subs	r0, #71	@ 0x47
 800c64e:	e7f7      	b.n	800c640 <__hexdig_fun+0xa>
 800c650:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c654:	2b05      	cmp	r3, #5
 800c656:	d801      	bhi.n	800c65c <__hexdig_fun+0x26>
 800c658:	3827      	subs	r0, #39	@ 0x27
 800c65a:	e7f1      	b.n	800c640 <__hexdig_fun+0xa>
 800c65c:	2000      	movs	r0, #0
 800c65e:	4770      	bx	lr

0800c660 <__gethex>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	468a      	mov	sl, r1
 800c666:	4690      	mov	r8, r2
 800c668:	b085      	sub	sp, #20
 800c66a:	9302      	str	r3, [sp, #8]
 800c66c:	680b      	ldr	r3, [r1, #0]
 800c66e:	9001      	str	r0, [sp, #4]
 800c670:	1c9c      	adds	r4, r3, #2
 800c672:	46a1      	mov	r9, r4
 800c674:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c678:	2830      	cmp	r0, #48	@ 0x30
 800c67a:	d0fa      	beq.n	800c672 <__gethex+0x12>
 800c67c:	eba9 0303 	sub.w	r3, r9, r3
 800c680:	f1a3 0b02 	sub.w	fp, r3, #2
 800c684:	f7ff ffd7 	bl	800c636 <__hexdig_fun>
 800c688:	4605      	mov	r5, r0
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d168      	bne.n	800c760 <__gethex+0x100>
 800c68e:	2201      	movs	r2, #1
 800c690:	4648      	mov	r0, r9
 800c692:	499f      	ldr	r1, [pc, #636]	@ (800c910 <__gethex+0x2b0>)
 800c694:	f7fd fa5d 	bl	8009b52 <strncmp>
 800c698:	4607      	mov	r7, r0
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d167      	bne.n	800c76e <__gethex+0x10e>
 800c69e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c6a2:	4626      	mov	r6, r4
 800c6a4:	f7ff ffc7 	bl	800c636 <__hexdig_fun>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d062      	beq.n	800c772 <__gethex+0x112>
 800c6ac:	4623      	mov	r3, r4
 800c6ae:	7818      	ldrb	r0, [r3, #0]
 800c6b0:	4699      	mov	r9, r3
 800c6b2:	2830      	cmp	r0, #48	@ 0x30
 800c6b4:	f103 0301 	add.w	r3, r3, #1
 800c6b8:	d0f9      	beq.n	800c6ae <__gethex+0x4e>
 800c6ba:	f7ff ffbc 	bl	800c636 <__hexdig_fun>
 800c6be:	fab0 f580 	clz	r5, r0
 800c6c2:	f04f 0b01 	mov.w	fp, #1
 800c6c6:	096d      	lsrs	r5, r5, #5
 800c6c8:	464a      	mov	r2, r9
 800c6ca:	4616      	mov	r6, r2
 800c6cc:	7830      	ldrb	r0, [r6, #0]
 800c6ce:	3201      	adds	r2, #1
 800c6d0:	f7ff ffb1 	bl	800c636 <__hexdig_fun>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1f8      	bne.n	800c6ca <__gethex+0x6a>
 800c6d8:	2201      	movs	r2, #1
 800c6da:	4630      	mov	r0, r6
 800c6dc:	498c      	ldr	r1, [pc, #560]	@ (800c910 <__gethex+0x2b0>)
 800c6de:	f7fd fa38 	bl	8009b52 <strncmp>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d13f      	bne.n	800c766 <__gethex+0x106>
 800c6e6:	b944      	cbnz	r4, 800c6fa <__gethex+0x9a>
 800c6e8:	1c74      	adds	r4, r6, #1
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	4616      	mov	r6, r2
 800c6ee:	7830      	ldrb	r0, [r6, #0]
 800c6f0:	3201      	adds	r2, #1
 800c6f2:	f7ff ffa0 	bl	800c636 <__hexdig_fun>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d1f8      	bne.n	800c6ec <__gethex+0x8c>
 800c6fa:	1ba4      	subs	r4, r4, r6
 800c6fc:	00a7      	lsls	r7, r4, #2
 800c6fe:	7833      	ldrb	r3, [r6, #0]
 800c700:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c704:	2b50      	cmp	r3, #80	@ 0x50
 800c706:	d13e      	bne.n	800c786 <__gethex+0x126>
 800c708:	7873      	ldrb	r3, [r6, #1]
 800c70a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c70c:	d033      	beq.n	800c776 <__gethex+0x116>
 800c70e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c710:	d034      	beq.n	800c77c <__gethex+0x11c>
 800c712:	2400      	movs	r4, #0
 800c714:	1c71      	adds	r1, r6, #1
 800c716:	7808      	ldrb	r0, [r1, #0]
 800c718:	f7ff ff8d 	bl	800c636 <__hexdig_fun>
 800c71c:	1e43      	subs	r3, r0, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b18      	cmp	r3, #24
 800c722:	d830      	bhi.n	800c786 <__gethex+0x126>
 800c724:	f1a0 0210 	sub.w	r2, r0, #16
 800c728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c72c:	f7ff ff83 	bl	800c636 <__hexdig_fun>
 800c730:	f100 3cff 	add.w	ip, r0, #4294967295
 800c734:	fa5f fc8c 	uxtb.w	ip, ip
 800c738:	f1bc 0f18 	cmp.w	ip, #24
 800c73c:	f04f 030a 	mov.w	r3, #10
 800c740:	d91e      	bls.n	800c780 <__gethex+0x120>
 800c742:	b104      	cbz	r4, 800c746 <__gethex+0xe6>
 800c744:	4252      	negs	r2, r2
 800c746:	4417      	add	r7, r2
 800c748:	f8ca 1000 	str.w	r1, [sl]
 800c74c:	b1ed      	cbz	r5, 800c78a <__gethex+0x12a>
 800c74e:	f1bb 0f00 	cmp.w	fp, #0
 800c752:	bf0c      	ite	eq
 800c754:	2506      	moveq	r5, #6
 800c756:	2500      	movne	r5, #0
 800c758:	4628      	mov	r0, r5
 800c75a:	b005      	add	sp, #20
 800c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c760:	2500      	movs	r5, #0
 800c762:	462c      	mov	r4, r5
 800c764:	e7b0      	b.n	800c6c8 <__gethex+0x68>
 800c766:	2c00      	cmp	r4, #0
 800c768:	d1c7      	bne.n	800c6fa <__gethex+0x9a>
 800c76a:	4627      	mov	r7, r4
 800c76c:	e7c7      	b.n	800c6fe <__gethex+0x9e>
 800c76e:	464e      	mov	r6, r9
 800c770:	462f      	mov	r7, r5
 800c772:	2501      	movs	r5, #1
 800c774:	e7c3      	b.n	800c6fe <__gethex+0x9e>
 800c776:	2400      	movs	r4, #0
 800c778:	1cb1      	adds	r1, r6, #2
 800c77a:	e7cc      	b.n	800c716 <__gethex+0xb6>
 800c77c:	2401      	movs	r4, #1
 800c77e:	e7fb      	b.n	800c778 <__gethex+0x118>
 800c780:	fb03 0002 	mla	r0, r3, r2, r0
 800c784:	e7ce      	b.n	800c724 <__gethex+0xc4>
 800c786:	4631      	mov	r1, r6
 800c788:	e7de      	b.n	800c748 <__gethex+0xe8>
 800c78a:	4629      	mov	r1, r5
 800c78c:	eba6 0309 	sub.w	r3, r6, r9
 800c790:	3b01      	subs	r3, #1
 800c792:	2b07      	cmp	r3, #7
 800c794:	dc0a      	bgt.n	800c7ac <__gethex+0x14c>
 800c796:	9801      	ldr	r0, [sp, #4]
 800c798:	f7fe f9f8 	bl	800ab8c <_Balloc>
 800c79c:	4604      	mov	r4, r0
 800c79e:	b940      	cbnz	r0, 800c7b2 <__gethex+0x152>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	21e4      	movs	r1, #228	@ 0xe4
 800c7a4:	4b5b      	ldr	r3, [pc, #364]	@ (800c914 <__gethex+0x2b4>)
 800c7a6:	485c      	ldr	r0, [pc, #368]	@ (800c918 <__gethex+0x2b8>)
 800c7a8:	f7ff fec0 	bl	800c52c <__assert_func>
 800c7ac:	3101      	adds	r1, #1
 800c7ae:	105b      	asrs	r3, r3, #1
 800c7b0:	e7ef      	b.n	800c792 <__gethex+0x132>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f100 0a14 	add.w	sl, r0, #20
 800c7b8:	4655      	mov	r5, sl
 800c7ba:	469b      	mov	fp, r3
 800c7bc:	45b1      	cmp	r9, r6
 800c7be:	d337      	bcc.n	800c830 <__gethex+0x1d0>
 800c7c0:	f845 bb04 	str.w	fp, [r5], #4
 800c7c4:	eba5 050a 	sub.w	r5, r5, sl
 800c7c8:	10ad      	asrs	r5, r5, #2
 800c7ca:	6125      	str	r5, [r4, #16]
 800c7cc:	4658      	mov	r0, fp
 800c7ce:	f7fe facf 	bl	800ad70 <__hi0bits>
 800c7d2:	016d      	lsls	r5, r5, #5
 800c7d4:	f8d8 6000 	ldr.w	r6, [r8]
 800c7d8:	1a2d      	subs	r5, r5, r0
 800c7da:	42b5      	cmp	r5, r6
 800c7dc:	dd54      	ble.n	800c888 <__gethex+0x228>
 800c7de:	1bad      	subs	r5, r5, r6
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7fe fe51 	bl	800b48a <__any_on>
 800c7e8:	4681      	mov	r9, r0
 800c7ea:	b178      	cbz	r0, 800c80c <__gethex+0x1ac>
 800c7ec:	f04f 0901 	mov.w	r9, #1
 800c7f0:	1e6b      	subs	r3, r5, #1
 800c7f2:	1159      	asrs	r1, r3, #5
 800c7f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c7f8:	f003 021f 	and.w	r2, r3, #31
 800c7fc:	fa09 f202 	lsl.w	r2, r9, r2
 800c800:	420a      	tst	r2, r1
 800c802:	d003      	beq.n	800c80c <__gethex+0x1ac>
 800c804:	454b      	cmp	r3, r9
 800c806:	dc36      	bgt.n	800c876 <__gethex+0x216>
 800c808:	f04f 0902 	mov.w	r9, #2
 800c80c:	4629      	mov	r1, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	f7ff febe 	bl	800c590 <rshift>
 800c814:	442f      	add	r7, r5
 800c816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c81a:	42bb      	cmp	r3, r7
 800c81c:	da42      	bge.n	800c8a4 <__gethex+0x244>
 800c81e:	4621      	mov	r1, r4
 800c820:	9801      	ldr	r0, [sp, #4]
 800c822:	f7fe f9f3 	bl	800ac0c <_Bfree>
 800c826:	2300      	movs	r3, #0
 800c828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c82a:	25a3      	movs	r5, #163	@ 0xa3
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	e793      	b.n	800c758 <__gethex+0xf8>
 800c830:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c834:	2a2e      	cmp	r2, #46	@ 0x2e
 800c836:	d012      	beq.n	800c85e <__gethex+0x1fe>
 800c838:	2b20      	cmp	r3, #32
 800c83a:	d104      	bne.n	800c846 <__gethex+0x1e6>
 800c83c:	f845 bb04 	str.w	fp, [r5], #4
 800c840:	f04f 0b00 	mov.w	fp, #0
 800c844:	465b      	mov	r3, fp
 800c846:	7830      	ldrb	r0, [r6, #0]
 800c848:	9303      	str	r3, [sp, #12]
 800c84a:	f7ff fef4 	bl	800c636 <__hexdig_fun>
 800c84e:	9b03      	ldr	r3, [sp, #12]
 800c850:	f000 000f 	and.w	r0, r0, #15
 800c854:	4098      	lsls	r0, r3
 800c856:	ea4b 0b00 	orr.w	fp, fp, r0
 800c85a:	3304      	adds	r3, #4
 800c85c:	e7ae      	b.n	800c7bc <__gethex+0x15c>
 800c85e:	45b1      	cmp	r9, r6
 800c860:	d8ea      	bhi.n	800c838 <__gethex+0x1d8>
 800c862:	2201      	movs	r2, #1
 800c864:	4630      	mov	r0, r6
 800c866:	492a      	ldr	r1, [pc, #168]	@ (800c910 <__gethex+0x2b0>)
 800c868:	9303      	str	r3, [sp, #12]
 800c86a:	f7fd f972 	bl	8009b52 <strncmp>
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	2800      	cmp	r0, #0
 800c872:	d1e1      	bne.n	800c838 <__gethex+0x1d8>
 800c874:	e7a2      	b.n	800c7bc <__gethex+0x15c>
 800c876:	4620      	mov	r0, r4
 800c878:	1ea9      	subs	r1, r5, #2
 800c87a:	f7fe fe06 	bl	800b48a <__any_on>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d0c2      	beq.n	800c808 <__gethex+0x1a8>
 800c882:	f04f 0903 	mov.w	r9, #3
 800c886:	e7c1      	b.n	800c80c <__gethex+0x1ac>
 800c888:	da09      	bge.n	800c89e <__gethex+0x23e>
 800c88a:	1b75      	subs	r5, r6, r5
 800c88c:	4621      	mov	r1, r4
 800c88e:	462a      	mov	r2, r5
 800c890:	9801      	ldr	r0, [sp, #4]
 800c892:	f7fe fbcb 	bl	800b02c <__lshift>
 800c896:	4604      	mov	r4, r0
 800c898:	1b7f      	subs	r7, r7, r5
 800c89a:	f100 0a14 	add.w	sl, r0, #20
 800c89e:	f04f 0900 	mov.w	r9, #0
 800c8a2:	e7b8      	b.n	800c816 <__gethex+0x1b6>
 800c8a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c8a8:	42bd      	cmp	r5, r7
 800c8aa:	dd6f      	ble.n	800c98c <__gethex+0x32c>
 800c8ac:	1bed      	subs	r5, r5, r7
 800c8ae:	42ae      	cmp	r6, r5
 800c8b0:	dc34      	bgt.n	800c91c <__gethex+0x2bc>
 800c8b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d022      	beq.n	800c900 <__gethex+0x2a0>
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d024      	beq.n	800c908 <__gethex+0x2a8>
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d115      	bne.n	800c8ee <__gethex+0x28e>
 800c8c2:	42ae      	cmp	r6, r5
 800c8c4:	d113      	bne.n	800c8ee <__gethex+0x28e>
 800c8c6:	2e01      	cmp	r6, #1
 800c8c8:	d10b      	bne.n	800c8e2 <__gethex+0x282>
 800c8ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8ce:	9a02      	ldr	r2, [sp, #8]
 800c8d0:	2562      	movs	r5, #98	@ 0x62
 800c8d2:	6013      	str	r3, [r2, #0]
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	6123      	str	r3, [r4, #16]
 800c8d8:	f8ca 3000 	str.w	r3, [sl]
 800c8dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8de:	601c      	str	r4, [r3, #0]
 800c8e0:	e73a      	b.n	800c758 <__gethex+0xf8>
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	1e71      	subs	r1, r6, #1
 800c8e6:	f7fe fdd0 	bl	800b48a <__any_on>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d1ed      	bne.n	800c8ca <__gethex+0x26a>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	9801      	ldr	r0, [sp, #4]
 800c8f2:	f7fe f98b 	bl	800ac0c <_Bfree>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8fa:	2550      	movs	r5, #80	@ 0x50
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	e72b      	b.n	800c758 <__gethex+0xf8>
 800c900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1f3      	bne.n	800c8ee <__gethex+0x28e>
 800c906:	e7e0      	b.n	800c8ca <__gethex+0x26a>
 800c908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1dd      	bne.n	800c8ca <__gethex+0x26a>
 800c90e:	e7ee      	b.n	800c8ee <__gethex+0x28e>
 800c910:	0800d6ae 	.word	0x0800d6ae
 800c914:	0800d644 	.word	0x0800d644
 800c918:	0800d705 	.word	0x0800d705
 800c91c:	1e6f      	subs	r7, r5, #1
 800c91e:	f1b9 0f00 	cmp.w	r9, #0
 800c922:	d130      	bne.n	800c986 <__gethex+0x326>
 800c924:	b127      	cbz	r7, 800c930 <__gethex+0x2d0>
 800c926:	4639      	mov	r1, r7
 800c928:	4620      	mov	r0, r4
 800c92a:	f7fe fdae 	bl	800b48a <__any_on>
 800c92e:	4681      	mov	r9, r0
 800c930:	2301      	movs	r3, #1
 800c932:	4629      	mov	r1, r5
 800c934:	1b76      	subs	r6, r6, r5
 800c936:	2502      	movs	r5, #2
 800c938:	117a      	asrs	r2, r7, #5
 800c93a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c93e:	f007 071f 	and.w	r7, r7, #31
 800c942:	40bb      	lsls	r3, r7
 800c944:	4213      	tst	r3, r2
 800c946:	4620      	mov	r0, r4
 800c948:	bf18      	it	ne
 800c94a:	f049 0902 	orrne.w	r9, r9, #2
 800c94e:	f7ff fe1f 	bl	800c590 <rshift>
 800c952:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c956:	f1b9 0f00 	cmp.w	r9, #0
 800c95a:	d047      	beq.n	800c9ec <__gethex+0x38c>
 800c95c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c960:	2b02      	cmp	r3, #2
 800c962:	d015      	beq.n	800c990 <__gethex+0x330>
 800c964:	2b03      	cmp	r3, #3
 800c966:	d017      	beq.n	800c998 <__gethex+0x338>
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d109      	bne.n	800c980 <__gethex+0x320>
 800c96c:	f019 0f02 	tst.w	r9, #2
 800c970:	d006      	beq.n	800c980 <__gethex+0x320>
 800c972:	f8da 3000 	ldr.w	r3, [sl]
 800c976:	ea49 0903 	orr.w	r9, r9, r3
 800c97a:	f019 0f01 	tst.w	r9, #1
 800c97e:	d10e      	bne.n	800c99e <__gethex+0x33e>
 800c980:	f045 0510 	orr.w	r5, r5, #16
 800c984:	e032      	b.n	800c9ec <__gethex+0x38c>
 800c986:	f04f 0901 	mov.w	r9, #1
 800c98a:	e7d1      	b.n	800c930 <__gethex+0x2d0>
 800c98c:	2501      	movs	r5, #1
 800c98e:	e7e2      	b.n	800c956 <__gethex+0x2f6>
 800c990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c992:	f1c3 0301 	rsb	r3, r3, #1
 800c996:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0f0      	beq.n	800c980 <__gethex+0x320>
 800c99e:	f04f 0c00 	mov.w	ip, #0
 800c9a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9a6:	f104 0314 	add.w	r3, r4, #20
 800c9aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c9ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9bc:	d01b      	beq.n	800c9f6 <__gethex+0x396>
 800c9be:	3201      	adds	r2, #1
 800c9c0:	6002      	str	r2, [r0, #0]
 800c9c2:	2d02      	cmp	r5, #2
 800c9c4:	f104 0314 	add.w	r3, r4, #20
 800c9c8:	d13c      	bne.n	800ca44 <__gethex+0x3e4>
 800c9ca:	f8d8 2000 	ldr.w	r2, [r8]
 800c9ce:	3a01      	subs	r2, #1
 800c9d0:	42b2      	cmp	r2, r6
 800c9d2:	d109      	bne.n	800c9e8 <__gethex+0x388>
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	1171      	asrs	r1, r6, #5
 800c9d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9dc:	f006 061f 	and.w	r6, r6, #31
 800c9e0:	fa02 f606 	lsl.w	r6, r2, r6
 800c9e4:	421e      	tst	r6, r3
 800c9e6:	d13a      	bne.n	800ca5e <__gethex+0x3fe>
 800c9e8:	f045 0520 	orr.w	r5, r5, #32
 800c9ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9ee:	601c      	str	r4, [r3, #0]
 800c9f0:	9b02      	ldr	r3, [sp, #8]
 800c9f2:	601f      	str	r7, [r3, #0]
 800c9f4:	e6b0      	b.n	800c758 <__gethex+0xf8>
 800c9f6:	4299      	cmp	r1, r3
 800c9f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9fc:	d8d9      	bhi.n	800c9b2 <__gethex+0x352>
 800c9fe:	68a3      	ldr	r3, [r4, #8]
 800ca00:	459b      	cmp	fp, r3
 800ca02:	db17      	blt.n	800ca34 <__gethex+0x3d4>
 800ca04:	6861      	ldr	r1, [r4, #4]
 800ca06:	9801      	ldr	r0, [sp, #4]
 800ca08:	3101      	adds	r1, #1
 800ca0a:	f7fe f8bf 	bl	800ab8c <_Balloc>
 800ca0e:	4681      	mov	r9, r0
 800ca10:	b918      	cbnz	r0, 800ca1a <__gethex+0x3ba>
 800ca12:	4602      	mov	r2, r0
 800ca14:	2184      	movs	r1, #132	@ 0x84
 800ca16:	4b19      	ldr	r3, [pc, #100]	@ (800ca7c <__gethex+0x41c>)
 800ca18:	e6c5      	b.n	800c7a6 <__gethex+0x146>
 800ca1a:	6922      	ldr	r2, [r4, #16]
 800ca1c:	f104 010c 	add.w	r1, r4, #12
 800ca20:	3202      	adds	r2, #2
 800ca22:	0092      	lsls	r2, r2, #2
 800ca24:	300c      	adds	r0, #12
 800ca26:	f7fd f942 	bl	8009cae <memcpy>
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	9801      	ldr	r0, [sp, #4]
 800ca2e:	f7fe f8ed 	bl	800ac0c <_Bfree>
 800ca32:	464c      	mov	r4, r9
 800ca34:	6923      	ldr	r3, [r4, #16]
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	6122      	str	r2, [r4, #16]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca40:	615a      	str	r2, [r3, #20]
 800ca42:	e7be      	b.n	800c9c2 <__gethex+0x362>
 800ca44:	6922      	ldr	r2, [r4, #16]
 800ca46:	455a      	cmp	r2, fp
 800ca48:	dd0b      	ble.n	800ca62 <__gethex+0x402>
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7ff fd9f 	bl	800c590 <rshift>
 800ca52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca56:	3701      	adds	r7, #1
 800ca58:	42bb      	cmp	r3, r7
 800ca5a:	f6ff aee0 	blt.w	800c81e <__gethex+0x1be>
 800ca5e:	2501      	movs	r5, #1
 800ca60:	e7c2      	b.n	800c9e8 <__gethex+0x388>
 800ca62:	f016 061f 	ands.w	r6, r6, #31
 800ca66:	d0fa      	beq.n	800ca5e <__gethex+0x3fe>
 800ca68:	4453      	add	r3, sl
 800ca6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca6e:	f7fe f97f 	bl	800ad70 <__hi0bits>
 800ca72:	f1c6 0620 	rsb	r6, r6, #32
 800ca76:	42b0      	cmp	r0, r6
 800ca78:	dbe7      	blt.n	800ca4a <__gethex+0x3ea>
 800ca7a:	e7f0      	b.n	800ca5e <__gethex+0x3fe>
 800ca7c:	0800d644 	.word	0x0800d644

0800ca80 <L_shift>:
 800ca80:	f1c2 0208 	rsb	r2, r2, #8
 800ca84:	0092      	lsls	r2, r2, #2
 800ca86:	b570      	push	{r4, r5, r6, lr}
 800ca88:	f1c2 0620 	rsb	r6, r2, #32
 800ca8c:	6843      	ldr	r3, [r0, #4]
 800ca8e:	6804      	ldr	r4, [r0, #0]
 800ca90:	fa03 f506 	lsl.w	r5, r3, r6
 800ca94:	432c      	orrs	r4, r5
 800ca96:	40d3      	lsrs	r3, r2
 800ca98:	6004      	str	r4, [r0, #0]
 800ca9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca9e:	4288      	cmp	r0, r1
 800caa0:	d3f4      	bcc.n	800ca8c <L_shift+0xc>
 800caa2:	bd70      	pop	{r4, r5, r6, pc}

0800caa4 <__match>:
 800caa4:	b530      	push	{r4, r5, lr}
 800caa6:	6803      	ldr	r3, [r0, #0]
 800caa8:	3301      	adds	r3, #1
 800caaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caae:	b914      	cbnz	r4, 800cab6 <__match+0x12>
 800cab0:	6003      	str	r3, [r0, #0]
 800cab2:	2001      	movs	r0, #1
 800cab4:	bd30      	pop	{r4, r5, pc}
 800cab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cabe:	2d19      	cmp	r5, #25
 800cac0:	bf98      	it	ls
 800cac2:	3220      	addls	r2, #32
 800cac4:	42a2      	cmp	r2, r4
 800cac6:	d0f0      	beq.n	800caaa <__match+0x6>
 800cac8:	2000      	movs	r0, #0
 800caca:	e7f3      	b.n	800cab4 <__match+0x10>

0800cacc <__hexnan>:
 800cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad0:	2500      	movs	r5, #0
 800cad2:	680b      	ldr	r3, [r1, #0]
 800cad4:	4682      	mov	sl, r0
 800cad6:	115e      	asrs	r6, r3, #5
 800cad8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cadc:	f013 031f 	ands.w	r3, r3, #31
 800cae0:	bf18      	it	ne
 800cae2:	3604      	addne	r6, #4
 800cae4:	1f37      	subs	r7, r6, #4
 800cae6:	4690      	mov	r8, r2
 800cae8:	46b9      	mov	r9, r7
 800caea:	463c      	mov	r4, r7
 800caec:	46ab      	mov	fp, r5
 800caee:	b087      	sub	sp, #28
 800caf0:	6801      	ldr	r1, [r0, #0]
 800caf2:	9301      	str	r3, [sp, #4]
 800caf4:	f846 5c04 	str.w	r5, [r6, #-4]
 800caf8:	9502      	str	r5, [sp, #8]
 800cafa:	784a      	ldrb	r2, [r1, #1]
 800cafc:	1c4b      	adds	r3, r1, #1
 800cafe:	9303      	str	r3, [sp, #12]
 800cb00:	b342      	cbz	r2, 800cb54 <__hexnan+0x88>
 800cb02:	4610      	mov	r0, r2
 800cb04:	9105      	str	r1, [sp, #20]
 800cb06:	9204      	str	r2, [sp, #16]
 800cb08:	f7ff fd95 	bl	800c636 <__hexdig_fun>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d151      	bne.n	800cbb4 <__hexnan+0xe8>
 800cb10:	9a04      	ldr	r2, [sp, #16]
 800cb12:	9905      	ldr	r1, [sp, #20]
 800cb14:	2a20      	cmp	r2, #32
 800cb16:	d818      	bhi.n	800cb4a <__hexnan+0x7e>
 800cb18:	9b02      	ldr	r3, [sp, #8]
 800cb1a:	459b      	cmp	fp, r3
 800cb1c:	dd13      	ble.n	800cb46 <__hexnan+0x7a>
 800cb1e:	454c      	cmp	r4, r9
 800cb20:	d206      	bcs.n	800cb30 <__hexnan+0x64>
 800cb22:	2d07      	cmp	r5, #7
 800cb24:	dc04      	bgt.n	800cb30 <__hexnan+0x64>
 800cb26:	462a      	mov	r2, r5
 800cb28:	4649      	mov	r1, r9
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f7ff ffa8 	bl	800ca80 <L_shift>
 800cb30:	4544      	cmp	r4, r8
 800cb32:	d952      	bls.n	800cbda <__hexnan+0x10e>
 800cb34:	2300      	movs	r3, #0
 800cb36:	f1a4 0904 	sub.w	r9, r4, #4
 800cb3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb3e:	461d      	mov	r5, r3
 800cb40:	464c      	mov	r4, r9
 800cb42:	f8cd b008 	str.w	fp, [sp, #8]
 800cb46:	9903      	ldr	r1, [sp, #12]
 800cb48:	e7d7      	b.n	800cafa <__hexnan+0x2e>
 800cb4a:	2a29      	cmp	r2, #41	@ 0x29
 800cb4c:	d157      	bne.n	800cbfe <__hexnan+0x132>
 800cb4e:	3102      	adds	r1, #2
 800cb50:	f8ca 1000 	str.w	r1, [sl]
 800cb54:	f1bb 0f00 	cmp.w	fp, #0
 800cb58:	d051      	beq.n	800cbfe <__hexnan+0x132>
 800cb5a:	454c      	cmp	r4, r9
 800cb5c:	d206      	bcs.n	800cb6c <__hexnan+0xa0>
 800cb5e:	2d07      	cmp	r5, #7
 800cb60:	dc04      	bgt.n	800cb6c <__hexnan+0xa0>
 800cb62:	462a      	mov	r2, r5
 800cb64:	4649      	mov	r1, r9
 800cb66:	4620      	mov	r0, r4
 800cb68:	f7ff ff8a 	bl	800ca80 <L_shift>
 800cb6c:	4544      	cmp	r4, r8
 800cb6e:	d936      	bls.n	800cbde <__hexnan+0x112>
 800cb70:	4623      	mov	r3, r4
 800cb72:	f1a8 0204 	sub.w	r2, r8, #4
 800cb76:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb7a:	429f      	cmp	r7, r3
 800cb7c:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb80:	d2f9      	bcs.n	800cb76 <__hexnan+0xaa>
 800cb82:	1b3b      	subs	r3, r7, r4
 800cb84:	f023 0303 	bic.w	r3, r3, #3
 800cb88:	3304      	adds	r3, #4
 800cb8a:	3401      	adds	r4, #1
 800cb8c:	3e03      	subs	r6, #3
 800cb8e:	42b4      	cmp	r4, r6
 800cb90:	bf88      	it	hi
 800cb92:	2304      	movhi	r3, #4
 800cb94:	2200      	movs	r2, #0
 800cb96:	4443      	add	r3, r8
 800cb98:	f843 2b04 	str.w	r2, [r3], #4
 800cb9c:	429f      	cmp	r7, r3
 800cb9e:	d2fb      	bcs.n	800cb98 <__hexnan+0xcc>
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	b91b      	cbnz	r3, 800cbac <__hexnan+0xe0>
 800cba4:	4547      	cmp	r7, r8
 800cba6:	d128      	bne.n	800cbfa <__hexnan+0x12e>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	603b      	str	r3, [r7, #0]
 800cbac:	2005      	movs	r0, #5
 800cbae:	b007      	add	sp, #28
 800cbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb4:	3501      	adds	r5, #1
 800cbb6:	2d08      	cmp	r5, #8
 800cbb8:	f10b 0b01 	add.w	fp, fp, #1
 800cbbc:	dd06      	ble.n	800cbcc <__hexnan+0x100>
 800cbbe:	4544      	cmp	r4, r8
 800cbc0:	d9c1      	bls.n	800cb46 <__hexnan+0x7a>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	2501      	movs	r5, #1
 800cbc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbca:	3c04      	subs	r4, #4
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	f000 000f 	and.w	r0, r0, #15
 800cbd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbd6:	6020      	str	r0, [r4, #0]
 800cbd8:	e7b5      	b.n	800cb46 <__hexnan+0x7a>
 800cbda:	2508      	movs	r5, #8
 800cbdc:	e7b3      	b.n	800cb46 <__hexnan+0x7a>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0dd      	beq.n	800cba0 <__hexnan+0xd4>
 800cbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe8:	f1c3 0320 	rsb	r3, r3, #32
 800cbec:	40da      	lsrs	r2, r3
 800cbee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	f846 3c04 	str.w	r3, [r6, #-4]
 800cbf8:	e7d2      	b.n	800cba0 <__hexnan+0xd4>
 800cbfa:	3f04      	subs	r7, #4
 800cbfc:	e7d0      	b.n	800cba0 <__hexnan+0xd4>
 800cbfe:	2004      	movs	r0, #4
 800cc00:	e7d5      	b.n	800cbae <__hexnan+0xe2>

0800cc02 <__ascii_mbtowc>:
 800cc02:	b082      	sub	sp, #8
 800cc04:	b901      	cbnz	r1, 800cc08 <__ascii_mbtowc+0x6>
 800cc06:	a901      	add	r1, sp, #4
 800cc08:	b142      	cbz	r2, 800cc1c <__ascii_mbtowc+0x1a>
 800cc0a:	b14b      	cbz	r3, 800cc20 <__ascii_mbtowc+0x1e>
 800cc0c:	7813      	ldrb	r3, [r2, #0]
 800cc0e:	600b      	str	r3, [r1, #0]
 800cc10:	7812      	ldrb	r2, [r2, #0]
 800cc12:	1e10      	subs	r0, r2, #0
 800cc14:	bf18      	it	ne
 800cc16:	2001      	movne	r0, #1
 800cc18:	b002      	add	sp, #8
 800cc1a:	4770      	bx	lr
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	e7fb      	b.n	800cc18 <__ascii_mbtowc+0x16>
 800cc20:	f06f 0001 	mvn.w	r0, #1
 800cc24:	e7f8      	b.n	800cc18 <__ascii_mbtowc+0x16>

0800cc26 <_realloc_r>:
 800cc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2a:	4607      	mov	r7, r0
 800cc2c:	4614      	mov	r4, r2
 800cc2e:	460d      	mov	r5, r1
 800cc30:	b921      	cbnz	r1, 800cc3c <_realloc_r+0x16>
 800cc32:	4611      	mov	r1, r2
 800cc34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc38:	f7fd bf1c 	b.w	800aa74 <_malloc_r>
 800cc3c:	b92a      	cbnz	r2, 800cc4a <_realloc_r+0x24>
 800cc3e:	f7fd fea7 	bl	800a990 <_free_r>
 800cc42:	4625      	mov	r5, r4
 800cc44:	4628      	mov	r0, r5
 800cc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4a:	f000 f840 	bl	800ccce <_malloc_usable_size_r>
 800cc4e:	4284      	cmp	r4, r0
 800cc50:	4606      	mov	r6, r0
 800cc52:	d802      	bhi.n	800cc5a <_realloc_r+0x34>
 800cc54:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc58:	d8f4      	bhi.n	800cc44 <_realloc_r+0x1e>
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	4638      	mov	r0, r7
 800cc5e:	f7fd ff09 	bl	800aa74 <_malloc_r>
 800cc62:	4680      	mov	r8, r0
 800cc64:	b908      	cbnz	r0, 800cc6a <_realloc_r+0x44>
 800cc66:	4645      	mov	r5, r8
 800cc68:	e7ec      	b.n	800cc44 <_realloc_r+0x1e>
 800cc6a:	42b4      	cmp	r4, r6
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	4629      	mov	r1, r5
 800cc70:	bf28      	it	cs
 800cc72:	4632      	movcs	r2, r6
 800cc74:	f7fd f81b 	bl	8009cae <memcpy>
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	f7fd fe88 	bl	800a990 <_free_r>
 800cc80:	e7f1      	b.n	800cc66 <_realloc_r+0x40>

0800cc82 <__ascii_wctomb>:
 800cc82:	4603      	mov	r3, r0
 800cc84:	4608      	mov	r0, r1
 800cc86:	b141      	cbz	r1, 800cc9a <__ascii_wctomb+0x18>
 800cc88:	2aff      	cmp	r2, #255	@ 0xff
 800cc8a:	d904      	bls.n	800cc96 <__ascii_wctomb+0x14>
 800cc8c:	228a      	movs	r2, #138	@ 0x8a
 800cc8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	4770      	bx	lr
 800cc96:	2001      	movs	r0, #1
 800cc98:	700a      	strb	r2, [r1, #0]
 800cc9a:	4770      	bx	lr

0800cc9c <fiprintf>:
 800cc9c:	b40e      	push	{r1, r2, r3}
 800cc9e:	b503      	push	{r0, r1, lr}
 800cca0:	4601      	mov	r1, r0
 800cca2:	ab03      	add	r3, sp, #12
 800cca4:	4805      	ldr	r0, [pc, #20]	@ (800ccbc <fiprintf+0x20>)
 800cca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccaa:	6800      	ldr	r0, [r0, #0]
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	f000 f83d 	bl	800cd2c <_vfiprintf_r>
 800ccb2:	b002      	add	sp, #8
 800ccb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccb8:	b003      	add	sp, #12
 800ccba:	4770      	bx	lr
 800ccbc:	2000001c 	.word	0x2000001c

0800ccc0 <abort>:
 800ccc0:	2006      	movs	r0, #6
 800ccc2:	b508      	push	{r3, lr}
 800ccc4:	f000 fa06 	bl	800d0d4 <raise>
 800ccc8:	2001      	movs	r0, #1
 800ccca:	f7f5 fa18 	bl	80020fe <_exit>

0800ccce <_malloc_usable_size_r>:
 800ccce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd2:	1f18      	subs	r0, r3, #4
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfbc      	itt	lt
 800ccd8:	580b      	ldrlt	r3, [r1, r0]
 800ccda:	18c0      	addlt	r0, r0, r3
 800ccdc:	4770      	bx	lr

0800ccde <__sfputc_r>:
 800ccde:	6893      	ldr	r3, [r2, #8]
 800cce0:	b410      	push	{r4}
 800cce2:	3b01      	subs	r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	6093      	str	r3, [r2, #8]
 800cce8:	da07      	bge.n	800ccfa <__sfputc_r+0x1c>
 800ccea:	6994      	ldr	r4, [r2, #24]
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	db01      	blt.n	800ccf4 <__sfputc_r+0x16>
 800ccf0:	290a      	cmp	r1, #10
 800ccf2:	d102      	bne.n	800ccfa <__sfputc_r+0x1c>
 800ccf4:	bc10      	pop	{r4}
 800ccf6:	f000 b931 	b.w	800cf5c <__swbuf_r>
 800ccfa:	6813      	ldr	r3, [r2, #0]
 800ccfc:	1c58      	adds	r0, r3, #1
 800ccfe:	6010      	str	r0, [r2, #0]
 800cd00:	7019      	strb	r1, [r3, #0]
 800cd02:	4608      	mov	r0, r1
 800cd04:	bc10      	pop	{r4}
 800cd06:	4770      	bx	lr

0800cd08 <__sfputs_r>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	460f      	mov	r7, r1
 800cd0e:	4614      	mov	r4, r2
 800cd10:	18d5      	adds	r5, r2, r3
 800cd12:	42ac      	cmp	r4, r5
 800cd14:	d101      	bne.n	800cd1a <__sfputs_r+0x12>
 800cd16:	2000      	movs	r0, #0
 800cd18:	e007      	b.n	800cd2a <__sfputs_r+0x22>
 800cd1a:	463a      	mov	r2, r7
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd22:	f7ff ffdc 	bl	800ccde <__sfputc_r>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	d1f3      	bne.n	800cd12 <__sfputs_r+0xa>
 800cd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd2c <_vfiprintf_r>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	460d      	mov	r5, r1
 800cd32:	4614      	mov	r4, r2
 800cd34:	4698      	mov	r8, r3
 800cd36:	4606      	mov	r6, r0
 800cd38:	b09d      	sub	sp, #116	@ 0x74
 800cd3a:	b118      	cbz	r0, 800cd44 <_vfiprintf_r+0x18>
 800cd3c:	6a03      	ldr	r3, [r0, #32]
 800cd3e:	b90b      	cbnz	r3, 800cd44 <_vfiprintf_r+0x18>
 800cd40:	f7fc fe64 	bl	8009a0c <__sinit>
 800cd44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd46:	07d9      	lsls	r1, r3, #31
 800cd48:	d405      	bmi.n	800cd56 <_vfiprintf_r+0x2a>
 800cd4a:	89ab      	ldrh	r3, [r5, #12]
 800cd4c:	059a      	lsls	r2, r3, #22
 800cd4e:	d402      	bmi.n	800cd56 <_vfiprintf_r+0x2a>
 800cd50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd52:	f7fc ff9c 	bl	8009c8e <__retarget_lock_acquire_recursive>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	071b      	lsls	r3, r3, #28
 800cd5a:	d501      	bpl.n	800cd60 <_vfiprintf_r+0x34>
 800cd5c:	692b      	ldr	r3, [r5, #16]
 800cd5e:	b99b      	cbnz	r3, 800cd88 <_vfiprintf_r+0x5c>
 800cd60:	4629      	mov	r1, r5
 800cd62:	4630      	mov	r0, r6
 800cd64:	f000 f938 	bl	800cfd8 <__swsetup_r>
 800cd68:	b170      	cbz	r0, 800cd88 <_vfiprintf_r+0x5c>
 800cd6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd6c:	07dc      	lsls	r4, r3, #31
 800cd6e:	d504      	bpl.n	800cd7a <_vfiprintf_r+0x4e>
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295
 800cd74:	b01d      	add	sp, #116	@ 0x74
 800cd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7a:	89ab      	ldrh	r3, [r5, #12]
 800cd7c:	0598      	lsls	r0, r3, #22
 800cd7e:	d4f7      	bmi.n	800cd70 <_vfiprintf_r+0x44>
 800cd80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd82:	f7fc ff85 	bl	8009c90 <__retarget_lock_release_recursive>
 800cd86:	e7f3      	b.n	800cd70 <_vfiprintf_r+0x44>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd8c:	2320      	movs	r3, #32
 800cd8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd92:	2330      	movs	r3, #48	@ 0x30
 800cd94:	f04f 0901 	mov.w	r9, #1
 800cd98:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cf48 <_vfiprintf_r+0x21c>
 800cda0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cda4:	4623      	mov	r3, r4
 800cda6:	469a      	mov	sl, r3
 800cda8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdac:	b10a      	cbz	r2, 800cdb2 <_vfiprintf_r+0x86>
 800cdae:	2a25      	cmp	r2, #37	@ 0x25
 800cdb0:	d1f9      	bne.n	800cda6 <_vfiprintf_r+0x7a>
 800cdb2:	ebba 0b04 	subs.w	fp, sl, r4
 800cdb6:	d00b      	beq.n	800cdd0 <_vfiprintf_r+0xa4>
 800cdb8:	465b      	mov	r3, fp
 800cdba:	4622      	mov	r2, r4
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f7ff ffa2 	bl	800cd08 <__sfputs_r>
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	f000 80a7 	beq.w	800cf18 <_vfiprintf_r+0x1ec>
 800cdca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdcc:	445a      	add	r2, fp
 800cdce:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdd0:	f89a 3000 	ldrb.w	r3, [sl]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 809f 	beq.w	800cf18 <_vfiprintf_r+0x1ec>
 800cdda:	2300      	movs	r3, #0
 800cddc:	f04f 32ff 	mov.w	r2, #4294967295
 800cde0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cde4:	f10a 0a01 	add.w	sl, sl, #1
 800cde8:	9304      	str	r3, [sp, #16]
 800cdea:	9307      	str	r3, [sp, #28]
 800cdec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdf2:	4654      	mov	r4, sl
 800cdf4:	2205      	movs	r2, #5
 800cdf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdfa:	4853      	ldr	r0, [pc, #332]	@ (800cf48 <_vfiprintf_r+0x21c>)
 800cdfc:	f7fc ff49 	bl	8009c92 <memchr>
 800ce00:	9a04      	ldr	r2, [sp, #16]
 800ce02:	b9d8      	cbnz	r0, 800ce3c <_vfiprintf_r+0x110>
 800ce04:	06d1      	lsls	r1, r2, #27
 800ce06:	bf44      	itt	mi
 800ce08:	2320      	movmi	r3, #32
 800ce0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce0e:	0713      	lsls	r3, r2, #28
 800ce10:	bf44      	itt	mi
 800ce12:	232b      	movmi	r3, #43	@ 0x2b
 800ce14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce18:	f89a 3000 	ldrb.w	r3, [sl]
 800ce1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce1e:	d015      	beq.n	800ce4c <_vfiprintf_r+0x120>
 800ce20:	4654      	mov	r4, sl
 800ce22:	2000      	movs	r0, #0
 800ce24:	f04f 0c0a 	mov.w	ip, #10
 800ce28:	9a07      	ldr	r2, [sp, #28]
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce30:	3b30      	subs	r3, #48	@ 0x30
 800ce32:	2b09      	cmp	r3, #9
 800ce34:	d94b      	bls.n	800cece <_vfiprintf_r+0x1a2>
 800ce36:	b1b0      	cbz	r0, 800ce66 <_vfiprintf_r+0x13a>
 800ce38:	9207      	str	r2, [sp, #28]
 800ce3a:	e014      	b.n	800ce66 <_vfiprintf_r+0x13a>
 800ce3c:	eba0 0308 	sub.w	r3, r0, r8
 800ce40:	fa09 f303 	lsl.w	r3, r9, r3
 800ce44:	4313      	orrs	r3, r2
 800ce46:	46a2      	mov	sl, r4
 800ce48:	9304      	str	r3, [sp, #16]
 800ce4a:	e7d2      	b.n	800cdf2 <_vfiprintf_r+0xc6>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	1d19      	adds	r1, r3, #4
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	9103      	str	r1, [sp, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	bfbb      	ittet	lt
 800ce58:	425b      	neglt	r3, r3
 800ce5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ce5e:	9307      	strge	r3, [sp, #28]
 800ce60:	9307      	strlt	r3, [sp, #28]
 800ce62:	bfb8      	it	lt
 800ce64:	9204      	strlt	r2, [sp, #16]
 800ce66:	7823      	ldrb	r3, [r4, #0]
 800ce68:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce6a:	d10a      	bne.n	800ce82 <_vfiprintf_r+0x156>
 800ce6c:	7863      	ldrb	r3, [r4, #1]
 800ce6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce70:	d132      	bne.n	800ced8 <_vfiprintf_r+0x1ac>
 800ce72:	9b03      	ldr	r3, [sp, #12]
 800ce74:	3402      	adds	r4, #2
 800ce76:	1d1a      	adds	r2, r3, #4
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	9203      	str	r2, [sp, #12]
 800ce7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce80:	9305      	str	r3, [sp, #20]
 800ce82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cf4c <_vfiprintf_r+0x220>
 800ce86:	2203      	movs	r2, #3
 800ce88:	4650      	mov	r0, sl
 800ce8a:	7821      	ldrb	r1, [r4, #0]
 800ce8c:	f7fc ff01 	bl	8009c92 <memchr>
 800ce90:	b138      	cbz	r0, 800cea2 <_vfiprintf_r+0x176>
 800ce92:	2240      	movs	r2, #64	@ 0x40
 800ce94:	9b04      	ldr	r3, [sp, #16]
 800ce96:	eba0 000a 	sub.w	r0, r0, sl
 800ce9a:	4082      	lsls	r2, r0
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	3401      	adds	r4, #1
 800cea0:	9304      	str	r3, [sp, #16]
 800cea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea6:	2206      	movs	r2, #6
 800cea8:	4829      	ldr	r0, [pc, #164]	@ (800cf50 <_vfiprintf_r+0x224>)
 800ceaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ceae:	f7fc fef0 	bl	8009c92 <memchr>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d03f      	beq.n	800cf36 <_vfiprintf_r+0x20a>
 800ceb6:	4b27      	ldr	r3, [pc, #156]	@ (800cf54 <_vfiprintf_r+0x228>)
 800ceb8:	bb1b      	cbnz	r3, 800cf02 <_vfiprintf_r+0x1d6>
 800ceba:	9b03      	ldr	r3, [sp, #12]
 800cebc:	3307      	adds	r3, #7
 800cebe:	f023 0307 	bic.w	r3, r3, #7
 800cec2:	3308      	adds	r3, #8
 800cec4:	9303      	str	r3, [sp, #12]
 800cec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec8:	443b      	add	r3, r7
 800ceca:	9309      	str	r3, [sp, #36]	@ 0x24
 800cecc:	e76a      	b.n	800cda4 <_vfiprintf_r+0x78>
 800cece:	460c      	mov	r4, r1
 800ced0:	2001      	movs	r0, #1
 800ced2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ced6:	e7a8      	b.n	800ce2a <_vfiprintf_r+0xfe>
 800ced8:	2300      	movs	r3, #0
 800ceda:	f04f 0c0a 	mov.w	ip, #10
 800cede:	4619      	mov	r1, r3
 800cee0:	3401      	adds	r4, #1
 800cee2:	9305      	str	r3, [sp, #20]
 800cee4:	4620      	mov	r0, r4
 800cee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceea:	3a30      	subs	r2, #48	@ 0x30
 800ceec:	2a09      	cmp	r2, #9
 800ceee:	d903      	bls.n	800cef8 <_vfiprintf_r+0x1cc>
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0c6      	beq.n	800ce82 <_vfiprintf_r+0x156>
 800cef4:	9105      	str	r1, [sp, #20]
 800cef6:	e7c4      	b.n	800ce82 <_vfiprintf_r+0x156>
 800cef8:	4604      	mov	r4, r0
 800cefa:	2301      	movs	r3, #1
 800cefc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf00:	e7f0      	b.n	800cee4 <_vfiprintf_r+0x1b8>
 800cf02:	ab03      	add	r3, sp, #12
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	462a      	mov	r2, r5
 800cf08:	4630      	mov	r0, r6
 800cf0a:	4b13      	ldr	r3, [pc, #76]	@ (800cf58 <_vfiprintf_r+0x22c>)
 800cf0c:	a904      	add	r1, sp, #16
 800cf0e:	f7fb ff2b 	bl	8008d68 <_printf_float>
 800cf12:	4607      	mov	r7, r0
 800cf14:	1c78      	adds	r0, r7, #1
 800cf16:	d1d6      	bne.n	800cec6 <_vfiprintf_r+0x19a>
 800cf18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf1a:	07d9      	lsls	r1, r3, #31
 800cf1c:	d405      	bmi.n	800cf2a <_vfiprintf_r+0x1fe>
 800cf1e:	89ab      	ldrh	r3, [r5, #12]
 800cf20:	059a      	lsls	r2, r3, #22
 800cf22:	d402      	bmi.n	800cf2a <_vfiprintf_r+0x1fe>
 800cf24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf26:	f7fc feb3 	bl	8009c90 <__retarget_lock_release_recursive>
 800cf2a:	89ab      	ldrh	r3, [r5, #12]
 800cf2c:	065b      	lsls	r3, r3, #25
 800cf2e:	f53f af1f 	bmi.w	800cd70 <_vfiprintf_r+0x44>
 800cf32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf34:	e71e      	b.n	800cd74 <_vfiprintf_r+0x48>
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	4b06      	ldr	r3, [pc, #24]	@ (800cf58 <_vfiprintf_r+0x22c>)
 800cf40:	a904      	add	r1, sp, #16
 800cf42:	f7fc f9af 	bl	80092a4 <_printf_i>
 800cf46:	e7e4      	b.n	800cf12 <_vfiprintf_r+0x1e6>
 800cf48:	0800d6b0 	.word	0x0800d6b0
 800cf4c:	0800d6b6 	.word	0x0800d6b6
 800cf50:	0800d6ba 	.word	0x0800d6ba
 800cf54:	08008d69 	.word	0x08008d69
 800cf58:	0800cd09 	.word	0x0800cd09

0800cf5c <__swbuf_r>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	460e      	mov	r6, r1
 800cf60:	4614      	mov	r4, r2
 800cf62:	4605      	mov	r5, r0
 800cf64:	b118      	cbz	r0, 800cf6e <__swbuf_r+0x12>
 800cf66:	6a03      	ldr	r3, [r0, #32]
 800cf68:	b90b      	cbnz	r3, 800cf6e <__swbuf_r+0x12>
 800cf6a:	f7fc fd4f 	bl	8009a0c <__sinit>
 800cf6e:	69a3      	ldr	r3, [r4, #24]
 800cf70:	60a3      	str	r3, [r4, #8]
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	071a      	lsls	r2, r3, #28
 800cf76:	d501      	bpl.n	800cf7c <__swbuf_r+0x20>
 800cf78:	6923      	ldr	r3, [r4, #16]
 800cf7a:	b943      	cbnz	r3, 800cf8e <__swbuf_r+0x32>
 800cf7c:	4621      	mov	r1, r4
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f000 f82a 	bl	800cfd8 <__swsetup_r>
 800cf84:	b118      	cbz	r0, 800cf8e <__swbuf_r+0x32>
 800cf86:	f04f 37ff 	mov.w	r7, #4294967295
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	6922      	ldr	r2, [r4, #16]
 800cf92:	b2f6      	uxtb	r6, r6
 800cf94:	1a98      	subs	r0, r3, r2
 800cf96:	6963      	ldr	r3, [r4, #20]
 800cf98:	4637      	mov	r7, r6
 800cf9a:	4283      	cmp	r3, r0
 800cf9c:	dc05      	bgt.n	800cfaa <__swbuf_r+0x4e>
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f7ff fa6b 	bl	800c47c <_fflush_r>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d1ed      	bne.n	800cf86 <__swbuf_r+0x2a>
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	3b01      	subs	r3, #1
 800cfae:	60a3      	str	r3, [r4, #8]
 800cfb0:	6823      	ldr	r3, [r4, #0]
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	6022      	str	r2, [r4, #0]
 800cfb6:	701e      	strb	r6, [r3, #0]
 800cfb8:	6962      	ldr	r2, [r4, #20]
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d004      	beq.n	800cfca <__swbuf_r+0x6e>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	07db      	lsls	r3, r3, #31
 800cfc4:	d5e1      	bpl.n	800cf8a <__swbuf_r+0x2e>
 800cfc6:	2e0a      	cmp	r6, #10
 800cfc8:	d1df      	bne.n	800cf8a <__swbuf_r+0x2e>
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f7ff fa55 	bl	800c47c <_fflush_r>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d0d9      	beq.n	800cf8a <__swbuf_r+0x2e>
 800cfd6:	e7d6      	b.n	800cf86 <__swbuf_r+0x2a>

0800cfd8 <__swsetup_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4b29      	ldr	r3, [pc, #164]	@ (800d080 <__swsetup_r+0xa8>)
 800cfdc:	4605      	mov	r5, r0
 800cfde:	6818      	ldr	r0, [r3, #0]
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	b118      	cbz	r0, 800cfec <__swsetup_r+0x14>
 800cfe4:	6a03      	ldr	r3, [r0, #32]
 800cfe6:	b90b      	cbnz	r3, 800cfec <__swsetup_r+0x14>
 800cfe8:	f7fc fd10 	bl	8009a0c <__sinit>
 800cfec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff0:	0719      	lsls	r1, r3, #28
 800cff2:	d422      	bmi.n	800d03a <__swsetup_r+0x62>
 800cff4:	06da      	lsls	r2, r3, #27
 800cff6:	d407      	bmi.n	800d008 <__swsetup_r+0x30>
 800cff8:	2209      	movs	r2, #9
 800cffa:	602a      	str	r2, [r5, #0]
 800cffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	81a3      	strh	r3, [r4, #12]
 800d006:	e033      	b.n	800d070 <__swsetup_r+0x98>
 800d008:	0758      	lsls	r0, r3, #29
 800d00a:	d512      	bpl.n	800d032 <__swsetup_r+0x5a>
 800d00c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d00e:	b141      	cbz	r1, 800d022 <__swsetup_r+0x4a>
 800d010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d014:	4299      	cmp	r1, r3
 800d016:	d002      	beq.n	800d01e <__swsetup_r+0x46>
 800d018:	4628      	mov	r0, r5
 800d01a:	f7fd fcb9 	bl	800a990 <_free_r>
 800d01e:	2300      	movs	r3, #0
 800d020:	6363      	str	r3, [r4, #52]	@ 0x34
 800d022:	89a3      	ldrh	r3, [r4, #12]
 800d024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d028:	81a3      	strh	r3, [r4, #12]
 800d02a:	2300      	movs	r3, #0
 800d02c:	6063      	str	r3, [r4, #4]
 800d02e:	6923      	ldr	r3, [r4, #16]
 800d030:	6023      	str	r3, [r4, #0]
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	f043 0308 	orr.w	r3, r3, #8
 800d038:	81a3      	strh	r3, [r4, #12]
 800d03a:	6923      	ldr	r3, [r4, #16]
 800d03c:	b94b      	cbnz	r3, 800d052 <__swsetup_r+0x7a>
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d048:	d003      	beq.n	800d052 <__swsetup_r+0x7a>
 800d04a:	4621      	mov	r1, r4
 800d04c:	4628      	mov	r0, r5
 800d04e:	f000 f882 	bl	800d156 <__smakebuf_r>
 800d052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d056:	f013 0201 	ands.w	r2, r3, #1
 800d05a:	d00a      	beq.n	800d072 <__swsetup_r+0x9a>
 800d05c:	2200      	movs	r2, #0
 800d05e:	60a2      	str	r2, [r4, #8]
 800d060:	6962      	ldr	r2, [r4, #20]
 800d062:	4252      	negs	r2, r2
 800d064:	61a2      	str	r2, [r4, #24]
 800d066:	6922      	ldr	r2, [r4, #16]
 800d068:	b942      	cbnz	r2, 800d07c <__swsetup_r+0xa4>
 800d06a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d06e:	d1c5      	bne.n	800cffc <__swsetup_r+0x24>
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	0799      	lsls	r1, r3, #30
 800d074:	bf58      	it	pl
 800d076:	6962      	ldrpl	r2, [r4, #20]
 800d078:	60a2      	str	r2, [r4, #8]
 800d07a:	e7f4      	b.n	800d066 <__swsetup_r+0x8e>
 800d07c:	2000      	movs	r0, #0
 800d07e:	e7f7      	b.n	800d070 <__swsetup_r+0x98>
 800d080:	2000001c 	.word	0x2000001c

0800d084 <_raise_r>:
 800d084:	291f      	cmp	r1, #31
 800d086:	b538      	push	{r3, r4, r5, lr}
 800d088:	4605      	mov	r5, r0
 800d08a:	460c      	mov	r4, r1
 800d08c:	d904      	bls.n	800d098 <_raise_r+0x14>
 800d08e:	2316      	movs	r3, #22
 800d090:	6003      	str	r3, [r0, #0]
 800d092:	f04f 30ff 	mov.w	r0, #4294967295
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d09a:	b112      	cbz	r2, 800d0a2 <_raise_r+0x1e>
 800d09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0a0:	b94b      	cbnz	r3, 800d0b6 <_raise_r+0x32>
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f000 f830 	bl	800d108 <_getpid_r>
 800d0a8:	4622      	mov	r2, r4
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0b2:	f000 b817 	b.w	800d0e4 <_kill_r>
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d00a      	beq.n	800d0d0 <_raise_r+0x4c>
 800d0ba:	1c59      	adds	r1, r3, #1
 800d0bc:	d103      	bne.n	800d0c6 <_raise_r+0x42>
 800d0be:	2316      	movs	r3, #22
 800d0c0:	6003      	str	r3, [r0, #0]
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	e7e7      	b.n	800d096 <_raise_r+0x12>
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0ce:	4798      	blx	r3
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e7e0      	b.n	800d096 <_raise_r+0x12>

0800d0d4 <raise>:
 800d0d4:	4b02      	ldr	r3, [pc, #8]	@ (800d0e0 <raise+0xc>)
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	f7ff bfd3 	b.w	800d084 <_raise_r>
 800d0de:	bf00      	nop
 800d0e0:	2000001c 	.word	0x2000001c

0800d0e4 <_kill_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	4d06      	ldr	r5, [pc, #24]	@ (800d104 <_kill_r+0x20>)
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	f7f4 fff4 	bl	80020de <_kill>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	d102      	bne.n	800d100 <_kill_r+0x1c>
 800d0fa:	682b      	ldr	r3, [r5, #0]
 800d0fc:	b103      	cbz	r3, 800d100 <_kill_r+0x1c>
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	bd38      	pop	{r3, r4, r5, pc}
 800d102:	bf00      	nop
 800d104:	20002244 	.word	0x20002244

0800d108 <_getpid_r>:
 800d108:	f7f4 bfe2 	b.w	80020d0 <_getpid>

0800d10c <__swhatbuf_r>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	460c      	mov	r4, r1
 800d110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d114:	4615      	mov	r5, r2
 800d116:	2900      	cmp	r1, #0
 800d118:	461e      	mov	r6, r3
 800d11a:	b096      	sub	sp, #88	@ 0x58
 800d11c:	da0c      	bge.n	800d138 <__swhatbuf_r+0x2c>
 800d11e:	89a3      	ldrh	r3, [r4, #12]
 800d120:	2100      	movs	r1, #0
 800d122:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d126:	bf14      	ite	ne
 800d128:	2340      	movne	r3, #64	@ 0x40
 800d12a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d12e:	2000      	movs	r0, #0
 800d130:	6031      	str	r1, [r6, #0]
 800d132:	602b      	str	r3, [r5, #0]
 800d134:	b016      	add	sp, #88	@ 0x58
 800d136:	bd70      	pop	{r4, r5, r6, pc}
 800d138:	466a      	mov	r2, sp
 800d13a:	f000 f849 	bl	800d1d0 <_fstat_r>
 800d13e:	2800      	cmp	r0, #0
 800d140:	dbed      	blt.n	800d11e <__swhatbuf_r+0x12>
 800d142:	9901      	ldr	r1, [sp, #4]
 800d144:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d148:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d14c:	4259      	negs	r1, r3
 800d14e:	4159      	adcs	r1, r3
 800d150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d154:	e7eb      	b.n	800d12e <__swhatbuf_r+0x22>

0800d156 <__smakebuf_r>:
 800d156:	898b      	ldrh	r3, [r1, #12]
 800d158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d15a:	079d      	lsls	r5, r3, #30
 800d15c:	4606      	mov	r6, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	d507      	bpl.n	800d172 <__smakebuf_r+0x1c>
 800d162:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d166:	6023      	str	r3, [r4, #0]
 800d168:	6123      	str	r3, [r4, #16]
 800d16a:	2301      	movs	r3, #1
 800d16c:	6163      	str	r3, [r4, #20]
 800d16e:	b003      	add	sp, #12
 800d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d172:	466a      	mov	r2, sp
 800d174:	ab01      	add	r3, sp, #4
 800d176:	f7ff ffc9 	bl	800d10c <__swhatbuf_r>
 800d17a:	9f00      	ldr	r7, [sp, #0]
 800d17c:	4605      	mov	r5, r0
 800d17e:	4639      	mov	r1, r7
 800d180:	4630      	mov	r0, r6
 800d182:	f7fd fc77 	bl	800aa74 <_malloc_r>
 800d186:	b948      	cbnz	r0, 800d19c <__smakebuf_r+0x46>
 800d188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d18c:	059a      	lsls	r2, r3, #22
 800d18e:	d4ee      	bmi.n	800d16e <__smakebuf_r+0x18>
 800d190:	f023 0303 	bic.w	r3, r3, #3
 800d194:	f043 0302 	orr.w	r3, r3, #2
 800d198:	81a3      	strh	r3, [r4, #12]
 800d19a:	e7e2      	b.n	800d162 <__smakebuf_r+0xc>
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1a6:	81a3      	strh	r3, [r4, #12]
 800d1a8:	9b01      	ldr	r3, [sp, #4]
 800d1aa:	6020      	str	r0, [r4, #0]
 800d1ac:	b15b      	cbz	r3, 800d1c6 <__smakebuf_r+0x70>
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1b4:	f000 f81e 	bl	800d1f4 <_isatty_r>
 800d1b8:	b128      	cbz	r0, 800d1c6 <__smakebuf_r+0x70>
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	f023 0303 	bic.w	r3, r3, #3
 800d1c0:	f043 0301 	orr.w	r3, r3, #1
 800d1c4:	81a3      	strh	r3, [r4, #12]
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	431d      	orrs	r5, r3
 800d1ca:	81a5      	strh	r5, [r4, #12]
 800d1cc:	e7cf      	b.n	800d16e <__smakebuf_r+0x18>
	...

0800d1d0 <_fstat_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	4d06      	ldr	r5, [pc, #24]	@ (800d1f0 <_fstat_r+0x20>)
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	4608      	mov	r0, r1
 800d1da:	4611      	mov	r1, r2
 800d1dc:	602b      	str	r3, [r5, #0]
 800d1de:	f7f4 ffdd 	bl	800219c <_fstat>
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	d102      	bne.n	800d1ec <_fstat_r+0x1c>
 800d1e6:	682b      	ldr	r3, [r5, #0]
 800d1e8:	b103      	cbz	r3, 800d1ec <_fstat_r+0x1c>
 800d1ea:	6023      	str	r3, [r4, #0]
 800d1ec:	bd38      	pop	{r3, r4, r5, pc}
 800d1ee:	bf00      	nop
 800d1f0:	20002244 	.word	0x20002244

0800d1f4 <_isatty_r>:
 800d1f4:	b538      	push	{r3, r4, r5, lr}
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	4d05      	ldr	r5, [pc, #20]	@ (800d210 <_isatty_r+0x1c>)
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4608      	mov	r0, r1
 800d1fe:	602b      	str	r3, [r5, #0]
 800d200:	f7f4 ffdb 	bl	80021ba <_isatty>
 800d204:	1c43      	adds	r3, r0, #1
 800d206:	d102      	bne.n	800d20e <_isatty_r+0x1a>
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	b103      	cbz	r3, 800d20e <_isatty_r+0x1a>
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	bd38      	pop	{r3, r4, r5, pc}
 800d210:	20002244 	.word	0x20002244

0800d214 <_init>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	bf00      	nop
 800d218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21a:	bc08      	pop	{r3}
 800d21c:	469e      	mov	lr, r3
 800d21e:	4770      	bx	lr

0800d220 <_fini>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	bf00      	nop
 800d224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d226:	bc08      	pop	{r3}
 800d228:	469e      	mov	lr, r3
 800d22a:	4770      	bx	lr
